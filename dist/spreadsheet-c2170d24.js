import "./spreadsheet.css";
import { y as By, p as UP, N as pY, z as tj, O as kv, u as mY, j as $v, V as gY, Q as bY } from "./index-7c50cb13.js";
import zt, { useEffect as wY } from "react";
import rj from "react-dom";
import { s as zP } from "./css-ab4d83ca.js";
var Av = function(e) {
  return e && e.Math == Math && e;
}, pt = (
  // eslint-disable-next-line es/no-global-this -- safe
  Av(typeof globalThis == "object" && globalThis) || Av(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
  Av(typeof self == "object" && self) || Av(typeof By == "object" && By) || // eslint-disable-next-line no-new-func -- fallback
  function() {
    return this;
  }() || By || Function("return this")()
), Bn = {}, Fe = function(e) {
  try {
    return !!e();
  } catch {
    return !0;
  }
}, SY = Fe, Bt = !SY(function() {
  return Object.defineProperty({}, 1, { get: function() {
    return 7;
  } })[1] != 7;
}), CY = Fe, Ld = !CY(function() {
  var e = function() {
  }.bind();
  return typeof e != "function" || e.hasOwnProperty("prototype");
}), _Y = Ld, Iv = Function.prototype.call, Kt = _Y ? Iv.bind(Iv) : function() {
  return Iv.apply(Iv, arguments);
}, jd = {}, nj = {}.propertyIsEnumerable, oj = Object.getOwnPropertyDescriptor, OY = oj && !nj.call({ 1: 2 }, 1);
jd.f = OY ? function(t) {
  var r = oj(this, t);
  return !!r && r.enumerable;
} : nj;
var Fd = function(e, t) {
  return {
    enumerable: !(e & 1),
    configurable: !(e & 2),
    writable: !(e & 4),
    value: t
  };
}, ij = Ld, aj = Function.prototype, GS = aj.call, RY = ij && aj.bind.bind(GS, GS), Be = ij ? RY : function(e) {
  return function() {
    return GS.apply(e, arguments);
  };
}, lj = Be, EY = lj({}.toString), TY = lj("".slice), Vn = function(e) {
  return TY(EY(e), 8, -1);
}, PY = Be, kY = Fe, $Y = Vn, hb = Object, AY = PY("".split), Bd = kY(function() {
  return !hb("z").propertyIsEnumerable(0);
}) ? function(e) {
  return $Y(e) == "String" ? AY(e, "") : hb(e);
} : hb, gn = function(e) {
  return e == null;
}, IY = gn, MY = TypeError, Pr = function(e) {
  if (IY(e))
    throw MY("Can't call method on " + e);
  return e;
}, xY = Bd, DY = Pr, Vr = function(e) {
  return xY(DY(e));
}, KS = typeof document == "object" && document.all, NY = typeof KS > "u" && KS !== void 0, sj = {
  all: KS,
  IS_HTMLDDA: NY
}, uj = sj, HY = uj.all, Ot = uj.IS_HTMLDDA ? function(e) {
  return typeof e == "function" || e === HY;
} : function(e) {
  return typeof e == "function";
}, YP = Ot, fj = sj, LY = fj.all, Vt = fj.IS_HTMLDDA ? function(e) {
  return typeof e == "object" ? e !== null : YP(e) || e === LY;
} : function(e) {
  return typeof e == "object" ? e !== null : YP(e);
}, db = pt, jY = Ot, FY = function(e) {
  return jY(e) ? e : void 0;
}, Bo = function(e, t) {
  return arguments.length < 2 ? FY(db[e]) : db[e] && db[e][t];
}, BY = Be, Pi = BY({}.isPrototypeOf), Ga = typeof navigator < "u" && String(navigator.userAgent) || "", cj = pt, vb = Ga, GP = cj.process, KP = cj.Deno, qP = GP && GP.versions || KP && KP.version, XP = qP && qP.v8, fn, $p;
XP && (fn = XP.split("."), $p = fn[0] > 0 && fn[0] < 4 ? 1 : +(fn[0] + fn[1]));
!$p && vb && (fn = vb.match(/Edge\/(\d+)/), (!fn || fn[1] >= 74) && (fn = vb.match(/Chrome\/(\d+)/), fn && ($p = +fn[1])));
var Vd = $p, ZP = Vd, VY = Fe, WY = pt, UY = WY.String, vf = !!Object.getOwnPropertySymbols && !VY(function() {
  var e = Symbol();
  return !UY(e) || !(Object(e) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
  !Symbol.sham && ZP && ZP < 41;
}), zY = vf, hj = zY && !Symbol.sham && typeof Symbol.iterator == "symbol", YY = Bo, GY = Ot, KY = Pi, qY = hj, XY = Object, Wd = qY ? function(e) {
  return typeof e == "symbol";
} : function(e) {
  var t = YY("Symbol");
  return GY(t) && KY(t.prototype, XY(e));
}, ZY = String, yf = function(e) {
  try {
    return ZY(e);
  } catch {
    return "Object";
  }
}, QY = Ot, JY = yf, eG = TypeError, Ka = function(e) {
  if (QY(e))
    return e;
  throw eG(JY(e) + " is not a function");
}, tG = Ka, rG = gn, qa = function(e, t) {
  var r = e[t];
  return rG(r) ? void 0 : tG(r);
}, yb = Kt, pb = Ot, mb = Vt, nG = TypeError, dj = function(e, t) {
  var r, n;
  if (t === "string" && pb(r = e.toString) && !mb(n = yb(r, e)) || pb(r = e.valueOf) && !mb(n = yb(r, e)) || t !== "string" && pb(r = e.toString) && !mb(n = yb(r, e)))
    return n;
  throw nG("Can't convert object to primitive value");
}, vj = { exports: {} }, oG = !1, QP = pt, iG = Object.defineProperty, zR = function(e, t) {
  try {
    iG(QP, e, { value: t, configurable: !0, writable: !0 });
  } catch {
    QP[e] = t;
  }
  return t;
}, aG = pt, lG = zR, JP = "__core-js_shared__", sG = aG[JP] || lG(JP, {}), YR = sG, ek = YR;
(vj.exports = function(e, t) {
  return ek[e] || (ek[e] = t !== void 0 ? t : {});
})("versions", []).push({
  version: "3.30.2",
  mode: "global",
  copyright: "Â© 2014-2023 Denis Pushkarev (zloirock.ru)",
  license: "https://github.com/zloirock/core-js/blob/v3.30.2/LICENSE",
  source: "https://github.com/zloirock/core-js"
});
var pf = vj.exports, uG = Pr, fG = Object, kr = function(e) {
  return fG(uG(e));
}, cG = Be, hG = kr, dG = cG({}.hasOwnProperty), At = Object.hasOwn || function(t, r) {
  return dG(hG(t), r);
}, vG = Be, yG = 0, pG = Math.random(), mG = vG(1 .toString), Gm = function(e) {
  return "Symbol(" + (e === void 0 ? "" : e) + ")_" + mG(++yG + pG, 36);
}, gG = pt, bG = pf, tk = At, wG = Gm, SG = vf, CG = hj, Vl = gG.Symbol, gb = bG("wks"), _G = CG ? Vl.for || Vl : Vl && Vl.withoutSetter || wG, St = function(e) {
  return tk(gb, e) || (gb[e] = SG && tk(Vl, e) ? Vl[e] : _G("Symbol." + e)), gb[e];
}, OG = Kt, rk = Vt, nk = Wd, RG = qa, EG = dj, TG = St, PG = TypeError, kG = TG("toPrimitive"), yj = function(e, t) {
  if (!rk(e) || nk(e))
    return e;
  var r = RG(e, kG), n;
  if (r) {
    if (t === void 0 && (t = "default"), n = OG(r, e, t), !rk(n) || nk(n))
      return n;
    throw PG("Can't convert object to primitive value");
  }
  return t === void 0 && (t = "number"), EG(e, t);
}, $G = yj, AG = Wd, Km = function(e) {
  var t = $G(e, "string");
  return AG(t) ? t : t + "";
}, IG = pt, ok = Vt, qS = IG.document, MG = ok(qS) && ok(qS.createElement), qm = function(e) {
  return MG ? qS.createElement(e) : {};
}, xG = Bt, DG = Fe, NG = qm, pj = !xG && !DG(function() {
  return Object.defineProperty(NG("div"), "a", {
    get: function() {
      return 7;
    }
  }).a != 7;
}), HG = Bt, LG = Kt, jG = jd, FG = Fd, BG = Vr, VG = Km, WG = At, UG = pj, ik = Object.getOwnPropertyDescriptor;
Bn.f = HG ? ik : function(t, r) {
  if (t = BG(t), r = VG(r), UG)
    try {
      return ik(t, r);
    } catch {
    }
  if (WG(t, r))
    return FG(!LG(jG.f, t, r), t[r]);
};
var br = {}, zG = Bt, YG = Fe, mj = zG && YG(function() {
  return Object.defineProperty(function() {
  }, "prototype", {
    value: 42,
    writable: !1
  }).prototype != 42;
}), GG = Vt, KG = String, qG = TypeError, Nt = function(e) {
  if (GG(e))
    return e;
  throw qG(KG(e) + " is not an object");
}, XG = Bt, ZG = pj, QG = mj, Mv = Nt, ak = Km, JG = TypeError, bb = Object.defineProperty, e3 = Object.getOwnPropertyDescriptor, wb = "enumerable", Sb = "configurable", Cb = "writable";
br.f = XG ? QG ? function(t, r, n) {
  if (Mv(t), r = ak(r), Mv(n), typeof t == "function" && r === "prototype" && "value" in n && Cb in n && !n[Cb]) {
    var o = e3(t, r);
    o && o[Cb] && (t[r] = n.value, n = {
      configurable: Sb in n ? n[Sb] : o[Sb],
      enumerable: wb in n ? n[wb] : o[wb],
      writable: !1
    });
  }
  return bb(t, r, n);
} : bb : function(t, r, n) {
  if (Mv(t), r = ak(r), Mv(n), ZG)
    try {
      return bb(t, r, n);
    } catch {
    }
  if ("get" in n || "set" in n)
    throw JG("Accessors not supported");
  return "value" in n && (t[r] = n.value), t;
};
var t3 = Bt, r3 = br, n3 = Fd, Xa = t3 ? function(e, t, r) {
  return r3.f(e, t, n3(1, r));
} : function(e, t, r) {
  return e[t] = r, e;
}, gj = { exports: {} }, XS = Bt, o3 = At, bj = Function.prototype, i3 = XS && Object.getOwnPropertyDescriptor, GR = o3(bj, "name"), a3 = GR && function() {
}.name === "something", l3 = GR && (!XS || XS && i3(bj, "name").configurable), Ud = {
  EXISTS: GR,
  PROPER: a3,
  CONFIGURABLE: l3
}, s3 = Be, u3 = Ot, ZS = YR, f3 = s3(Function.toString);
u3(ZS.inspectSource) || (ZS.inspectSource = function(e) {
  return f3(e);
});
var wj = ZS.inspectSource, c3 = pt, h3 = Ot, lk = c3.WeakMap, Sj = h3(lk) && /native code/.test(String(lk)), d3 = pf, v3 = Gm, sk = d3("keys"), Xm = function(e) {
  return sk[e] || (sk[e] = v3(e));
}, zd = {}, y3 = Sj, Cj = pt, p3 = Vt, m3 = Xa, _b = At, Ob = YR, g3 = Xm, b3 = zd, uk = "Object already initialized", QS = Cj.TypeError, w3 = Cj.WeakMap, Ap, kc, Ip, S3 = function(e) {
  return Ip(e) ? kc(e) : Ap(e, {});
}, C3 = function(e) {
  return function(t) {
    var r;
    if (!p3(t) || (r = kc(t)).type !== e)
      throw QS("Incompatible receiver, " + e + " required");
    return r;
  };
};
if (y3 || Ob.state) {
  var wn = Ob.state || (Ob.state = new w3());
  wn.get = wn.get, wn.has = wn.has, wn.set = wn.set, Ap = function(e, t) {
    if (wn.has(e))
      throw QS(uk);
    return t.facade = e, wn.set(e, t), t;
  }, kc = function(e) {
    return wn.get(e) || {};
  }, Ip = function(e) {
    return wn.has(e);
  };
} else {
  var al = g3("state");
  b3[al] = !0, Ap = function(e, t) {
    if (_b(e, al))
      throw QS(uk);
    return t.facade = e, m3(e, al, t), t;
  }, kc = function(e) {
    return _b(e, al) ? e[al] : {};
  }, Ip = function(e) {
    return _b(e, al);
  };
}
var Vo = {
  set: Ap,
  get: kc,
  has: Ip,
  enforce: S3,
  getterFor: C3
}, KR = Be, _3 = Fe, O3 = Ot, xv = At, JS = Bt, R3 = Ud.CONFIGURABLE, E3 = wj, _j = Vo, T3 = _j.enforce, P3 = _j.get, fk = String, Vy = Object.defineProperty, k3 = KR("".slice), $3 = KR("".replace), A3 = KR([].join), I3 = JS && !_3(function() {
  return Vy(function() {
  }, "length", { value: 8 }).length !== 8;
}), M3 = String(String).split("String"), x3 = gj.exports = function(e, t, r) {
  k3(fk(t), 0, 7) === "Symbol(" && (t = "[" + $3(fk(t), /^Symbol\(([^)]*)\)/, "$1") + "]"), r && r.getter && (t = "get " + t), r && r.setter && (t = "set " + t), (!xv(e, "name") || R3 && e.name !== t) && (JS ? Vy(e, "name", { value: t, configurable: !0 }) : e.name = t), I3 && r && xv(r, "arity") && e.length !== r.arity && Vy(e, "length", { value: r.arity });
  try {
    r && xv(r, "constructor") && r.constructor ? JS && Vy(e, "prototype", { writable: !1 }) : e.prototype && (e.prototype = void 0);
  } catch {
  }
  var n = T3(e);
  return xv(n, "source") || (n.source = A3(M3, typeof t == "string" ? t : "")), e;
};
Function.prototype.toString = x3(function() {
  return O3(this) && P3(this).source || E3(this);
}, "toString");
var Oj = gj.exports, D3 = Ot, N3 = br, H3 = Oj, L3 = zR, Jr = function(e, t, r, n) {
  n || (n = {});
  var o = n.enumerable, i = n.name !== void 0 ? n.name : t;
  if (D3(r) && H3(r, i, n), n.global)
    o ? e[t] = r : L3(t, r);
  else {
    try {
      n.unsafe ? e[t] && (o = !0) : delete e[t];
    } catch {
    }
    o ? e[t] = r : N3.f(e, t, {
      value: r,
      enumerable: !1,
      configurable: !n.nonConfigurable,
      writable: !n.nonWritable
    });
  }
  return e;
}, Za = {}, j3 = Math.ceil, F3 = Math.floor, B3 = Math.trunc || function(t) {
  var r = +t;
  return (r > 0 ? F3 : j3)(r);
}, V3 = B3, ki = function(e) {
  var t = +e;
  return t !== t || t === 0 ? 0 : V3(t);
}, W3 = ki, U3 = Math.max, z3 = Math.min, Yd = function(e, t) {
  var r = W3(e);
  return r < 0 ? U3(r + t, 0) : z3(r, t);
}, Y3 = ki, G3 = Math.min, Qa = function(e) {
  return e > 0 ? G3(Y3(e), 9007199254740991) : 0;
}, K3 = Qa, en = function(e) {
  return K3(e.length);
}, q3 = Vr, X3 = Yd, Z3 = en, ck = function(e) {
  return function(t, r, n) {
    var o = q3(t), i = Z3(o), a = X3(n, i), l;
    if (e && r != r) {
      for (; i > a; )
        if (l = o[a++], l != l)
          return !0;
    } else
      for (; i > a; a++)
        if ((e || a in o) && o[a] === r)
          return e || a || 0;
    return !e && -1;
  };
}, qR = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: ck(!0),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: ck(!1)
}, Q3 = Be, Rb = At, J3 = Vr, eK = qR.indexOf, tK = zd, hk = Q3([].push), Rj = function(e, t) {
  var r = J3(e), n = 0, o = [], i;
  for (i in r)
    !Rb(tK, i) && Rb(r, i) && hk(o, i);
  for (; t.length > n; )
    Rb(r, i = t[n++]) && (~eK(o, i) || hk(o, i));
  return o;
}, XR = [
  "constructor",
  "hasOwnProperty",
  "isPrototypeOf",
  "propertyIsEnumerable",
  "toLocaleString",
  "toString",
  "valueOf"
], rK = Rj, nK = XR, oK = nK.concat("length", "prototype");
Za.f = Object.getOwnPropertyNames || function(t) {
  return rK(t, oK);
};
var Gd = {};
Gd.f = Object.getOwnPropertySymbols;
var iK = Bo, aK = Be, lK = Za, sK = Gd, uK = Nt, fK = aK([].concat), Ej = iK("Reflect", "ownKeys") || function(t) {
  var r = lK.f(uK(t)), n = sK.f;
  return n ? fK(r, n(t)) : r;
}, dk = At, cK = Ej, hK = Bn, dK = br, Tj = function(e, t, r) {
  for (var n = cK(t), o = dK.f, i = hK.f, a = 0; a < n.length; a++) {
    var l = n[a];
    !dk(e, l) && !(r && dk(r, l)) && o(e, l, i(t, l));
  }
}, vK = Fe, yK = Ot, pK = /#|\.prototype\./, Kd = function(e, t) {
  var r = gK[mK(e)];
  return r == wK ? !0 : r == bK ? !1 : yK(t) ? vK(t) : !!t;
}, mK = Kd.normalize = function(e) {
  return String(e).replace(pK, ".").toLowerCase();
}, gK = Kd.data = {}, bK = Kd.NATIVE = "N", wK = Kd.POLYFILL = "P", Zm = Kd, Eb = pt, SK = Bn.f, CK = Xa, _K = Jr, OK = zR, RK = Tj, EK = Zm, Ie = function(e, t) {
  var r = e.target, n = e.global, o = e.stat, i, a, l, s, u, f;
  if (n ? a = Eb : o ? a = Eb[r] || OK(r, {}) : a = (Eb[r] || {}).prototype, a)
    for (l in t) {
      if (u = t[l], e.dontCallGetSet ? (f = SK(a, l), s = f && f.value) : s = a[l], i = EK(n ? l : r + (o ? "." : "#") + l, e.forced), !i && s !== void 0) {
        if (typeof u == typeof s)
          continue;
        RK(u, s);
      }
      (e.sham || s && s.sham) && CK(u, "sham", !0), _K(a, l, u, e);
    }
}, TK = St, PK = TK("toStringTag"), Pj = {};
Pj[PK] = "z";
var ZR = String(Pj) === "[object z]", kK = ZR, $K = Ot, Wy = Vn, AK = St, IK = AK("toStringTag"), MK = Object, xK = Wy(function() {
  return arguments;
}()) == "Arguments", DK = function(e, t) {
  try {
    return e[t];
  } catch {
  }
}, Qm = kK ? Wy : function(e) {
  var t, r, n;
  return e === void 0 ? "Undefined" : e === null ? "Null" : typeof (r = DK(t = MK(e), IK)) == "string" ? r : xK ? Wy(t) : (n = Wy(t)) == "Object" && $K(t.callee) ? "Arguments" : n;
}, NK = Qm, HK = String, Wt = function(e) {
  if (NK(e) === "Symbol")
    throw TypeError("Cannot convert a Symbol value to a string");
  return HK(e);
}, QR = {}, LK = Rj, jK = XR, qd = Object.keys || function(t) {
  return LK(t, jK);
}, FK = Bt, BK = mj, VK = br, WK = Nt, UK = Vr, zK = qd;
QR.f = FK && !BK ? Object.defineProperties : function(t, r) {
  WK(t);
  for (var n = UK(r), o = zK(r), i = o.length, a = 0, l; i > a; )
    VK.f(t, l = o[a++], n[l]);
  return t;
};
var YK = Bo, kj = YK("document", "documentElement"), GK = Nt, KK = QR, vk = XR, qK = zd, XK = kj, ZK = qm, QK = Xm, yk = ">", pk = "<", eC = "prototype", tC = "script", $j = QK("IE_PROTO"), Tb = function() {
}, Aj = function(e) {
  return pk + tC + yk + e + pk + "/" + tC + yk;
}, mk = function(e) {
  e.write(Aj("")), e.close();
  var t = e.parentWindow.Object;
  return e = null, t;
}, JK = function() {
  var e = ZK("iframe"), t = "java" + tC + ":", r;
  return e.style.display = "none", XK.appendChild(e), e.src = String(t), r = e.contentWindow.document, r.open(), r.write(Aj("document.F=Object")), r.close(), r.F;
}, Dv, Uy = function() {
  try {
    Dv = new ActiveXObject("htmlfile");
  } catch {
  }
  Uy = typeof document < "u" ? document.domain && Dv ? mk(Dv) : JK() : mk(Dv);
  for (var e = vk.length; e--; )
    delete Uy[eC][vk[e]];
  return Uy();
};
qK[$j] = !0;
var mf = Object.create || function(t, r) {
  var n;
  return t !== null ? (Tb[eC] = GK(t), n = new Tb(), Tb[eC] = null, n[$j] = t) : n = Uy(), r === void 0 ? n : KK.f(n, r);
}, JR = {}, e4 = Km, t4 = br, r4 = Fd, gf = function(e, t, r) {
  var n = e4(t);
  n in e ? t4.f(e, n, r4(0, r)) : e[n] = r;
}, gk = Yd, n4 = en, o4 = gf, i4 = Array, a4 = Math.max, eE = function(e, t, r) {
  for (var n = n4(e), o = gk(t, n), i = gk(r === void 0 ? n : r, n), a = i4(a4(i - o, 0)), l = 0; o < i; o++, l++)
    o4(a, l, e[o]);
  return a.length = l, a;
}, l4 = Vn, s4 = Vr, Ij = Za.f, u4 = eE, Mj = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [], f4 = function(e) {
  try {
    return Ij(e);
  } catch {
    return u4(Mj);
  }
};
JR.f = function(t) {
  return Mj && l4(t) == "Window" ? f4(t) : Ij(s4(t));
};
var bk = Oj, c4 = br, Xd = function(e, t, r) {
  return r.get && bk(r.get, t, { getter: !0 }), r.set && bk(r.set, t, { setter: !0 }), c4.f(e, t, r);
}, tE = {}, h4 = St;
tE.f = h4;
var d4 = pt, xj = d4, wk = xj, v4 = At, y4 = tE, p4 = br.f, rE = function(e) {
  var t = wk.Symbol || (wk.Symbol = {});
  v4(t, e) || p4(t, e, {
    value: y4.f(e)
  });
}, m4 = Kt, g4 = Bo, b4 = St, w4 = Jr, Dj = function() {
  var e = g4("Symbol"), t = e && e.prototype, r = t && t.valueOf, n = b4("toPrimitive");
  t && !t[n] && w4(t, n, function(o) {
    return m4(r, this);
  }, { arity: 1 });
}, S4 = br.f, C4 = At, _4 = St, Sk = _4("toStringTag"), Jm = function(e, t, r) {
  e && !r && (e = e.prototype), e && !C4(e, Sk) && S4(e, Sk, { configurable: !0, value: t });
}, O4 = Vn, R4 = Be, Zd = function(e) {
  if (O4(e) === "Function")
    return R4(e);
}, Ck = Zd, E4 = Ka, T4 = Ld, P4 = Ck(Ck.bind), Qd = function(e, t) {
  return E4(e), t === void 0 ? e : T4 ? P4(e, t) : function() {
    return e.apply(t, arguments);
  };
}, k4 = Vn, bf = Array.isArray || function(t) {
  return k4(t) == "Array";
}, $4 = Be, A4 = Fe, Nj = Ot, I4 = Qm, M4 = Bo, x4 = wj, Hj = function() {
}, D4 = [], Lj = M4("Reflect", "construct"), nE = /^\s*(?:class|function)\b/, N4 = $4(nE.exec), H4 = !nE.exec(Hj), $f = function(t) {
  if (!Nj(t))
    return !1;
  try {
    return Lj(Hj, D4, t), !0;
  } catch {
    return !1;
  }
}, jj = function(t) {
  if (!Nj(t))
    return !1;
  switch (I4(t)) {
    case "AsyncFunction":
    case "GeneratorFunction":
    case "AsyncGeneratorFunction":
      return !1;
  }
  try {
    return H4 || !!N4(nE, x4(t));
  } catch {
    return !0;
  }
};
jj.sham = !0;
var eg = !Lj || A4(function() {
  var e;
  return $f($f.call) || !$f(Object) || !$f(function() {
    e = !0;
  }) || e;
}) ? jj : $f, _k = bf, L4 = eg, j4 = Vt, F4 = St, B4 = F4("species"), Ok = Array, V4 = function(e) {
  var t;
  return _k(e) && (t = e.constructor, L4(t) && (t === Ok || _k(t.prototype)) ? t = void 0 : j4(t) && (t = t[B4], t === null && (t = void 0))), t === void 0 ? Ok : t;
}, W4 = V4, oE = function(e, t) {
  return new (W4(e))(t === 0 ? 0 : t);
}, U4 = Qd, z4 = Be, Y4 = Bd, G4 = kr, K4 = en, q4 = oE, Rk = z4([].push), Go = function(e) {
  var t = e == 1, r = e == 2, n = e == 3, o = e == 4, i = e == 6, a = e == 7, l = e == 5 || i;
  return function(s, u, f, c) {
    for (var h = G4(s), d = Y4(h), y = U4(u, f), p = K4(d), g = 0, w = c || q4, C = t ? w(s, p) : r || a ? w(s, 0) : void 0, _, k; p > g; g++)
      if ((l || g in d) && (_ = d[g], k = y(_, g, h), e))
        if (t)
          C[g] = k;
        else if (k)
          switch (e) {
            case 3:
              return !0;
            case 5:
              return _;
            case 6:
              return g;
            case 2:
              Rk(C, _);
          }
        else
          switch (e) {
            case 4:
              return !1;
            case 7:
              Rk(C, _);
          }
    return i ? -1 : n || o ? o : C;
  };
}, Ja = {
  // `Array.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-array.prototype.foreach
  forEach: Go(0),
  // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  map: Go(1),
  // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  filter: Go(2),
  // `Array.prototype.some` method
  // https://tc39.es/ecma262/#sec-array.prototype.some
  some: Go(3),
  // `Array.prototype.every` method
  // https://tc39.es/ecma262/#sec-array.prototype.every
  every: Go(4),
  // `Array.prototype.find` method
  // https://tc39.es/ecma262/#sec-array.prototype.find
  find: Go(5),
  // `Array.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
  findIndex: Go(6),
  // `Array.prototype.filterReject` method
  // https://github.com/tc39/proposal-array-filtering
  filterReject: Go(7)
}, tg = Ie, iE = pt, aE = Kt, X4 = Be, as = Bt, ls = vf, Z4 = Fe, er = At, Q4 = Pi, rC = Nt, rg = Vr, lE = Km, J4 = Wt, nC = Fd, $c = mf, Fj = qd, e6 = Za, Bj = JR, t6 = Gd, Vj = Bn, Wj = br, r6 = QR, Uj = jd, Pb = Jr, n6 = Xd, sE = pf, o6 = Xm, zj = zd, Ek = Gm, i6 = St, a6 = tE, l6 = rE, s6 = Dj, u6 = Jm, Yj = Vo, ng = Ja.forEach, Rr = o6("hidden"), og = "Symbol", Ac = "prototype", f6 = Yj.set, Tk = Yj.getterFor(og), Xr = Object[Ac], Pa = iE.Symbol, lc = Pa && Pa[Ac], c6 = iE.TypeError, kb = iE.QObject, Gj = Vj.f, Ji = Wj.f, Kj = Bj.f, h6 = Uj.f, qj = X4([].push), No = sE("symbols"), Jd = sE("op-symbols"), d6 = sE("wks"), oC = !kb || !kb[Ac] || !kb[Ac].findChild, iC = as && Z4(function() {
  return $c(Ji({}, "a", {
    get: function() {
      return Ji(this, "a", { value: 7 }).a;
    }
  })).a != 7;
}) ? function(e, t, r) {
  var n = Gj(Xr, t);
  n && delete Xr[t], Ji(e, t, r), n && e !== Xr && Ji(Xr, t, n);
} : Ji, $b = function(e, t) {
  var r = No[e] = $c(lc);
  return f6(r, {
    type: og,
    tag: e,
    description: t
  }), as || (r.description = t), r;
}, ig = function(t, r, n) {
  t === Xr && ig(Jd, r, n), rC(t);
  var o = lE(r);
  return rC(n), er(No, o) ? (n.enumerable ? (er(t, Rr) && t[Rr][o] && (t[Rr][o] = !1), n = $c(n, { enumerable: nC(0, !1) })) : (er(t, Rr) || Ji(t, Rr, nC(1, {})), t[Rr][o] = !0), iC(t, o, n)) : Ji(t, o, n);
}, uE = function(t, r) {
  rC(t);
  var n = rg(r), o = Fj(n).concat(Qj(n));
  return ng(o, function(i) {
    (!as || aE(aC, n, i)) && ig(t, i, n[i]);
  }), t;
}, v6 = function(t, r) {
  return r === void 0 ? $c(t) : uE($c(t), r);
}, aC = function(t) {
  var r = lE(t), n = aE(h6, this, r);
  return this === Xr && er(No, r) && !er(Jd, r) ? !1 : n || !er(this, r) || !er(No, r) || er(this, Rr) && this[Rr][r] ? n : !0;
}, Xj = function(t, r) {
  var n = rg(t), o = lE(r);
  if (!(n === Xr && er(No, o) && !er(Jd, o))) {
    var i = Gj(n, o);
    return i && er(No, o) && !(er(n, Rr) && n[Rr][o]) && (i.enumerable = !0), i;
  }
}, Zj = function(t) {
  var r = Kj(rg(t)), n = [];
  return ng(r, function(o) {
    !er(No, o) && !er(zj, o) && qj(n, o);
  }), n;
}, Qj = function(e) {
  var t = e === Xr, r = Kj(t ? Jd : rg(e)), n = [];
  return ng(r, function(o) {
    er(No, o) && (!t || er(Xr, o)) && qj(n, No[o]);
  }), n;
};
ls || (Pa = function() {
  if (Q4(lc, this))
    throw c6("Symbol is not a constructor");
  var t = !arguments.length || arguments[0] === void 0 ? void 0 : J4(arguments[0]), r = Ek(t), n = function(o) {
    this === Xr && aE(n, Jd, o), er(this, Rr) && er(this[Rr], r) && (this[Rr][r] = !1), iC(this, r, nC(1, o));
  };
  return as && oC && iC(Xr, r, { configurable: !0, set: n }), $b(r, t);
}, lc = Pa[Ac], Pb(lc, "toString", function() {
  return Tk(this).tag;
}), Pb(Pa, "withoutSetter", function(e) {
  return $b(Ek(e), e);
}), Uj.f = aC, Wj.f = ig, r6.f = uE, Vj.f = Xj, e6.f = Bj.f = Zj, t6.f = Qj, a6.f = function(e) {
  return $b(i6(e), e);
}, as && (n6(lc, "description", {
  configurable: !0,
  get: function() {
    return Tk(this).description;
  }
}), Pb(Xr, "propertyIsEnumerable", aC, { unsafe: !0 })));
tg({ global: !0, constructor: !0, wrap: !0, forced: !ls, sham: !ls }, {
  Symbol: Pa
});
ng(Fj(d6), function(e) {
  l6(e);
});
tg({ target: og, stat: !0, forced: !ls }, {
  useSetter: function() {
    oC = !0;
  },
  useSimple: function() {
    oC = !1;
  }
});
tg({ target: "Object", stat: !0, forced: !ls, sham: !as }, {
  // `Object.create` method
  // https://tc39.es/ecma262/#sec-object.create
  create: v6,
  // `Object.defineProperty` method
  // https://tc39.es/ecma262/#sec-object.defineproperty
  defineProperty: ig,
  // `Object.defineProperties` method
  // https://tc39.es/ecma262/#sec-object.defineproperties
  defineProperties: uE,
  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
  getOwnPropertyDescriptor: Xj
});
tg({ target: "Object", stat: !0, forced: !ls }, {
  // `Object.getOwnPropertyNames` method
  // https://tc39.es/ecma262/#sec-object.getownpropertynames
  getOwnPropertyNames: Zj
});
s6();
u6(Pa, og);
zj[Rr] = !0;
var y6 = vf, Jj = y6 && !!Symbol.for && !!Symbol.keyFor, p6 = Ie, m6 = Bo, g6 = At, b6 = Wt, eF = pf, w6 = Jj, Ab = eF("string-to-symbol-registry"), S6 = eF("symbol-to-string-registry");
p6({ target: "Symbol", stat: !0, forced: !w6 }, {
  for: function(e) {
    var t = b6(e);
    if (g6(Ab, t))
      return Ab[t];
    var r = m6("Symbol")(t);
    return Ab[t] = r, S6[r] = t, r;
  }
});
var C6 = Ie, _6 = At, O6 = Wd, R6 = yf, E6 = pf, T6 = Jj, Pk = E6("symbol-to-string-registry");
C6({ target: "Symbol", stat: !0, forced: !T6 }, {
  keyFor: function(t) {
    if (!O6(t))
      throw TypeError(R6(t) + " is not a symbol");
    if (_6(Pk, t))
      return Pk[t];
  }
});
var P6 = Ld, tF = Function.prototype, kk = tF.apply, $k = tF.call, el = typeof Reflect == "object" && Reflect.apply || (P6 ? $k.bind(kk) : function() {
  return $k.apply(kk, arguments);
}), k6 = Be, ev = k6([].slice), $6 = Be, Ak = bf, A6 = Ot, Ik = Vn, I6 = Wt, Mk = $6([].push), M6 = function(e) {
  if (A6(e))
    return e;
  if (Ak(e)) {
    for (var t = e.length, r = [], n = 0; n < t; n++) {
      var o = e[n];
      typeof o == "string" ? Mk(r, o) : (typeof o == "number" || Ik(o) == "Number" || Ik(o) == "String") && Mk(r, I6(o));
    }
    var i = r.length, a = !0;
    return function(l, s) {
      if (a)
        return a = !1, s;
      if (Ak(this))
        return s;
      for (var u = 0; u < i; u++)
        if (r[u] === l)
          return s;
    };
  }
}, x6 = Ie, rF = Bo, nF = el, D6 = Kt, tv = Be, oF = Fe, xk = Ot, Dk = Wd, iF = ev, N6 = M6, H6 = vf, L6 = String, hi = rF("JSON", "stringify"), Nv = tv(/./.exec), Nk = tv("".charAt), j6 = tv("".charCodeAt), F6 = tv("".replace), B6 = tv(1 .toString), V6 = /[\uD800-\uDFFF]/g, Hk = /^[\uD800-\uDBFF]$/, Lk = /^[\uDC00-\uDFFF]$/, jk = !H6 || oF(function() {
  var e = rF("Symbol")();
  return hi([e]) != "[null]" || hi({ a: e }) != "{}" || hi(Object(e)) != "{}";
}), Fk = oF(function() {
  return hi("\uDF06\uD834") !== '"\\udf06\\ud834"' || hi("\uDEAD") !== '"\\udead"';
}), W6 = function(e, t) {
  var r = iF(arguments), n = N6(t);
  if (!(!xk(n) && (e === void 0 || Dk(e))))
    return r[1] = function(o, i) {
      if (xk(n) && (i = D6(n, this, L6(o), i)), !Dk(i))
        return i;
    }, nF(hi, null, r);
}, U6 = function(e, t, r) {
  var n = Nk(r, t - 1), o = Nk(r, t + 1);
  return Nv(Hk, e) && !Nv(Lk, o) || Nv(Lk, e) && !Nv(Hk, n) ? "\\u" + B6(j6(e, 0), 16) : e;
};
hi && x6({ target: "JSON", stat: !0, arity: 3, forced: jk || Fk }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  stringify: function(t, r, n) {
    var o = iF(arguments), i = nF(jk ? W6 : hi, null, o);
    return Fk && typeof i == "string" ? F6(i, V6, U6) : i;
  }
});
var z6 = Ie, Y6 = vf, G6 = Fe, aF = Gd, K6 = kr, q6 = !Y6 || G6(function() {
  aF.f(1);
});
z6({ target: "Object", stat: !0, forced: q6 }, {
  getOwnPropertySymbols: function(t) {
    var r = aF.f;
    return r ? r(K6(t)) : [];
  }
});
var X6 = Ie, Z6 = Bt, Q6 = pt, Hv = Be, J6 = At, e8 = Ot, t8 = Pi, r8 = Wt, n8 = Xd, o8 = Tj, no = Q6.Symbol, xi = no && no.prototype;
if (Z6 && e8(no) && (!("description" in xi) || // Safari 12 bug
no().description !== void 0)) {
  var Bk = {}, Lv = function() {
    var t = arguments.length < 1 || arguments[0] === void 0 ? void 0 : r8(arguments[0]), r = t8(xi, this) ? new no(t) : t === void 0 ? no() : no(t);
    return t === "" && (Bk[r] = !0), r;
  };
  o8(Lv, no), Lv.prototype = xi, xi.constructor = Lv;
  var i8 = String(no("test")) == "Symbol(test)", a8 = Hv(xi.valueOf), l8 = Hv(xi.toString), s8 = /^Symbol\((.*)\)[^)]+$/, u8 = Hv("".replace), f8 = Hv("".slice);
  n8(xi, "description", {
    configurable: !0,
    get: function() {
      var t = a8(this);
      if (J6(Bk, t))
        return "";
      var r = l8(t), n = i8 ? f8(r, 7, -1) : u8(r, s8, "$1");
      return n === "" ? void 0 : n;
    }
  }), X6({ global: !0, constructor: !0, forced: !0 }, {
    Symbol: Lv
  });
}
var c8 = rE;
c8("iterator");
var h8 = Bt, d8 = Ud.EXISTS, lF = Be, v8 = Xd, sF = Function.prototype, y8 = lF(sF.toString), uF = /function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/, p8 = lF(uF.exec), m8 = "name";
h8 && !d8 && v8(sF, m8, {
  configurable: !0,
  get: function() {
    try {
      return p8(uF, y8(this))[1];
    } catch {
      return "";
    }
  }
});
var g8 = Fe, fE = !g8(function() {
  return Object.isExtensible(Object.preventExtensions({}));
}), fF = { exports: {} }, b8 = Fe, w8 = b8(function() {
  if (typeof ArrayBuffer == "function") {
    var e = new ArrayBuffer(8);
    Object.isExtensible(e) && Object.defineProperty(e, "a", { value: 8 });
  }
}), S8 = Fe, C8 = Vt, _8 = Vn, Vk = w8, zy = Object.isExtensible, O8 = S8(function() {
  zy(1);
}), R8 = O8 || Vk ? function(t) {
  return !C8(t) || Vk && _8(t) == "ArrayBuffer" ? !1 : zy ? zy(t) : !0;
} : zy, E8 = Ie, T8 = Be, P8 = zd, k8 = Vt, cE = At, $8 = br.f, Wk = Za, A8 = JR, hE = R8, I8 = Gm, M8 = fE, cF = !1, Ho = I8("meta"), x8 = 0, dE = function(e) {
  $8(e, Ho, { value: {
    objectID: "O" + x8++,
    // object ID
    weakData: {}
    // weak collections IDs
  } });
}, D8 = function(e, t) {
  if (!k8(e))
    return typeof e == "symbol" ? e : (typeof e == "string" ? "S" : "P") + e;
  if (!cE(e, Ho)) {
    if (!hE(e))
      return "F";
    if (!t)
      return "E";
    dE(e);
  }
  return e[Ho].objectID;
}, N8 = function(e, t) {
  if (!cE(e, Ho)) {
    if (!hE(e))
      return !0;
    if (!t)
      return !1;
    dE(e);
  }
  return e[Ho].weakData;
}, H8 = function(e) {
  return M8 && cF && hE(e) && !cE(e, Ho) && dE(e), e;
}, L8 = function() {
  j8.enable = function() {
  }, cF = !0;
  var e = Wk.f, t = T8([].splice), r = {};
  r[Ho] = 1, e(r).length && (Wk.f = function(n) {
    for (var o = e(n), i = 0, a = o.length; i < a; i++)
      if (o[i] === Ho) {
        t(o, i, 1);
        break;
      }
    return o;
  }, E8({ target: "Object", stat: !0, forced: !0 }, {
    getOwnPropertyNames: A8.f
  }));
}, j8 = fF.exports = {
  enable: L8,
  fastKey: D8,
  getWeakData: N8,
  onFreeze: H8
};
P8[Ho] = !0;
var rv = fF.exports, F8 = Ie, B8 = fE, V8 = Fe, W8 = Vt, U8 = rv.onFreeze, lC = Object.freeze, z8 = V8(function() {
  lC(1);
});
F8({ target: "Object", stat: !0, forced: z8, sham: !B8 }, {
  freeze: function(t) {
    return lC && W8(t) ? lC(U8(t)) : t;
  }
});
var Y8 = St, G8 = mf, K8 = br.f, sC = Y8("unscopables"), uC = Array.prototype;
uC[sC] == null && K8(uC, sC, {
  configurable: !0,
  value: G8(null)
});
var nv = function(e) {
  uC[sC][e] = !0;
}, ov = {}, q8 = Fe, hF = !q8(function() {
  function e() {
  }
  return e.prototype.constructor = null, Object.getPrototypeOf(new e()) !== e.prototype;
}), X8 = At, Z8 = Ot, Q8 = kr, J8 = Xm, e5 = hF, Uk = J8("IE_PROTO"), fC = Object, t5 = fC.prototype, ag = e5 ? fC.getPrototypeOf : function(e) {
  var t = Q8(e);
  if (X8(t, Uk))
    return t[Uk];
  var r = t.constructor;
  return Z8(r) && t instanceof r ? r.prototype : t instanceof fC ? t5 : null;
}, r5 = Fe, n5 = Ot, o5 = Vt, zk = ag, i5 = Jr, a5 = St, cC = a5("iterator"), dF = !1, Ma, Ib, Mb;
[].keys && (Mb = [].keys(), "next" in Mb ? (Ib = zk(zk(Mb)), Ib !== Object.prototype && (Ma = Ib)) : dF = !0);
var l5 = !o5(Ma) || r5(function() {
  var e = {};
  return Ma[cC].call(e) !== e;
});
l5 && (Ma = {});
n5(Ma[cC]) || i5(Ma, cC, function() {
  return this;
});
var vF = {
  IteratorPrototype: Ma,
  BUGGY_SAFARI_ITERATORS: dF
}, s5 = vF.IteratorPrototype, u5 = mf, f5 = Fd, c5 = Jm, h5 = ov, d5 = function() {
  return this;
}, v5 = function(e, t, r, n) {
  var o = t + " Iterator";
  return e.prototype = u5(s5, { next: f5(+!n, r) }), c5(e, o, !1), h5[o] = d5, e;
}, y5 = Be, p5 = Ka, m5 = function(e, t, r) {
  try {
    return y5(p5(Object.getOwnPropertyDescriptor(e, t)[r]));
  } catch {
  }
}, g5 = Ot, b5 = String, w5 = TypeError, S5 = function(e) {
  if (typeof e == "object" || g5(e))
    return e;
  throw w5("Can't set " + b5(e) + " as a prototype");
}, C5 = m5, _5 = Nt, O5 = S5, vE = Object.setPrototypeOf || ("__proto__" in {} ? function() {
  var e = !1, t = {}, r;
  try {
    r = C5(Object.prototype, "__proto__", "set"), r(t, []), e = t instanceof Array;
  } catch {
  }
  return function(o, i) {
    return _5(o), O5(i), e ? r(o, i) : o.__proto__ = i, o;
  };
}() : void 0), R5 = Ie, E5 = Kt, yF = Ud, T5 = Ot, P5 = v5, Yk = ag, Gk = vE, k5 = Jm, $5 = Xa, xb = Jr, A5 = St, I5 = ov, pF = vF, M5 = yF.PROPER, x5 = yF.CONFIGURABLE, Kk = pF.IteratorPrototype, jv = pF.BUGGY_SAFARI_ITERATORS, Af = A5("iterator"), qk = "keys", If = "values", Xk = "entries", D5 = function() {
  return this;
}, yE = function(e, t, r, n, o, i, a) {
  P5(r, t, n);
  var l = function(w) {
    if (w === o && h)
      return h;
    if (!jv && w in f)
      return f[w];
    switch (w) {
      case qk:
        return function() {
          return new r(this, w);
        };
      case If:
        return function() {
          return new r(this, w);
        };
      case Xk:
        return function() {
          return new r(this, w);
        };
    }
    return function() {
      return new r(this);
    };
  }, s = t + " Iterator", u = !1, f = e.prototype, c = f[Af] || f["@@iterator"] || o && f[o], h = !jv && c || l(o), d = t == "Array" && f.entries || c, y, p, g;
  if (d && (y = Yk(d.call(new e())), y !== Object.prototype && y.next && (Yk(y) !== Kk && (Gk ? Gk(y, Kk) : T5(y[Af]) || xb(y, Af, D5)), k5(y, s, !0))), M5 && o == If && c && c.name !== If && (x5 ? $5(f, "name", If) : (u = !0, h = function() {
    return E5(c, this);
  })), o)
    if (p = {
      values: l(If),
      keys: i ? h : l(qk),
      entries: l(Xk)
    }, a)
      for (g in p)
        (jv || u || !(g in f)) && xb(f, g, p[g]);
    else
      R5({ target: t, proto: !0, forced: jv || u }, p);
  return f[Af] !== h && xb(f, Af, h, { name: o }), I5[t] = h, p;
}, pE = function(e, t) {
  return { value: e, done: t };
}, N5 = Vr, mE = nv, Zk = ov, mF = Vo, H5 = br.f, L5 = yE, Fv = pE, j5 = Bt, gF = "Array Iterator", F5 = mF.set, B5 = mF.getterFor(gF), V5 = L5(Array, "Array", function(e, t) {
  F5(this, {
    type: gF,
    target: N5(e),
    // target
    index: 0,
    // next index
    kind: t
    // kind
  });
}, function() {
  var e = B5(this), t = e.target, r = e.kind, n = e.index++;
  return !t || n >= t.length ? (e.target = void 0, Fv(void 0, !0)) : r == "keys" ? Fv(n, !1) : r == "values" ? Fv(t[n], !1) : Fv([n, t[n]], !1);
}, "values"), Qk = Zk.Arguments = Zk.Array;
mE("keys");
mE("values");
mE("entries");
if (j5 && Qk.name !== "values")
  try {
    H5(Qk, "name", { value: "values" });
  } catch {
  }
var W5 = ZR, U5 = Qm, z5 = W5 ? {}.toString : function() {
  return "[object " + U5(this) + "]";
}, Y5 = ZR, G5 = Jr, K5 = z5;
Y5 || G5(Object.prototype, "toString", K5, { unsafe: !0 });
var q5 = St, X5 = ov, Z5 = q5("iterator"), Q5 = Array.prototype, bF = function(e) {
  return e !== void 0 && (X5.Array === e || Q5[Z5] === e);
}, J5 = Qm, Jk = qa, e7 = gn, t7 = ov, r7 = St, n7 = r7("iterator"), gE = function(e) {
  if (!e7(e))
    return Jk(e, n7) || Jk(e, "@@iterator") || t7[J5(e)];
}, o7 = Kt, i7 = Ka, a7 = Nt, l7 = yf, s7 = gE, u7 = TypeError, wF = function(e, t) {
  var r = arguments.length < 2 ? s7(e) : t;
  if (i7(r))
    return a7(o7(r, e));
  throw u7(l7(e) + " is not iterable");
}, f7 = Kt, e$ = Nt, c7 = qa, SF = function(e, t, r) {
  var n, o;
  e$(e);
  try {
    if (n = c7(e, "return"), !n) {
      if (t === "throw")
        throw r;
      return r;
    }
    n = f7(n, e);
  } catch (i) {
    o = !0, n = i;
  }
  if (t === "throw")
    throw r;
  if (o)
    throw n;
  return e$(n), r;
}, h7 = Qd, d7 = Kt, v7 = Nt, y7 = yf, p7 = bF, m7 = en, t$ = Pi, g7 = wF, b7 = gE, r$ = SF, w7 = TypeError, Yy = function(e, t) {
  this.stopped = e, this.result = t;
}, n$ = Yy.prototype, bE = function(e, t, r) {
  var n = r && r.that, o = !!(r && r.AS_ENTRIES), i = !!(r && r.IS_RECORD), a = !!(r && r.IS_ITERATOR), l = !!(r && r.INTERRUPTED), s = h7(t, n), u, f, c, h, d, y, p, g = function(C) {
    return u && r$(u, "normal", C), new Yy(!0, C);
  }, w = function(C) {
    return o ? (v7(C), l ? s(C[0], C[1], g) : s(C[0], C[1])) : l ? s(C, g) : s(C);
  };
  if (i)
    u = e.iterator;
  else if (a)
    u = e;
  else {
    if (f = b7(e), !f)
      throw w7(y7(e) + " is not iterable");
    if (p7(f)) {
      for (c = 0, h = m7(e); h > c; c++)
        if (d = w(e[c]), d && t$(n$, d))
          return d;
      return new Yy(!1);
    }
    u = g7(e, f);
  }
  for (y = i ? e.next : u.next; !(p = d7(y, u)).done; ) {
    try {
      d = w(p.value);
    } catch (C) {
      r$(u, "throw", C);
    }
    if (typeof d == "object" && d && t$(n$, d))
      return d;
  }
  return new Yy(!1);
}, S7 = Pi, C7 = TypeError, wE = function(e, t) {
  if (S7(t, e))
    return e;
  throw C7("Incorrect invocation");
}, _7 = St, CF = _7("iterator"), _F = !1;
try {
  var O7 = 0, o$ = {
    next: function() {
      return { done: !!O7++ };
    },
    return: function() {
      _F = !0;
    }
  };
  o$[CF] = function() {
    return this;
  }, Array.from(o$, function() {
    throw 2;
  });
} catch {
}
var OF = function(e, t) {
  if (!t && !_F)
    return !1;
  var r = !1;
  try {
    var n = {};
    n[CF] = function() {
      return {
        next: function() {
          return { done: r = !0 };
        }
      };
    }, e(n);
  } catch {
  }
  return r;
}, R7 = Ot, E7 = Vt, i$ = vE, SE = function(e, t, r) {
  var n, o;
  return (
    // it can work only with native `setPrototypeOf`
    i$ && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    R7(n = t.constructor) && n !== r && E7(o = n.prototype) && o !== r.prototype && i$(e, o), e
  );
}, T7 = Ie, P7 = pt, k7 = Be, a$ = Zm, $7 = Jr, A7 = rv, I7 = bE, M7 = wE, x7 = Ot, D7 = gn, Db = Vt, Nb = Fe, N7 = OF, H7 = Jm, L7 = SE, lg = function(e, t, r) {
  var n = e.indexOf("Map") !== -1, o = e.indexOf("Weak") !== -1, i = n ? "set" : "add", a = P7[e], l = a && a.prototype, s = a, u = {}, f = function(w) {
    var C = k7(l[w]);
    $7(
      l,
      w,
      w == "add" ? function(k) {
        return C(this, k === 0 ? 0 : k), this;
      } : w == "delete" ? function(_) {
        return o && !Db(_) ? !1 : C(this, _ === 0 ? 0 : _);
      } : w == "get" ? function(k) {
        return o && !Db(k) ? void 0 : C(this, k === 0 ? 0 : k);
      } : w == "has" ? function(k) {
        return o && !Db(k) ? !1 : C(this, k === 0 ? 0 : k);
      } : function(k, E) {
        return C(this, k === 0 ? 0 : k, E), this;
      }
    );
  }, c = a$(
    e,
    !x7(a) || !(o || l.forEach && !Nb(function() {
      new a().entries().next();
    }))
  );
  if (c)
    s = r.getConstructor(t, e, n, i), A7.enable();
  else if (a$(e, !0)) {
    var h = new s(), d = h[i](o ? {} : -0, 1) != h, y = Nb(function() {
      h.has(1);
    }), p = N7(function(w) {
      new a(w);
    }), g = !o && Nb(function() {
      for (var w = new a(), C = 5; C--; )
        w[i](C, C);
      return !w.has(-0);
    });
    p || (s = t(function(w, C) {
      M7(w, l);
      var _ = L7(new a(), w, s);
      return D7(C) || I7(C, _[i], { that: _, AS_ENTRIES: n }), _;
    }), s.prototype = l, l.constructor = s), (y || g) && (f("delete"), f("has"), n && f("get")), (g || d) && f(i), o && l.clear && delete l.clear;
  }
  return u[e] = s, T7({ global: !0, constructor: !0, forced: s != a }, u), H7(s, e), o || r.setStrong(s, e, n), s;
}, j7 = Jr, CE = function(e, t, r) {
  for (var n in t)
    j7(e, n, t[n], r);
  return e;
}, F7 = Bo, B7 = Xd, V7 = St, W7 = Bt, l$ = V7("species"), RF = function(e) {
  var t = F7(e);
  W7 && t && !t[l$] && B7(t, l$, {
    configurable: !0,
    get: function() {
      return this;
    }
  });
}, U7 = mf, z7 = Xd, s$ = CE, Y7 = Qd, G7 = wE, K7 = gn, q7 = bE, X7 = yE, Bv = pE, Z7 = RF, Mf = Bt, u$ = rv.fastKey, EF = Vo, f$ = EF.set, Hb = EF.getterFor, TF = {
  getConstructor: function(e, t, r, n) {
    var o = e(function(u, f) {
      G7(u, i), f$(u, {
        type: t,
        index: U7(null),
        first: void 0,
        last: void 0,
        size: 0
      }), Mf || (u.size = 0), K7(f) || q7(f, u[n], { that: u, AS_ENTRIES: r });
    }), i = o.prototype, a = Hb(t), l = function(u, f, c) {
      var h = a(u), d = s(u, f), y, p;
      return d ? d.value = c : (h.last = d = {
        index: p = u$(f, !0),
        key: f,
        value: c,
        previous: y = h.last,
        next: void 0,
        removed: !1
      }, h.first || (h.first = d), y && (y.next = d), Mf ? h.size++ : u.size++, p !== "F" && (h.index[p] = d)), u;
    }, s = function(u, f) {
      var c = a(u), h = u$(f), d;
      if (h !== "F")
        return c.index[h];
      for (d = c.first; d; d = d.next)
        if (d.key == f)
          return d;
    };
    return s$(i, {
      // `{ Map, Set }.prototype.clear()` methods
      // https://tc39.es/ecma262/#sec-map.prototype.clear
      // https://tc39.es/ecma262/#sec-set.prototype.clear
      clear: function() {
        for (var f = this, c = a(f), h = c.index, d = c.first; d; )
          d.removed = !0, d.previous && (d.previous = d.previous.next = void 0), delete h[d.index], d = d.next;
        c.first = c.last = void 0, Mf ? c.size = 0 : f.size = 0;
      },
      // `{ Map, Set }.prototype.delete(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.delete
      // https://tc39.es/ecma262/#sec-set.prototype.delete
      delete: function(u) {
        var f = this, c = a(f), h = s(f, u);
        if (h) {
          var d = h.next, y = h.previous;
          delete c.index[h.index], h.removed = !0, y && (y.next = d), d && (d.previous = y), c.first == h && (c.first = d), c.last == h && (c.last = y), Mf ? c.size-- : f.size--;
        }
        return !!h;
      },
      // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.foreach
      // https://tc39.es/ecma262/#sec-set.prototype.foreach
      forEach: function(f) {
        for (var c = a(this), h = Y7(f, arguments.length > 1 ? arguments[1] : void 0), d; d = d ? d.next : c.first; )
          for (h(d.value, d.key, this); d && d.removed; )
            d = d.previous;
      },
      // `{ Map, Set}.prototype.has(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.has
      // https://tc39.es/ecma262/#sec-set.prototype.has
      has: function(f) {
        return !!s(this, f);
      }
    }), s$(i, r ? {
      // `Map.prototype.get(key)` method
      // https://tc39.es/ecma262/#sec-map.prototype.get
      get: function(f) {
        var c = s(this, f);
        return c && c.value;
      },
      // `Map.prototype.set(key, value)` method
      // https://tc39.es/ecma262/#sec-map.prototype.set
      set: function(f, c) {
        return l(this, f === 0 ? 0 : f, c);
      }
    } : {
      // `Set.prototype.add(value)` method
      // https://tc39.es/ecma262/#sec-set.prototype.add
      add: function(f) {
        return l(this, f = f === 0 ? 0 : f, f);
      }
    }), Mf && z7(i, "size", {
      configurable: !0,
      get: function() {
        return a(this).size;
      }
    }), o;
  },
  setStrong: function(e, t, r) {
    var n = t + " Iterator", o = Hb(t), i = Hb(n);
    X7(e, t, function(a, l) {
      f$(this, {
        type: n,
        target: a,
        state: o(a),
        kind: l,
        last: void 0
      });
    }, function() {
      for (var a = i(this), l = a.kind, s = a.last; s && s.removed; )
        s = s.previous;
      return !a.target || !(a.last = s = s ? s.next : a.state.first) ? (a.target = void 0, Bv(void 0, !0)) : l == "keys" ? Bv(s.key, !1) : l == "values" ? Bv(s.value, !1) : Bv([s.key, s.value], !1);
    }, r ? "entries" : "values", !r, !0), Z7(t);
  }
}, Q7 = lg, J7 = TF;
Q7("Set", function(e) {
  return function() {
    return e(this, arguments.length ? arguments[0] : void 0);
  };
}, J7);
var _E = Be, e9 = ki, t9 = Wt, r9 = Pr, n9 = _E("".charAt), c$ = _E("".charCodeAt), o9 = _E("".slice), h$ = function(e) {
  return function(t, r) {
    var n = t9(r9(t)), o = e9(r), i = n.length, a, l;
    return o < 0 || o >= i ? e ? "" : void 0 : (a = c$(n, o), a < 55296 || a > 56319 || o + 1 === i || (l = c$(n, o + 1)) < 56320 || l > 57343 ? e ? n9(n, o) : a : e ? o9(n, o, o + 2) : (a - 55296 << 10) + (l - 56320) + 65536);
  };
}, OE = {
  // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
  codeAt: h$(!1),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: h$(!0)
}, i9 = OE.charAt, a9 = Wt, PF = Vo, l9 = yE, d$ = pE, kF = "String Iterator", s9 = PF.set, u9 = PF.getterFor(kF);
l9(String, "String", function(e) {
  s9(this, {
    type: kF,
    string: a9(e),
    index: 0
  });
}, function() {
  var t = u9(this), r = t.string, n = t.index, o;
  return n >= r.length ? d$(void 0, !0) : (o = i9(r, n), t.index += o.length, d$(o, !1));
});
var $F = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
}, f9 = qm, Lb = f9("span").classList, v$ = Lb && Lb.constructor && Lb.constructor.prototype, AF = v$ === Object.prototype ? void 0 : v$, y$ = pt, IF = $F, c9 = AF, sc = V5, jb = Xa, MF = St, Fb = MF("iterator"), p$ = MF("toStringTag"), Bb = sc.values, xF = function(e, t) {
  if (e) {
    if (e[Fb] !== Bb)
      try {
        jb(e, Fb, Bb);
      } catch {
        e[Fb] = Bb;
      }
    if (e[p$] || jb(e, p$, t), IF[t]) {
      for (var r in sc)
        if (e[r] !== sc[r])
          try {
            jb(e, r, sc[r]);
          } catch {
            e[r] = sc[r];
          }
    }
  }
};
for (var Vb in IF)
  xF(y$[Vb] && y$[Vb].prototype, Vb);
xF(c9, "DOMTokenList");
var h9 = Ie, d9 = qR.includes, v9 = Fe, y9 = nv, p9 = v9(function() {
  return !Array(1).includes();
});
h9({ target: "Array", proto: !0, forced: p9 }, {
  includes: function(t) {
    return d9(this, t, arguments.length > 1 ? arguments[1] : void 0);
  }
});
y9("includes");
var m$ = yf, m9 = TypeError, DF = function(e, t) {
  if (!delete e[t])
    throw m9("Cannot delete property " + m$(t) + " of " + m$(e));
}, g$ = eE, g9 = Math.floor, hC = function(e, t) {
  var r = e.length, n = g9(r / 2);
  return r < 8 ? b9(e, t) : w9(
    e,
    hC(g$(e, 0, n), t),
    hC(g$(e, n), t),
    t
  );
}, b9 = function(e, t) {
  for (var r = e.length, n = 1, o, i; n < r; ) {
    for (i = n, o = e[n]; i && t(e[i - 1], o) > 0; )
      e[i] = e[--i];
    i !== n++ && (e[i] = o);
  }
  return e;
}, w9 = function(e, t, r, n) {
  for (var o = t.length, i = r.length, a = 0, l = 0; a < o || l < i; )
    e[a + l] = a < o && l < i ? n(t[a], r[l]) <= 0 ? t[a++] : r[l++] : a < o ? t[a++] : r[l++];
  return e;
}, S9 = hC, C9 = Fe, wf = function(e, t) {
  var r = [][e];
  return !!r && C9(function() {
    r.call(null, t || function() {
      return 1;
    }, 1);
  });
}, _9 = Ga, b$ = _9.match(/firefox\/(\d+)/i), O9 = !!b$ && +b$[1], R9 = Ga, E9 = /MSIE|Trident/.test(R9), T9 = Ga, w$ = T9.match(/AppleWebKit\/(\d+)\./), P9 = !!w$ && +w$[1], k9 = Ie, NF = Be, $9 = Ka, A9 = kr, S$ = en, I9 = DF, C$ = Wt, RE = Fe, M9 = S9, x9 = wf, _$ = O9, D9 = E9, O$ = Vd, R$ = P9, si = [], E$ = NF(si.sort), N9 = NF(si.push), H9 = RE(function() {
  si.sort(void 0);
}), L9 = RE(function() {
  si.sort(null);
}), j9 = x9("sort"), HF = !RE(function() {
  if (O$)
    return O$ < 70;
  if (!(_$ && _$ > 3)) {
    if (D9)
      return !0;
    if (R$)
      return R$ < 603;
    var e = "", t, r, n, o;
    for (t = 65; t < 76; t++) {
      switch (r = String.fromCharCode(t), t) {
        case 66:
        case 69:
        case 70:
        case 72:
          n = 3;
          break;
        case 68:
        case 71:
          n = 4;
          break;
        default:
          n = 2;
      }
      for (o = 0; o < 47; o++)
        si.push({ k: r + o, v: n });
    }
    for (si.sort(function(i, a) {
      return a.v - i.v;
    }), o = 0; o < si.length; o++)
      r = si[o].k.charAt(0), e.charAt(e.length - 1) !== r && (e += r);
    return e !== "DGBEFHACIJK";
  }
}), F9 = H9 || !L9 || !j9 || !HF, B9 = function(e) {
  return function(t, r) {
    return r === void 0 ? -1 : t === void 0 ? 1 : e !== void 0 ? +e(t, r) || 0 : C$(t) > C$(r) ? 1 : -1;
  };
};
k9({ target: "Array", proto: !0, forced: F9 }, {
  sort: function(t) {
    t !== void 0 && $9(t);
    var r = A9(this);
    if (HF)
      return t === void 0 ? E$(r) : E$(r, t);
    var n = [], o = S$(r), i, a;
    for (a = 0; a < o; a++)
      a in r && N9(n, r[a]);
    for (M9(n, B9(t)), i = S$(n), a = 0; a < i; )
      r[a] = n[a++];
    for (; a < o; )
      I9(r, a++);
    return r;
  }
});
var V9 = Bt, W9 = bf, U9 = TypeError, z9 = Object.getOwnPropertyDescriptor, Y9 = V9 && !function() {
  if (this !== void 0)
    return !0;
  try {
    Object.defineProperty([], "length", { writable: !1 }).length = 1;
  } catch (e) {
    return e instanceof TypeError;
  }
}(), G9 = Y9 ? function(e, t) {
  if (W9(e) && !z9(e, "length").writable)
    throw U9("Cannot set read only .length");
  return e.length = t;
} : function(e, t) {
  return e.length = t;
}, K9 = TypeError, q9 = 9007199254740991, LF = function(e) {
  if (e > q9)
    throw K9("Maximum allowed index exceeded");
  return e;
}, X9 = Fe, Z9 = St, Q9 = Vd, J9 = Z9("species"), iv = function(e) {
  return Q9 >= 51 || !X9(function() {
    var t = [], r = t.constructor = {};
    return r[J9] = function() {
      return { foo: 1 };
    }, t[e](Boolean).foo !== 1;
  });
}, eq = Ie, tq = kr, rq = Yd, nq = ki, oq = en, iq = G9, aq = LF, lq = oE, sq = gf, Wb = DF, uq = iv, fq = uq("splice"), cq = Math.max, hq = Math.min;
eq({ target: "Array", proto: !0, forced: !fq }, {
  splice: function(t, r) {
    var n = tq(this), o = oq(n), i = rq(t, o), a = arguments.length, l, s, u, f, c, h;
    for (a === 0 ? l = s = 0 : a === 1 ? (l = 0, s = o - i) : (l = a - 2, s = hq(cq(nq(r), 0), o - i)), aq(o + l - s), u = lq(n, s), f = 0; f < s; f++)
      c = i + f, c in n && sq(u, f, n[c]);
    if (u.length = s, l < s) {
      for (f = i; f < o - s; f++)
        c = f + s, h = f + l, c in n ? n[h] = n[c] : Wb(n, h);
      for (f = o; f > o - s + l; f--)
        Wb(n, f - 1);
    } else if (l > s)
      for (f = o - s; f > i; f--)
        c = f + s - 1, h = f + l - 1, c in n ? n[h] = n[c] : Wb(n, h);
    for (f = 0; f < l; f++)
      n[f + i] = arguments[f + 2];
    return iq(n, o - s + l), u;
  }
});
var dq = Vt, vq = Math.floor, yq = Number.isInteger || function(t) {
  return !dq(t) && isFinite(t) && vq(t) === t;
}, pq = Ie, mq = yq;
pq({ target: "Number", stat: !0 }, {
  isInteger: mq
});
var gq = Be, jF = gq(1 .valueOf), FF = `	
\v\f\r Â áââââââââââââ¯âã\u2028\u2029\uFEFF`, bq = Be, wq = Pr, Sq = Wt, dC = FF, T$ = bq("".replace), Cq = RegExp("^[" + dC + "]+"), _q = RegExp("(^|[^" + dC + "])[" + dC + "]+$"), Ub = function(e) {
  return function(t) {
    var r = Sq(wq(t));
    return e & 1 && (r = T$(r, Cq, "")), e & 2 && (r = T$(r, _q, "$1")), r;
  };
}, BF = {
  // `String.prototype.{ trimLeft, trimStart }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
  start: Ub(1),
  // `String.prototype.{ trimRight, trimEnd }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimend
  end: Ub(2),
  // `String.prototype.trim` method
  // https://tc39.es/ecma262/#sec-string.prototype.trim
  trim: Ub(3)
}, Oq = Ie, VF = oG, Rq = Bt, WF = pt, UF = xj, zF = Be, Eq = Zm, P$ = At, Tq = SE, Pq = Pi, kq = Wd, YF = yj, $q = Fe, Aq = Za.f, Iq = Bn.f, Mq = br.f, xq = jF, Dq = BF.trim, sg = "Number", Yl = WF[sg];
UF[sg];
var EE = Yl.prototype, Nq = WF.TypeError, Hq = zF("".slice), Vv = zF("".charCodeAt), Lq = function(e) {
  var t = YF(e, "number");
  return typeof t == "bigint" ? t : jq(t);
}, jq = function(e) {
  var t = YF(e, "number"), r, n, o, i, a, l, s, u;
  if (kq(t))
    throw Nq("Cannot convert a Symbol value to a number");
  if (typeof t == "string" && t.length > 2) {
    if (t = Dq(t), r = Vv(t, 0), r === 43 || r === 45) {
      if (n = Vv(t, 2), n === 88 || n === 120)
        return NaN;
    } else if (r === 48) {
      switch (Vv(t, 1)) {
        case 66:
        case 98:
          o = 2, i = 49;
          break;
        case 79:
        case 111:
          o = 8, i = 55;
          break;
        default:
          return +t;
      }
      for (a = Hq(t, 2), l = a.length, s = 0; s < l; s++)
        if (u = Vv(a, s), u < 48 || u > i)
          return NaN;
      return parseInt(a, o);
    }
  }
  return +t;
}, TE = Eq(sg, !Yl(" 0o1") || !Yl("0b1") || Yl("+0x1")), Fq = function(e) {
  return Pq(EE, e) && $q(function() {
    xq(e);
  });
}, ug = function(t) {
  var r = arguments.length < 1 ? 0 : Yl(Lq(t));
  return Fq(this) ? Tq(Object(r), this, ug) : r;
};
ug.prototype = EE;
TE && !VF && (EE.constructor = ug);
Oq({ global: !0, constructor: !0, wrap: !0, forced: TE }, {
  Number: ug
});
var Bq = function(e, t) {
  for (var r = Rq ? Aq(t) : (
    // ES3:
    "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(",")
  ), n = 0, o; r.length > n; n++)
    P$(t, o = r[n]) && !P$(e, o) && Mq(e, o, Iq(t, o));
};
(TE || VF) && Bq(UF[sg], Yl);
var Vq = Ie, k$ = bf, Wq = eg, Uq = Vt, $$ = Yd, zq = en, Yq = Vr, Gq = gf, Kq = St, qq = iv, Xq = ev, Zq = qq("slice"), Qq = Kq("species"), zb = Array, Jq = Math.max;
Vq({ target: "Array", proto: !0, forced: !Zq }, {
  slice: function(t, r) {
    var n = Yq(this), o = zq(n), i = $$(t, o), a = $$(r === void 0 ? o : r, o), l, s, u;
    if (k$(n) && (l = n.constructor, Wq(l) && (l === zb || k$(l.prototype)) ? l = void 0 : Uq(l) && (l = l[Qq], l === null && (l = void 0)), l === zb || l === void 0))
      return Xq(n, i, a);
    for (s = new (l === void 0 ? zb : l)(Jq(a - i, 0)), u = 0; i < a; i++, u++)
      i in n && Gq(s, u, n[i]);
    return s.length = u, s;
  }
});
var eX = Ie, tX = Fe, rX = bf, nX = Vt, oX = kr, iX = en, A$ = LF, I$ = gf, aX = oE, lX = iv, sX = St, uX = Vd, GF = sX("isConcatSpreadable"), fX = uX >= 51 || !tX(function() {
  var e = [];
  return e[GF] = !1, e.concat()[0] !== e;
}), cX = function(e) {
  if (!nX(e))
    return !1;
  var t = e[GF];
  return t !== void 0 ? !!t : rX(e);
}, hX = !fX || !lX("concat");
eX({ target: "Array", proto: !0, arity: 1, forced: hX }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  concat: function(t) {
    var r = oX(this), n = aX(r, 0), o = 0, i, a, l, s, u;
    for (i = -1, l = arguments.length; i < l; i++)
      if (u = i === -1 ? r : arguments[i], cX(u))
        for (s = iX(u), A$(o + s), a = 0; a < s; a++, o++)
          a in u && I$(n, o, u[a]);
      else
        A$(o + 1), I$(n, o++, u);
    return n.length = o, n;
  }
});
var dX = kr, M$ = Yd, vX = en, yX = function(t) {
  for (var r = dX(this), n = vX(r), o = arguments.length, i = M$(o > 1 ? arguments[1] : void 0, n), a = o > 2 ? arguments[2] : void 0, l = a === void 0 ? n : M$(a, n); l > i; )
    r[i++] = t;
  return r;
}, pX = Ie, mX = yX, gX = nv;
pX({ target: "Array", proto: !0 }, {
  fill: mX
});
gX("fill");
var bX = Ie, wX = Ja.map, SX = iv, CX = SX("map");
bX({ target: "Array", proto: !0, forced: !CX }, {
  map: function(t) {
    return wX(this, t, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var _X = Nt, KF = function() {
  var e = _X(this), t = "";
  return e.hasIndices && (t += "d"), e.global && (t += "g"), e.ignoreCase && (t += "i"), e.multiline && (t += "m"), e.dotAll && (t += "s"), e.unicode && (t += "u"), e.unicodeSets && (t += "v"), e.sticky && (t += "y"), t;
}, PE = Fe, OX = pt, kE = OX.RegExp, $E = PE(function() {
  var e = kE("a", "y");
  return e.lastIndex = 2, e.exec("abcd") != null;
}), RX = $E || PE(function() {
  return !kE("a", "y").sticky;
}), EX = $E || PE(function() {
  var e = kE("^r", "gy");
  return e.lastIndex = 2, e.exec("str") != null;
}), AE = {
  BROKEN_CARET: EX,
  MISSED_STICKY: RX,
  UNSUPPORTED_Y: $E
}, TX = Fe, PX = pt, kX = PX.RegExp, qF = TX(function() {
  var e = kX(".", "s");
  return !(e.dotAll && e.exec(`
`) && e.flags === "s");
}), $X = Fe, AX = pt, IX = AX.RegExp, XF = $X(function() {
  var e = IX("(?<a>b)", "g");
  return e.exec("b").groups.a !== "b" || "b".replace(e, "$<a>c") !== "bc";
}), Wl = Kt, fg = Be, MX = Wt, xX = KF, DX = AE, NX = pf, HX = mf, LX = Vo.get, jX = qF, FX = XF, BX = NX("native-string-replace", String.prototype.replace), Mp = RegExp.prototype.exec, vC = Mp, VX = fg("".charAt), WX = fg("".indexOf), UX = fg("".replace), Yb = fg("".slice), yC = function() {
  var e = /a/, t = /b*/g;
  return Wl(Mp, e, "a"), Wl(Mp, t, "a"), e.lastIndex !== 0 || t.lastIndex !== 0;
}(), ZF = DX.BROKEN_CARET, pC = /()??/.exec("")[1] !== void 0, zX = yC || pC || ZF || jX || FX;
zX && (vC = function(t) {
  var r = this, n = LX(r), o = MX(t), i = n.raw, a, l, s, u, f, c, h;
  if (i)
    return i.lastIndex = r.lastIndex, a = Wl(vC, i, o), r.lastIndex = i.lastIndex, a;
  var d = n.groups, y = ZF && r.sticky, p = Wl(xX, r), g = r.source, w = 0, C = o;
  if (y && (p = UX(p, "y", ""), WX(p, "g") === -1 && (p += "g"), C = Yb(o, r.lastIndex), r.lastIndex > 0 && (!r.multiline || r.multiline && VX(o, r.lastIndex - 1) !== `
`) && (g = "(?: " + g + ")", C = " " + C, w++), l = new RegExp("^(?:" + g + ")", p)), pC && (l = new RegExp("^" + g + "$(?!\\s)", p)), yC && (s = r.lastIndex), u = Wl(Mp, y ? l : r, C), y ? u ? (u.input = Yb(u.input, w), u[0] = Yb(u[0], w), u.index = r.lastIndex, r.lastIndex += u[0].length) : r.lastIndex = 0 : yC && u && (r.lastIndex = r.global ? u.index + u[0].length : s), pC && u && u.length > 1 && Wl(BX, u[0], l, function() {
    for (f = 1; f < arguments.length - 2; f++)
      arguments[f] === void 0 && (u[f] = void 0);
  }), u && d)
    for (u.groups = c = HX(null), f = 0; f < d.length; f++)
      h = d[f], c[h[0]] = u[h[1]];
  return u;
});
var cg = vC, YX = Ie, x$ = cg;
YX({ target: "RegExp", proto: !0, forced: /./.exec !== x$ }, {
  exec: x$
});
var D$ = Zd, N$ = Jr, GX = cg, H$ = Fe, QF = St, KX = Xa, qX = QF("species"), Gb = RegExp.prototype, hg = function(e, t, r, n) {
  var o = QF(e), i = !H$(function() {
    var u = {};
    return u[o] = function() {
      return 7;
    }, ""[e](u) != 7;
  }), a = i && !H$(function() {
    var u = !1, f = /a/;
    return e === "split" && (f = {}, f.constructor = {}, f.constructor[qX] = function() {
      return f;
    }, f.flags = "", f[o] = /./[o]), f.exec = function() {
      return u = !0, null;
    }, f[o](""), !u;
  });
  if (!i || !a || r) {
    var l = D$(/./[o]), s = t(o, ""[e], function(u, f, c, h, d) {
      var y = D$(u), p = f.exec;
      return p === GX || p === Gb.exec ? i && !d ? { done: !0, value: l(f, c, h) } : { done: !0, value: y(c, f, h) } : { done: !1 };
    });
    N$(String.prototype, e, s[0]), N$(Gb, o, s[1]);
  }
  n && KX(Gb[o], "sham", !0);
}, XX = OE.charAt, IE = function(e, t, r) {
  return t + (r ? XX(e, t).length : 1);
}, ME = Be, ZX = kr, QX = Math.floor, Kb = ME("".charAt), JX = ME("".replace), qb = ME("".slice), eZ = /\$([$&'`]|\d{1,2}|<[^>]*>)/g, tZ = /\$([$&'`]|\d{1,2})/g, rZ = function(e, t, r, n, o, i) {
  var a = r + e.length, l = n.length, s = tZ;
  return o !== void 0 && (o = ZX(o), s = eZ), JX(i, s, function(u, f) {
    var c;
    switch (Kb(f, 0)) {
      case "$":
        return "$";
      case "&":
        return e;
      case "`":
        return qb(t, 0, r);
      case "'":
        return qb(t, a);
      case "<":
        c = o[qb(f, 1, -1)];
        break;
      default:
        var h = +f;
        if (h === 0)
          return u;
        if (h > l) {
          var d = QX(h / 10);
          return d === 0 ? u : d <= l ? n[d - 1] === void 0 ? Kb(f, 1) : n[d - 1] + Kb(f, 1) : u;
        }
        c = n[h - 1];
    }
    return c === void 0 ? "" : c;
  });
}, L$ = Kt, nZ = Nt, oZ = Ot, iZ = Vn, aZ = cg, lZ = TypeError, dg = function(e, t) {
  var r = e.exec;
  if (oZ(r)) {
    var n = L$(r, e, t);
    return n !== null && nZ(n), n;
  }
  if (iZ(e) === "RegExp")
    return L$(aZ, e, t);
  throw lZ("RegExp#exec called on incompatible receiver");
}, sZ = el, j$ = Kt, vg = Be, uZ = hg, fZ = Fe, cZ = Nt, hZ = Ot, dZ = gn, vZ = ki, yZ = Qa, ll = Wt, pZ = Pr, mZ = IE, gZ = qa, bZ = rZ, wZ = dg, SZ = St, mC = SZ("replace"), CZ = Math.max, _Z = Math.min, OZ = vg([].concat), Xb = vg([].push), F$ = vg("".indexOf), B$ = vg("".slice), RZ = function(e) {
  return e === void 0 ? e : String(e);
}, EZ = function() {
  return "a".replace(/./, "$0") === "$0";
}(), V$ = function() {
  return /./[mC] ? /./[mC]("a", "$0") === "" : !1;
}(), TZ = !fZ(function() {
  var e = /./;
  return e.exec = function() {
    var t = [];
    return t.groups = { a: "7" }, t;
  }, "".replace(e, "$<a>") !== "7";
});
uZ("replace", function(e, t, r) {
  var n = V$ ? "$" : "$0";
  return [
    // `String.prototype.replace` method
    // https://tc39.es/ecma262/#sec-string.prototype.replace
    function(i, a) {
      var l = pZ(this), s = dZ(i) ? void 0 : gZ(i, mC);
      return s ? j$(s, i, l, a) : j$(t, ll(l), i, a);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
    function(o, i) {
      var a = cZ(this), l = ll(o);
      if (typeof i == "string" && F$(i, n) === -1 && F$(i, "$<") === -1) {
        var s = r(t, a, l, i);
        if (s.done)
          return s.value;
      }
      var u = hZ(i);
      u || (i = ll(i));
      var f = a.global;
      if (f) {
        var c = a.unicode;
        a.lastIndex = 0;
      }
      for (var h = []; ; ) {
        var d = wZ(a, l);
        if (d === null || (Xb(h, d), !f))
          break;
        var y = ll(d[0]);
        y === "" && (a.lastIndex = mZ(l, yZ(a.lastIndex), c));
      }
      for (var p = "", g = 0, w = 0; w < h.length; w++) {
        d = h[w];
        for (var C = ll(d[0]), _ = CZ(_Z(vZ(d.index), l.length), 0), k = [], E = 1; E < d.length; E++)
          Xb(k, RZ(d[E]));
        var j = d.groups;
        if (u) {
          var Y = OZ([C], k, _, l);
          j !== void 0 && Xb(Y, j);
          var Q = ll(sZ(i, void 0, Y));
        } else
          Q = bZ(C, l, _, k, j, i);
        _ >= g && (p += B$(l, g, _) + Q, g = _ + C.length);
      }
      return p + B$(l, g);
    }
  ];
}, !TZ || !EZ || V$);
var PZ = Nt, kZ = SF, $Z = function(e, t, r, n) {
  try {
    return n ? t(PZ(r)[0], r[1]) : t(r);
  } catch (o) {
    kZ(e, "throw", o);
  }
}, AZ = Qd, IZ = Kt, MZ = kr, xZ = $Z, DZ = bF, NZ = eg, HZ = en, W$ = gf, LZ = wF, jZ = gE, U$ = Array, FZ = function(t) {
  var r = MZ(t), n = NZ(this), o = arguments.length, i = o > 1 ? arguments[1] : void 0, a = i !== void 0;
  a && (i = AZ(i, o > 2 ? arguments[2] : void 0));
  var l = jZ(r), s = 0, u, f, c, h, d, y;
  if (l && !(this === U$ && DZ(l)))
    for (h = LZ(r, l), d = h.next, f = n ? new this() : []; !(c = IZ(d, h)).done; s++)
      y = a ? xZ(h, i, [c.value, s], !0) : c.value, W$(f, s, y);
  else
    for (u = HZ(r), f = n ? new this(u) : U$(u); u > s; s++)
      y = a ? i(r[s], s) : r[s], W$(f, s, y);
  return f.length = s, f;
}, BZ = Ie, VZ = FZ, WZ = OF, UZ = !WZ(function(e) {
  Array.from(e);
});
BZ({ target: "Array", stat: !0, forced: UZ }, {
  from: VZ
});
var zZ = Ie, YZ = Zd, GZ = qR.indexOf, KZ = wf, gC = YZ([].indexOf), JF = !!gC && 1 / gC([1], 1, -0) < 0, qZ = JF || !KZ("indexOf");
zZ({ target: "Array", proto: !0, forced: qZ }, {
  indexOf: function(t) {
    var r = arguments.length > 1 ? arguments[1] : void 0;
    return JF ? gC(this, t, r) || 0 : GZ(this, t, r);
  }
});
var XZ = Ie, ZZ = Be, QZ = bf, JZ = ZZ([].reverse), z$ = [1, 2];
XZ({ target: "Array", proto: !0, forced: String(z$) === String(z$.reverse()) }, {
  reverse: function() {
    return QZ(this) && (this.length = this.length), JZ(this);
  }
});
var eQ = Ja.forEach, tQ = wf, rQ = tQ("forEach"), nQ = rQ ? [].forEach : function(t) {
  return eQ(this, t, arguments.length > 1 ? arguments[1] : void 0);
}, Y$ = pt, G$ = $F, oQ = AF, Zb = nQ, iQ = Xa, eB = function(e) {
  if (e && e.forEach !== Zb)
    try {
      iQ(e, "forEach", Zb);
    } catch {
      e.forEach = Zb;
    }
};
for (var Qb in G$)
  G$[Qb] && eB(Y$[Qb] && Y$[Qb].prototype);
eB(oQ);
var aQ = typeof Bun == "function" && Bun && typeof Bun.version == "string", lQ = TypeError, tB = function(e, t) {
  if (e < t)
    throw lQ("Not enough arguments");
  return e;
}, rB = pt, sQ = el, uQ = Ot, fQ = aQ, cQ = Ga, hQ = ev, dQ = tB, vQ = rB.Function, yQ = /MSIE .\./.test(cQ) || fQ && function() {
  var e = rB.Bun.version.split(".");
  return e.length < 3 || e[0] == 0 && (e[1] < 3 || e[1] == 3 && e[2] == 0);
}(), xE = function(e, t) {
  var r = t ? 2 : 1;
  return yQ ? function(n, o) {
    var i = dQ(arguments.length, 1) > r, a = uQ(n) ? n : vQ(n), l = i ? hQ(arguments, r) : [], s = i ? function() {
      sQ(a, this, l);
    } : a;
    return t ? e(s, o) : e(s);
  } : e;
}, pQ = Ie, nB = pt, mQ = xE, K$ = mQ(nB.setInterval, !0);
pQ({ global: !0, bind: !0, forced: nB.setInterval !== K$ }, {
  setInterval: K$
});
var gQ = Ie, oB = pt, bQ = xE, q$ = bQ(oB.setTimeout, !0);
gQ({ global: !0, bind: !0, forced: oB.setTimeout !== q$ }, {
  setTimeout: q$
});
var wQ = Ga, SQ = /(?:ipad|iphone|ipod).*applewebkit/i.test(wQ), CQ = Vn, iB = typeof UP < "u" && CQ(UP) == "process", Fr = pt, _Q = el, OQ = Qd, X$ = Ot, RQ = At, aB = Fe, Z$ = kj, EQ = ev, Q$ = qm, TQ = tB, PQ = SQ, kQ = iB, bC = Fr.setImmediate, wC = Fr.clearImmediate, $Q = Fr.process, Jb = Fr.Dispatch, AQ = Fr.Function, J$ = Fr.MessageChannel, IQ = Fr.String, ew = 0, vc = {}, eA = "onreadystatechange", Ic, Di, tw, rw;
aB(function() {
  Ic = Fr.location;
});
var DE = function(e) {
  if (RQ(vc, e)) {
    var t = vc[e];
    delete vc[e], t();
  }
}, nw = function(e) {
  return function() {
    DE(e);
  };
}, tA = function(e) {
  DE(e.data);
}, rA = function(e) {
  Fr.postMessage(IQ(e), Ic.protocol + "//" + Ic.host);
};
(!bC || !wC) && (bC = function(t) {
  TQ(arguments.length, 1);
  var r = X$(t) ? t : AQ(t), n = EQ(arguments, 1);
  return vc[++ew] = function() {
    _Q(r, void 0, n);
  }, Di(ew), ew;
}, wC = function(t) {
  delete vc[t];
}, kQ ? Di = function(e) {
  $Q.nextTick(nw(e));
} : Jb && Jb.now ? Di = function(e) {
  Jb.now(nw(e));
} : J$ && !PQ ? (tw = new J$(), rw = tw.port2, tw.port1.onmessage = tA, Di = OQ(rw.postMessage, rw)) : Fr.addEventListener && X$(Fr.postMessage) && !Fr.importScripts && Ic && Ic.protocol !== "file:" && !aB(rA) ? (Di = rA, Fr.addEventListener("message", tA, !1)) : eA in Q$("script") ? Di = function(e) {
  Z$.appendChild(Q$("script"))[eA] = function() {
    Z$.removeChild(this), DE(e);
  };
} : Di = function(e) {
  setTimeout(nw(e), 0);
});
var lB = {
  set: bC,
  clear: wC
}, MQ = Ie, xQ = pt, nA = lB.clear;
MQ({ global: !0, bind: !0, enumerable: !0, forced: xQ.clearImmediate !== nA }, {
  clearImmediate: nA
});
var DQ = Ie, sB = pt, oA = lB.set, NQ = xE, iA = sB.setImmediate ? NQ(oA, !1) : oA;
DQ({ global: !0, bind: !0, enumerable: !0, forced: sB.setImmediate !== iA }, {
  setImmediate: iA
});
var HQ = lg, LQ = TF;
HQ("Map", function(e) {
  return function() {
    return e(this, arguments.length ? arguments[0] : void 0);
  };
}, LQ);
var jQ = Ie, FQ = Fe, BQ = kr, uB = ag, VQ = hF, WQ = FQ(function() {
  uB(1);
});
jQ({ target: "Object", stat: !0, forced: WQ, sham: !VQ }, {
  getPrototypeOf: function(t) {
    return uB(BQ(t));
  }
});
var UQ = Vt, zQ = Vn, YQ = St, GQ = YQ("match"), NE = function(e) {
  var t;
  return UQ(e) && ((t = e[GQ]) !== void 0 ? !!t : zQ(e) == "RegExp");
}, KQ = NE, qQ = TypeError, HE = function(e) {
  if (KQ(e))
    throw qQ("The method doesn't accept regular expressions");
  return e;
}, XQ = St, ZQ = XQ("match"), LE = function(e) {
  var t = /./;
  try {
    "/./"[e](t);
  } catch {
    try {
      return t[ZQ] = !1, "/./"[e](t);
    } catch {
    }
  }
  return !1;
}, QQ = Ie, JQ = Be, eJ = HE, tJ = Pr, aA = Wt, rJ = LE, nJ = JQ("".indexOf);
QQ({ target: "String", proto: !0, forced: !rJ("includes") }, {
  includes: function(t) {
    return !!~nJ(
      aA(tJ(this)),
      aA(eJ(t)),
      arguments.length > 1 ? arguments[1] : void 0
    );
  }
});
var oJ = Ie, iJ = Ja.filter, aJ = iv, lJ = aJ("filter");
oJ({ target: "Array", proto: !0, forced: !lJ }, {
  filter: function(t) {
    return iJ(this, t, arguments.length > 1 ? arguments[1] : void 0);
  }
});
var sJ = Kt, uJ = At, fJ = Pi, cJ = KF, lA = RegExp.prototype, fB = function(e) {
  var t = e.flags;
  return t === void 0 && !("flags" in lA) && !uJ(e, "flags") && fJ(lA, e) ? sJ(cJ, e) : t;
}, hJ = br.f, dJ = function(e, t, r) {
  r in e || hJ(e, r, {
    configurable: !0,
    get: function() {
      return t[r];
    },
    set: function(n) {
      t[r] = n;
    }
  });
}, vJ = Bt, jE = pt, av = Be, yJ = Zm, pJ = SE, mJ = Xa, gJ = Za.f, sA = Pi, bJ = NE, uA = Wt, wJ = fB, cB = AE, SJ = dJ, CJ = Jr, _J = Fe, OJ = At, RJ = Vo.enforce, EJ = RF, TJ = St, hB = qF, dB = XF, PJ = TJ("match"), di = jE.RegExp, Nl = di.prototype, kJ = jE.SyntaxError, $J = av(Nl.exec), xp = av("".charAt), fA = av("".replace), cA = av("".indexOf), AJ = av("".slice), IJ = /^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/, ka = /a/g, ow = /a/g, MJ = new di(ka) !== ka, vB = cB.MISSED_STICKY, xJ = cB.UNSUPPORTED_Y, DJ = vJ && (!MJ || vB || hB || dB || _J(function() {
  return ow[PJ] = !1, di(ka) != ka || di(ow) == ow || di(ka, "i") != "/a/i";
})), NJ = function(e) {
  for (var t = e.length, r = 0, n = "", o = !1, i; r <= t; r++) {
    if (i = xp(e, r), i === "\\") {
      n += i + xp(e, ++r);
      continue;
    }
    !o && i === "." ? n += "[\\s\\S]" : (i === "[" ? o = !0 : i === "]" && (o = !1), n += i);
  }
  return n;
}, HJ = function(e) {
  for (var t = e.length, r = 0, n = "", o = [], i = {}, a = !1, l = !1, s = 0, u = "", f; r <= t; r++) {
    if (f = xp(e, r), f === "\\")
      f = f + xp(e, ++r);
    else if (f === "]")
      a = !1;
    else if (!a)
      switch (!0) {
        case f === "[":
          a = !0;
          break;
        case f === "(":
          $J(IJ, AJ(e, r + 1)) && (r += 2, l = !0), n += f, s++;
          continue;
        case (f === ">" && l):
          if (u === "" || OJ(i, u))
            throw new kJ("Invalid capture group name");
          i[u] = !0, o[o.length] = [u, s], l = !1, u = "";
          continue;
      }
    l ? u += f : n += f;
  }
  return [n, o];
};
if (yJ("RegExp", DJ)) {
  for (var Ni = function(t, r) {
    var n = sA(Nl, this), o = bJ(t), i = r === void 0, a = [], l = t, s, u, f, c, h, d;
    if (!n && o && i && t.constructor === Ni)
      return t;
    if ((o || sA(Nl, t)) && (t = t.source, i && (r = wJ(l))), t = t === void 0 ? "" : uA(t), r = r === void 0 ? "" : uA(r), l = t, hB && "dotAll" in ka && (u = !!r && cA(r, "s") > -1, u && (r = fA(r, /s/g, ""))), s = r, vB && "sticky" in ka && (f = !!r && cA(r, "y") > -1, f && xJ && (r = fA(r, /y/g, ""))), dB && (c = HJ(t), t = c[0], a = c[1]), h = pJ(di(t, r), n ? this : Nl, Ni), (u || f || a.length) && (d = RJ(h), u && (d.dotAll = !0, d.raw = Ni(NJ(t), s)), f && (d.sticky = !0), a.length && (d.groups = a)), t !== l)
      try {
        mJ(h, "source", l === "" ? "(?:)" : l);
      } catch {
      }
    return h;
  }, hA = gJ(di), dA = 0; hA.length > dA; )
    SJ(Ni, di, hA[dA++]);
  Nl.constructor = Ni, Ni.prototype = Nl, CJ(jE, "RegExp", Ni, { constructor: !0 });
}
EJ("RegExp");
var LJ = Ud.PROPER, jJ = Jr, FJ = Nt, vA = Wt, BJ = Fe, VJ = fB, FE = "toString", WJ = RegExp.prototype, yB = WJ[FE], UJ = BJ(function() {
  return yB.call({ source: "a", flags: "b" }) != "/a/b";
}), zJ = LJ && yB.name != FE;
(UJ || zJ) && jJ(RegExp.prototype, FE, function() {
  var t = FJ(this), r = vA(t.source), n = vA(VJ(t));
  return "/" + r + "/" + n;
}, { unsafe: !0 });
var YJ = Ie, GJ = Be, KJ = Bd, qJ = Vr, XJ = wf, ZJ = GJ([].join), QJ = KJ != Object, JJ = QJ || !XJ("join", ",");
YJ({ target: "Array", proto: !0, forced: JJ }, {
  join: function(t) {
    return ZJ(qJ(this), t === void 0 ? "," : t);
  }
});
var eee = Ud.PROPER, tee = Fe, yA = FF, pA = "âÂá ", ree = function(e) {
  return tee(function() {
    return !!yA[e]() || pA[e]() !== pA || eee && yA[e].name !== e;
  });
}, nee = Ie, oee = BF.trim, iee = ree;
nee({ target: "String", proto: !0, forced: iee("trim") }, {
  trim: function() {
    return oee(this);
  }
});
function SC(e) {
  "@babel/helpers - typeof";
  return SC = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, SC(e);
}
function BE(e) {
  return window.requestAnimationFrame(e);
}
function aee() {
  return !!document.documentElement.classList;
}
function lee() {
  return !!document.createTextNode("test").textContent;
}
function see() {
  return !!window.getComputedStyle;
}
function Dp(e) {
  window.cancelAnimationFrame(e);
}
function pB() {
  return "ontouchstart" in window;
}
var CC;
function uee() {
  var e = document.createElement("TABLE");
  e.style.borderSpacing = "0", e.style.borderWidth = "0", e.style.padding = "0";
  var t = document.createElement("TBODY");
  e.appendChild(t), t.appendChild(document.createElement("TR")), t.firstChild.appendChild(document.createElement("TD")), t.firstChild.firstChild.innerHTML = "<tr><td>t<br>t</td></tr>";
  var r = document.createElement("CAPTION");
  r.innerHTML = "c<br>c<br>c<br>c", r.style.padding = "0", r.style.margin = "0", e.insertBefore(r, t), document.body.appendChild(e), CC = e.offsetHeight < 2 * e.lastChild.offsetHeight, document.body.removeChild(e);
}
function mB() {
  return CC === void 0 && uee(), CC;
}
var sl;
function fee(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return sl || ((typeof Intl > "u" ? "undefined" : SC(Intl)) === "object" ? sl = new Intl.Collator(e, t).compare : typeof String.prototype.localeCompare == "function" ? sl = function(n, o) {
    return "".concat(n).localeCompare(o);
  } : sl = function(n, o) {
    return n === o ? 0 : n > o ? -1 : 1;
  }, sl);
}
var xf;
function cee() {
  if (xf !== void 0)
    return xf;
  try {
    var e = {
      get passive() {
        xf = !0;
      }
    };
    window.addEventListener("test", e, e), window.removeEventListener("test", e, e);
  } catch {
    xf = !1;
  }
  return xf;
}
var hee = rE, dee = Dj;
hee("toPrimitive");
dee();
var vee = Nt, yee = dj, pee = TypeError, mee = function(e) {
  if (vee(this), e === "string" || e === "default")
    e = "string";
  else if (e !== "number")
    throw pee("Incorrect hint");
  return yee(this, e);
}, gee = At, bee = Jr, wee = mee, See = St, mA = See("toPrimitive"), gA = Date.prototype;
gee(gA, mA) || bee(gA, mA, wee);
var Cee = eg, _ee = yf, Oee = TypeError, gB = function(e) {
  if (Cee(e))
    return e;
  throw Oee(_ee(e) + " is not a constructor");
}, bA = Nt, Ree = gB, Eee = gn, Tee = St, Pee = Tee("species"), kee = function(e, t) {
  var r = bA(e).constructor, n;
  return r === void 0 || Eee(n = bA(r)[Pee]) ? t : Ree(n);
}, $ee = el, Df = Kt, VE = Be, Aee = hg, Iee = Nt, Mee = gn, xee = NE, wA = Pr, Dee = kee, Nee = IE, Hee = Qa, iw = Wt, Lee = qa, SA = eE, CA = dg, jee = cg, Fee = AE, Bee = Fe, ul = Fee.UNSUPPORTED_Y, _A = 4294967295, Vee = Math.min, bB = [].push, Wee = VE(/./.exec), fl = VE(bB), Nf = VE("".slice), Uee = !Bee(function() {
  var e = /(?:)/, t = e.exec;
  e.exec = function() {
    return t.apply(this, arguments);
  };
  var r = "ab".split(e);
  return r.length !== 2 || r[0] !== "a" || r[1] !== "b";
});
Aee("split", function(e, t, r) {
  var n;
  return "abbc".split(/(b)*/)[1] == "c" || // eslint-disable-next-line regexp/no-empty-group -- required for testing
  "test".split(/(?:)/, -1).length != 4 || "ab".split(/(?:ab)*/).length != 2 || ".".split(/(.?)(.?)/).length != 4 || // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing
  ".".split(/()()/).length > 1 || "".split(/.?/).length ? n = function(o, i) {
    var a = iw(wA(this)), l = i === void 0 ? _A : i >>> 0;
    if (l === 0)
      return [];
    if (o === void 0)
      return [a];
    if (!xee(o))
      return Df(t, a, o, l);
    for (var s = [], u = (o.ignoreCase ? "i" : "") + (o.multiline ? "m" : "") + (o.unicode ? "u" : "") + (o.sticky ? "y" : ""), f = 0, c = new RegExp(o.source, u + "g"), h, d, y; (h = Df(jee, c, a)) && (d = c.lastIndex, !(d > f && (fl(s, Nf(a, f, h.index)), h.length > 1 && h.index < a.length && $ee(bB, s, SA(h, 1)), y = h[0].length, f = d, s.length >= l))); )
      c.lastIndex === h.index && c.lastIndex++;
    return f === a.length ? (y || !Wee(c, "")) && fl(s, "") : fl(s, Nf(a, f)), s.length > l ? SA(s, 0, l) : s;
  } : "0".split(void 0, 0).length ? n = function(o, i) {
    return o === void 0 && i === 0 ? [] : Df(t, this, o, i);
  } : n = t, [
    // `String.prototype.split` method
    // https://tc39.es/ecma262/#sec-string.prototype.split
    function(i, a) {
      var l = wA(this), s = Mee(i) ? void 0 : Lee(i, e);
      return s ? Df(s, i, l, a) : Df(n, iw(l), i, a);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function(o, i) {
      var a = Iee(this), l = iw(o), s = r(n, a, l, i, n !== t);
      if (s.done)
        return s.value;
      var u = Dee(a, RegExp), f = a.unicode, c = (a.ignoreCase ? "i" : "") + (a.multiline ? "m" : "") + (a.unicode ? "u" : "") + (ul ? "g" : "y"), h = new u(ul ? "^(?:" + a.source + ")" : a, c), d = i === void 0 ? _A : i >>> 0;
      if (d === 0)
        return [];
      if (l.length === 0)
        return CA(h, l) === null ? [l] : [];
      for (var y = 0, p = 0, g = []; p < l.length; ) {
        h.lastIndex = ul ? 0 : p;
        var w = CA(h, ul ? Nf(l, p) : l), C;
        if (w === null || (C = Vee(Hee(h.lastIndex + (ul ? p : 0)), l.length)) === y)
          p = Nee(l, p, f);
        else {
          if (fl(g, Nf(l, y, p)), g.length === d)
            return g;
          for (var _ = 1; _ <= w.length - 1; _++)
            if (fl(g, w[_]), g.length === d)
              return g;
          p = y = C;
        }
      }
      return fl(g, Nf(l, y)), g;
    }
  ];
}, !Uee, ul);
function zee(e) {
  for (var t = e.length, r = 0; r < t; )
    e[r] = [e[r]], r += 1;
}
function OA(e, t) {
  for (var r = t.length, n = 0; n < r; )
    e.push(t[n]), n += 1;
}
function Gy(e) {
  var t = [];
  if (!e || e.length === 0 || !e[0] || e[0].length === 0)
    return t;
  for (var r = e.length, n = e[0].length, o = 0; o < r; o++)
    for (var i = 0; i < n; i++)
      t[i] || (t[i] = []), t[i][o] = e[o][i];
  return t;
}
function sr(e, t, r, n) {
  var o = -1, i = e, a = r;
  Array.isArray(e) || (i = Array.from(e));
  var l = i.length;
  for (n && l && (o += 1, a = i[o]), o += 1; o < l; )
    a = t(a, i[o], o, i), o += 1;
  return a;
}
function Zr(e, t) {
  var r = 0, n = e;
  Array.isArray(e) || (n = Array.from(e));
  for (var o = n.length, i = [], a = -1; r < o; ) {
    var l = n[r];
    t(l, r, n) && (a += 1, i[a] = l), r += 1;
  }
  return i;
}
function Ue(e, t) {
  var r = 0, n = e;
  Array.isArray(e) || (n = Array.from(e));
  for (var o = n.length, i = [], a = -1; r < o; ) {
    var l = n[r];
    a += 1, i[a] = t(l, r, n), r += 1;
  }
  return i;
}
function I(e, t) {
  var r = 0, n = e;
  Array.isArray(e) || (n = Array.from(e));
  for (var o = n.length; r < o && t(n[r], r, n) !== !1; )
    r += 1;
  return e;
}
function wB(e) {
  var t = [];
  return I(e, function(r) {
    t.indexOf(r) === -1 && t.push(r);
  }), t;
}
function RA() {
  for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
    t[r] = arguments[r];
  var n = [].concat(t), o = n[0], i = n.slice(1), a = o;
  return I(i, function(l) {
    a = a.filter(function(s) {
      return !l.includes(s);
    });
  }), a;
}
function EA(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : " ";
  return e.split(t);
}
function TA(e, t, r) {
  return t = Yee(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function Yee(e) {
  var t = Gee(e, "string");
  return Lo(t) === "symbol" ? t : String(t);
}
function Gee(e, t) {
  if (Lo(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Lo(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Lo(e) {
  "@babel/helpers - typeof";
  return Lo = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Lo(e);
}
function Mc(e) {
  var t;
  return Array.isArray(e) ? t = e.length ? new Array(e.length).fill(null) : [] : (t = {}, Ye(e, function(r, n) {
    n !== "__children" && (r && Lo(r) === "object" && !Array.isArray(r) ? t[n] = Mc(r) : Array.isArray(r) ? r.length && Lo(r[0]) === "object" && !Array.isArray(r[0]) ? t[n] = [Mc(r[0])] : t[n] = [] : t[n] = null);
  })), t;
}
function $i(e, t) {
  return t.prototype.constructor = t, e.prototype = new t(), e.prototype.constructor = e, e;
}
function Gt(e, t, r) {
  var n = Array.isArray(r);
  return Ye(t, function(o, i) {
    (n === !1 || r.includes(i)) && (e[i] = o);
  }), e;
}
function yg(e, t) {
  Ye(t, function(r, n) {
    t[n] && Lo(t[n]) === "object" ? (e[n] || (Array.isArray(t[n]) ? e[n] = [] : Object.prototype.toString.call(t[n]) === "[object Date]" ? e[n] = t[n] : e[n] = {}), yg(e[n], t[n])) : e[n] = t[n];
  });
}
function mr(e) {
  return Lo(e) === "object" ? JSON.parse(JSON.stringify(e)) : e;
}
function Tr(e) {
  var t = {};
  return Ye(e, function(r, n) {
    t[n] = r;
  }), t;
}
function bt(e) {
  e.MIXINS || (e.MIXINS = []);
  for (var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), n = 1; n < t; n++)
    r[n - 1] = arguments[n];
  return I(r, function(o) {
    e.MIXINS.push(o.MIXIN_NAME), Ye(o, function(i, a) {
      if (e.prototype[a] !== void 0)
        throw new Error("Mixin conflict. Property '".concat(a, "' already exist and cannot be overwritten."));
      if (typeof i == "function")
        e.prototype[a] = i;
      else {
        var l = function(f, c) {
          var h = "_".concat(f), d = function(p) {
            var g = p;
            return (Array.isArray(g) || ze(g)) && (g = mr(g)), g;
          };
          return function() {
            return this[h] === void 0 && (this[h] = d(c)), this[h];
          };
        }, s = function(f) {
          var c = "_".concat(f);
          return function(h) {
            this[c] = h;
          };
        };
        Object.defineProperty(e.prototype, a, {
          get: l(a, i),
          set: s(a),
          configurable: !0
        });
      }
    });
  }), e;
}
function WE(e, t) {
  return JSON.stringify(e) === JSON.stringify(t);
}
function ze(e) {
  return Object.prototype.toString.call(e) === "[object Object]";
}
function Wo(e, t, r, n) {
  n.value = r, n.writable = n.writable !== !1, n.enumerable = n.enumerable !== !1, n.configurable = n.configurable !== !1, Object.defineProperty(e, t, n);
}
function Ye(e, t) {
  for (var r in e)
    if ((!e.hasOwnProperty || e.hasOwnProperty && Object.prototype.hasOwnProperty.call(e, r)) && t(e[r], r, e) === !1)
      break;
  return e;
}
function Kee(e, t) {
  var r = t.split("."), n = e;
  return Ye(r, function(o) {
    if (n = n[o], n === void 0)
      return n = void 0, !1;
  }), n;
}
function aw(e, t, r) {
  var n = t.split("."), o = e;
  n.forEach(function(i, a) {
    a !== n.length - 1 ? (Dt(o, i) || (o[i] = {}), o = o[i]) : o[i] = r;
  });
}
function UE(e) {
  if (!ze(e))
    return 0;
  var t = function r(n) {
    var o = 0;
    return ze(n) ? Ye(n, function(i, a) {
      a !== "__children" && (o += r(i));
    }) : o += 1, o;
  };
  return t(e);
}
function ss(e) {
  var t, r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "value", n = "_".concat(r), o = (t = {
    _touched: !1
  }, TA(t, n, e), TA(t, "isTouched", function() {
    return this._touched;
  }), t);
  return Object.defineProperty(o, r, {
    get: function() {
      return this[n];
    },
    set: function(a) {
      this._touched = !0, this[n] = a;
    },
    enumerable: !0,
    configurable: !0
  }), o;
}
function Dt(e, t) {
  return Object.prototype.hasOwnProperty.call(e, t);
}
var Or = function(t) {
  var r = {
    value: !1
  };
  return r.test = function(n, o) {
    r.value = t(n, o);
  }, r;
}, Wn = {
  chrome: Or(function(e, t) {
    return /Chrome/.test(e) && /Google/.test(t);
  }),
  chromeWebKit: Or(function(e) {
    return /CriOS/.test(e);
  }),
  edge: Or(function(e) {
    return /Edge/.test(e);
  }),
  edgeWebKit: Or(function(e) {
    return /EdgiOS/.test(e);
  }),
  firefox: Or(function(e) {
    return /Firefox/.test(e);
  }),
  firefoxWebKit: Or(function(e) {
    return /FxiOS/.test(e);
  }),
  ie: Or(function(e) {
    return /Trident/.test(e);
  }),
  // eslint-disable-next-line no-restricted-globals
  ie9: Or(function() {
    return !!document.documentMode;
  }),
  mobile: Or(function(e) {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(e);
  }),
  safari: Or(function(e, t) {
    return /Safari/.test(e) && /Apple Computer/.test(t);
  })
}, lv = {
  mac: Or(function(e) {
    return /^Mac/.test(e);
  }),
  win: Or(function(e) {
    return /^Win/.test(e);
  }),
  linux: Or(function(e) {
    return /^Linux/.test(e);
  }),
  ios: Or(function(e) {
    return /iPhone|iPad|iPod/i.test(e);
  })
};
function qee() {
  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, t = e.userAgent, r = t === void 0 ? navigator.userAgent : t, n = e.vendor, o = n === void 0 ? navigator.vendor : n;
  Ye(Wn, function(i) {
    var a = i.test;
    return void a(r, o);
  });
}
function Xee() {
  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, t = e.platform, r = t === void 0 ? navigator.platform : t;
  Ye(lv, function(n) {
    var o = n.test;
    return void o(r);
  });
}
qee();
Xee();
function SB() {
  return Wn.chrome.value;
}
function Zee() {
  return Wn.chromeWebKit.value;
}
function lw() {
  return Wn.firefox.value;
}
function Qee() {
  return Wn.firefoxWebKit.value;
}
function Jee() {
  return Wn.safari.value;
}
function ete() {
  return Wn.edge.value;
}
function tte() {
  return Wn.ie.value;
}
function rte() {
  return Wn.ie9.value;
}
function Nn() {
  return Wn.mobile.value;
}
function CB() {
  return lv.ios.value;
}
function _B() {
  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : navigator, t = e.maxTouchPoints;
  return t > 2 && lv.mac.value;
}
function PA() {
  return lv.win.value;
}
function kA() {
  return lv.mac.value;
}
/*! @license DOMPurify 2.4.5 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.4.5/LICENSE */
function ai(e) {
  "@babel/helpers - typeof";
  return ai = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, ai(e);
}
function _C(e, t) {
  return _C = Object.setPrototypeOf || function(n, o) {
    return n.__proto__ = o, n;
  }, _C(e, t);
}
function nte() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Ky(e, t, r) {
  return nte() ? Ky = Reflect.construct : Ky = function(o, i, a) {
    var l = [null];
    l.push.apply(l, i);
    var s = Function.bind.apply(o, l), u = new s();
    return a && _C(u, a.prototype), u;
  }, Ky.apply(null, arguments);
}
function sn(e) {
  return ote(e) || ite(e) || ate(e) || lte();
}
function ote(e) {
  if (Array.isArray(e))
    return OC(e);
}
function ite(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function ate(e, t) {
  if (e) {
    if (typeof e == "string")
      return OC(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return OC(e, t);
  }
}
function OC(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function lte() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
var ste = Object.hasOwnProperty, $A = Object.setPrototypeOf, ute = Object.isFrozen, fte = Object.getPrototypeOf, cte = Object.getOwnPropertyDescriptor, gr = Object.freeze, yn = Object.seal, hte = Object.create, OB = typeof Reflect < "u" && Reflect, Np = OB.apply, RC = OB.construct;
Np || (Np = function(t, r, n) {
  return t.apply(r, n);
});
gr || (gr = function(t) {
  return t;
});
yn || (yn = function(t) {
  return t;
});
RC || (RC = function(t, r) {
  return Ky(t, sn(r));
});
var dte = Qr(Array.prototype.forEach), AA = Qr(Array.prototype.pop), Hf = Qr(Array.prototype.push), qy = Qr(String.prototype.toLowerCase), sw = Qr(String.prototype.toString), vte = Qr(String.prototype.match), on = Qr(String.prototype.replace), yte = Qr(String.prototype.indexOf), pte = Qr(String.prototype.trim), cr = Qr(RegExp.prototype.test), uw = mte(TypeError);
function Qr(e) {
  return function(t) {
    for (var r = arguments.length, n = new Array(r > 1 ? r - 1 : 0), o = 1; o < r; o++)
      n[o - 1] = arguments[o];
    return Np(e, t, n);
  };
}
function mte(e) {
  return function() {
    for (var t = arguments.length, r = new Array(t), n = 0; n < t; n++)
      r[n] = arguments[n];
    return RC(e, r);
  };
}
function Ge(e, t, r) {
  r = r || qy, $A && $A(e, null);
  for (var n = t.length; n--; ) {
    var o = t[n];
    if (typeof o == "string") {
      var i = r(o);
      i !== o && (ute(t) || (t[n] = i), o = i);
    }
    e[o] = !0;
  }
  return e;
}
function Hi(e) {
  var t = hte(null), r;
  for (r in e)
    Np(ste, e, [r]) === !0 && (t[r] = e[r]);
  return t;
}
function Wv(e, t) {
  for (; e !== null; ) {
    var r = cte(e, t);
    if (r) {
      if (r.get)
        return Qr(r.get);
      if (typeof r.value == "function")
        return Qr(r.value);
    }
    e = fte(e);
  }
  function n(o) {
    return console.warn("fallback value for", o), null;
  }
  return n;
}
var IA = gr(["a", "abbr", "acronym", "address", "area", "article", "aside", "audio", "b", "bdi", "bdo", "big", "blink", "blockquote", "body", "br", "button", "canvas", "caption", "center", "cite", "code", "col", "colgroup", "content", "data", "datalist", "dd", "decorator", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "element", "em", "fieldset", "figcaption", "figure", "font", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "img", "input", "ins", "kbd", "label", "legend", "li", "main", "map", "mark", "marquee", "menu", "menuitem", "meter", "nav", "nobr", "ol", "optgroup", "option", "output", "p", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "section", "select", "shadow", "small", "source", "spacer", "span", "strike", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "tt", "u", "ul", "var", "video", "wbr"]), fw = gr(["svg", "a", "altglyph", "altglyphdef", "altglyphitem", "animatecolor", "animatemotion", "animatetransform", "circle", "clippath", "defs", "desc", "ellipse", "filter", "font", "g", "glyph", "glyphref", "hkern", "image", "line", "lineargradient", "marker", "mask", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialgradient", "rect", "stop", "style", "switch", "symbol", "text", "textpath", "title", "tref", "tspan", "view", "vkern"]), cw = gr(["feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence"]), gte = gr(["animate", "color-profile", "cursor", "discard", "fedropshadow", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignobject", "hatch", "hatchpath", "mesh", "meshgradient", "meshpatch", "meshrow", "missing-glyph", "script", "set", "solidcolor", "unknown", "use"]), hw = gr(["math", "menclose", "merror", "mfenced", "mfrac", "mglyph", "mi", "mlabeledtr", "mmultiscripts", "mn", "mo", "mover", "mpadded", "mphantom", "mroot", "mrow", "ms", "mspace", "msqrt", "mstyle", "msub", "msup", "msubsup", "mtable", "mtd", "mtext", "mtr", "munder", "munderover"]), bte = gr(["maction", "maligngroup", "malignmark", "mlongdiv", "mscarries", "mscarry", "msgroup", "mstack", "msline", "msrow", "semantics", "annotation", "annotation-xml", "mprescripts", "none"]), MA = gr(["#text"]), xA = gr(["accept", "action", "align", "alt", "autocapitalize", "autocomplete", "autopictureinpicture", "autoplay", "background", "bgcolor", "border", "capture", "cellpadding", "cellspacing", "checked", "cite", "class", "clear", "color", "cols", "colspan", "controls", "controlslist", "coords", "crossorigin", "datetime", "decoding", "default", "dir", "disabled", "disablepictureinpicture", "disableremoteplayback", "download", "draggable", "enctype", "enterkeyhint", "face", "for", "headers", "height", "hidden", "high", "href", "hreflang", "id", "inputmode", "integrity", "ismap", "kind", "label", "lang", "list", "loading", "loop", "low", "max", "maxlength", "media", "method", "min", "minlength", "multiple", "muted", "name", "nonce", "noshade", "novalidate", "nowrap", "open", "optimum", "pattern", "placeholder", "playsinline", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "rev", "reversed", "role", "rows", "rowspan", "spellcheck", "scope", "selected", "shape", "size", "sizes", "span", "srclang", "start", "src", "srcset", "step", "style", "summary", "tabindex", "title", "translate", "type", "usemap", "valign", "value", "width", "xmlns", "slot"]), dw = gr(["accent-height", "accumulate", "additive", "alignment-baseline", "ascent", "attributename", "attributetype", "azimuth", "basefrequency", "baseline-shift", "begin", "bias", "by", "class", "clip", "clippathunits", "clip-path", "clip-rule", "color", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "cx", "cy", "d", "dx", "dy", "diffuseconstant", "direction", "display", "divisor", "dur", "edgemode", "elevation", "end", "fill", "fill-opacity", "fill-rule", "filter", "filterunits", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "fx", "fy", "g1", "g2", "glyph-name", "glyphref", "gradientunits", "gradienttransform", "height", "href", "id", "image-rendering", "in", "in2", "k", "k1", "k2", "k3", "k4", "kerning", "keypoints", "keysplines", "keytimes", "lang", "lengthadjust", "letter-spacing", "kernelmatrix", "kernelunitlength", "lighting-color", "local", "marker-end", "marker-mid", "marker-start", "markerheight", "markerunits", "markerwidth", "maskcontentunits", "maskunits", "max", "mask", "media", "method", "mode", "min", "name", "numoctaves", "offset", "operator", "opacity", "order", "orient", "orientation", "origin", "overflow", "paint-order", "path", "pathlength", "patterncontentunits", "patterntransform", "patternunits", "points", "preservealpha", "preserveaspectratio", "primitiveunits", "r", "rx", "ry", "radius", "refx", "refy", "repeatcount", "repeatdur", "restart", "result", "rotate", "scale", "seed", "shape-rendering", "specularconstant", "specularexponent", "spreadmethod", "startoffset", "stddeviation", "stitchtiles", "stop-color", "stop-opacity", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke", "stroke-width", "style", "surfacescale", "systemlanguage", "tabindex", "targetx", "targety", "transform", "transform-origin", "text-anchor", "text-decoration", "text-rendering", "textlength", "type", "u1", "u2", "unicode", "values", "viewbox", "visibility", "version", "vert-adv-y", "vert-origin-x", "vert-origin-y", "width", "word-spacing", "wrap", "writing-mode", "xchannelselector", "ychannelselector", "x", "x1", "x2", "xmlns", "y", "y1", "y2", "z", "zoomandpan"]), DA = gr(["accent", "accentunder", "align", "bevelled", "close", "columnsalign", "columnlines", "columnspan", "denomalign", "depth", "dir", "display", "displaystyle", "encoding", "fence", "frame", "height", "href", "id", "largeop", "length", "linethickness", "lspace", "lquote", "mathbackground", "mathcolor", "mathsize", "mathvariant", "maxsize", "minsize", "movablelimits", "notation", "numalign", "open", "rowalign", "rowlines", "rowspacing", "rowspan", "rspace", "rquote", "scriptlevel", "scriptminsize", "scriptsizemultiplier", "selection", "separator", "separators", "stretchy", "subscriptshift", "supscriptshift", "symmetric", "voffset", "width", "xmlns"]), Uv = gr(["xlink:href", "xml:id", "xlink:title", "xml:space", "xmlns:xlink"]), wte = yn(/\{\{[\w\W]*|[\w\W]*\}\}/gm), Ste = yn(/<%[\w\W]*|[\w\W]*%>/gm), Cte = yn(/\${[\w\W]*}/gm), _te = yn(/^data-[\-\w.\u00B7-\uFFFF]/), Ote = yn(/^aria-[\-\w]+$/), Rte = yn(
  /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i
  // eslint-disable-line no-useless-escape
), Ete = yn(/^(?:\w+script|data):/i), Tte = yn(
  /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g
  // eslint-disable-line no-control-regex
), Pte = yn(/^html$/i), kte = function() {
  return typeof window > "u" ? null : window;
}, $te = function(t, r) {
  if (ai(t) !== "object" || typeof t.createPolicy != "function")
    return null;
  var n = null, o = "data-tt-policy-suffix";
  r.currentScript && r.currentScript.hasAttribute(o) && (n = r.currentScript.getAttribute(o));
  var i = "dompurify" + (n ? "#" + n : "");
  try {
    return t.createPolicy(i, {
      createHTML: function(l) {
        return l;
      },
      createScriptURL: function(l) {
        return l;
      }
    });
  } catch {
    return console.warn("TrustedTypes policy " + i + " could not be created."), null;
  }
};
function RB() {
  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : kte(), t = function(L) {
    return RB(L);
  };
  if (t.version = "2.4.5", t.removed = [], !e || !e.document || e.document.nodeType !== 9)
    return t.isSupported = !1, t;
  var r = e.document, n = e.document, o = e.DocumentFragment, i = e.HTMLTemplateElement, a = e.Node, l = e.Element, s = e.NodeFilter, u = e.NamedNodeMap, f = u === void 0 ? e.NamedNodeMap || e.MozNamedAttrMap : u, c = e.HTMLFormElement, h = e.DOMParser, d = e.trustedTypes, y = l.prototype, p = Wv(y, "cloneNode"), g = Wv(y, "nextSibling"), w = Wv(y, "childNodes"), C = Wv(y, "parentNode");
  if (typeof i == "function") {
    var _ = n.createElement("template");
    _.content && _.content.ownerDocument && (n = _.content.ownerDocument);
  }
  var k = $te(d, r), E = k ? k.createHTML("") : "", j = n, Y = j.implementation, Q = j.createNodeIterator, X = j.createDocumentFragment, q = j.getElementsByTagName, J = r.importNode, le = {};
  try {
    le = Hi(n).documentMode ? n.documentMode : {};
  } catch {
  }
  var ee = {};
  t.isSupported = typeof C == "function" && Y && typeof Y.createHTMLDocument < "u" && le !== 9;
  var U = wte, Z = Ste, oe = Cte, ie = _te, T = Ote, v = Ete, m = Tte, b = Rte, S = null, R = Ge({}, [].concat(sn(IA), sn(fw), sn(cw), sn(hw), sn(MA))), $ = null, H = Ge({}, [].concat(sn(xA), sn(dw), sn(DA), sn(Uv))), F = Object.seal(Object.create(null, {
    tagNameCheck: {
      writable: !0,
      configurable: !1,
      enumerable: !0,
      value: null
    },
    attributeNameCheck: {
      writable: !0,
      configurable: !1,
      enumerable: !0,
      value: null
    },
    allowCustomizedBuiltInElements: {
      writable: !0,
      configurable: !1,
      enumerable: !0,
      value: !1
    }
  })), K = null, te = null, re = !0, ce = !0, Oe = !1, ve = !0, ye = !1, x = !1, ke = !1, He = !1, Ee = !1, Ae = !1, $e = !1, O = !0, P = !1, A = "user-content-", B = !0, M = !1, W = {}, D = null, N = Ge({}, ["annotation-xml", "audio", "colgroup", "desc", "foreignobject", "head", "iframe", "math", "mi", "mn", "mo", "ms", "mtext", "noembed", "noframes", "noscript", "plaintext", "script", "style", "svg", "template", "thead", "title", "video", "xmp"]), z = null, V = Ge({}, ["audio", "video", "img", "source", "image", "track"]), G = null, fe = Ge({}, ["alt", "class", "for", "id", "label", "name", "pattern", "placeholder", "role", "summary", "title", "value", "style", "xmlns"]), ge = "http://www.w3.org/1998/Math/MathML", Re = "http://www.w3.org/2000/svg", xe = "http://www.w3.org/1999/xhtml", Ke = xe, ct = !1, De = null, Ne = Ge({}, [ge, Re, xe], sw), tt, ot = ["application/xhtml+xml", "text/html"], Je = "text/html", qe, Qe = null, Ht = n.createElement("form"), vt = function(L) {
    return L instanceof RegExp || L instanceof Function;
  }, lt = function(L) {
    Qe && Qe === L || ((!L || ai(L) !== "object") && (L = {}), L = Hi(L), tt = // eslint-disable-next-line unicorn/prefer-includes
    ot.indexOf(L.PARSER_MEDIA_TYPE) === -1 ? tt = Je : tt = L.PARSER_MEDIA_TYPE, qe = tt === "application/xhtml+xml" ? sw : qy, S = "ALLOWED_TAGS" in L ? Ge({}, L.ALLOWED_TAGS, qe) : R, $ = "ALLOWED_ATTR" in L ? Ge({}, L.ALLOWED_ATTR, qe) : H, De = "ALLOWED_NAMESPACES" in L ? Ge({}, L.ALLOWED_NAMESPACES, sw) : Ne, G = "ADD_URI_SAFE_ATTR" in L ? Ge(
      Hi(fe),
      // eslint-disable-line indent
      L.ADD_URI_SAFE_ATTR,
      // eslint-disable-line indent
      qe
      // eslint-disable-line indent
    ) : fe, z = "ADD_DATA_URI_TAGS" in L ? Ge(
      Hi(V),
      // eslint-disable-line indent
      L.ADD_DATA_URI_TAGS,
      // eslint-disable-line indent
      qe
      // eslint-disable-line indent
    ) : V, D = "FORBID_CONTENTS" in L ? Ge({}, L.FORBID_CONTENTS, qe) : N, K = "FORBID_TAGS" in L ? Ge({}, L.FORBID_TAGS, qe) : {}, te = "FORBID_ATTR" in L ? Ge({}, L.FORBID_ATTR, qe) : {}, W = "USE_PROFILES" in L ? L.USE_PROFILES : !1, re = L.ALLOW_ARIA_ATTR !== !1, ce = L.ALLOW_DATA_ATTR !== !1, Oe = L.ALLOW_UNKNOWN_PROTOCOLS || !1, ve = L.ALLOW_SELF_CLOSE_IN_ATTR !== !1, ye = L.SAFE_FOR_TEMPLATES || !1, x = L.WHOLE_DOCUMENT || !1, Ee = L.RETURN_DOM || !1, Ae = L.RETURN_DOM_FRAGMENT || !1, $e = L.RETURN_TRUSTED_TYPE || !1, He = L.FORCE_BODY || !1, O = L.SANITIZE_DOM !== !1, P = L.SANITIZE_NAMED_PROPS || !1, B = L.KEEP_CONTENT !== !1, M = L.IN_PLACE || !1, b = L.ALLOWED_URI_REGEXP || b, Ke = L.NAMESPACE || xe, F = L.CUSTOM_ELEMENT_HANDLING || {}, L.CUSTOM_ELEMENT_HANDLING && vt(L.CUSTOM_ELEMENT_HANDLING.tagNameCheck) && (F.tagNameCheck = L.CUSTOM_ELEMENT_HANDLING.tagNameCheck), L.CUSTOM_ELEMENT_HANDLING && vt(L.CUSTOM_ELEMENT_HANDLING.attributeNameCheck) && (F.attributeNameCheck = L.CUSTOM_ELEMENT_HANDLING.attributeNameCheck), L.CUSTOM_ELEMENT_HANDLING && typeof L.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements == "boolean" && (F.allowCustomizedBuiltInElements = L.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements), ye && (ce = !1), Ae && (Ee = !0), W && (S = Ge({}, sn(MA)), $ = [], W.html === !0 && (Ge(S, IA), Ge($, xA)), W.svg === !0 && (Ge(S, fw), Ge($, dw), Ge($, Uv)), W.svgFilters === !0 && (Ge(S, cw), Ge($, dw), Ge($, Uv)), W.mathMl === !0 && (Ge(S, hw), Ge($, DA), Ge($, Uv))), L.ADD_TAGS && (S === R && (S = Hi(S)), Ge(S, L.ADD_TAGS, qe)), L.ADD_ATTR && ($ === H && ($ = Hi($)), Ge($, L.ADD_ATTR, qe)), L.ADD_URI_SAFE_ATTR && Ge(G, L.ADD_URI_SAFE_ATTR, qe), L.FORBID_CONTENTS && (D === N && (D = Hi(D)), Ge(D, L.FORBID_CONTENTS, qe)), B && (S["#text"] = !0), x && Ge(S, ["html", "head", "body"]), S.table && (Ge(S, ["tbody"]), delete K.tbody), gr && gr(L), Qe = L);
  }, rt = Ge({}, ["mi", "mo", "mn", "ms", "mtext"]), Mi = Ge({}, ["foreignobject", "desc", "title", "annotation-xml"]), Yo = Ge({}, ["title", "style", "font", "a", "script"]), il = Ge({}, fw);
  Ge(il, cw), Ge(il, gte);
  var ub = Ge({}, hw);
  Ge(ub, bte);
  var dY = function(L) {
    var ue = C(L);
    (!ue || !ue.tagName) && (ue = {
      namespaceURI: Ke,
      tagName: "template"
    });
    var pe = qy(L.tagName), st = qy(ue.tagName);
    return De[L.namespaceURI] ? L.namespaceURI === Re ? ue.namespaceURI === xe ? pe === "svg" : ue.namespaceURI === ge ? pe === "svg" && (st === "annotation-xml" || rt[st]) : !!il[pe] : L.namespaceURI === ge ? ue.namespaceURI === xe ? pe === "math" : ue.namespaceURI === Re ? pe === "math" && Mi[st] : !!ub[pe] : L.namespaceURI === xe ? ue.namespaceURI === Re && !Mi[st] || ue.namespaceURI === ge && !rt[st] ? !1 : !ub[pe] && (Yo[pe] || !il[pe]) : !!(tt === "application/xhtml+xml" && De[L.namespaceURI]) : !1;
  }, Yn = function(L) {
    Hf(t.removed, {
      element: L
    });
    try {
      L.parentNode.removeChild(L);
    } catch {
      try {
        L.outerHTML = E;
      } catch {
        L.remove();
      }
    }
  }, fb = function(L, ue) {
    try {
      Hf(t.removed, {
        attribute: ue.getAttributeNode(L),
        from: ue
      });
    } catch {
      Hf(t.removed, {
        attribute: null,
        from: ue
      });
    }
    if (ue.removeAttribute(L), L === "is" && !$[L])
      if (Ee || Ae)
        try {
          Yn(ue);
        } catch {
        }
      else
        try {
          ue.setAttribute(L, "");
        } catch {
        }
  }, HP = function(L) {
    var ue, pe;
    if (He)
      L = "<remove></remove>" + L;
    else {
      var st = vte(L, /^[\r\n\t ]+/);
      pe = st && st[0];
    }
    tt === "application/xhtml+xml" && Ke === xe && (L = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + L + "</body></html>");
    var Sr = k ? k.createHTML(L) : L;
    if (Ke === xe)
      try {
        ue = new h().parseFromString(Sr, tt);
      } catch {
      }
    if (!ue || !ue.documentElement) {
      ue = Y.createDocument(Ke, "template", null);
      try {
        ue.documentElement.innerHTML = ct ? E : Sr;
      } catch {
      }
    }
    var or = ue.body || ue.documentElement;
    return L && pe && or.insertBefore(n.createTextNode(pe), or.childNodes[0] || null), Ke === xe ? q.call(ue, x ? "html" : "body")[0] : x ? ue.documentElement : or;
  }, LP = function(L) {
    return Q.call(
      L.ownerDocument || L,
      L,
      // eslint-disable-next-line no-bitwise
      s.SHOW_ELEMENT | s.SHOW_COMMENT | s.SHOW_TEXT,
      null,
      !1
    );
  }, vY = function(L) {
    return L instanceof c && (typeof L.nodeName != "string" || typeof L.textContent != "string" || typeof L.removeChild != "function" || !(L.attributes instanceof f) || typeof L.removeAttribute != "function" || typeof L.setAttribute != "function" || typeof L.namespaceURI != "string" || typeof L.insertBefore != "function" || typeof L.hasChildNodes != "function");
  }, kf = function(L) {
    return ai(a) === "object" ? L instanceof a : L && ai(L) === "object" && typeof L.nodeType == "number" && typeof L.nodeName == "string";
  }, Gn = function(L, ue, pe) {
    ee[L] && dte(ee[L], function(st) {
      st.call(t, ue, pe, Qe);
    });
  }, jP = function(L) {
    var ue;
    if (Gn("beforeSanitizeElements", L, null), vY(L) || cr(/[\u0080-\uFFFF]/, L.nodeName))
      return Yn(L), !0;
    var pe = qe(L.nodeName);
    if (Gn("uponSanitizeElement", L, {
      tagName: pe,
      allowedTags: S
    }), L.hasChildNodes() && !kf(L.firstElementChild) && (!kf(L.content) || !kf(L.content.firstElementChild)) && cr(/<[/\w]/g, L.innerHTML) && cr(/<[/\w]/g, L.textContent) || pe === "select" && cr(/<template/i, L.innerHTML))
      return Yn(L), !0;
    if (!S[pe] || K[pe]) {
      if (!K[pe] && BP(pe) && (F.tagNameCheck instanceof RegExp && cr(F.tagNameCheck, pe) || F.tagNameCheck instanceof Function && F.tagNameCheck(pe)))
        return !1;
      if (B && !D[pe]) {
        var st = C(L) || L.parentNode, Sr = w(L) || L.childNodes;
        if (Sr && st)
          for (var or = Sr.length, nr = or - 1; nr >= 0; --nr)
            st.insertBefore(p(Sr[nr], !0), g(L));
      }
      return Yn(L), !0;
    }
    return L instanceof l && !dY(L) || (pe === "noscript" || pe === "noembed") && cr(/<\/no(script|embed)/i, L.innerHTML) ? (Yn(L), !0) : (ye && L.nodeType === 3 && (ue = L.textContent, ue = on(ue, U, " "), ue = on(ue, Z, " "), ue = on(ue, oe, " "), L.textContent !== ue && (Hf(t.removed, {
      element: L.cloneNode()
    }), L.textContent = ue)), Gn("afterSanitizeElements", L, null), !1);
  }, FP = function(L, ue, pe) {
    if (O && (ue === "id" || ue === "name") && (pe in n || pe in Ht))
      return !1;
    if (!(ce && !te[ue] && cr(ie, ue))) {
      if (!(re && cr(T, ue))) {
        if (!$[ue] || te[ue]) {
          if (
            // First condition does a very basic check if a) it's basically a valid custom element tagname AND
            // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
            // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck
            !(BP(L) && (F.tagNameCheck instanceof RegExp && cr(F.tagNameCheck, L) || F.tagNameCheck instanceof Function && F.tagNameCheck(L)) && (F.attributeNameCheck instanceof RegExp && cr(F.attributeNameCheck, ue) || F.attributeNameCheck instanceof Function && F.attributeNameCheck(ue)) || // Alternative, second condition checks if it's an `is`-attribute, AND
            // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck
            ue === "is" && F.allowCustomizedBuiltInElements && (F.tagNameCheck instanceof RegExp && cr(F.tagNameCheck, pe) || F.tagNameCheck instanceof Function && F.tagNameCheck(pe)))
          )
            return !1;
        } else if (!G[ue]) {
          if (!cr(b, on(pe, m, ""))) {
            if (!((ue === "src" || ue === "xlink:href" || ue === "href") && L !== "script" && yte(pe, "data:") === 0 && z[L])) {
              if (!(Oe && !cr(v, on(pe, m, "")))) {
                if (pe)
                  return !1;
              }
            }
          }
        }
      }
    }
    return !0;
  }, BP = function(L) {
    return L.indexOf("-") > 0;
  }, VP = function(L) {
    var ue, pe, st, Sr;
    Gn("beforeSanitizeAttributes", L, null);
    var or = L.attributes;
    if (or) {
      var nr = {
        attrName: "",
        attrValue: "",
        keepAttr: !0,
        allowedAttributes: $
      };
      for (Sr = or.length; Sr--; ) {
        ue = or[Sr];
        var Pv = ue, Zt = Pv.name, cb = Pv.namespaceURI;
        if (pe = Zt === "value" ? ue.value : pte(ue.value), st = qe(Zt), nr.attrName = st, nr.attrValue = pe, nr.keepAttr = !0, nr.forceKeepAttr = void 0, Gn("uponSanitizeAttribute", L, nr), pe = nr.attrValue, !nr.forceKeepAttr && (fb(Zt, L), !!nr.keepAttr)) {
          if (!ve && cr(/\/>/i, pe)) {
            fb(Zt, L);
            continue;
          }
          ye && (pe = on(pe, U, " "), pe = on(pe, Z, " "), pe = on(pe, oe, " "));
          var WP = qe(L.nodeName);
          if (FP(WP, st, pe)) {
            if (P && (st === "id" || st === "name") && (fb(Zt, L), pe = A + pe), k && ai(d) === "object" && typeof d.getAttributeType == "function" && !cb)
              switch (d.getAttributeType(WP, st)) {
                case "TrustedHTML":
                  pe = k.createHTML(pe);
                  break;
                case "TrustedScriptURL":
                  pe = k.createScriptURL(pe);
                  break;
              }
            try {
              cb ? L.setAttributeNS(cb, Zt, pe) : L.setAttribute(Zt, pe), AA(t.removed);
            } catch {
            }
          }
        }
      }
      Gn("afterSanitizeAttributes", L, null);
    }
  }, yY = function Te(L) {
    var ue, pe = LP(L);
    for (Gn("beforeSanitizeShadowDOM", L, null); ue = pe.nextNode(); )
      Gn("uponSanitizeShadowNode", ue, null), !jP(ue) && (ue.content instanceof o && Te(ue.content), VP(ue));
    Gn("afterSanitizeShadowDOM", L, null);
  };
  return t.sanitize = function(Te) {
    var L = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, ue, pe, st, Sr, or;
    if (ct = !Te, ct && (Te = "<!-->"), typeof Te != "string" && !kf(Te)) {
      if (typeof Te.toString != "function")
        throw uw("toString is not a function");
      if (Te = Te.toString(), typeof Te != "string")
        throw uw("dirty is not a string, aborting");
    }
    if (!t.isSupported) {
      if (ai(e.toStaticHTML) === "object" || typeof e.toStaticHTML == "function") {
        if (typeof Te == "string")
          return e.toStaticHTML(Te);
        if (kf(Te))
          return e.toStaticHTML(Te.outerHTML);
      }
      return Te;
    }
    if (ke || lt(L), t.removed = [], typeof Te == "string" && (M = !1), M) {
      if (Te.nodeName) {
        var nr = qe(Te.nodeName);
        if (!S[nr] || K[nr])
          throw uw("root node is forbidden and cannot be sanitized in-place");
      }
    } else if (Te instanceof a)
      ue = HP("<!---->"), pe = ue.ownerDocument.importNode(Te, !0), pe.nodeType === 1 && pe.nodeName === "BODY" || pe.nodeName === "HTML" ? ue = pe : ue.appendChild(pe);
    else {
      if (!Ee && !ye && !x && // eslint-disable-next-line unicorn/prefer-includes
      Te.indexOf("<") === -1)
        return k && $e ? k.createHTML(Te) : Te;
      if (ue = HP(Te), !ue)
        return Ee ? null : $e ? E : "";
    }
    ue && He && Yn(ue.firstChild);
    for (var Pv = LP(M ? Te : ue); st = Pv.nextNode(); )
      st.nodeType === 3 && st === Sr || jP(st) || (st.content instanceof o && yY(st.content), VP(st), Sr = st);
    if (Sr = null, M)
      return Te;
    if (Ee) {
      if (Ae)
        for (or = X.call(ue.ownerDocument); ue.firstChild; )
          or.appendChild(ue.firstChild);
      else
        or = ue;
      return ($.shadowroot || $.shadowrootmod) && (or = J.call(r, or, !0)), or;
    }
    var Zt = x ? ue.outerHTML : ue.innerHTML;
    return x && S["!doctype"] && ue.ownerDocument && ue.ownerDocument.doctype && ue.ownerDocument.doctype.name && cr(Pte, ue.ownerDocument.doctype.name) && (Zt = "<!DOCTYPE " + ue.ownerDocument.doctype.name + `>
` + Zt), ye && (Zt = on(Zt, U, " "), Zt = on(Zt, Z, " "), Zt = on(Zt, oe, " ")), k && $e ? k.createHTML(Zt) : Zt;
  }, t.setConfig = function(Te) {
    lt(Te), ke = !0;
  }, t.clearConfig = function() {
    Qe = null, ke = !1;
  }, t.isValidAttribute = function(Te, L, ue) {
    Qe || lt({});
    var pe = qe(Te), st = qe(L);
    return FP(pe, st, ue);
  }, t.addHook = function(Te, L) {
    typeof L == "function" && (ee[Te] = ee[Te] || [], Hf(ee[Te], L));
  }, t.removeHook = function(Te) {
    if (ee[Te])
      return AA(ee[Te]);
  }, t.removeHooks = function(Te) {
    ee[Te] && (ee[Te] = []);
  }, t.removeAllHooks = function() {
    ee = {};
  }, t;
}
var Ate = RB(), Ite = Ie, Mte = OE.codeAt;
Ite({ target: "String", proto: !0 }, {
  codePointAt: function(t) {
    return Mte(this, t);
  }
});
var xte = ki, Dte = Wt, Nte = Pr, Hte = RangeError, zE = function(t) {
  var r = Dte(Nte(this)), n = "", o = xte(t);
  if (o < 0 || o == 1 / 0)
    throw Hte("Wrong number of repetitions");
  for (; o > 0; (o >>>= 1) && (r += r))
    o & 1 && (n += r);
  return n;
}, EB = Be, Lte = Qa, NA = Wt, jte = zE, Fte = Pr, Bte = EB(jte), Vte = EB("".slice), Wte = Math.ceil, HA = function(e) {
  return function(t, r, n) {
    var o = NA(Fte(t)), i = Lte(r), a = o.length, l = n === void 0 ? " " : NA(n), s, u;
    return i <= a || l == "" ? o : (s = i - a, u = Bte(l, Wte(s / l.length)), u.length > s && (u = Vte(u, 0, s)), e ? o + u : u + o);
  };
}, Ute = {
  // `String.prototype.padStart` method
  // https://tc39.es/ecma262/#sec-string.prototype.padstart
  start: HA(!1),
  // `String.prototype.padEnd` method
  // https://tc39.es/ecma262/#sec-string.prototype.padend
  end: HA(!0)
}, zte = Ga, Yte = /Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(zte), Gte = Ie, Kte = Ute.start, qte = Yte;
Gte({ target: "String", proto: !0, forced: qte }, {
  padStart: function(t) {
    return Kte(this, t, arguments.length > 1 ? arguments[1] : void 0);
  }
});
//! moment.js
//! version : 2.29.4
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
var TB;
function ne() {
  return TB.apply(null, arguments);
}
function Xte(e) {
  TB = e;
}
function pn(e) {
  return e instanceof Array || Object.prototype.toString.call(e) === "[object Array]";
}
function $a(e) {
  return e != null && Object.prototype.toString.call(e) === "[object Object]";
}
function it(e, t) {
  return Object.prototype.hasOwnProperty.call(e, t);
}
function YE(e) {
  if (Object.getOwnPropertyNames)
    return Object.getOwnPropertyNames(e).length === 0;
  var t;
  for (t in e)
    if (it(e, t))
      return !1;
  return !0;
}
function _r(e) {
  return e === void 0;
}
function jo(e) {
  return typeof e == "number" || Object.prototype.toString.call(e) === "[object Number]";
}
function sv(e) {
  return e instanceof Date || Object.prototype.toString.call(e) === "[object Date]";
}
function PB(e, t) {
  var r = [], n, o = e.length;
  for (n = 0; n < o; ++n)
    r.push(t(e[n], n));
  return r;
}
function ui(e, t) {
  for (var r in t)
    it(t, r) && (e[r] = t[r]);
  return it(t, "toString") && (e.toString = t.toString), it(t, "valueOf") && (e.valueOf = t.valueOf), e;
}
function Un(e, t, r, n) {
  return QB(e, t, r, n, !0).utc();
}
function Zte() {
  return {
    empty: !1,
    unusedTokens: [],
    unusedInput: [],
    overflow: -2,
    charsLeftOver: 0,
    nullInput: !1,
    invalidEra: null,
    invalidMonth: null,
    invalidFormat: !1,
    userInvalidated: !1,
    iso: !1,
    parsedDateParts: [],
    era: null,
    meridiem: null,
    rfc2822: !1,
    weekdayMismatch: !1
  };
}
function Ve(e) {
  return e._pf == null && (e._pf = Zte()), e._pf;
}
var EC;
Array.prototype.some ? EC = Array.prototype.some : EC = function(e) {
  var t = Object(this), r = t.length >>> 0, n;
  for (n = 0; n < r; n++)
    if (n in t && e.call(this, t[n], n, t))
      return !0;
  return !1;
};
function GE(e) {
  if (e._isValid == null) {
    var t = Ve(e), r = EC.call(t.parsedDateParts, function(o) {
      return o != null;
    }), n = !isNaN(e._d.getTime()) && t.overflow < 0 && !t.empty && !t.invalidEra && !t.invalidMonth && !t.invalidWeekday && !t.weekdayMismatch && !t.nullInput && !t.invalidFormat && !t.userInvalidated && (!t.meridiem || t.meridiem && r);
    if (e._strict && (n = n && t.charsLeftOver === 0 && t.unusedTokens.length === 0 && t.bigHour === void 0), Object.isFrozen == null || !Object.isFrozen(e))
      e._isValid = n;
    else
      return n;
  }
  return e._isValid;
}
function pg(e) {
  var t = Un(NaN);
  return e != null ? ui(Ve(t), e) : Ve(t).userInvalidated = !0, t;
}
var LA = ne.momentProperties = [], vw = !1;
function KE(e, t) {
  var r, n, o, i = LA.length;
  if (_r(t._isAMomentObject) || (e._isAMomentObject = t._isAMomentObject), _r(t._i) || (e._i = t._i), _r(t._f) || (e._f = t._f), _r(t._l) || (e._l = t._l), _r(t._strict) || (e._strict = t._strict), _r(t._tzm) || (e._tzm = t._tzm), _r(t._isUTC) || (e._isUTC = t._isUTC), _r(t._offset) || (e._offset = t._offset), _r(t._pf) || (e._pf = Ve(t)), _r(t._locale) || (e._locale = t._locale), i > 0)
    for (r = 0; r < i; r++)
      n = LA[r], o = t[n], _r(o) || (e[n] = o);
  return e;
}
function uv(e) {
  KE(this, e), this._d = new Date(e._d != null ? e._d.getTime() : NaN), this.isValid() || (this._d = /* @__PURE__ */ new Date(NaN)), vw === !1 && (vw = !0, ne.updateOffset(this), vw = !1);
}
function mn(e) {
  return e instanceof uv || e != null && e._isAMomentObject != null;
}
function kB(e) {
  ne.suppressDeprecationWarnings === !1 && typeof console < "u" && console.warn && console.warn("Deprecation warning: " + e);
}
function tn(e, t) {
  var r = !0;
  return ui(function() {
    if (ne.deprecationHandler != null && ne.deprecationHandler(null, e), r) {
      var n = [], o, i, a, l = arguments.length;
      for (i = 0; i < l; i++) {
        if (o = "", typeof arguments[i] == "object") {
          o += `
[` + i + "] ";
          for (a in arguments[0])
            it(arguments[0], a) && (o += a + ": " + arguments[0][a] + ", ");
          o = o.slice(0, -2);
        } else
          o = arguments[i];
        n.push(o);
      }
      kB(
        e + `
Arguments: ` + Array.prototype.slice.call(n).join("") + `
` + new Error().stack
      ), r = !1;
    }
    return t.apply(this, arguments);
  }, t);
}
var jA = {};
function $B(e, t) {
  ne.deprecationHandler != null && ne.deprecationHandler(e, t), jA[e] || (kB(t), jA[e] = !0);
}
ne.suppressDeprecationWarnings = !1;
ne.deprecationHandler = null;
function zn(e) {
  return typeof Function < "u" && e instanceof Function || Object.prototype.toString.call(e) === "[object Function]";
}
function Qte(e) {
  var t, r;
  for (r in e)
    it(e, r) && (t = e[r], zn(t) ? this[r] = t : this["_" + r] = t);
  this._config = e, this._dayOfMonthOrdinalParseLenient = new RegExp(
    (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
  );
}
function TC(e, t) {
  var r = ui({}, e), n;
  for (n in t)
    it(t, n) && ($a(e[n]) && $a(t[n]) ? (r[n] = {}, ui(r[n], e[n]), ui(r[n], t[n])) : t[n] != null ? r[n] = t[n] : delete r[n]);
  for (n in e)
    it(e, n) && !it(t, n) && $a(e[n]) && (r[n] = ui({}, r[n]));
  return r;
}
function qE(e) {
  e != null && this.set(e);
}
var PC;
Object.keys ? PC = Object.keys : PC = function(e) {
  var t, r = [];
  for (t in e)
    it(e, t) && r.push(t);
  return r;
};
var Jte = {
  sameDay: "[Today at] LT",
  nextDay: "[Tomorrow at] LT",
  nextWeek: "dddd [at] LT",
  lastDay: "[Yesterday at] LT",
  lastWeek: "[Last] dddd [at] LT",
  sameElse: "L"
};
function ere(e, t, r) {
  var n = this._calendar[e] || this._calendar.sameElse;
  return zn(n) ? n.call(t, r) : n;
}
function Ln(e, t, r) {
  var n = "" + Math.abs(e), o = t - n.length, i = e >= 0;
  return (i ? r ? "+" : "" : "-") + Math.pow(10, Math.max(0, o)).toString().substr(1) + n;
}
var XE = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, zv = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, yw = {}, Gl = {};
function Pe(e, t, r, n) {
  var o = n;
  typeof n == "string" && (o = function() {
    return this[n]();
  }), e && (Gl[e] = o), t && (Gl[t[0]] = function() {
    return Ln(o.apply(this, arguments), t[1], t[2]);
  }), r && (Gl[r] = function() {
    return this.localeData().ordinal(
      o.apply(this, arguments),
      e
    );
  });
}
function tre(e) {
  return e.match(/\[[\s\S]/) ? e.replace(/^\[|\]$/g, "") : e.replace(/\\/g, "");
}
function rre(e) {
  var t = e.match(XE), r, n;
  for (r = 0, n = t.length; r < n; r++)
    Gl[t[r]] ? t[r] = Gl[t[r]] : t[r] = tre(t[r]);
  return function(o) {
    var i = "", a;
    for (a = 0; a < n; a++)
      i += zn(t[a]) ? t[a].call(o, e) : t[a];
    return i;
  };
}
function Xy(e, t) {
  return e.isValid() ? (t = AB(t, e.localeData()), yw[t] = yw[t] || rre(t), yw[t](e)) : e.localeData().invalidDate();
}
function AB(e, t) {
  var r = 5;
  function n(o) {
    return t.longDateFormat(o) || o;
  }
  for (zv.lastIndex = 0; r >= 0 && zv.test(e); )
    e = e.replace(
      zv,
      n
    ), zv.lastIndex = 0, r -= 1;
  return e;
}
var nre = {
  LTS: "h:mm:ss A",
  LT: "h:mm A",
  L: "MM/DD/YYYY",
  LL: "MMMM D, YYYY",
  LLL: "MMMM D, YYYY h:mm A",
  LLLL: "dddd, MMMM D, YYYY h:mm A"
};
function ore(e) {
  var t = this._longDateFormat[e], r = this._longDateFormat[e.toUpperCase()];
  return t || !r ? t : (this._longDateFormat[e] = r.match(XE).map(function(n) {
    return n === "MMMM" || n === "MM" || n === "DD" || n === "dddd" ? n.slice(1) : n;
  }).join(""), this._longDateFormat[e]);
}
var ire = "Invalid date";
function are() {
  return this._invalidDate;
}
var lre = "%d", sre = /\d{1,2}/;
function ure(e) {
  return this._ordinal.replace("%d", e);
}
var fre = {
  future: "in %s",
  past: "%s ago",
  s: "a few seconds",
  ss: "%d seconds",
  m: "a minute",
  mm: "%d minutes",
  h: "an hour",
  hh: "%d hours",
  d: "a day",
  dd: "%d days",
  w: "a week",
  ww: "%d weeks",
  M: "a month",
  MM: "%d months",
  y: "a year",
  yy: "%d years"
};
function cre(e, t, r, n) {
  var o = this._relativeTime[r];
  return zn(o) ? o(e, t, r, n) : o.replace(/%d/i, e);
}
function hre(e, t) {
  var r = this._relativeTime[e > 0 ? "future" : "past"];
  return zn(r) ? r(t) : r.replace(/%s/i, t);
}
var yc = {};
function ur(e, t) {
  var r = e.toLowerCase();
  yc[r] = yc[r + "s"] = yc[t] = e;
}
function rn(e) {
  return typeof e == "string" ? yc[e] || yc[e.toLowerCase()] : void 0;
}
function ZE(e) {
  var t = {}, r, n;
  for (n in e)
    it(e, n) && (r = rn(n), r && (t[r] = e[n]));
  return t;
}
var IB = {};
function fr(e, t) {
  IB[e] = t;
}
function dre(e) {
  var t = [], r;
  for (r in e)
    it(e, r) && t.push({ unit: r, priority: IB[r] });
  return t.sort(function(n, o) {
    return n.priority - o.priority;
  }), t;
}
function mg(e) {
  return e % 4 === 0 && e % 100 !== 0 || e % 400 === 0;
}
function qr(e) {
  return e < 0 ? Math.ceil(e) || 0 : Math.floor(e);
}
function Ze(e) {
  var t = +e, r = 0;
  return t !== 0 && isFinite(t) && (r = qr(t)), r;
}
function Sf(e, t) {
  return function(r) {
    return r != null ? (MB(this, e, r), ne.updateOffset(this, t), this) : Hp(this, e);
  };
}
function Hp(e, t) {
  return e.isValid() ? e._d["get" + (e._isUTC ? "UTC" : "") + t]() : NaN;
}
function MB(e, t, r) {
  e.isValid() && !isNaN(r) && (t === "FullYear" && mg(e.year()) && e.month() === 1 && e.date() === 29 ? (r = Ze(r), e._d["set" + (e._isUTC ? "UTC" : "") + t](
    r,
    e.month(),
    _g(r, e.month())
  )) : e._d["set" + (e._isUTC ? "UTC" : "") + t](r));
}
function vre(e) {
  return e = rn(e), zn(this[e]) ? this[e]() : this;
}
function yre(e, t) {
  if (typeof e == "object") {
    e = ZE(e);
    var r = dre(e), n, o = r.length;
    for (n = 0; n < o; n++)
      this[r[n].unit](e[r[n].unit]);
  } else if (e = rn(e), zn(this[e]))
    return this[e](t);
  return this;
}
var xB = /\d/, Wr = /\d\d/, DB = /\d{3}/, QE = /\d{4}/, gg = /[+-]?\d{6}/, Rt = /\d\d?/, NB = /\d\d\d\d?/, HB = /\d\d\d\d\d\d?/, bg = /\d{1,3}/, JE = /\d{1,4}/, wg = /[+-]?\d{1,6}/, Cf = /\d+/, Sg = /[+-]?\d+/, pre = /Z|[+-]\d\d:?\d\d/gi, Cg = /Z|[+-]\d\d(?::?\d\d)?/gi, mre = /[+-]?\d+(\.\d{1,3})?/, fv = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, Lp;
Lp = {};
function Se(e, t, r) {
  Lp[e] = zn(t) ? t : function(n, o) {
    return n && r ? r : t;
  };
}
function gre(e, t) {
  return it(Lp, e) ? Lp[e](t._strict, t._locale) : new RegExp(bre(e));
}
function bre(e) {
  return jr(
    e.replace("\\", "").replace(
      /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
      function(t, r, n, o, i) {
        return r || n || o || i;
      }
    )
  );
}
function jr(e) {
  return e.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
}
var kC = {};
function mt(e, t) {
  var r, n = t, o;
  for (typeof e == "string" && (e = [e]), jo(t) && (n = function(i, a) {
    a[t] = Ze(i);
  }), o = e.length, r = 0; r < o; r++)
    kC[e[r]] = n;
}
function cv(e, t) {
  mt(e, function(r, n, o, i) {
    o._w = o._w || {}, t(r, o._w, o, i);
  });
}
function wre(e, t, r) {
  t != null && it(kC, e) && kC[e](t, r._a, r, e);
}
var lr = 0, so = 1, xn = 2, qt = 3, dn = 4, uo = 5, ta = 6, Sre = 7, Cre = 8;
function _re(e, t) {
  return (e % t + t) % t;
}
var jt;
Array.prototype.indexOf ? jt = Array.prototype.indexOf : jt = function(e) {
  var t;
  for (t = 0; t < this.length; ++t)
    if (this[t] === e)
      return t;
  return -1;
};
function _g(e, t) {
  if (isNaN(e) || isNaN(t))
    return NaN;
  var r = _re(t, 12);
  return e += (t - r) / 12, r === 1 ? mg(e) ? 29 : 28 : 31 - r % 7 % 2;
}
Pe("M", ["MM", 2], "Mo", function() {
  return this.month() + 1;
});
Pe("MMM", 0, 0, function(e) {
  return this.localeData().monthsShort(this, e);
});
Pe("MMMM", 0, 0, function(e) {
  return this.localeData().months(this, e);
});
ur("month", "M");
fr("month", 8);
Se("M", Rt);
Se("MM", Rt, Wr);
Se("MMM", function(e, t) {
  return t.monthsShortRegex(e);
});
Se("MMMM", function(e, t) {
  return t.monthsRegex(e);
});
mt(["M", "MM"], function(e, t) {
  t[so] = Ze(e) - 1;
});
mt(["MMM", "MMMM"], function(e, t, r, n) {
  var o = r._locale.monthsParse(e, n, r._strict);
  o != null ? t[so] = o : Ve(r).invalidMonth = e;
});
var Ore = "January_February_March_April_May_June_July_August_September_October_November_December".split(
  "_"
), LB = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), jB = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, Rre = fv, Ere = fv;
function Tre(e, t) {
  return e ? pn(this._months) ? this._months[e.month()] : this._months[(this._months.isFormat || jB).test(t) ? "format" : "standalone"][e.month()] : pn(this._months) ? this._months : this._months.standalone;
}
function Pre(e, t) {
  return e ? pn(this._monthsShort) ? this._monthsShort[e.month()] : this._monthsShort[jB.test(t) ? "format" : "standalone"][e.month()] : pn(this._monthsShort) ? this._monthsShort : this._monthsShort.standalone;
}
function kre(e, t, r) {
  var n, o, i, a = e.toLocaleLowerCase();
  if (!this._monthsParse)
    for (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = [], n = 0; n < 12; ++n)
      i = Un([2e3, n]), this._shortMonthsParse[n] = this.monthsShort(
        i,
        ""
      ).toLocaleLowerCase(), this._longMonthsParse[n] = this.months(i, "").toLocaleLowerCase();
  return r ? t === "MMM" ? (o = jt.call(this._shortMonthsParse, a), o !== -1 ? o : null) : (o = jt.call(this._longMonthsParse, a), o !== -1 ? o : null) : t === "MMM" ? (o = jt.call(this._shortMonthsParse, a), o !== -1 ? o : (o = jt.call(this._longMonthsParse, a), o !== -1 ? o : null)) : (o = jt.call(this._longMonthsParse, a), o !== -1 ? o : (o = jt.call(this._shortMonthsParse, a), o !== -1 ? o : null));
}
function $re(e, t, r) {
  var n, o, i;
  if (this._monthsParseExact)
    return kre.call(this, e, t, r);
  for (this._monthsParse || (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = []), n = 0; n < 12; n++) {
    if (o = Un([2e3, n]), r && !this._longMonthsParse[n] && (this._longMonthsParse[n] = new RegExp(
      "^" + this.months(o, "").replace(".", "") + "$",
      "i"
    ), this._shortMonthsParse[n] = new RegExp(
      "^" + this.monthsShort(o, "").replace(".", "") + "$",
      "i"
    )), !r && !this._monthsParse[n] && (i = "^" + this.months(o, "") + "|^" + this.monthsShort(o, ""), this._monthsParse[n] = new RegExp(i.replace(".", ""), "i")), r && t === "MMMM" && this._longMonthsParse[n].test(e))
      return n;
    if (r && t === "MMM" && this._shortMonthsParse[n].test(e))
      return n;
    if (!r && this._monthsParse[n].test(e))
      return n;
  }
}
function FB(e, t) {
  var r;
  if (!e.isValid())
    return e;
  if (typeof t == "string") {
    if (/^\d+$/.test(t))
      t = Ze(t);
    else if (t = e.localeData().monthsParse(t), !jo(t))
      return e;
  }
  return r = Math.min(e.date(), _g(e.year(), t)), e._d["set" + (e._isUTC ? "UTC" : "") + "Month"](t, r), e;
}
function BB(e) {
  return e != null ? (FB(this, e), ne.updateOffset(this, !0), this) : Hp(this, "Month");
}
function Are() {
  return _g(this.year(), this.month());
}
function Ire(e) {
  return this._monthsParseExact ? (it(this, "_monthsRegex") || VB.call(this), e ? this._monthsShortStrictRegex : this._monthsShortRegex) : (it(this, "_monthsShortRegex") || (this._monthsShortRegex = Rre), this._monthsShortStrictRegex && e ? this._monthsShortStrictRegex : this._monthsShortRegex);
}
function Mre(e) {
  return this._monthsParseExact ? (it(this, "_monthsRegex") || VB.call(this), e ? this._monthsStrictRegex : this._monthsRegex) : (it(this, "_monthsRegex") || (this._monthsRegex = Ere), this._monthsStrictRegex && e ? this._monthsStrictRegex : this._monthsRegex);
}
function VB() {
  function e(a, l) {
    return l.length - a.length;
  }
  var t = [], r = [], n = [], o, i;
  for (o = 0; o < 12; o++)
    i = Un([2e3, o]), t.push(this.monthsShort(i, "")), r.push(this.months(i, "")), n.push(this.months(i, "")), n.push(this.monthsShort(i, ""));
  for (t.sort(e), r.sort(e), n.sort(e), o = 0; o < 12; o++)
    t[o] = jr(t[o]), r[o] = jr(r[o]);
  for (o = 0; o < 24; o++)
    n[o] = jr(n[o]);
  this._monthsRegex = new RegExp("^(" + n.join("|") + ")", "i"), this._monthsShortRegex = this._monthsRegex, this._monthsStrictRegex = new RegExp(
    "^(" + r.join("|") + ")",
    "i"
  ), this._monthsShortStrictRegex = new RegExp(
    "^(" + t.join("|") + ")",
    "i"
  );
}
Pe("Y", 0, 0, function() {
  var e = this.year();
  return e <= 9999 ? Ln(e, 4) : "+" + e;
});
Pe(0, ["YY", 2], 0, function() {
  return this.year() % 100;
});
Pe(0, ["YYYY", 4], 0, "year");
Pe(0, ["YYYYY", 5], 0, "year");
Pe(0, ["YYYYYY", 6, !0], 0, "year");
ur("year", "y");
fr("year", 1);
Se("Y", Sg);
Se("YY", Rt, Wr);
Se("YYYY", JE, QE);
Se("YYYYY", wg, gg);
Se("YYYYYY", wg, gg);
mt(["YYYYY", "YYYYYY"], lr);
mt("YYYY", function(e, t) {
  t[lr] = e.length === 2 ? ne.parseTwoDigitYear(e) : Ze(e);
});
mt("YY", function(e, t) {
  t[lr] = ne.parseTwoDigitYear(e);
});
mt("Y", function(e, t) {
  t[lr] = parseInt(e, 10);
});
function pc(e) {
  return mg(e) ? 366 : 365;
}
ne.parseTwoDigitYear = function(e) {
  return Ze(e) + (Ze(e) > 68 ? 1900 : 2e3);
};
var WB = Sf("FullYear", !0);
function xre() {
  return mg(this.year());
}
function Dre(e, t, r, n, o, i, a) {
  var l;
  return e < 100 && e >= 0 ? (l = new Date(e + 400, t, r, n, o, i, a), isFinite(l.getFullYear()) && l.setFullYear(e)) : l = new Date(e, t, r, n, o, i, a), l;
}
function xc(e) {
  var t, r;
  return e < 100 && e >= 0 ? (r = Array.prototype.slice.call(arguments), r[0] = e + 400, t = new Date(Date.UTC.apply(null, r)), isFinite(t.getUTCFullYear()) && t.setUTCFullYear(e)) : t = new Date(Date.UTC.apply(null, arguments)), t;
}
function jp(e, t, r) {
  var n = 7 + t - r, o = (7 + xc(e, 0, n).getUTCDay() - t) % 7;
  return -o + n - 1;
}
function UB(e, t, r, n, o) {
  var i = (7 + r - n) % 7, a = jp(e, n, o), l = 1 + 7 * (t - 1) + i + a, s, u;
  return l <= 0 ? (s = e - 1, u = pc(s) + l) : l > pc(e) ? (s = e + 1, u = l - pc(e)) : (s = e, u = l), {
    year: s,
    dayOfYear: u
  };
}
function Dc(e, t, r) {
  var n = jp(e.year(), t, r), o = Math.floor((e.dayOfYear() - n - 1) / 7) + 1, i, a;
  return o < 1 ? (a = e.year() - 1, i = o + Do(a, t, r)) : o > Do(e.year(), t, r) ? (i = o - Do(e.year(), t, r), a = e.year() + 1) : (a = e.year(), i = o), {
    week: i,
    year: a
  };
}
function Do(e, t, r) {
  var n = jp(e, t, r), o = jp(e + 1, t, r);
  return (pc(e) - n + o) / 7;
}
Pe("w", ["ww", 2], "wo", "week");
Pe("W", ["WW", 2], "Wo", "isoWeek");
ur("week", "w");
ur("isoWeek", "W");
fr("week", 5);
fr("isoWeek", 5);
Se("w", Rt);
Se("ww", Rt, Wr);
Se("W", Rt);
Se("WW", Rt, Wr);
cv(
  ["w", "ww", "W", "WW"],
  function(e, t, r, n) {
    t[n.substr(0, 1)] = Ze(e);
  }
);
function Nre(e) {
  return Dc(e, this._week.dow, this._week.doy).week;
}
var Hre = {
  dow: 0,
  // Sunday is the first day of the week.
  doy: 6
  // The week that contains Jan 6th is the first week of the year.
};
function Lre() {
  return this._week.dow;
}
function jre() {
  return this._week.doy;
}
function Fre(e) {
  var t = this.localeData().week(this);
  return e == null ? t : this.add((e - t) * 7, "d");
}
function Bre(e) {
  var t = Dc(this, 1, 4).week;
  return e == null ? t : this.add((e - t) * 7, "d");
}
Pe("d", 0, "do", "day");
Pe("dd", 0, 0, function(e) {
  return this.localeData().weekdaysMin(this, e);
});
Pe("ddd", 0, 0, function(e) {
  return this.localeData().weekdaysShort(this, e);
});
Pe("dddd", 0, 0, function(e) {
  return this.localeData().weekdays(this, e);
});
Pe("e", 0, 0, "weekday");
Pe("E", 0, 0, "isoWeekday");
ur("day", "d");
ur("weekday", "e");
ur("isoWeekday", "E");
fr("day", 11);
fr("weekday", 11);
fr("isoWeekday", 11);
Se("d", Rt);
Se("e", Rt);
Se("E", Rt);
Se("dd", function(e, t) {
  return t.weekdaysMinRegex(e);
});
Se("ddd", function(e, t) {
  return t.weekdaysShortRegex(e);
});
Se("dddd", function(e, t) {
  return t.weekdaysRegex(e);
});
cv(["dd", "ddd", "dddd"], function(e, t, r, n) {
  var o = r._locale.weekdaysParse(e, n, r._strict);
  o != null ? t.d = o : Ve(r).invalidWeekday = e;
});
cv(["d", "e", "E"], function(e, t, r, n) {
  t[n] = Ze(e);
});
function Vre(e, t) {
  return typeof e != "string" ? e : isNaN(e) ? (e = t.weekdaysParse(e), typeof e == "number" ? e : null) : parseInt(e, 10);
}
function Wre(e, t) {
  return typeof e == "string" ? t.weekdaysParse(e) % 7 || 7 : isNaN(e) ? null : e;
}
function eT(e, t) {
  return e.slice(t, 7).concat(e.slice(0, t));
}
var Ure = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), zB = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), zre = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), Yre = fv, Gre = fv, Kre = fv;
function qre(e, t) {
  var r = pn(this._weekdays) ? this._weekdays : this._weekdays[e && e !== !0 && this._weekdays.isFormat.test(t) ? "format" : "standalone"];
  return e === !0 ? eT(r, this._week.dow) : e ? r[e.day()] : r;
}
function Xre(e) {
  return e === !0 ? eT(this._weekdaysShort, this._week.dow) : e ? this._weekdaysShort[e.day()] : this._weekdaysShort;
}
function Zre(e) {
  return e === !0 ? eT(this._weekdaysMin, this._week.dow) : e ? this._weekdaysMin[e.day()] : this._weekdaysMin;
}
function Qre(e, t, r) {
  var n, o, i, a = e.toLocaleLowerCase();
  if (!this._weekdaysParse)
    for (this._weekdaysParse = [], this._shortWeekdaysParse = [], this._minWeekdaysParse = [], n = 0; n < 7; ++n)
      i = Un([2e3, 1]).day(n), this._minWeekdaysParse[n] = this.weekdaysMin(
        i,
        ""
      ).toLocaleLowerCase(), this._shortWeekdaysParse[n] = this.weekdaysShort(
        i,
        ""
      ).toLocaleLowerCase(), this._weekdaysParse[n] = this.weekdays(i, "").toLocaleLowerCase();
  return r ? t === "dddd" ? (o = jt.call(this._weekdaysParse, a), o !== -1 ? o : null) : t === "ddd" ? (o = jt.call(this._shortWeekdaysParse, a), o !== -1 ? o : null) : (o = jt.call(this._minWeekdaysParse, a), o !== -1 ? o : null) : t === "dddd" ? (o = jt.call(this._weekdaysParse, a), o !== -1 || (o = jt.call(this._shortWeekdaysParse, a), o !== -1) ? o : (o = jt.call(this._minWeekdaysParse, a), o !== -1 ? o : null)) : t === "ddd" ? (o = jt.call(this._shortWeekdaysParse, a), o !== -1 || (o = jt.call(this._weekdaysParse, a), o !== -1) ? o : (o = jt.call(this._minWeekdaysParse, a), o !== -1 ? o : null)) : (o = jt.call(this._minWeekdaysParse, a), o !== -1 || (o = jt.call(this._weekdaysParse, a), o !== -1) ? o : (o = jt.call(this._shortWeekdaysParse, a), o !== -1 ? o : null));
}
function Jre(e, t, r) {
  var n, o, i;
  if (this._weekdaysParseExact)
    return Qre.call(this, e, t, r);
  for (this._weekdaysParse || (this._weekdaysParse = [], this._minWeekdaysParse = [], this._shortWeekdaysParse = [], this._fullWeekdaysParse = []), n = 0; n < 7; n++) {
    if (o = Un([2e3, 1]).day(n), r && !this._fullWeekdaysParse[n] && (this._fullWeekdaysParse[n] = new RegExp(
      "^" + this.weekdays(o, "").replace(".", "\\.?") + "$",
      "i"
    ), this._shortWeekdaysParse[n] = new RegExp(
      "^" + this.weekdaysShort(o, "").replace(".", "\\.?") + "$",
      "i"
    ), this._minWeekdaysParse[n] = new RegExp(
      "^" + this.weekdaysMin(o, "").replace(".", "\\.?") + "$",
      "i"
    )), this._weekdaysParse[n] || (i = "^" + this.weekdays(o, "") + "|^" + this.weekdaysShort(o, "") + "|^" + this.weekdaysMin(o, ""), this._weekdaysParse[n] = new RegExp(i.replace(".", ""), "i")), r && t === "dddd" && this._fullWeekdaysParse[n].test(e))
      return n;
    if (r && t === "ddd" && this._shortWeekdaysParse[n].test(e))
      return n;
    if (r && t === "dd" && this._minWeekdaysParse[n].test(e))
      return n;
    if (!r && this._weekdaysParse[n].test(e))
      return n;
  }
}
function ene(e) {
  if (!this.isValid())
    return e != null ? this : NaN;
  var t = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
  return e != null ? (e = Vre(e, this.localeData()), this.add(e - t, "d")) : t;
}
function tne(e) {
  if (!this.isValid())
    return e != null ? this : NaN;
  var t = (this.day() + 7 - this.localeData()._week.dow) % 7;
  return e == null ? t : this.add(e - t, "d");
}
function rne(e) {
  if (!this.isValid())
    return e != null ? this : NaN;
  if (e != null) {
    var t = Wre(e, this.localeData());
    return this.day(this.day() % 7 ? t : t - 7);
  } else
    return this.day() || 7;
}
function nne(e) {
  return this._weekdaysParseExact ? (it(this, "_weekdaysRegex") || tT.call(this), e ? this._weekdaysStrictRegex : this._weekdaysRegex) : (it(this, "_weekdaysRegex") || (this._weekdaysRegex = Yre), this._weekdaysStrictRegex && e ? this._weekdaysStrictRegex : this._weekdaysRegex);
}
function one(e) {
  return this._weekdaysParseExact ? (it(this, "_weekdaysRegex") || tT.call(this), e ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex) : (it(this, "_weekdaysShortRegex") || (this._weekdaysShortRegex = Gre), this._weekdaysShortStrictRegex && e ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex);
}
function ine(e) {
  return this._weekdaysParseExact ? (it(this, "_weekdaysRegex") || tT.call(this), e ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex) : (it(this, "_weekdaysMinRegex") || (this._weekdaysMinRegex = Kre), this._weekdaysMinStrictRegex && e ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex);
}
function tT() {
  function e(f, c) {
    return c.length - f.length;
  }
  var t = [], r = [], n = [], o = [], i, a, l, s, u;
  for (i = 0; i < 7; i++)
    a = Un([2e3, 1]).day(i), l = jr(this.weekdaysMin(a, "")), s = jr(this.weekdaysShort(a, "")), u = jr(this.weekdays(a, "")), t.push(l), r.push(s), n.push(u), o.push(l), o.push(s), o.push(u);
  t.sort(e), r.sort(e), n.sort(e), o.sort(e), this._weekdaysRegex = new RegExp("^(" + o.join("|") + ")", "i"), this._weekdaysShortRegex = this._weekdaysRegex, this._weekdaysMinRegex = this._weekdaysRegex, this._weekdaysStrictRegex = new RegExp(
    "^(" + n.join("|") + ")",
    "i"
  ), this._weekdaysShortStrictRegex = new RegExp(
    "^(" + r.join("|") + ")",
    "i"
  ), this._weekdaysMinStrictRegex = new RegExp(
    "^(" + t.join("|") + ")",
    "i"
  );
}
function rT() {
  return this.hours() % 12 || 12;
}
function ane() {
  return this.hours() || 24;
}
Pe("H", ["HH", 2], 0, "hour");
Pe("h", ["hh", 2], 0, rT);
Pe("k", ["kk", 2], 0, ane);
Pe("hmm", 0, 0, function() {
  return "" + rT.apply(this) + Ln(this.minutes(), 2);
});
Pe("hmmss", 0, 0, function() {
  return "" + rT.apply(this) + Ln(this.minutes(), 2) + Ln(this.seconds(), 2);
});
Pe("Hmm", 0, 0, function() {
  return "" + this.hours() + Ln(this.minutes(), 2);
});
Pe("Hmmss", 0, 0, function() {
  return "" + this.hours() + Ln(this.minutes(), 2) + Ln(this.seconds(), 2);
});
function YB(e, t) {
  Pe(e, 0, 0, function() {
    return this.localeData().meridiem(
      this.hours(),
      this.minutes(),
      t
    );
  });
}
YB("a", !0);
YB("A", !1);
ur("hour", "h");
fr("hour", 13);
function GB(e, t) {
  return t._meridiemParse;
}
Se("a", GB);
Se("A", GB);
Se("H", Rt);
Se("h", Rt);
Se("k", Rt);
Se("HH", Rt, Wr);
Se("hh", Rt, Wr);
Se("kk", Rt, Wr);
Se("hmm", NB);
Se("hmmss", HB);
Se("Hmm", NB);
Se("Hmmss", HB);
mt(["H", "HH"], qt);
mt(["k", "kk"], function(e, t, r) {
  var n = Ze(e);
  t[qt] = n === 24 ? 0 : n;
});
mt(["a", "A"], function(e, t, r) {
  r._isPm = r._locale.isPM(e), r._meridiem = e;
});
mt(["h", "hh"], function(e, t, r) {
  t[qt] = Ze(e), Ve(r).bigHour = !0;
});
mt("hmm", function(e, t, r) {
  var n = e.length - 2;
  t[qt] = Ze(e.substr(0, n)), t[dn] = Ze(e.substr(n)), Ve(r).bigHour = !0;
});
mt("hmmss", function(e, t, r) {
  var n = e.length - 4, o = e.length - 2;
  t[qt] = Ze(e.substr(0, n)), t[dn] = Ze(e.substr(n, 2)), t[uo] = Ze(e.substr(o)), Ve(r).bigHour = !0;
});
mt("Hmm", function(e, t, r) {
  var n = e.length - 2;
  t[qt] = Ze(e.substr(0, n)), t[dn] = Ze(e.substr(n));
});
mt("Hmmss", function(e, t, r) {
  var n = e.length - 4, o = e.length - 2;
  t[qt] = Ze(e.substr(0, n)), t[dn] = Ze(e.substr(n, 2)), t[uo] = Ze(e.substr(o));
});
function lne(e) {
  return (e + "").toLowerCase().charAt(0) === "p";
}
var sne = /[ap]\.?m?\.?/i, une = Sf("Hours", !0);
function fne(e, t, r) {
  return e > 11 ? r ? "pm" : "PM" : r ? "am" : "AM";
}
var KB = {
  calendar: Jte,
  longDateFormat: nre,
  invalidDate: ire,
  ordinal: lre,
  dayOfMonthOrdinalParse: sre,
  relativeTime: fre,
  months: Ore,
  monthsShort: LB,
  week: Hre,
  weekdays: Ure,
  weekdaysMin: zre,
  weekdaysShort: zB,
  meridiemParse: sne
}, Et = {}, Lf = {}, Nc;
function cne(e, t) {
  var r, n = Math.min(e.length, t.length);
  for (r = 0; r < n; r += 1)
    if (e[r] !== t[r])
      return r;
  return n;
}
function FA(e) {
  return e && e.toLowerCase().replace("_", "-");
}
function hne(e) {
  for (var t = 0, r, n, o, i; t < e.length; ) {
    for (i = FA(e[t]).split("-"), r = i.length, n = FA(e[t + 1]), n = n ? n.split("-") : null; r > 0; ) {
      if (o = Og(i.slice(0, r).join("-")), o)
        return o;
      if (n && n.length >= r && cne(i, n) >= r - 1)
        break;
      r--;
    }
    t++;
  }
  return Nc;
}
function dne(e) {
  return e.match("^[^/\\\\]*$") != null;
}
function Og(e) {
  var t = null, r;
  if (Et[e] === void 0 && typeof module < "u" && module && module.exports && dne(e))
    try {
      t = Nc._abbr, r = require, r("./locale/" + e), vi(t);
    } catch {
      Et[e] = null;
    }
  return Et[e];
}
function vi(e, t) {
  var r;
  return e && (_r(t) ? r = Uo(e) : r = nT(e, t), r ? Nc = r : typeof console < "u" && console.warn && console.warn(
    "Locale " + e + " not found. Did you forget to load it?"
  )), Nc._abbr;
}
function nT(e, t) {
  if (t !== null) {
    var r, n = KB;
    if (t.abbr = e, Et[e] != null)
      $B(
        "defineLocaleOverride",
        "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
      ), n = Et[e]._config;
    else if (t.parentLocale != null)
      if (Et[t.parentLocale] != null)
        n = Et[t.parentLocale]._config;
      else if (r = Og(t.parentLocale), r != null)
        n = r._config;
      else
        return Lf[t.parentLocale] || (Lf[t.parentLocale] = []), Lf[t.parentLocale].push({
          name: e,
          config: t
        }), null;
    return Et[e] = new qE(TC(n, t)), Lf[e] && Lf[e].forEach(function(o) {
      nT(o.name, o.config);
    }), vi(e), Et[e];
  } else
    return delete Et[e], null;
}
function vne(e, t) {
  if (t != null) {
    var r, n, o = KB;
    Et[e] != null && Et[e].parentLocale != null ? Et[e].set(TC(Et[e]._config, t)) : (n = Og(e), n != null && (o = n._config), t = TC(o, t), n == null && (t.abbr = e), r = new qE(t), r.parentLocale = Et[e], Et[e] = r), vi(e);
  } else
    Et[e] != null && (Et[e].parentLocale != null ? (Et[e] = Et[e].parentLocale, e === vi() && vi(e)) : Et[e] != null && delete Et[e]);
  return Et[e];
}
function Uo(e) {
  var t;
  if (e && e._locale && e._locale._abbr && (e = e._locale._abbr), !e)
    return Nc;
  if (!pn(e)) {
    if (t = Og(e), t)
      return t;
    e = [e];
  }
  return hne(e);
}
function yne() {
  return PC(Et);
}
function oT(e) {
  var t, r = e._a;
  return r && Ve(e).overflow === -2 && (t = r[so] < 0 || r[so] > 11 ? so : r[xn] < 1 || r[xn] > _g(r[lr], r[so]) ? xn : r[qt] < 0 || r[qt] > 24 || r[qt] === 24 && (r[dn] !== 0 || r[uo] !== 0 || r[ta] !== 0) ? qt : r[dn] < 0 || r[dn] > 59 ? dn : r[uo] < 0 || r[uo] > 59 ? uo : r[ta] < 0 || r[ta] > 999 ? ta : -1, Ve(e)._overflowDayOfYear && (t < lr || t > xn) && (t = xn), Ve(e)._overflowWeeks && t === -1 && (t = Sre), Ve(e)._overflowWeekday && t === -1 && (t = Cre), Ve(e).overflow = t), e;
}
var pne = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, mne = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, gne = /Z|[+-]\d\d(?::?\d\d)?/, Yv = [
  ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
  ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
  ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
  ["GGGG-[W]WW", /\d{4}-W\d\d/, !1],
  ["YYYY-DDD", /\d{4}-\d{3}/],
  ["YYYY-MM", /\d{4}-\d\d/, !1],
  ["YYYYYYMMDD", /[+-]\d{10}/],
  ["YYYYMMDD", /\d{8}/],
  ["GGGG[W]WWE", /\d{4}W\d{3}/],
  ["GGGG[W]WW", /\d{4}W\d{2}/, !1],
  ["YYYYDDD", /\d{7}/],
  ["YYYYMM", /\d{6}/, !1],
  ["YYYY", /\d{4}/, !1]
], pw = [
  ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
  ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
  ["HH:mm:ss", /\d\d:\d\d:\d\d/],
  ["HH:mm", /\d\d:\d\d/],
  ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
  ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
  ["HHmmss", /\d\d\d\d\d\d/],
  ["HHmm", /\d\d\d\d/],
  ["HH", /\d\d/]
], bne = /^\/?Date\((-?\d+)/i, wne = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, Sne = {
  UT: 0,
  GMT: 0,
  EDT: -4 * 60,
  EST: -5 * 60,
  CDT: -5 * 60,
  CST: -6 * 60,
  MDT: -6 * 60,
  MST: -7 * 60,
  PDT: -7 * 60,
  PST: -8 * 60
};
function qB(e) {
  var t, r, n = e._i, o = pne.exec(n) || mne.exec(n), i, a, l, s, u = Yv.length, f = pw.length;
  if (o) {
    for (Ve(e).iso = !0, t = 0, r = u; t < r; t++)
      if (Yv[t][1].exec(o[1])) {
        a = Yv[t][0], i = Yv[t][2] !== !1;
        break;
      }
    if (a == null) {
      e._isValid = !1;
      return;
    }
    if (o[3]) {
      for (t = 0, r = f; t < r; t++)
        if (pw[t][1].exec(o[3])) {
          l = (o[2] || " ") + pw[t][0];
          break;
        }
      if (l == null) {
        e._isValid = !1;
        return;
      }
    }
    if (!i && l != null) {
      e._isValid = !1;
      return;
    }
    if (o[4])
      if (gne.exec(o[4]))
        s = "Z";
      else {
        e._isValid = !1;
        return;
      }
    e._f = a + (l || "") + (s || ""), aT(e);
  } else
    e._isValid = !1;
}
function Cne(e, t, r, n, o, i) {
  var a = [
    _ne(e),
    LB.indexOf(t),
    parseInt(r, 10),
    parseInt(n, 10),
    parseInt(o, 10)
  ];
  return i && a.push(parseInt(i, 10)), a;
}
function _ne(e) {
  var t = parseInt(e, 10);
  return t <= 49 ? 2e3 + t : t <= 999 ? 1900 + t : t;
}
function One(e) {
  return e.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
}
function Rne(e, t, r) {
  if (e) {
    var n = zB.indexOf(e), o = new Date(
      t[0],
      t[1],
      t[2]
    ).getDay();
    if (n !== o)
      return Ve(r).weekdayMismatch = !0, r._isValid = !1, !1;
  }
  return !0;
}
function Ene(e, t, r) {
  if (e)
    return Sne[e];
  if (t)
    return 0;
  var n = parseInt(r, 10), o = n % 100, i = (n - o) / 100;
  return i * 60 + o;
}
function XB(e) {
  var t = wne.exec(One(e._i)), r;
  if (t) {
    if (r = Cne(
      t[4],
      t[3],
      t[2],
      t[5],
      t[6],
      t[7]
    ), !Rne(t[1], r, e))
      return;
    e._a = r, e._tzm = Ene(t[8], t[9], t[10]), e._d = xc.apply(null, e._a), e._d.setUTCMinutes(e._d.getUTCMinutes() - e._tzm), Ve(e).rfc2822 = !0;
  } else
    e._isValid = !1;
}
function Tne(e) {
  var t = bne.exec(e._i);
  if (t !== null) {
    e._d = /* @__PURE__ */ new Date(+t[1]);
    return;
  }
  if (qB(e), e._isValid === !1)
    delete e._isValid;
  else
    return;
  if (XB(e), e._isValid === !1)
    delete e._isValid;
  else
    return;
  e._strict ? e._isValid = !1 : ne.createFromInputFallback(e);
}
ne.createFromInputFallback = tn(
  "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
  function(e) {
    e._d = /* @__PURE__ */ new Date(e._i + (e._useUTC ? " UTC" : ""));
  }
);
function Hl(e, t, r) {
  return e ?? t ?? r;
}
function Pne(e) {
  var t = new Date(ne.now());
  return e._useUTC ? [
    t.getUTCFullYear(),
    t.getUTCMonth(),
    t.getUTCDate()
  ] : [t.getFullYear(), t.getMonth(), t.getDate()];
}
function iT(e) {
  var t, r, n = [], o, i, a;
  if (!e._d) {
    for (o = Pne(e), e._w && e._a[xn] == null && e._a[so] == null && kne(e), e._dayOfYear != null && (a = Hl(e._a[lr], o[lr]), (e._dayOfYear > pc(a) || e._dayOfYear === 0) && (Ve(e)._overflowDayOfYear = !0), r = xc(a, 0, e._dayOfYear), e._a[so] = r.getUTCMonth(), e._a[xn] = r.getUTCDate()), t = 0; t < 3 && e._a[t] == null; ++t)
      e._a[t] = n[t] = o[t];
    for (; t < 7; t++)
      e._a[t] = n[t] = e._a[t] == null ? t === 2 ? 1 : 0 : e._a[t];
    e._a[qt] === 24 && e._a[dn] === 0 && e._a[uo] === 0 && e._a[ta] === 0 && (e._nextDay = !0, e._a[qt] = 0), e._d = (e._useUTC ? xc : Dre).apply(
      null,
      n
    ), i = e._useUTC ? e._d.getUTCDay() : e._d.getDay(), e._tzm != null && e._d.setUTCMinutes(e._d.getUTCMinutes() - e._tzm), e._nextDay && (e._a[qt] = 24), e._w && typeof e._w.d < "u" && e._w.d !== i && (Ve(e).weekdayMismatch = !0);
  }
}
function kne(e) {
  var t, r, n, o, i, a, l, s, u;
  t = e._w, t.GG != null || t.W != null || t.E != null ? (i = 1, a = 4, r = Hl(
    t.GG,
    e._a[lr],
    Dc(_t(), 1, 4).year
  ), n = Hl(t.W, 1), o = Hl(t.E, 1), (o < 1 || o > 7) && (s = !0)) : (i = e._locale._week.dow, a = e._locale._week.doy, u = Dc(_t(), i, a), r = Hl(t.gg, e._a[lr], u.year), n = Hl(t.w, u.week), t.d != null ? (o = t.d, (o < 0 || o > 6) && (s = !0)) : t.e != null ? (o = t.e + i, (t.e < 0 || t.e > 6) && (s = !0)) : o = i), n < 1 || n > Do(r, i, a) ? Ve(e)._overflowWeeks = !0 : s != null ? Ve(e)._overflowWeekday = !0 : (l = UB(r, n, o, i, a), e._a[lr] = l.year, e._dayOfYear = l.dayOfYear);
}
ne.ISO_8601 = function() {
};
ne.RFC_2822 = function() {
};
function aT(e) {
  if (e._f === ne.ISO_8601) {
    qB(e);
    return;
  }
  if (e._f === ne.RFC_2822) {
    XB(e);
    return;
  }
  e._a = [], Ve(e).empty = !0;
  var t = "" + e._i, r, n, o, i, a, l = t.length, s = 0, u, f;
  for (o = AB(e._f, e._locale).match(XE) || [], f = o.length, r = 0; r < f; r++)
    i = o[r], n = (t.match(gre(i, e)) || [])[0], n && (a = t.substr(0, t.indexOf(n)), a.length > 0 && Ve(e).unusedInput.push(a), t = t.slice(
      t.indexOf(n) + n.length
    ), s += n.length), Gl[i] ? (n ? Ve(e).empty = !1 : Ve(e).unusedTokens.push(i), wre(i, n, e)) : e._strict && !n && Ve(e).unusedTokens.push(i);
  Ve(e).charsLeftOver = l - s, t.length > 0 && Ve(e).unusedInput.push(t), e._a[qt] <= 12 && Ve(e).bigHour === !0 && e._a[qt] > 0 && (Ve(e).bigHour = void 0), Ve(e).parsedDateParts = e._a.slice(0), Ve(e).meridiem = e._meridiem, e._a[qt] = $ne(
    e._locale,
    e._a[qt],
    e._meridiem
  ), u = Ve(e).era, u !== null && (e._a[lr] = e._locale.erasConvertYear(u, e._a[lr])), iT(e), oT(e);
}
function $ne(e, t, r) {
  var n;
  return r == null ? t : e.meridiemHour != null ? e.meridiemHour(t, r) : (e.isPM != null && (n = e.isPM(r), n && t < 12 && (t += 12), !n && t === 12 && (t = 0)), t);
}
function Ane(e) {
  var t, r, n, o, i, a, l = !1, s = e._f.length;
  if (s === 0) {
    Ve(e).invalidFormat = !0, e._d = /* @__PURE__ */ new Date(NaN);
    return;
  }
  for (o = 0; o < s; o++)
    i = 0, a = !1, t = KE({}, e), e._useUTC != null && (t._useUTC = e._useUTC), t._f = e._f[o], aT(t), GE(t) && (a = !0), i += Ve(t).charsLeftOver, i += Ve(t).unusedTokens.length * 10, Ve(t).score = i, l ? i < n && (n = i, r = t) : (n == null || i < n || a) && (n = i, r = t, a && (l = !0));
  ui(e, r || t);
}
function Ine(e) {
  if (!e._d) {
    var t = ZE(e._i), r = t.day === void 0 ? t.date : t.day;
    e._a = PB(
      [t.year, t.month, r, t.hour, t.minute, t.second, t.millisecond],
      function(n) {
        return n && parseInt(n, 10);
      }
    ), iT(e);
  }
}
function Mne(e) {
  var t = new uv(oT(ZB(e)));
  return t._nextDay && (t.add(1, "d"), t._nextDay = void 0), t;
}
function ZB(e) {
  var t = e._i, r = e._f;
  return e._locale = e._locale || Uo(e._l), t === null || r === void 0 && t === "" ? pg({ nullInput: !0 }) : (typeof t == "string" && (e._i = t = e._locale.preparse(t)), mn(t) ? new uv(oT(t)) : (sv(t) ? e._d = t : pn(r) ? Ane(e) : r ? aT(e) : xne(e), GE(e) || (e._d = null), e));
}
function xne(e) {
  var t = e._i;
  _r(t) ? e._d = new Date(ne.now()) : sv(t) ? e._d = new Date(t.valueOf()) : typeof t == "string" ? Tne(e) : pn(t) ? (e._a = PB(t.slice(0), function(r) {
    return parseInt(r, 10);
  }), iT(e)) : $a(t) ? Ine(e) : jo(t) ? e._d = new Date(t) : ne.createFromInputFallback(e);
}
function QB(e, t, r, n, o) {
  var i = {};
  return (t === !0 || t === !1) && (n = t, t = void 0), (r === !0 || r === !1) && (n = r, r = void 0), ($a(e) && YE(e) || pn(e) && e.length === 0) && (e = void 0), i._isAMomentObject = !0, i._useUTC = i._isUTC = o, i._l = r, i._i = e, i._f = t, i._strict = n, Mne(i);
}
function _t(e, t, r, n) {
  return QB(e, t, r, n, !1);
}
var Dne = tn(
  "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
  function() {
    var e = _t.apply(null, arguments);
    return this.isValid() && e.isValid() ? e < this ? this : e : pg();
  }
), Nne = tn(
  "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
  function() {
    var e = _t.apply(null, arguments);
    return this.isValid() && e.isValid() ? e > this ? this : e : pg();
  }
);
function JB(e, t) {
  var r, n;
  if (t.length === 1 && pn(t[0]) && (t = t[0]), !t.length)
    return _t();
  for (r = t[0], n = 1; n < t.length; ++n)
    (!t[n].isValid() || t[n][e](r)) && (r = t[n]);
  return r;
}
function Hne() {
  var e = [].slice.call(arguments, 0);
  return JB("isBefore", e);
}
function Lne() {
  var e = [].slice.call(arguments, 0);
  return JB("isAfter", e);
}
var jne = function() {
  return Date.now ? Date.now() : +/* @__PURE__ */ new Date();
}, jf = [
  "year",
  "quarter",
  "month",
  "week",
  "day",
  "hour",
  "minute",
  "second",
  "millisecond"
];
function Fne(e) {
  var t, r = !1, n, o = jf.length;
  for (t in e)
    if (it(e, t) && !(jt.call(jf, t) !== -1 && (e[t] == null || !isNaN(e[t]))))
      return !1;
  for (n = 0; n < o; ++n)
    if (e[jf[n]]) {
      if (r)
        return !1;
      parseFloat(e[jf[n]]) !== Ze(e[jf[n]]) && (r = !0);
    }
  return !0;
}
function Bne() {
  return this._isValid;
}
function Vne() {
  return bn(NaN);
}
function Rg(e) {
  var t = ZE(e), r = t.year || 0, n = t.quarter || 0, o = t.month || 0, i = t.week || t.isoWeek || 0, a = t.day || 0, l = t.hour || 0, s = t.minute || 0, u = t.second || 0, f = t.millisecond || 0;
  this._isValid = Fne(t), this._milliseconds = +f + u * 1e3 + // 1000
  s * 6e4 + // 1000 * 60
  l * 1e3 * 60 * 60, this._days = +a + i * 7, this._months = +o + n * 3 + r * 12, this._data = {}, this._locale = Uo(), this._bubble();
}
function Zy(e) {
  return e instanceof Rg;
}
function $C(e) {
  return e < 0 ? Math.round(-1 * e) * -1 : Math.round(e);
}
function Wne(e, t, r) {
  var n = Math.min(e.length, t.length), o = Math.abs(e.length - t.length), i = 0, a;
  for (a = 0; a < n; a++)
    (r && e[a] !== t[a] || !r && Ze(e[a]) !== Ze(t[a])) && i++;
  return i + o;
}
function eV(e, t) {
  Pe(e, 0, 0, function() {
    var r = this.utcOffset(), n = "+";
    return r < 0 && (r = -r, n = "-"), n + Ln(~~(r / 60), 2) + t + Ln(~~r % 60, 2);
  });
}
eV("Z", ":");
eV("ZZ", "");
Se("Z", Cg);
Se("ZZ", Cg);
mt(["Z", "ZZ"], function(e, t, r) {
  r._useUTC = !0, r._tzm = lT(Cg, e);
});
var Une = /([\+\-]|\d\d)/gi;
function lT(e, t) {
  var r = (t || "").match(e), n, o, i;
  return r === null ? null : (n = r[r.length - 1] || [], o = (n + "").match(Une) || ["-", 0, 0], i = +(o[1] * 60) + Ze(o[2]), i === 0 ? 0 : o[0] === "+" ? i : -i);
}
function sT(e, t) {
  var r, n;
  return t._isUTC ? (r = t.clone(), n = (mn(e) || sv(e) ? e.valueOf() : _t(e).valueOf()) - r.valueOf(), r._d.setTime(r._d.valueOf() + n), ne.updateOffset(r, !1), r) : _t(e).local();
}
function AC(e) {
  return -Math.round(e._d.getTimezoneOffset());
}
ne.updateOffset = function() {
};
function zne(e, t, r) {
  var n = this._offset || 0, o;
  if (!this.isValid())
    return e != null ? this : NaN;
  if (e != null) {
    if (typeof e == "string") {
      if (e = lT(Cg, e), e === null)
        return this;
    } else
      Math.abs(e) < 16 && !r && (e = e * 60);
    return !this._isUTC && t && (o = AC(this)), this._offset = e, this._isUTC = !0, o != null && this.add(o, "m"), n !== e && (!t || this._changeInProgress ? nV(
      this,
      bn(e - n, "m"),
      1,
      !1
    ) : this._changeInProgress || (this._changeInProgress = !0, ne.updateOffset(this, !0), this._changeInProgress = null)), this;
  } else
    return this._isUTC ? n : AC(this);
}
function Yne(e, t) {
  return e != null ? (typeof e != "string" && (e = -e), this.utcOffset(e, t), this) : -this.utcOffset();
}
function Gne(e) {
  return this.utcOffset(0, e);
}
function Kne(e) {
  return this._isUTC && (this.utcOffset(0, e), this._isUTC = !1, e && this.subtract(AC(this), "m")), this;
}
function qne() {
  if (this._tzm != null)
    this.utcOffset(this._tzm, !1, !0);
  else if (typeof this._i == "string") {
    var e = lT(pre, this._i);
    e != null ? this.utcOffset(e) : this.utcOffset(0, !0);
  }
  return this;
}
function Xne(e) {
  return this.isValid() ? (e = e ? _t(e).utcOffset() : 0, (this.utcOffset() - e) % 60 === 0) : !1;
}
function Zne() {
  return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
}
function Qne() {
  if (!_r(this._isDSTShifted))
    return this._isDSTShifted;
  var e = {}, t;
  return KE(e, this), e = ZB(e), e._a ? (t = e._isUTC ? Un(e._a) : _t(e._a), this._isDSTShifted = this.isValid() && Wne(e._a, t.toArray()) > 0) : this._isDSTShifted = !1, this._isDSTShifted;
}
function Jne() {
  return this.isValid() ? !this._isUTC : !1;
}
function eoe() {
  return this.isValid() ? this._isUTC : !1;
}
function tV() {
  return this.isValid() ? this._isUTC && this._offset === 0 : !1;
}
var toe = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, roe = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
function bn(e, t) {
  var r = e, n = null, o, i, a;
  return Zy(e) ? r = {
    ms: e._milliseconds,
    d: e._days,
    M: e._months
  } : jo(e) || !isNaN(+e) ? (r = {}, t ? r[t] = +e : r.milliseconds = +e) : (n = toe.exec(e)) ? (o = n[1] === "-" ? -1 : 1, r = {
    y: 0,
    d: Ze(n[xn]) * o,
    h: Ze(n[qt]) * o,
    m: Ze(n[dn]) * o,
    s: Ze(n[uo]) * o,
    ms: Ze($C(n[ta] * 1e3)) * o
    // the millisecond decimal point is included in the match
  }) : (n = roe.exec(e)) ? (o = n[1] === "-" ? -1 : 1, r = {
    y: Li(n[2], o),
    M: Li(n[3], o),
    w: Li(n[4], o),
    d: Li(n[5], o),
    h: Li(n[6], o),
    m: Li(n[7], o),
    s: Li(n[8], o)
  }) : r == null ? r = {} : typeof r == "object" && ("from" in r || "to" in r) && (a = noe(
    _t(r.from),
    _t(r.to)
  ), r = {}, r.ms = a.milliseconds, r.M = a.months), i = new Rg(r), Zy(e) && it(e, "_locale") && (i._locale = e._locale), Zy(e) && it(e, "_isValid") && (i._isValid = e._isValid), i;
}
bn.fn = Rg.prototype;
bn.invalid = Vne;
function Li(e, t) {
  var r = e && parseFloat(e.replace(",", "."));
  return (isNaN(r) ? 0 : r) * t;
}
function BA(e, t) {
  var r = {};
  return r.months = t.month() - e.month() + (t.year() - e.year()) * 12, e.clone().add(r.months, "M").isAfter(t) && --r.months, r.milliseconds = +t - +e.clone().add(r.months, "M"), r;
}
function noe(e, t) {
  var r;
  return e.isValid() && t.isValid() ? (t = sT(t, e), e.isBefore(t) ? r = BA(e, t) : (r = BA(t, e), r.milliseconds = -r.milliseconds, r.months = -r.months), r) : { milliseconds: 0, months: 0 };
}
function rV(e, t) {
  return function(r, n) {
    var o, i;
    return n !== null && !isNaN(+n) && ($B(
      t,
      "moment()." + t + "(period, number) is deprecated. Please use moment()." + t + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
    ), i = r, r = n, n = i), o = bn(r, n), nV(this, o, e), this;
  };
}
function nV(e, t, r, n) {
  var o = t._milliseconds, i = $C(t._days), a = $C(t._months);
  e.isValid() && (n = n ?? !0, a && FB(e, Hp(e, "Month") + a * r), i && MB(e, "Date", Hp(e, "Date") + i * r), o && e._d.setTime(e._d.valueOf() + o * r), n && ne.updateOffset(e, i || a));
}
var ooe = rV(1, "add"), ioe = rV(-1, "subtract");
function oV(e) {
  return typeof e == "string" || e instanceof String;
}
function aoe(e) {
  return mn(e) || sv(e) || oV(e) || jo(e) || soe(e) || loe(e) || e === null || e === void 0;
}
function loe(e) {
  var t = $a(e) && !YE(e), r = !1, n = [
    "years",
    "year",
    "y",
    "months",
    "month",
    "M",
    "days",
    "day",
    "d",
    "dates",
    "date",
    "D",
    "hours",
    "hour",
    "h",
    "minutes",
    "minute",
    "m",
    "seconds",
    "second",
    "s",
    "milliseconds",
    "millisecond",
    "ms"
  ], o, i, a = n.length;
  for (o = 0; o < a; o += 1)
    i = n[o], r = r || it(e, i);
  return t && r;
}
function soe(e) {
  var t = pn(e), r = !1;
  return t && (r = e.filter(function(n) {
    return !jo(n) && oV(e);
  }).length === 0), t && r;
}
function uoe(e) {
  var t = $a(e) && !YE(e), r = !1, n = [
    "sameDay",
    "nextDay",
    "lastDay",
    "nextWeek",
    "lastWeek",
    "sameElse"
  ], o, i;
  for (o = 0; o < n.length; o += 1)
    i = n[o], r = r || it(e, i);
  return t && r;
}
function foe(e, t) {
  var r = e.diff(t, "days", !0);
  return r < -6 ? "sameElse" : r < -1 ? "lastWeek" : r < 0 ? "lastDay" : r < 1 ? "sameDay" : r < 2 ? "nextDay" : r < 7 ? "nextWeek" : "sameElse";
}
function coe(e, t) {
  arguments.length === 1 && (arguments[0] ? aoe(arguments[0]) ? (e = arguments[0], t = void 0) : uoe(arguments[0]) && (t = arguments[0], e = void 0) : (e = void 0, t = void 0));
  var r = e || _t(), n = sT(r, this).startOf("day"), o = ne.calendarFormat(this, n) || "sameElse", i = t && (zn(t[o]) ? t[o].call(this, r) : t[o]);
  return this.format(
    i || this.localeData().calendar(o, this, _t(r))
  );
}
function hoe() {
  return new uv(this);
}
function doe(e, t) {
  var r = mn(e) ? e : _t(e);
  return this.isValid() && r.isValid() ? (t = rn(t) || "millisecond", t === "millisecond" ? this.valueOf() > r.valueOf() : r.valueOf() < this.clone().startOf(t).valueOf()) : !1;
}
function voe(e, t) {
  var r = mn(e) ? e : _t(e);
  return this.isValid() && r.isValid() ? (t = rn(t) || "millisecond", t === "millisecond" ? this.valueOf() < r.valueOf() : this.clone().endOf(t).valueOf() < r.valueOf()) : !1;
}
function yoe(e, t, r, n) {
  var o = mn(e) ? e : _t(e), i = mn(t) ? t : _t(t);
  return this.isValid() && o.isValid() && i.isValid() ? (n = n || "()", (n[0] === "(" ? this.isAfter(o, r) : !this.isBefore(o, r)) && (n[1] === ")" ? this.isBefore(i, r) : !this.isAfter(i, r))) : !1;
}
function poe(e, t) {
  var r = mn(e) ? e : _t(e), n;
  return this.isValid() && r.isValid() ? (t = rn(t) || "millisecond", t === "millisecond" ? this.valueOf() === r.valueOf() : (n = r.valueOf(), this.clone().startOf(t).valueOf() <= n && n <= this.clone().endOf(t).valueOf())) : !1;
}
function moe(e, t) {
  return this.isSame(e, t) || this.isAfter(e, t);
}
function goe(e, t) {
  return this.isSame(e, t) || this.isBefore(e, t);
}
function boe(e, t, r) {
  var n, o, i;
  if (!this.isValid())
    return NaN;
  if (n = sT(e, this), !n.isValid())
    return NaN;
  switch (o = (n.utcOffset() - this.utcOffset()) * 6e4, t = rn(t), t) {
    case "year":
      i = Qy(this, n) / 12;
      break;
    case "month":
      i = Qy(this, n);
      break;
    case "quarter":
      i = Qy(this, n) / 3;
      break;
    case "second":
      i = (this - n) / 1e3;
      break;
    case "minute":
      i = (this - n) / 6e4;
      break;
    case "hour":
      i = (this - n) / 36e5;
      break;
    case "day":
      i = (this - n - o) / 864e5;
      break;
    case "week":
      i = (this - n - o) / 6048e5;
      break;
    default:
      i = this - n;
  }
  return r ? i : qr(i);
}
function Qy(e, t) {
  if (e.date() < t.date())
    return -Qy(t, e);
  var r = (t.year() - e.year()) * 12 + (t.month() - e.month()), n = e.clone().add(r, "months"), o, i;
  return t - n < 0 ? (o = e.clone().add(r - 1, "months"), i = (t - n) / (n - o)) : (o = e.clone().add(r + 1, "months"), i = (t - n) / (o - n)), -(r + i) || 0;
}
ne.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
ne.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
function woe() {
  return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
}
function Soe(e) {
  if (!this.isValid())
    return null;
  var t = e !== !0, r = t ? this.clone().utc() : this;
  return r.year() < 0 || r.year() > 9999 ? Xy(
    r,
    t ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
  ) : zn(Date.prototype.toISOString) ? t ? this.toDate().toISOString() : new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", Xy(r, "Z")) : Xy(
    r,
    t ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
  );
}
function Coe() {
  if (!this.isValid())
    return "moment.invalid(/* " + this._i + " */)";
  var e = "moment", t = "", r, n, o, i;
  return this.isLocal() || (e = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone", t = "Z"), r = "[" + e + '("]', n = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY", o = "-MM-DD[T]HH:mm:ss.SSS", i = t + '[")]', this.format(r + n + o + i);
}
function _oe(e) {
  e || (e = this.isUtc() ? ne.defaultFormatUtc : ne.defaultFormat);
  var t = Xy(this, e);
  return this.localeData().postformat(t);
}
function Ooe(e, t) {
  return this.isValid() && (mn(e) && e.isValid() || _t(e).isValid()) ? bn({ to: this, from: e }).locale(this.locale()).humanize(!t) : this.localeData().invalidDate();
}
function Roe(e) {
  return this.from(_t(), e);
}
function Eoe(e, t) {
  return this.isValid() && (mn(e) && e.isValid() || _t(e).isValid()) ? bn({ from: this, to: e }).locale(this.locale()).humanize(!t) : this.localeData().invalidDate();
}
function Toe(e) {
  return this.to(_t(), e);
}
function iV(e) {
  var t;
  return e === void 0 ? this._locale._abbr : (t = Uo(e), t != null && (this._locale = t), this);
}
var aV = tn(
  "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
  function(e) {
    return e === void 0 ? this.localeData() : this.locale(e);
  }
);
function lV() {
  return this._locale;
}
var Fp = 1e3, Kl = 60 * Fp, Bp = 60 * Kl, sV = (365 * 400 + 97) * 24 * Bp;
function ql(e, t) {
  return (e % t + t) % t;
}
function uV(e, t, r) {
  return e < 100 && e >= 0 ? new Date(e + 400, t, r) - sV : new Date(e, t, r).valueOf();
}
function fV(e, t, r) {
  return e < 100 && e >= 0 ? Date.UTC(e + 400, t, r) - sV : Date.UTC(e, t, r);
}
function Poe(e) {
  var t, r;
  if (e = rn(e), e === void 0 || e === "millisecond" || !this.isValid())
    return this;
  switch (r = this._isUTC ? fV : uV, e) {
    case "year":
      t = r(this.year(), 0, 1);
      break;
    case "quarter":
      t = r(
        this.year(),
        this.month() - this.month() % 3,
        1
      );
      break;
    case "month":
      t = r(this.year(), this.month(), 1);
      break;
    case "week":
      t = r(
        this.year(),
        this.month(),
        this.date() - this.weekday()
      );
      break;
    case "isoWeek":
      t = r(
        this.year(),
        this.month(),
        this.date() - (this.isoWeekday() - 1)
      );
      break;
    case "day":
    case "date":
      t = r(this.year(), this.month(), this.date());
      break;
    case "hour":
      t = this._d.valueOf(), t -= ql(
        t + (this._isUTC ? 0 : this.utcOffset() * Kl),
        Bp
      );
      break;
    case "minute":
      t = this._d.valueOf(), t -= ql(t, Kl);
      break;
    case "second":
      t = this._d.valueOf(), t -= ql(t, Fp);
      break;
  }
  return this._d.setTime(t), ne.updateOffset(this, !0), this;
}
function koe(e) {
  var t, r;
  if (e = rn(e), e === void 0 || e === "millisecond" || !this.isValid())
    return this;
  switch (r = this._isUTC ? fV : uV, e) {
    case "year":
      t = r(this.year() + 1, 0, 1) - 1;
      break;
    case "quarter":
      t = r(
        this.year(),
        this.month() - this.month() % 3 + 3,
        1
      ) - 1;
      break;
    case "month":
      t = r(this.year(), this.month() + 1, 1) - 1;
      break;
    case "week":
      t = r(
        this.year(),
        this.month(),
        this.date() - this.weekday() + 7
      ) - 1;
      break;
    case "isoWeek":
      t = r(
        this.year(),
        this.month(),
        this.date() - (this.isoWeekday() - 1) + 7
      ) - 1;
      break;
    case "day":
    case "date":
      t = r(this.year(), this.month(), this.date() + 1) - 1;
      break;
    case "hour":
      t = this._d.valueOf(), t += Bp - ql(
        t + (this._isUTC ? 0 : this.utcOffset() * Kl),
        Bp
      ) - 1;
      break;
    case "minute":
      t = this._d.valueOf(), t += Kl - ql(t, Kl) - 1;
      break;
    case "second":
      t = this._d.valueOf(), t += Fp - ql(t, Fp) - 1;
      break;
  }
  return this._d.setTime(t), ne.updateOffset(this, !0), this;
}
function $oe() {
  return this._d.valueOf() - (this._offset || 0) * 6e4;
}
function Aoe() {
  return Math.floor(this.valueOf() / 1e3);
}
function Ioe() {
  return new Date(this.valueOf());
}
function Moe() {
  var e = this;
  return [
    e.year(),
    e.month(),
    e.date(),
    e.hour(),
    e.minute(),
    e.second(),
    e.millisecond()
  ];
}
function xoe() {
  var e = this;
  return {
    years: e.year(),
    months: e.month(),
    date: e.date(),
    hours: e.hours(),
    minutes: e.minutes(),
    seconds: e.seconds(),
    milliseconds: e.milliseconds()
  };
}
function Doe() {
  return this.isValid() ? this.toISOString() : null;
}
function Noe() {
  return GE(this);
}
function Hoe() {
  return ui({}, Ve(this));
}
function Loe() {
  return Ve(this).overflow;
}
function joe() {
  return {
    input: this._i,
    format: this._f,
    locale: this._locale,
    isUTC: this._isUTC,
    strict: this._strict
  };
}
Pe("N", 0, 0, "eraAbbr");
Pe("NN", 0, 0, "eraAbbr");
Pe("NNN", 0, 0, "eraAbbr");
Pe("NNNN", 0, 0, "eraName");
Pe("NNNNN", 0, 0, "eraNarrow");
Pe("y", ["y", 1], "yo", "eraYear");
Pe("y", ["yy", 2], 0, "eraYear");
Pe("y", ["yyy", 3], 0, "eraYear");
Pe("y", ["yyyy", 4], 0, "eraYear");
Se("N", uT);
Se("NN", uT);
Se("NNN", uT);
Se("NNNN", Xoe);
Se("NNNNN", Zoe);
mt(
  ["N", "NN", "NNN", "NNNN", "NNNNN"],
  function(e, t, r, n) {
    var o = r._locale.erasParse(e, n, r._strict);
    o ? Ve(r).era = o : Ve(r).invalidEra = e;
  }
);
Se("y", Cf);
Se("yy", Cf);
Se("yyy", Cf);
Se("yyyy", Cf);
Se("yo", Qoe);
mt(["y", "yy", "yyy", "yyyy"], lr);
mt(["yo"], function(e, t, r, n) {
  var o;
  r._locale._eraYearOrdinalRegex && (o = e.match(r._locale._eraYearOrdinalRegex)), r._locale.eraYearOrdinalParse ? t[lr] = r._locale.eraYearOrdinalParse(e, o) : t[lr] = parseInt(e, 10);
});
function Foe(e, t) {
  var r, n, o, i = this._eras || Uo("en")._eras;
  for (r = 0, n = i.length; r < n; ++r) {
    switch (typeof i[r].since) {
      case "string":
        o = ne(i[r].since).startOf("day"), i[r].since = o.valueOf();
        break;
    }
    switch (typeof i[r].until) {
      case "undefined":
        i[r].until = 1 / 0;
        break;
      case "string":
        o = ne(i[r].until).startOf("day").valueOf(), i[r].until = o.valueOf();
        break;
    }
  }
  return i;
}
function Boe(e, t, r) {
  var n, o, i = this.eras(), a, l, s;
  for (e = e.toUpperCase(), n = 0, o = i.length; n < o; ++n)
    if (a = i[n].name.toUpperCase(), l = i[n].abbr.toUpperCase(), s = i[n].narrow.toUpperCase(), r)
      switch (t) {
        case "N":
        case "NN":
        case "NNN":
          if (l === e)
            return i[n];
          break;
        case "NNNN":
          if (a === e)
            return i[n];
          break;
        case "NNNNN":
          if (s === e)
            return i[n];
          break;
      }
    else if ([a, l, s].indexOf(e) >= 0)
      return i[n];
}
function Voe(e, t) {
  var r = e.since <= e.until ? 1 : -1;
  return t === void 0 ? ne(e.since).year() : ne(e.since).year() + (t - e.offset) * r;
}
function Woe() {
  var e, t, r, n = this.localeData().eras();
  for (e = 0, t = n.length; e < t; ++e)
    if (r = this.clone().startOf("day").valueOf(), n[e].since <= r && r <= n[e].until || n[e].until <= r && r <= n[e].since)
      return n[e].name;
  return "";
}
function Uoe() {
  var e, t, r, n = this.localeData().eras();
  for (e = 0, t = n.length; e < t; ++e)
    if (r = this.clone().startOf("day").valueOf(), n[e].since <= r && r <= n[e].until || n[e].until <= r && r <= n[e].since)
      return n[e].narrow;
  return "";
}
function zoe() {
  var e, t, r, n = this.localeData().eras();
  for (e = 0, t = n.length; e < t; ++e)
    if (r = this.clone().startOf("day").valueOf(), n[e].since <= r && r <= n[e].until || n[e].until <= r && r <= n[e].since)
      return n[e].abbr;
  return "";
}
function Yoe() {
  var e, t, r, n, o = this.localeData().eras();
  for (e = 0, t = o.length; e < t; ++e)
    if (r = o[e].since <= o[e].until ? 1 : -1, n = this.clone().startOf("day").valueOf(), o[e].since <= n && n <= o[e].until || o[e].until <= n && n <= o[e].since)
      return (this.year() - ne(o[e].since).year()) * r + o[e].offset;
  return this.year();
}
function Goe(e) {
  return it(this, "_erasNameRegex") || fT.call(this), e ? this._erasNameRegex : this._erasRegex;
}
function Koe(e) {
  return it(this, "_erasAbbrRegex") || fT.call(this), e ? this._erasAbbrRegex : this._erasRegex;
}
function qoe(e) {
  return it(this, "_erasNarrowRegex") || fT.call(this), e ? this._erasNarrowRegex : this._erasRegex;
}
function uT(e, t) {
  return t.erasAbbrRegex(e);
}
function Xoe(e, t) {
  return t.erasNameRegex(e);
}
function Zoe(e, t) {
  return t.erasNarrowRegex(e);
}
function Qoe(e, t) {
  return t._eraYearOrdinalRegex || Cf;
}
function fT() {
  var e = [], t = [], r = [], n = [], o, i, a = this.eras();
  for (o = 0, i = a.length; o < i; ++o)
    t.push(jr(a[o].name)), e.push(jr(a[o].abbr)), r.push(jr(a[o].narrow)), n.push(jr(a[o].name)), n.push(jr(a[o].abbr)), n.push(jr(a[o].narrow));
  this._erasRegex = new RegExp("^(" + n.join("|") + ")", "i"), this._erasNameRegex = new RegExp("^(" + t.join("|") + ")", "i"), this._erasAbbrRegex = new RegExp("^(" + e.join("|") + ")", "i"), this._erasNarrowRegex = new RegExp(
    "^(" + r.join("|") + ")",
    "i"
  );
}
Pe(0, ["gg", 2], 0, function() {
  return this.weekYear() % 100;
});
Pe(0, ["GG", 2], 0, function() {
  return this.isoWeekYear() % 100;
});
function Eg(e, t) {
  Pe(0, [e, e.length], 0, t);
}
Eg("gggg", "weekYear");
Eg("ggggg", "weekYear");
Eg("GGGG", "isoWeekYear");
Eg("GGGGG", "isoWeekYear");
ur("weekYear", "gg");
ur("isoWeekYear", "GG");
fr("weekYear", 1);
fr("isoWeekYear", 1);
Se("G", Sg);
Se("g", Sg);
Se("GG", Rt, Wr);
Se("gg", Rt, Wr);
Se("GGGG", JE, QE);
Se("gggg", JE, QE);
Se("GGGGG", wg, gg);
Se("ggggg", wg, gg);
cv(
  ["gggg", "ggggg", "GGGG", "GGGGG"],
  function(e, t, r, n) {
    t[n.substr(0, 2)] = Ze(e);
  }
);
cv(["gg", "GG"], function(e, t, r, n) {
  t[n] = ne.parseTwoDigitYear(e);
});
function Joe(e) {
  return cV.call(
    this,
    e,
    this.week(),
    this.weekday(),
    this.localeData()._week.dow,
    this.localeData()._week.doy
  );
}
function eie(e) {
  return cV.call(
    this,
    e,
    this.isoWeek(),
    this.isoWeekday(),
    1,
    4
  );
}
function tie() {
  return Do(this.year(), 1, 4);
}
function rie() {
  return Do(this.isoWeekYear(), 1, 4);
}
function nie() {
  var e = this.localeData()._week;
  return Do(this.year(), e.dow, e.doy);
}
function oie() {
  var e = this.localeData()._week;
  return Do(this.weekYear(), e.dow, e.doy);
}
function cV(e, t, r, n, o) {
  var i;
  return e == null ? Dc(this, n, o).year : (i = Do(e, n, o), t > i && (t = i), iie.call(this, e, t, r, n, o));
}
function iie(e, t, r, n, o) {
  var i = UB(e, t, r, n, o), a = xc(i.year, 0, i.dayOfYear);
  return this.year(a.getUTCFullYear()), this.month(a.getUTCMonth()), this.date(a.getUTCDate()), this;
}
Pe("Q", 0, "Qo", "quarter");
ur("quarter", "Q");
fr("quarter", 7);
Se("Q", xB);
mt("Q", function(e, t) {
  t[so] = (Ze(e) - 1) * 3;
});
function aie(e) {
  return e == null ? Math.ceil((this.month() + 1) / 3) : this.month((e - 1) * 3 + this.month() % 3);
}
Pe("D", ["DD", 2], "Do", "date");
ur("date", "D");
fr("date", 9);
Se("D", Rt);
Se("DD", Rt, Wr);
Se("Do", function(e, t) {
  return e ? t._dayOfMonthOrdinalParse || t._ordinalParse : t._dayOfMonthOrdinalParseLenient;
});
mt(["D", "DD"], xn);
mt("Do", function(e, t) {
  t[xn] = Ze(e.match(Rt)[0]);
});
var hV = Sf("Date", !0);
Pe("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
ur("dayOfYear", "DDD");
fr("dayOfYear", 4);
Se("DDD", bg);
Se("DDDD", DB);
mt(["DDD", "DDDD"], function(e, t, r) {
  r._dayOfYear = Ze(e);
});
function lie(e) {
  var t = Math.round(
    (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
  ) + 1;
  return e == null ? t : this.add(e - t, "d");
}
Pe("m", ["mm", 2], 0, "minute");
ur("minute", "m");
fr("minute", 14);
Se("m", Rt);
Se("mm", Rt, Wr);
mt(["m", "mm"], dn);
var sie = Sf("Minutes", !1);
Pe("s", ["ss", 2], 0, "second");
ur("second", "s");
fr("second", 15);
Se("s", Rt);
Se("ss", Rt, Wr);
mt(["s", "ss"], uo);
var uie = Sf("Seconds", !1);
Pe("S", 0, 0, function() {
  return ~~(this.millisecond() / 100);
});
Pe(0, ["SS", 2], 0, function() {
  return ~~(this.millisecond() / 10);
});
Pe(0, ["SSS", 3], 0, "millisecond");
Pe(0, ["SSSS", 4], 0, function() {
  return this.millisecond() * 10;
});
Pe(0, ["SSSSS", 5], 0, function() {
  return this.millisecond() * 100;
});
Pe(0, ["SSSSSS", 6], 0, function() {
  return this.millisecond() * 1e3;
});
Pe(0, ["SSSSSSS", 7], 0, function() {
  return this.millisecond() * 1e4;
});
Pe(0, ["SSSSSSSS", 8], 0, function() {
  return this.millisecond() * 1e5;
});
Pe(0, ["SSSSSSSSS", 9], 0, function() {
  return this.millisecond() * 1e6;
});
ur("millisecond", "ms");
fr("millisecond", 16);
Se("S", bg, xB);
Se("SS", bg, Wr);
Se("SSS", bg, DB);
var fi, dV;
for (fi = "SSSS"; fi.length <= 9; fi += "S")
  Se(fi, Cf);
function fie(e, t) {
  t[ta] = Ze(("0." + e) * 1e3);
}
for (fi = "S"; fi.length <= 9; fi += "S")
  mt(fi, fie);
dV = Sf("Milliseconds", !1);
Pe("z", 0, 0, "zoneAbbr");
Pe("zz", 0, 0, "zoneName");
function cie() {
  return this._isUTC ? "UTC" : "";
}
function hie() {
  return this._isUTC ? "Coordinated Universal Time" : "";
}
var se = uv.prototype;
se.add = ooe;
se.calendar = coe;
se.clone = hoe;
se.diff = boe;
se.endOf = koe;
se.format = _oe;
se.from = Ooe;
se.fromNow = Roe;
se.to = Eoe;
se.toNow = Toe;
se.get = vre;
se.invalidAt = Loe;
se.isAfter = doe;
se.isBefore = voe;
se.isBetween = yoe;
se.isSame = poe;
se.isSameOrAfter = moe;
se.isSameOrBefore = goe;
se.isValid = Noe;
se.lang = aV;
se.locale = iV;
se.localeData = lV;
se.max = Nne;
se.min = Dne;
se.parsingFlags = Hoe;
se.set = yre;
se.startOf = Poe;
se.subtract = ioe;
se.toArray = Moe;
se.toObject = xoe;
se.toDate = Ioe;
se.toISOString = Soe;
se.inspect = Coe;
typeof Symbol < "u" && Symbol.for != null && (se[Symbol.for("nodejs.util.inspect.custom")] = function() {
  return "Moment<" + this.format() + ">";
});
se.toJSON = Doe;
se.toString = woe;
se.unix = Aoe;
se.valueOf = $oe;
se.creationData = joe;
se.eraName = Woe;
se.eraNarrow = Uoe;
se.eraAbbr = zoe;
se.eraYear = Yoe;
se.year = WB;
se.isLeapYear = xre;
se.weekYear = Joe;
se.isoWeekYear = eie;
se.quarter = se.quarters = aie;
se.month = BB;
se.daysInMonth = Are;
se.week = se.weeks = Fre;
se.isoWeek = se.isoWeeks = Bre;
se.weeksInYear = nie;
se.weeksInWeekYear = oie;
se.isoWeeksInYear = tie;
se.isoWeeksInISOWeekYear = rie;
se.date = hV;
se.day = se.days = ene;
se.weekday = tne;
se.isoWeekday = rne;
se.dayOfYear = lie;
se.hour = se.hours = une;
se.minute = se.minutes = sie;
se.second = se.seconds = uie;
se.millisecond = se.milliseconds = dV;
se.utcOffset = zne;
se.utc = Gne;
se.local = Kne;
se.parseZone = qne;
se.hasAlignedHourOffset = Xne;
se.isDST = Zne;
se.isLocal = Jne;
se.isUtcOffset = eoe;
se.isUtc = tV;
se.isUTC = tV;
se.zoneAbbr = cie;
se.zoneName = hie;
se.dates = tn(
  "dates accessor is deprecated. Use date instead.",
  hV
);
se.months = tn(
  "months accessor is deprecated. Use month instead",
  BB
);
se.years = tn(
  "years accessor is deprecated. Use year instead",
  WB
);
se.zone = tn(
  "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
  Yne
);
se.isDSTShifted = tn(
  "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
  Qne
);
function die(e) {
  return _t(e * 1e3);
}
function vie() {
  return _t.apply(null, arguments).parseZone();
}
function vV(e) {
  return e;
}
var at = qE.prototype;
at.calendar = ere;
at.longDateFormat = ore;
at.invalidDate = are;
at.ordinal = ure;
at.preparse = vV;
at.postformat = vV;
at.relativeTime = cre;
at.pastFuture = hre;
at.set = Qte;
at.eras = Foe;
at.erasParse = Boe;
at.erasConvertYear = Voe;
at.erasAbbrRegex = Koe;
at.erasNameRegex = Goe;
at.erasNarrowRegex = qoe;
at.months = Tre;
at.monthsShort = Pre;
at.monthsParse = $re;
at.monthsRegex = Mre;
at.monthsShortRegex = Ire;
at.week = Nre;
at.firstDayOfYear = jre;
at.firstDayOfWeek = Lre;
at.weekdays = qre;
at.weekdaysMin = Zre;
at.weekdaysShort = Xre;
at.weekdaysParse = Jre;
at.weekdaysRegex = nne;
at.weekdaysShortRegex = one;
at.weekdaysMinRegex = ine;
at.isPM = lne;
at.meridiem = fne;
function Vp(e, t, r, n) {
  var o = Uo(), i = Un().set(n, t);
  return o[r](i, e);
}
function yV(e, t, r) {
  if (jo(e) && (t = e, e = void 0), e = e || "", t != null)
    return Vp(e, t, r, "month");
  var n, o = [];
  for (n = 0; n < 12; n++)
    o[n] = Vp(e, n, r, "month");
  return o;
}
function cT(e, t, r, n) {
  typeof e == "boolean" ? (jo(t) && (r = t, t = void 0), t = t || "") : (t = e, r = t, e = !1, jo(t) && (r = t, t = void 0), t = t || "");
  var o = Uo(), i = e ? o._week.dow : 0, a, l = [];
  if (r != null)
    return Vp(t, (r + i) % 7, n, "day");
  for (a = 0; a < 7; a++)
    l[a] = Vp(t, (a + i) % 7, n, "day");
  return l;
}
function yie(e, t) {
  return yV(e, t, "months");
}
function pie(e, t) {
  return yV(e, t, "monthsShort");
}
function mie(e, t, r) {
  return cT(e, t, r, "weekdays");
}
function gie(e, t, r) {
  return cT(e, t, r, "weekdaysShort");
}
function bie(e, t, r) {
  return cT(e, t, r, "weekdaysMin");
}
vi("en", {
  eras: [
    {
      since: "0001-01-01",
      until: 1 / 0,
      offset: 1,
      name: "Anno Domini",
      narrow: "AD",
      abbr: "AD"
    },
    {
      since: "0000-12-31",
      until: -1 / 0,
      offset: 1,
      name: "Before Christ",
      narrow: "BC",
      abbr: "BC"
    }
  ],
  dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
  ordinal: function(e) {
    var t = e % 10, r = Ze(e % 100 / 10) === 1 ? "th" : t === 1 ? "st" : t === 2 ? "nd" : t === 3 ? "rd" : "th";
    return e + r;
  }
});
ne.lang = tn(
  "moment.lang is deprecated. Use moment.locale instead.",
  vi
);
ne.langData = tn(
  "moment.langData is deprecated. Use moment.localeData instead.",
  Uo
);
var Kn = Math.abs;
function wie() {
  var e = this._data;
  return this._milliseconds = Kn(this._milliseconds), this._days = Kn(this._days), this._months = Kn(this._months), e.milliseconds = Kn(e.milliseconds), e.seconds = Kn(e.seconds), e.minutes = Kn(e.minutes), e.hours = Kn(e.hours), e.months = Kn(e.months), e.years = Kn(e.years), this;
}
function pV(e, t, r, n) {
  var o = bn(t, r);
  return e._milliseconds += n * o._milliseconds, e._days += n * o._days, e._months += n * o._months, e._bubble();
}
function Sie(e, t) {
  return pV(this, e, t, 1);
}
function Cie(e, t) {
  return pV(this, e, t, -1);
}
function VA(e) {
  return e < 0 ? Math.floor(e) : Math.ceil(e);
}
function _ie() {
  var e = this._milliseconds, t = this._days, r = this._months, n = this._data, o, i, a, l, s;
  return e >= 0 && t >= 0 && r >= 0 || e <= 0 && t <= 0 && r <= 0 || (e += VA(IC(r) + t) * 864e5, t = 0, r = 0), n.milliseconds = e % 1e3, o = qr(e / 1e3), n.seconds = o % 60, i = qr(o / 60), n.minutes = i % 60, a = qr(i / 60), n.hours = a % 24, t += qr(a / 24), s = qr(mV(t)), r += s, t -= VA(IC(s)), l = qr(r / 12), r %= 12, n.days = t, n.months = r, n.years = l, this;
}
function mV(e) {
  return e * 4800 / 146097;
}
function IC(e) {
  return e * 146097 / 4800;
}
function Oie(e) {
  if (!this.isValid())
    return NaN;
  var t, r, n = this._milliseconds;
  if (e = rn(e), e === "month" || e === "quarter" || e === "year")
    switch (t = this._days + n / 864e5, r = this._months + mV(t), e) {
      case "month":
        return r;
      case "quarter":
        return r / 3;
      case "year":
        return r / 12;
    }
  else
    switch (t = this._days + Math.round(IC(this._months)), e) {
      case "week":
        return t / 7 + n / 6048e5;
      case "day":
        return t + n / 864e5;
      case "hour":
        return t * 24 + n / 36e5;
      case "minute":
        return t * 1440 + n / 6e4;
      case "second":
        return t * 86400 + n / 1e3;
      case "millisecond":
        return Math.floor(t * 864e5) + n;
      default:
        throw new Error("Unknown unit " + e);
    }
}
function Rie() {
  return this.isValid() ? this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + Ze(this._months / 12) * 31536e6 : NaN;
}
function zo(e) {
  return function() {
    return this.as(e);
  };
}
var Eie = zo("ms"), Tie = zo("s"), Pie = zo("m"), kie = zo("h"), $ie = zo("d"), Aie = zo("w"), Iie = zo("M"), Mie = zo("Q"), xie = zo("y");
function Die() {
  return bn(this);
}
function Nie(e) {
  return e = rn(e), this.isValid() ? this[e + "s"]() : NaN;
}
function tl(e) {
  return function() {
    return this.isValid() ? this._data[e] : NaN;
  };
}
var Hie = tl("milliseconds"), Lie = tl("seconds"), jie = tl("minutes"), Fie = tl("hours"), Bie = tl("days"), Vie = tl("months"), Wie = tl("years");
function Uie() {
  return qr(this.days() / 7);
}
var oo = Math.round, Ul = {
  ss: 44,
  // a few seconds to seconds
  s: 45,
  // seconds to minute
  m: 45,
  // minutes to hour
  h: 22,
  // hours to day
  d: 26,
  // days to month/week
  w: null,
  // weeks to month
  M: 11
  // months to year
};
function zie(e, t, r, n, o) {
  return o.relativeTime(t || 1, !!r, e, n);
}
function Yie(e, t, r, n) {
  var o = bn(e).abs(), i = oo(o.as("s")), a = oo(o.as("m")), l = oo(o.as("h")), s = oo(o.as("d")), u = oo(o.as("M")), f = oo(o.as("w")), c = oo(o.as("y")), h = i <= r.ss && ["s", i] || i < r.s && ["ss", i] || a <= 1 && ["m"] || a < r.m && ["mm", a] || l <= 1 && ["h"] || l < r.h && ["hh", l] || s <= 1 && ["d"] || s < r.d && ["dd", s];
  return r.w != null && (h = h || f <= 1 && ["w"] || f < r.w && ["ww", f]), h = h || u <= 1 && ["M"] || u < r.M && ["MM", u] || c <= 1 && ["y"] || ["yy", c], h[2] = t, h[3] = +e > 0, h[4] = n, zie.apply(null, h);
}
function Gie(e) {
  return e === void 0 ? oo : typeof e == "function" ? (oo = e, !0) : !1;
}
function Kie(e, t) {
  return Ul[e] === void 0 ? !1 : t === void 0 ? Ul[e] : (Ul[e] = t, e === "s" && (Ul.ss = t - 1), !0);
}
function qie(e, t) {
  if (!this.isValid())
    return this.localeData().invalidDate();
  var r = !1, n = Ul, o, i;
  return typeof e == "object" && (t = e, e = !1), typeof e == "boolean" && (r = e), typeof t == "object" && (n = Object.assign({}, Ul, t), t.s != null && t.ss == null && (n.ss = t.s - 1)), o = this.localeData(), i = Yie(this, !r, n, o), r && (i = o.pastFuture(+this, i)), o.postformat(i);
}
var mw = Math.abs;
function cl(e) {
  return (e > 0) - (e < 0) || +e;
}
function Tg() {
  if (!this.isValid())
    return this.localeData().invalidDate();
  var e = mw(this._milliseconds) / 1e3, t = mw(this._days), r = mw(this._months), n, o, i, a, l = this.asSeconds(), s, u, f, c;
  return l ? (n = qr(e / 60), o = qr(n / 60), e %= 60, n %= 60, i = qr(r / 12), r %= 12, a = e ? e.toFixed(3).replace(/\.?0+$/, "") : "", s = l < 0 ? "-" : "", u = cl(this._months) !== cl(l) ? "-" : "", f = cl(this._days) !== cl(l) ? "-" : "", c = cl(this._milliseconds) !== cl(l) ? "-" : "", s + "P" + (i ? u + i + "Y" : "") + (r ? u + r + "M" : "") + (t ? f + t + "D" : "") + (o || n || e ? "T" : "") + (o ? c + o + "H" : "") + (n ? c + n + "M" : "") + (e ? c + a + "S" : "")) : "P0D";
}
var et = Rg.prototype;
et.isValid = Bne;
et.abs = wie;
et.add = Sie;
et.subtract = Cie;
et.as = Oie;
et.asMilliseconds = Eie;
et.asSeconds = Tie;
et.asMinutes = Pie;
et.asHours = kie;
et.asDays = $ie;
et.asWeeks = Aie;
et.asMonths = Iie;
et.asQuarters = Mie;
et.asYears = xie;
et.valueOf = Rie;
et._bubble = _ie;
et.clone = Die;
et.get = Nie;
et.milliseconds = Hie;
et.seconds = Lie;
et.minutes = jie;
et.hours = Fie;
et.days = Bie;
et.weeks = Uie;
et.months = Vie;
et.years = Wie;
et.humanize = qie;
et.toISOString = Tg;
et.toString = Tg;
et.toJSON = Tg;
et.locale = iV;
et.localeData = lV;
et.toIsoString = tn(
  "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
  Tg
);
et.lang = aV;
Pe("X", 0, 0, "unix");
Pe("x", 0, 0, "valueOf");
Se("x", Sg);
Se("X", mre);
mt("X", function(e, t, r) {
  r._d = new Date(parseFloat(e) * 1e3);
});
mt("x", function(e, t, r) {
  r._d = new Date(Ze(e));
});
//! moment.js
ne.version = "2.29.4";
Xte(_t);
ne.fn = se;
ne.min = Hne;
ne.max = Lne;
ne.now = jne;
ne.utc = Un;
ne.unix = die;
ne.months = yie;
ne.isDate = sv;
ne.locale = vi;
ne.invalid = pg;
ne.duration = bn;
ne.isMoment = mn;
ne.weekdays = mie;
ne.parseZone = vie;
ne.localeData = Uo;
ne.isDuration = Zy;
ne.monthsShort = pie;
ne.weekdaysMin = bie;
ne.defineLocale = nT;
ne.updateLocale = vne;
ne.locales = yne;
ne.weekdaysShort = gie;
ne.normalizeUnits = rn;
ne.relativeTimeRounding = Gie;
ne.relativeTimeThreshold = Kie;
ne.calendarFormat = foe;
ne.prototype = se;
ne.HTML5_FMT = {
  DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
  // <input type="datetime-local" />
  DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
  // <input type="datetime-local" step="1" />
  DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
  // <input type="datetime-local" step="0.001" />
  DATE: "YYYY-MM-DD",
  // <input type="date" />
  TIME: "HH:mm",
  // <input type="time" />
  TIME_SECONDS: "HH:mm:ss",
  // <input type="time" step="1" />
  TIME_MS: "HH:mm:ss.SSS",
  // <input type="time" step="0.001" />
  WEEK: "GGGG-[W]WW",
  // <input type="week" />
  MONTH: "YYYY-MM"
  // <input type="month" />
};
const Xie = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: ne
}, Symbol.toStringTag, { value: "Module" }));
function ut(e) {
  for (var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), n = 1; n < t; n++)
    r[n - 1] = arguments[n];
  var o = sr(e, function(i, a, l) {
    var s = a.replace(/\r?\n\s*/g, ""), u = r[l] ? r[l] : "";
    return i + s + u;
  }, "");
  return o.trim();
}
var WA, UA, zA, YA, GA, KA;
function Xl(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } }));
}
function MC(e) {
  "@babel/helpers - typeof";
  return MC = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, MC(e);
}
function Ft(e) {
  var t;
  switch (MC(e)) {
    case "string":
    case "number":
      t = "".concat(e);
      break;
    case "object":
      t = e === null ? "" : e.toString();
      break;
    case "undefined":
      t = "";
      break;
    default:
      t = e.toString();
      break;
  }
  return t;
}
function be(e) {
  return typeof e < "u";
}
function gt(e) {
  return typeof e > "u";
}
function Xt(e) {
  return e === null || e === "" || gt(e);
}
function Zie(e) {
  return Object.prototype.toString.call(e) === "[object RegExp]";
}
var uc = "length", mc = function(t) {
  return parseInt(t, 16);
}, qA = function(t) {
  return parseInt(t, 10);
}, Wp = function(t, r, n) {
  return t.substr(r, n);
}, gc = function(t) {
  return t.codePointAt(0) - 65;
}, xC = function(t) {
  return "".concat(t).replace(/\-/g, "");
}, Qie = function(t) {
  return mc(Wp(xC(t), mc("12"), gc("F"))) / (mc(Wp(xC(t), gc("B"), ~~![][uc])) || 9);
}, Jie = function() {
  return typeof location < "u" && /^([a-z0-9\-]+\.)?\x68\x61\x6E\x64\x73\x6F\x6E\x74\x61\x62\x6C\x65\x2E\x63\x6F\x6D$/i.test(location.host);
}, XA = !1, ZA = {
  invalid: function() {
    return ut(WA || (WA = Xl([`
    The license key for Handsontable is invalid. 
    If you need any help, contact us at support@handsontable.com.`], [`
    The license key for Handsontable is invalid.\\x20
    If you need any help, contact us at support@handsontable.com.`])));
  },
  expired: function(t) {
    var r = t.keyValidityDate, n = t.hotVersion;
    return ut(UA || (UA = Xl([`
    The license key for Handsontable expired on `, `, and is not valid for the installed 
    version `, `. Renew your license key at handsontable.com or downgrade to a version released prior 
    to `, ". If you need any help, contact us at sales@handsontable.com."], [`
    The license key for Handsontable expired on `, `, and is not valid for the installed\\x20
    version `, `. Renew your license key at handsontable.com or downgrade to a version released prior\\x20
    to `, ". If you need any help, contact us at sales@handsontable.com."])), r, n, r);
  },
  missing: function() {
    return ut(zA || (zA = Xl([`
    The license key for Handsontable is missing. Use your purchased key to activate the product. 
    Alternatively, you can activate Handsontable to use for non-commercial purposes by 
    passing the key: 'non-commercial-and-evaluation'. If you need any help, contact 
    us at support@handsontable.com.`], [`
    The license key for Handsontable is missing. Use your purchased key to activate the product.\\x20
    Alternatively, you can activate Handsontable to use for non-commercial purposes by\\x20
    passing the key: 'non-commercial-and-evaluation'. If you need any help, contact\\x20
    us at support@handsontable.com.`])));
  },
  non_commercial: function() {
    return "";
  }
}, QA = {
  invalid: function() {
    return ut(YA || (YA = Xl([`
    The license key for Handsontable is invalid. 
    <a href="https://handsontable.com/docs/tutorial-license-key.html" target="_blank">Read more</a> on how to 
    install it properly or contact us at <a href="mailto:support@handsontable.com">support@handsontable.com</a>.`], [`
    The license key for Handsontable is invalid.\\x20
    <a href="https://handsontable.com/docs/tutorial-license-key.html" target="_blank">Read more</a> on how to\\x20
    install it properly or contact us at <a href="mailto:support@handsontable.com">support@handsontable.com</a>.`])));
  },
  expired: function(t) {
    var r = t.keyValidityDate, n = t.hotVersion;
    return ut(GA || (GA = Xl([`
    The license key for Handsontable expired on `, `, and is not valid for the installed 
    version `, `. <a href="https://handsontable.com/pricing" target="_blank">Renew</a> your 
    license key or downgrade to a version released prior to `, `. If you need any 
    help, contact us at <a href="mailto:sales@handsontable.com">sales@handsontable.com</a>.`], [`
    The license key for Handsontable expired on `, `, and is not valid for the installed\\x20
    version `, `. <a href="https://handsontable.com/pricing" target="_blank">Renew</a> your\\x20
    license key or downgrade to a version released prior to `, `. If you need any\\x20
    help, contact us at <a href="mailto:sales@handsontable.com">sales@handsontable.com</a>.`])), r, n, r);
  },
  missing: function() {
    return ut(KA || (KA = Xl([`
    The license key for Handsontable is missing. Use your purchased key to activate the product. 
    Alternatively, you can activate Handsontable to use for non-commercial purposes by 
    passing the key: 'non-commercial-and-evaluation'. 
    <a href="https://handsontable.com/docs/tutorial-license-key.html" target="_blank">Read more</a> about it in 
    the documentation or contact us at <a href="mailto:support@handsontable.com">support@handsontable.com</a>.`], [`
    The license key for Handsontable is missing. Use your purchased key to activate the product.\\x20
    Alternatively, you can activate Handsontable to use for non-commercial purposes by\\x20
    passing the key: 'non-commercial-and-evaluation'.\\x20
    <a href="https://handsontable.com/docs/tutorial-license-key.html" target="_blank">Read more</a> about it in\\x20
    the documentation or contact us at <a href="mailto:support@handsontable.com">support@handsontable.com</a>.`])));
  },
  non_commercial: function() {
    return "";
  }
};
function eae(e, t) {
  var r = !Xt(e), n = typeof e == "string" && e.toLowerCase() === "non-commercial-and-evaluation", o = "12.4.0", i, a = "invalid", l = "invalid";
  e = xC(e || "");
  var s = tae(e);
  if (r || n || s)
    if (s) {
      var u = ne("23/05/2023", "DD/MM/YYYY"), f = Math.floor(u.toDate().getTime() / 864e5), c = Qie(e);
      i = ne((c + 1) * 864e5, "x").format("MMMM DD, YYYY"), f > c ? (a = "expired", l = "expired") : (a = "valid", l = "valid");
    } else
      n ? (a = "non_commercial", l = "valid") : (a = "invalid", l = "invalid");
  else
    a = "missing", l = "missing";
  if (Jie() && (a = "valid", l = "valid"), !XA && a !== "valid") {
    var h = ZA[a]({
      keyValidityDate: i,
      hotVersion: o
    });
    h && console[a === "non_commercial" ? "info" : "warn"](ZA[a]({
      keyValidityDate: i,
      hotVersion: o
    })), XA = !0;
  }
  if (l !== "valid" && t.parentNode) {
    var d = QA[l]({
      keyValidityDate: i,
      hotVersion: o
    });
    if (d) {
      var y = document.createElement("div");
      y.className = "hot-display-license-info", y.innerHTML = QA[l]({
        keyValidityDate: i,
        hotVersion: o
      }), t.parentNode.insertBefore(y, t.nextSibling);
    }
  }
}
function tae(e) {
  var t = [][uc], r = t;
  if (e[uc] !== gc("Z"))
    return !1;
  for (var n = "", o = "B<H4P+".split(""), i = gc(o.shift()); i; i = gc(o.shift() || "A"))
    --i < ""[uc] ? r = r | (qA("".concat(qA(mc(n) + (mc(Wp(e, Math.abs(i), 2)) + []).padStart(2, "0")))) % 97 || 2) >> 1 : n = Wp(e, i, i ? o[uc] === 1 ? 9 : 8 : 6);
  return r === t;
}
function vn(e) {
  return e[0].toUpperCase() + e.substr(1);
}
function gV() {
  function e() {
    return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
  }
  return e() + e() + e() + e();
}
function bV(e) {
  return /^([0-9][0-9]?%$)|(^100%$)/.test(e);
}
function wV(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return "".concat(e).replace(/(?:\\)?\[([^[\]]+)]/g, function(r, n) {
    return r.charAt(0) === "\\" ? r.substr(1, r.length - 1) : t[n] === void 0 ? "" : t[n];
  });
}
function JA(e) {
  return hT("".concat(e), {
    ALLOWED_TAGS: []
  });
}
function hT(e, t) {
  return Ate.sanitize(e, t);
}
function eI(e) {
  return iae(e) || oae(e) || nae(e) || rae();
}
function rae() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function nae(e, t) {
  if (e) {
    if (typeof e == "string")
      return DC(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return DC(e, t);
  }
}
function oae(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function iae(e) {
  if (Array.isArray(e))
    return DC(e);
}
function DC(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function aae(e) {
  for (var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, r = -1, n = null, o = e; o !== null; ) {
    if (r === t) {
      n = o;
      break;
    }
    o.host && o.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? o = o.host : (r += 1, o = o.parentNode);
  }
  return n;
}
function lae(e) {
  return Object.getPrototypeOf(e.parent) && e.frameElement;
}
function Up(e) {
  return lae(e) && e.parent;
}
function Aa(e) {
  for (var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], r = arguments.length > 2 ? arguments[2] : void 0, n = Node, o = n.ELEMENT_NODE, i = n.DOCUMENT_FRAGMENT_NODE, a = e; a != null && a !== r; ) {
    var l = a, s = l.nodeType, u = l.nodeName;
    if (s === o && (t.includes(u) || t.includes(a)))
      return a;
    var f = a, c = f.host;
    c && s === i ? a = c : a = a.parentNode;
  }
  return null;
}
function Gv(e, t, r) {
  for (var n = [], o = e; o && (o = Aa(o, t, r), !(!o || r && !r.contains(o))); )
    n.push(o), o.host && o.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? o = o.host : o = o.parentNode;
  var i = n.length;
  return i ? n[i - 1] : null;
}
function Ia(e, t) {
  var r = e.parentNode, n = [];
  for (typeof t == "string" ? e.defaultView ? n = Array.prototype.slice.call(e.querySelectorAll(t), 0) : n = Array.prototype.slice.call(e.ownerDocument.querySelectorAll(t), 0) : n.push(t); r !== null; ) {
    if (n.indexOf(r) > -1)
      return !0;
    r = r.parentNode;
  }
  return !1;
}
function sae(e) {
  var t = 0, r = e;
  if (r.previousSibling)
    for (; r = r.previousSibling; )
      t += 1;
  return t;
}
function ji(e, t, r) {
  var n = r.parentElement.querySelector(".ht_clone_".concat(e));
  return n ? n.contains(t) : null;
}
var NC, HC, LC;
function Kv(e) {
  return !e || !e.length ? [] : e.filter(function(t) {
    return !!t;
  });
}
if (aee()) {
  var tI = function(t) {
    var r = t.createElement("div");
    return r.classList.add("test", "test2"), r.classList.contains("test2");
  };
  NC = function(t, r) {
    return t.classList === void 0 || typeof r != "string" || r === "" ? !1 : t.classList.contains(r);
  }, HC = function(t, r) {
    var n = t.ownerDocument, o = r;
    if (typeof o == "string" && (o = o.split(" ")), o = Kv(o), o.length > 0)
      if (tI(n)) {
        var i;
        (i = t.classList).add.apply(i, eI(o));
      } else
        for (var a = 0; o[a]; )
          t.classList.add(o[a]), a += 1;
  }, LC = function(t, r) {
    var n = t.ownerDocument, o = r;
    if (typeof o == "string" && (o = o.split(" ")), o = Kv(o), o.length > 0)
      if (tI(n)) {
        var i;
        (i = t.classList).remove.apply(i, eI(o));
      } else
        for (var a = 0; o[a]; )
          t.classList.remove(o[a]), a += 1;
  };
} else {
  var gw = function(t) {
    return new RegExp("(\\s|^)".concat(t, "(\\s|$)"));
  };
  NC = function(t, r) {
    return t.className !== void 0 && gw(r).test(t.className);
  }, HC = function(t, r) {
    var n = t.className, o = r;
    if (typeof o == "string" && (o = o.split(" ")), o = Kv(o), n === "")
      n = o.join(" ");
    else
      for (var i = 0; i < o.length; i++)
        o[i] && !gw(o[i]).test(n) && (n += " ".concat(o[i]));
    t.className = n;
  }, LC = function(t, r) {
    var n = 0, o = t.className, i = r;
    for (typeof i == "string" && (i = i.split(" ")), i = Kv(i); i[n]; )
      o = o.replace(gw(i[n]), " ").trim(), n += 1;
    t.className !== o && (t.className = o);
  };
}
function Me(e, t) {
  return NC(e, t);
}
function ae(e, t) {
  HC(e, t);
}
function Le(e, t) {
  LC(e, t);
}
function SV(e) {
  if (e.nodeType === 3)
    e.parentNode.removeChild(e);
  else if (["TABLE", "THEAD", "TBODY", "TFOOT", "TR"].indexOf(e.nodeName) > -1)
    for (var t = e.childNodes, r = t.length - 1; r >= 0; r--)
      SV(t[r]);
}
function jn(e) {
  for (var t; t = e.lastChild; )
    e.removeChild(t);
}
var uae = /(<(.*)>|&(.*);)/;
function _f(e, t) {
  var r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
  uae.test(t) ? e.innerHTML = r ? hT(t) : t : xa(e, t);
}
function xa(e, t) {
  var r = e.firstChild;
  r && r.nodeType === 3 && r.nextSibling === null ? lee ? r.textContent = t : r.data = t : (jn(e), e.appendChild(e.ownerDocument.createTextNode(t)));
}
function Hc(e) {
  for (var t = e.ownerDocument.documentElement, r = e; r !== t; ) {
    if (r === null)
      return !1;
    if (r.nodeType === Node.DOCUMENT_FRAGMENT_NODE)
      if (r.host) {
        if (r.host.impl)
          return Hc(r.host.impl);
        if (r.host)
          return Hc(r.host);
        throw new Error("Lost in Web Components world");
      } else
        return !1;
    else if (r.style && r.style.display === "none")
      return !1;
    r = r.parentNode;
  }
  return !0;
}
function Yt(e) {
  var t = e.ownerDocument, r = t.defaultView, n = t.documentElement, o = e, i, a, l, s;
  if (mB() && o.firstChild && o.firstChild.nodeName === "CAPTION")
    return s = o.getBoundingClientRect(), {
      top: s.top + (r.pageYOffset || n.scrollTop) - (n.clientTop || 0),
      left: s.left + (r.pageXOffset || n.scrollLeft) - (n.clientLeft || 0)
    };
  for (i = o.offsetLeft, a = o.offsetTop, l = o; (o = o.offsetParent) && o !== t.body; )
    i += o.offsetLeft, a += o.offsetTop, l = o;
  return l && l.style.position === "fixed" && (i += r.pageXOffset || n.scrollLeft, a += r.pageYOffset || n.scrollTop), {
    left: i,
    top: a
  };
}
function Lc() {
  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window, t = e.scrollY;
  return t === void 0 && (t = e.document.documentElement.scrollTop), t;
}
function us() {
  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window, t = e.scrollX;
  return t === void 0 && (t = e.document.documentElement.scrollLeft), t;
}
function zp(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : window;
  return e === t ? Lc(t) : e.scrollTop;
}
function jC(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : window;
  return e === t ? us(t) : e.scrollLeft;
}
function Yp(e) {
  var t = e.ownerDocument, r = t ? t.defaultView : void 0;
  t || (t = e.document ? e.document : e, r = t.defaultView);
  for (var n = ["auto", "scroll"], o = see(), i = e.parentNode; i && i.style && t.body !== i; ) {
    var a = i.style, l = a.overflow, s = a.overflowX, u = a.overflowY;
    if ([l, s, u].includes("scroll"))
      return i;
    if (o) {
      var f = r.getComputedStyle(i);
      if (l = f.overflow, s = f.overflowX, u = f.overflowY, n.includes(l) || n.includes(s) || n.includes(u))
        return i;
    }
    if (i.clientHeight <= i.scrollHeight + 1 && (n.includes(u) || n.includes(l)) || i.clientWidth <= i.scrollWidth + 1 && (n.includes(s) || n.includes(l)))
      return i;
    i = i.parentNode;
  }
  return r;
}
function fs(e) {
  for (var t = e.ownerDocument, r = t.defaultView, n = e.parentNode; n && n.style && t.body !== n; ) {
    if (n.style.overflow !== "visible" && n.style.overflow !== "")
      return n;
    var o = Da(n, r), i = ["scroll", "hidden", "auto"], a = o.getPropertyValue("overflow"), l = o.getPropertyValue("overflow-y"), s = o.getPropertyValue("overflow-x");
    if (i.includes(a) || i.includes(l) || i.includes(s))
      return n;
    n = n.parentNode;
  }
  return r;
}
function jc(e, t) {
  var r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : window;
  if (e) {
    if (e === r)
      return t === "width" ? "".concat(r.innerWidth, "px") : t === "height" ? "".concat(r.innerHeight, "px") : void 0;
  } else
    return;
  var n = e.style[t];
  if (n !== "" && n !== void 0)
    return n;
  var o = Da(e, r);
  if (o[t] !== "" && o[t] !== void 0)
    return o[t];
}
function Da(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : window;
  return e.currentStyle || t.getComputedStyle(e);
}
function yt(e) {
  return e.offsetWidth;
}
function $t(e) {
  return mB() && e.firstChild && e.firstChild.nodeName === "CAPTION" ? e.offsetHeight + e.firstChild.offsetHeight : e.offsetHeight;
}
function ci(e) {
  return e.clientHeight || e.innerHeight;
}
function Jy(e) {
  return e.clientWidth || e.innerWidth;
}
function CV(e) {
  var t = e.ownerDocument;
  if (e.selectionStart)
    return e.selectionStart;
  if (t.selection) {
    e.focus();
    var r = t.selection.createRange();
    if (r === null)
      return 0;
    var n = e.createTextRange(), o = n.duplicate();
    return n.moveToBookmark(r.getBookmark()), o.setEndPoint("EndToStart", n), o.text.length;
  }
  return 0;
}
function fae(e) {
  var t = e.ownerDocument;
  if (e.selectionEnd)
    return e.selectionEnd;
  if (t.selection) {
    var r = t.selection.createRange();
    if (r === null)
      return 0;
    var n = e.createTextRange();
    return n.text.indexOf(r.text) + r.text.length;
  }
  return 0;
}
function cae() {
  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window, t = e.document, r = "";
  return e.getSelection ? r = e.getSelection().toString() : t.selection && t.selection.type !== "Control" && (r = t.selection.createRange().text), r;
}
function rI() {
  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : window, t = e.document;
  e.getSelection ? e.getSelection().empty ? e.getSelection().empty() : e.getSelection().removeAllRanges && e.getSelection().removeAllRanges() : t.selection && t.selection.empty();
}
function Pg(e, t, r) {
  if (r === void 0 && (r = t), e.setSelectionRange) {
    e.focus();
    try {
      e.setSelectionRange(t, r);
    } catch {
      var n = e.parentNode, o = n.style.display;
      n.style.display = "block", e.setSelectionRange(t, r), n.style.display = o;
    }
  }
}
var bw;
function hae() {
  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document, t = e.createElement("div");
  t.style.height = "200px", t.style.width = "100%";
  var r = e.createElement("div");
  r.style.boxSizing = "content-box", r.style.height = "150px", r.style.left = "0px", r.style.overflow = "hidden", r.style.position = "absolute", r.style.top = "0px", r.style.width = "200px", r.style.visibility = "hidden", r.appendChild(t), (e.body || e.documentElement).appendChild(r);
  var n = t.offsetWidth;
  r.style.overflow = "scroll";
  var o = t.offsetWidth;
  return n === o && (o = r.clientWidth), (e.body || e.documentElement).removeChild(r), n - o;
}
function tr() {
  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document;
  return bw === void 0 && (bw = hae(e)), bw;
}
function dae(e) {
  return e.offsetWidth !== e.clientWidth;
}
function vae(e) {
  return e.offsetHeight !== e.clientHeight;
}
function dT(e, t, r) {
  rte() ? (e.style.top = r, e.style.left = t) : Jee() ? e.style["-webkit-transform"] = "translate3d(".concat(t, ",").concat(r, ",0)") : e.style.transform = "translate3d(".concat(t, ",").concat(r, ",0)");
}
function kg(e) {
  e.style.transform && e.style.transform !== "" ? e.style.transform = "" : e.style["-webkit-transform"] && e.style["-webkit-transform"] !== "" && (e.style["-webkit-transform"] = "");
}
function Gp(e) {
  var t = ["INPUT", "SELECT", "TEXTAREA"];
  return e && (t.indexOf(e.nodeName) > -1 || e.contentEditable === "true");
}
function vT(e) {
  return Gp(e) && e.hasAttribute("data-hot-input") === !1;
}
function yae(e) {
  var t = e.ownerDocument.activeElement;
  vT(t) || e.select();
}
function _V(e) {
  return !e.parentNode;
}
function pae(e, t) {
  var r = new IntersectionObserver(function(n, o) {
    n.forEach(function(i) {
      i.isIntersecting && e.offsetParent !== null && (t(), o.unobserve(e));
    });
  }, {
    root: e.ownerDocument.body
  });
  r.observe(e);
}
function wt(e) {
  return typeof e == "function";
}
function OV(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 200, r = null, n;
  function o() {
    for (var i = this, a = arguments.length, l = new Array(a), s = 0; s < a; s++)
      l[s] = arguments[s];
    return r && clearTimeout(r), r = setTimeout(function() {
      n = e.apply(i, l);
    }, t), n;
  }
  return o;
}
function RV(e) {
  for (var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), n = 1; n < t; n++)
    r[n - 1] = arguments[n];
  return function() {
    for (var i = arguments.length, a = new Array(i), l = 0; l < i; l++)
      a[l] = arguments[l];
    return e.apply(this, r.concat(a));
  };
}
function mae(e) {
  var t = e.length;
  function r(n) {
    return function() {
      for (var i = arguments.length, a = new Array(i), l = 0; l < i; l++)
        a[l] = arguments[l];
      var s = n.concat(a), u;
      return s.length >= t ? u = e.apply(this, s) : u = r(s), u;
    };
  }
  return r([]);
}
function FC(e, t, r, n, o, i, a, l) {
  return be(l) ? e.call(t, r, n, o, i, a, l) : be(a) ? e.call(t, r, n, o, i, a) : be(i) ? e.call(t, r, n, o, i) : be(o) ? e.call(t, r, n, o) : be(n) ? e.call(t, r, n) : be(r) ? e.call(t, r) : e.call(t);
}
function ht() {
  if (be(console)) {
    var e;
    (e = console).warn.apply(e, arguments);
  }
}
function yT() {
  if (be(console)) {
    var e;
    (e = console).error.apply(e, arguments);
  }
}
var gae = Be, nI = CE, qv = rv.getWeakData, bae = wE, wae = Nt, Sae = gn, ww = Vt, Cae = bE, EV = Ja, oI = At, TV = Vo, _ae = TV.set, Oae = TV.getterFor, Rae = EV.find, Eae = EV.findIndex, Tae = gae([].splice), Pae = 0, Xv = function(e) {
  return e.frozen || (e.frozen = new PV());
}, PV = function() {
  this.entries = [];
}, Sw = function(e, t) {
  return Rae(e.entries, function(r) {
    return r[0] === t;
  });
};
PV.prototype = {
  get: function(e) {
    var t = Sw(this, e);
    if (t)
      return t[1];
  },
  has: function(e) {
    return !!Sw(this, e);
  },
  set: function(e, t) {
    var r = Sw(this, e);
    r ? r[1] = t : this.entries.push([e, t]);
  },
  delete: function(e) {
    var t = Eae(this.entries, function(r) {
      return r[0] === e;
    });
    return ~t && Tae(this.entries, t, 1), !!~t;
  }
};
var kV = {
  getConstructor: function(e, t, r, n) {
    var o = e(function(s, u) {
      bae(s, i), _ae(s, {
        type: t,
        id: Pae++,
        frozen: void 0
      }), Sae(u) || Cae(u, s[n], { that: s, AS_ENTRIES: r });
    }), i = o.prototype, a = Oae(t), l = function(s, u, f) {
      var c = a(s), h = qv(wae(u), !0);
      return h === !0 ? Xv(c).set(u, f) : h[c.id] = f, s;
    };
    return nI(i, {
      // `{ WeakMap, WeakSet }.prototype.delete(key)` methods
      // https://tc39.es/ecma262/#sec-weakmap.prototype.delete
      // https://tc39.es/ecma262/#sec-weakset.prototype.delete
      delete: function(s) {
        var u = a(this);
        if (!ww(s))
          return !1;
        var f = qv(s);
        return f === !0 ? Xv(u).delete(s) : f && oI(f, u.id) && delete f[u.id];
      },
      // `{ WeakMap, WeakSet }.prototype.has(key)` methods
      // https://tc39.es/ecma262/#sec-weakmap.prototype.has
      // https://tc39.es/ecma262/#sec-weakset.prototype.has
      has: function(u) {
        var f = a(this);
        if (!ww(u))
          return !1;
        var c = qv(u);
        return c === !0 ? Xv(f).has(u) : c && oI(c, f.id);
      }
    }), nI(i, r ? {
      // `WeakMap.prototype.get(key)` method
      // https://tc39.es/ecma262/#sec-weakmap.prototype.get
      get: function(u) {
        var f = a(this);
        if (ww(u)) {
          var c = qv(u);
          return c === !0 ? Xv(f).get(u) : c ? c[f.id] : void 0;
        }
      },
      // `WeakMap.prototype.set(key, value)` method
      // https://tc39.es/ecma262/#sec-weakmap.prototype.set
      set: function(u, f) {
        return l(this, u, f);
      }
    } : {
      // `WeakSet.prototype.add(value)` method
      // https://tc39.es/ecma262/#sec-weakset.prototype.add
      add: function(u) {
        return l(this, u, !0);
      }
    }), o;
  }
}, kae = fE, iI = pt, ep = Be, aI = CE, $ae = rv, Aae = lg, $V = kV, Zv = Vt, Qv = Vo.enforce, Iae = Fe, Mae = Sj, hv = Object, xae = Array.isArray, Jv = hv.isExtensible, AV = hv.isFrozen, Dae = hv.isSealed, IV = hv.freeze, Nae = hv.seal, lI = {}, sI = {}, Hae = !iI.ActiveXObject && "ActiveXObject" in iI, Ff, MV = function(e) {
  return function() {
    return e(this, arguments.length ? arguments[0] : void 0);
  };
}, xV = Aae("WeakMap", MV, $V), Ll = xV.prototype, tp = ep(Ll.set), Lae = function() {
  return kae && Iae(function() {
    var e = IV([]);
    return tp(new xV(), e, 1), !AV(e);
  });
};
if (Mae)
  if (Hae) {
    Ff = $V.getConstructor(MV, "WeakMap", !0), $ae.enable();
    var uI = ep(Ll.delete), ey = ep(Ll.has), fI = ep(Ll.get);
    aI(Ll, {
      delete: function(e) {
        if (Zv(e) && !Jv(e)) {
          var t = Qv(this);
          return t.frozen || (t.frozen = new Ff()), uI(this, e) || t.frozen.delete(e);
        }
        return uI(this, e);
      },
      has: function(t) {
        if (Zv(t) && !Jv(t)) {
          var r = Qv(this);
          return r.frozen || (r.frozen = new Ff()), ey(this, t) || r.frozen.has(t);
        }
        return ey(this, t);
      },
      get: function(t) {
        if (Zv(t) && !Jv(t)) {
          var r = Qv(this);
          return r.frozen || (r.frozen = new Ff()), ey(this, t) ? fI(this, t) : r.frozen.get(t);
        }
        return fI(this, t);
      },
      set: function(t, r) {
        if (Zv(t) && !Jv(t)) {
          var n = Qv(this);
          n.frozen || (n.frozen = new Ff()), ey(this, t) ? tp(this, t, r) : n.frozen.set(t, r);
        } else
          tp(this, t, r);
        return this;
      }
    });
  } else
    Lae() && aI(Ll, {
      set: function(t, r) {
        var n;
        return xae(t) && (AV(t) ? n = lI : Dae(t) && (n = sI)), tp(this, t, r), n == lI && IV(t), n == sI && Nae(t), this;
      }
    });
var Ce = {
  ALT: 18,
  ARROW_DOWN: 40,
  ARROW_LEFT: 37,
  ARROW_RIGHT: 39,
  ARROW_UP: 38,
  AUDIO_DOWN: lw() ? 182 : 174,
  AUDIO_MUTE: lw() ? 181 : 173,
  AUDIO_UP: lw() ? 183 : 175,
  BACKSPACE: 8,
  CAPS_LOCK: 20,
  COMMA: 188,
  COMMAND_LEFT: 91,
  COMMAND_RIGHT: 93,
  COMMAND_FIREFOX: 224,
  CONTROL: 17,
  DELETE: 46,
  END: 35,
  ENTER: 13,
  ESCAPE: 27,
  F1: 112,
  F2: 113,
  F3: 114,
  F4: 115,
  F5: 116,
  F6: 117,
  F7: 118,
  F8: 119,
  F9: 120,
  F10: 121,
  F11: 122,
  F12: 123,
  F13: 124,
  F14: 125,
  F15: 126,
  F16: 127,
  F17: 128,
  F18: 129,
  F19: 130,
  HOME: 36,
  INSERT: 45,
  MEDIA_NEXT: 176,
  MEDIA_PLAY_PAUSE: 179,
  MEDIA_PREV: 177,
  MEDIA_STOP: 178,
  NULL: 0,
  NUM_LOCK: 144,
  PAGE_DOWN: 34,
  PAGE_UP: 33,
  PAUSE: 19,
  PERIOD: 190,
  SCROLL_LOCK: 145,
  SHIFT: 16,
  SPACE: 32,
  TAB: 9,
  A: 65,
  C: 67,
  D: 68,
  F: 70,
  L: 76,
  O: 79,
  P: 80,
  S: 83,
  V: 86,
  X: 88,
  Y: 89,
  Z: 90
}, jae = [Ce.ALT, Ce.ARROW_DOWN, Ce.ARROW_LEFT, Ce.ARROW_RIGHT, Ce.ARROW_UP, Ce.AUDIO_DOWN, Ce.AUDIO_MUTE, Ce.AUDIO_UP, Ce.BACKSPACE, Ce.CAPS_LOCK, Ce.DELETE, Ce.END, Ce.ENTER, Ce.ESCAPE, Ce.F1, Ce.F2, Ce.F3, Ce.F4, Ce.F5, Ce.F6, Ce.F7, Ce.F8, Ce.F9, Ce.F10, Ce.F11, Ce.F12, Ce.F13, Ce.F14, Ce.F15, Ce.F16, Ce.F17, Ce.F18, Ce.F19, Ce.HOME, Ce.INSERT, Ce.MEDIA_NEXT, Ce.MEDIA_PLAY_PAUSE, Ce.MEDIA_PREV, Ce.MEDIA_STOP, Ce.NULL, Ce.NUM_LOCK, Ce.PAGE_DOWN, Ce.PAGE_UP, Ce.PAUSE, Ce.SCROLL_LOCK, Ce.SHIFT, Ce.TAB];
function Fae(e) {
  return e === 32 || // space
  e >= 48 && e <= 57 || // 0-9
  e >= 96 && e <= 111 || // numpad
  e >= 186 && e <= 192 || // ;=,-./`
  e >= 219 && e <= 222 || // []{}\|"'
  e >= 226 || // special chars (229 for Asian chars)
  e >= 65 && e <= 90;
}
function DV(e) {
  return jae.includes(e);
}
function Bae(e) {
  return [Ce.CONTROL, Ce.COMMAND_LEFT, Ce.COMMAND_RIGHT, Ce.COMMAND_FIREFOX].includes(e);
}
function Fc(e, t) {
  var r = t.split("|"), n = !1;
  return I(r, function(o) {
    if (e === Ce[o])
      return n = !0, !1;
  }), n;
}
function Fn(e) {
  e.isImmediatePropagationEnabled = !1, e.cancelBubble = !0;
}
function jl(e) {
  return e.isImmediatePropagationEnabled === !1;
}
function Na(e) {
  return e.button === 2;
}
function pT(e) {
  return e.button === 0;
}
function Bc(e) {
  "@babel/helpers - typeof";
  return Bc = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Bc(e);
}
var cI;
function Vae(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function hI(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Uae(n.key), n);
  }
}
function Wae(e, t, r) {
  return t && hI(e.prototype, t), r && hI(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Uae(e) {
  var t = zae(e, "string");
  return Bc(t) === "symbol" ? t : String(t);
}
function zae(e, t) {
  if (Bc(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Bc(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Yae(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } }));
}
var hl = [
  /* eslint-disable jsdoc/require-description-complete-sentence */
  /**
   * Fired after resetting a cell's meta. This happens when the {@link Core#updateSettings} method is called.
   *
   * @event Hooks#afterCellMetaReset
   */
  "afterCellMetaReset",
  /**
   * Fired after one or more cells has been changed. The changes are triggered in any situation when the
   * value is entered using an editor or changed using API (e.q setDataAtCell).
   *
   * __Note:__ For performance reasons, the `changes` array is null for `"loadData"` source.
   *
   * @event Hooks#afterChange
   * @param {Array[]} changes 2D array containing information about each of the edited cells `[[row, prop, oldVal, newVal], ...]`. `row` is a visual row index.
   * @param {string} [source] String that identifies source of hook call ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @example
   * ::: only-for javascript
   * ```js
   * new Handsontable(element, {
   *   afterChange: (changes) => {
   *     changes?.forEach(([row, prop, oldValue, newValue]) => {
   *       // Some logic...
   *     });
   *   }
   * })
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * <HotTable
   *   afterChange={(changes, source) => {
   *     changes?.forEach(([row, prop, oldValue, newValue]) => {
   *       // Some logic...
   *     });
   *   }}
   * />
   * ```
   * :::
   */
  "afterChange",
  /**
   * Fired each time user opens {@link ContextMenu} and after setting up the Context Menu's default options. These options are a collection
   * which user can select by setting an array of keys or an array of objects in {@link Options#contextMenu} option.
   *
   * @event Hooks#afterContextMenuDefaultOptions
   * @param {Array} predefinedItems An array of objects containing information about the pre-defined Context Menu items.
   */
  "afterContextMenuDefaultOptions",
  /**
   * Fired each time user opens {@link ContextMenu} plugin before setting up the Context Menu's items but after filtering these options by
   * user (`contextMenu` option). This hook can by helpful to determine if user use specified menu item or to set up
   * one of the menu item to by always visible.
   *
   * @event Hooks#beforeContextMenuSetItems
   * @param {object[]} menuItems An array of objects containing information about to generated Context Menu items.
   */
  "beforeContextMenuSetItems",
  /**
   * Fired by {@link DropdownMenu} plugin after setting up the Dropdown Menu's default options. These options are a
   * collection which user can select by setting an array of keys or an array of objects in {@link Options#dropdownMenu}
   * option.
   *
   * @event Hooks#afterDropdownMenuDefaultOptions
   * @param {object[]} predefinedItems An array of objects containing information about the pre-defined Context Menu items.
   */
  "afterDropdownMenuDefaultOptions",
  /**
   * Fired by {@link DropdownMenu} plugin before setting up the Dropdown Menu's items but after filtering these options
   * by user (`dropdownMenu` option). This hook can by helpful to determine if user use specified menu item or to set
   * up one of the menu item to by always visible.
   *
   * @event Hooks#beforeDropdownMenuSetItems
   * @param {object[]} menuItems An array of objects containing information about to generated Dropdown Menu items.
   */
  "beforeDropdownMenuSetItems",
  /**
   * Fired by {@link ContextMenu} plugin after hiding the Context Menu. This hook is fired when {@link Options#contextMenu}
   * option is enabled.
   *
   * @event Hooks#afterContextMenuHide
   * @param {object} context The Context Menu plugin instance.
   */
  "afterContextMenuHide",
  /**
   * Fired by {@link ContextMenu} plugin before opening the Context Menu. This hook is fired when {@link Options#contextMenu}
   * option is enabled.
   *
   * @event Hooks#beforeContextMenuShow
   * @param {object} context The Context Menu instance.
   */
  "beforeContextMenuShow",
  /**
   * Fired by {@link ContextMenu} plugin after opening the Context Menu. This hook is fired when {@link Options#contextMenu}
   * option is enabled.
   *
   * @event Hooks#afterContextMenuShow
   * @param {object} context The Context Menu plugin instance.
   */
  "afterContextMenuShow",
  /**
   * Fired by {@link CopyPaste} plugin after reaching the copy limit while copying data. This hook is fired when
   * {@link Options#copyPaste} option is enabled.
   *
   * @event Hooks#afterCopyLimit
   * @param {number} selectedRows Count of selected copyable rows.
   * @param {number} selectedColumns Count of selected copyable columns.
   * @param {number} copyRowsLimit Current copy rows limit.
   * @param {number} copyColumnsLimit Current copy columns limit.
   */
  "afterCopyLimit",
  /**
   * Fired before created a new column.
   *
   * @event Hooks#beforeCreateCol
   * @param {number} index Represents the visual index of first newly created column in the data source array.
   * @param {number} amount Number of newly created columns in the data source array.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @returns {*} If `false` then creating columns is cancelled.
   * @example
   * ::: only-for javascript
   * ```js
   * // Return `false` to cancel column inserting.
   * new Handsontable(element, {
   *   beforeCreateCol: function(data, coords) {
   *     return false;
   *   }
   * });
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * // Return `false` to cancel column inserting.
   * <HotTable
   *   beforeCreateCol={(data, coords) => {
   *     return false;
   *   }}
   * />
   * ```
   * :::
   */
  "beforeCreateCol",
  /**
   * Fired after the order of columns has changed.
   * This hook is fired by changing column indexes of any type supported by the {@link IndexMapper}.
   *
   * @event Hooks#afterColumnSequenceChange
   * @param {'init'|'remove'|'insert'|'move'|'update'} [source] A string that indicates what caused the change to the order of columns.
   */
  "afterColumnSequenceChange",
  /**
   * Fired after created a new column.
   *
   * @event Hooks#afterCreateCol
   * @param {number} index Represents the visual index of first newly created column in the data source.
   * @param {number} amount Number of newly created columns in the data source.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "afterCreateCol",
  /**
   * Fired before created a new row.
   *
   * @event Hooks#beforeCreateRow
   * @param {number} index Represents the visual index of first newly created row in the data source array.
   * @param {number} amount Number of newly created rows in the data source array.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  "beforeCreateRow",
  /**
   * Fired after created a new row.
   *
   * @event Hooks#afterCreateRow
   * @param {number} index Represents the visual index of first newly created row in the data source array.
   * @param {number} amount Number of newly created rows in the data source array.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "afterCreateRow",
  /**
   * Fired after all selected cells are deselected.
   *
   * @event Hooks#afterDeselect
   */
  "afterDeselect",
  /**
   * Fired after destroying the Handsontable instance.
   *
   * @event Hooks#afterDestroy
   */
  "afterDestroy",
  /**
   * Hook fired after keydown event is handled.
   *
   * @event Hooks#afterDocumentKeyDown
   * @param {Event} event A native `keydown` event object.
   */
  "afterDocumentKeyDown",
  /**
   * Fired inside the Walkontable's selection `draw` method. Can be used to add additional class names to cells, depending on the current selection.
   *
   * @event Hooks#afterDrawSelection
   * @param {number} currentRow Row index of the currently processed cell.
   * @param {number} currentColumn Column index of the currently cell.
   * @param {number[]} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow, endColumn]`.
   * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.
   * @since 0.38.1
   * @returns {string|undefined} Can return a `String`, which will act as an additional `className` to be added to the currently processed cell.
   */
  "afterDrawSelection",
  /**
   * Fired inside the Walkontable's `refreshSelections` method. Can be used to remove additional class names from all cells in the table.
   *
   * @event Hooks#beforeRemoveCellClassNames
   * @since 0.38.1
   * @returns {string[]|undefined} Can return an `Array` of `String`s. Each of these strings will act like class names to be removed from all the cells in the table.
   */
  "beforeRemoveCellClassNames",
  /**
   * Fired after getting the cell settings.
   *
   * @event Hooks#afterGetCellMeta
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {object} cellProperties Object containing the cell properties.
   */
  "afterGetCellMeta",
  /**
   * Fired after retrieving information about a column header and appending it to the table header.
   *
   * @event Hooks#afterGetColHeader
   * @param {number} column Visual column index.
   * @param {HTMLTableCellElement} TH Header's TH element.
   * @param {number} [headerLevel=0] (Since 12.2.0) Header level index. Accepts positive (0 to n)
   *                                 and negative (-1 to -n) values. For positive values, 0 points to the
   *                                 topmost header. For negative values, -1 points to the bottom-most
   *                                 header (the header closest to the cells).
   */
  "afterGetColHeader",
  /**
   * Fired after retrieving information about a row header and appending it to the table header.
   *
   * @event Hooks#afterGetRowHeader
   * @param {number} row Visual row index.
   * @param {HTMLTableCellElement} TH Header's TH element.
   */
  "afterGetRowHeader",
  /**
   * Fired after the Handsontable instance is initiated.
   *
   * @event Hooks#afterInit
   */
  "afterInit",
  /**
   * Fired after Handsontable's [`data`](@/api/options.md#data)
   * gets modified by the [`loadData()`](@/api/core.md#loaddata) method
   * or the [`updateSettings()`](@/api/core.md#updatesettings) method.
   *
   * Read more:
   * - [Binding to data](@/guides/getting-started/binding-to-data.md)
   * - [Saving data](@/guides/getting-started/saving-data.md)
   *
   * @event Hooks#afterLoadData
   * @param {Array} sourceData An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data
   * @param {boolean} initialLoad A flag that indicates whether the data was loaded at Handsontable's initialization (`true`) or later (`false`)
   * @param {string} source The source of the call
   */
  "afterLoadData",
  /**
   * Fired after the [`updateData()`](@/api/core.md#updatedata) method
   * modifies Handsontable's [`data`](@/api/options.md#data).
   *
   * Read more:
   * - [Binding to data](@/guides/getting-started/binding-to-data.md)
   * - [Saving data](@/guides/getting-started/saving-data.md)
   *
   * @event Hooks#afterUpdateData
   * @since 11.1.0
   * @param {Array} sourceData An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data
   * @param {boolean} initialLoad A flag that indicates whether the data was loaded at Handsontable's initialization (`true`) or later (`false`)
   * @param {string} source The source of the call
   */
  "afterUpdateData",
  /**
   * Fired after a scroll event, which is identified as a momentum scroll (e.g. On an iPad).
   *
   * @event Hooks#afterMomentumScroll
   */
  "afterMomentumScroll",
  /**
   * Fired after a `mousedown` event is triggered on the cell corner (the drag handle).
   *
   * @event Hooks#afterOnCellCornerMouseDown
   * @param {Event} event `mousedown` event object.
   */
  "afterOnCellCornerMouseDown",
  /**
   * Fired after a `dblclick` event is triggered on the cell corner (the drag handle).
   *
   * @event Hooks#afterOnCellCornerDblClick
   * @param {Event} event `dblclick` event object.
   */
  "afterOnCellCornerDblClick",
  /**
   * Fired after clicking on a cell or row/column header. In case the row/column header was clicked, the coordinate
   * indexes are negative.
   *
   * For example clicking on the row header of cell (0, 0) results with `afterOnCellMouseDown` called
   * with coordinates `{row: 0, col: -1}`.
   *
   * @event Hooks#afterOnCellMouseDown
   * @param {Event} event `mousedown` event object.
   * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.
   * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
   */
  "afterOnCellMouseDown",
  /**
   * Fired after clicking on a cell or row/column header. In case the row/column header was clicked, the coordinate
   * indexes are negative.
   *
   * For example clicking on the row header of cell (0, 0) results with `afterOnCellMouseUp` called
   * with coordinates `{row: 0, col: -1}`.
   *
   * @event Hooks#afterOnCellMouseUp
   * @param {Event} event `mouseup` event object.
   * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.
   * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
   */
  "afterOnCellMouseUp",
  /**
   * Fired after clicking right mouse button on a cell or row/column header.
   *
   * For example clicking on the row header of cell (0, 0) results with `afterOnCellContextMenu` called
   * with coordinates `{row: 0, col: -1}`.
   *
   * @event Hooks#afterOnCellContextMenu
   * @since 4.1.0
   * @param {Event} event `contextmenu` event object.
   * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.
   * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
   */
  "afterOnCellContextMenu",
  /**
   * Fired after hovering a cell or row/column header with the mouse cursor. In case the row/column header was
   * hovered, the index is negative.
   *
   * For example, hovering over the row header of cell (0, 0) results with `afterOnCellMouseOver` called
   * with coords `{row: 0, col: -1}`.
   *
   * @event Hooks#afterOnCellMouseOver
   * @param {Event} event `mouseover` event object.
   * @param {CellCoords} coords Hovered cell's visual coordinate object.
   * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
   */
  "afterOnCellMouseOver",
  /**
   * Fired after leaving a cell or row/column header with the mouse cursor.
   *
   * @event Hooks#afterOnCellMouseOut
   * @param {Event} event `mouseout` event object.
   * @param {CellCoords} coords Leaved cell's visual coordinate object.
   * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.
   */
  "afterOnCellMouseOut",
  /**
   * Fired after one or more columns are removed.
   *
   * @event Hooks#afterRemoveCol
   * @param {number} index Visual index of starter column.
   * @param {number} amount An amount of removed columns.
   * @param {number[]} physicalColumns An array of physical columns removed from the data source.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "afterRemoveCol",
  /**
   * Fired after one or more rows are removed.
   *
   * @event Hooks#afterRemoveRow
   * @param {number} index Visual index of starter row.
   * @param {number} amount An amount of removed rows.
   * @param {number[]} physicalRows An array of physical rows removed from the data source.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "afterRemoveRow",
  /**
   * Fired before starting rendering the cell.
   *
   * @event Hooks#beforeRenderer
   * @param {HTMLTableCellElement} TD Currently rendered cell's TD element.
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string|number} prop Column property name or a column index, if datasource is an array of arrays.
   * @param {*} value Value of the rendered cell.
   * @param {object} cellProperties Object containing the cell's properties.
   */
  "beforeRenderer",
  /**
   * Fired after finishing rendering the cell (after the renderer finishes).
   *
   * @event Hooks#afterRenderer
   * @param {HTMLTableCellElement} TD Currently rendered cell's TD element.
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string|number} prop Column property name or a column index, if datasource is an array of arrays.
   * @param {*} value Value of the rendered cell.
   * @param {object} cellProperties Object containing the cell's properties.
   */
  "afterRenderer",
  /**
   * Fired after the order of rows has changed.
   * This hook is fired by changing row indexes of any type supported by the {@link IndexMapper}.
   *
   * @event Hooks#afterRowSequenceChange
   * @param {'init'|'remove'|'insert'|'move'|'update'} [source] A string that indicates what caused the change to the order of rows.
   */
  "afterRowSequenceChange",
  /**
   * Fired after the horizontal scroll event.
   *
   * @event Hooks#afterScrollHorizontally
   */
  "afterScrollHorizontally",
  /**
   * Fired after the vertical scroll event.
   *
   * @event Hooks#afterScrollVertically
   */
  "afterScrollVertically",
  /**
   * Fired after one or more cells are selected (e.g. During mouse move).
   *
   * @event Hooks#afterSelection
   * @param {number} row Selection start visual row index.
   * @param {number} column Selection start visual column index.
   * @param {number} row2 Selection end visual row index.
   * @param {number} column2 Selection end visual column index.
   * @param {object} preventScrolling A reference to the observable object with the `value` property.
   *                                  Property `preventScrolling.value` expects a boolean value that
   *                                  Handsontable uses to control scroll behavior after selection.
   * @param {object} preventScrolling Object with `value` property where its value change will be observed.
   * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.
   * @example
   * ::: only-for javascript
   * ```js
   * new Handsontable(element, {
   *   afterSelection: (row, column, row2, column2, preventScrolling, selectionLayerLevel) => {
   *     // If set to `false` (default): when cell selection is outside the viewport,
   *     // Handsontable scrolls the viewport to cell selection's end corner.
   *     // If set to `true`: when cell selection is outside the viewport,
   *     // Handsontable doesn't scroll to cell selection's end corner.
   *     preventScrolling.value = true;
   *   }
   * })
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * <HotTable
   *   afterSelection={(row, column, row2, column2, preventScrolling, selectionLayerLevel) => {
   *     // If set to `false` (default): when cell selection is outside the viewport,
   *     // Handsontable scrolls the viewport to cell selection's end corner.
   *     // If set to `true`: when cell selection is outside the viewport,
   *     // Handsontable doesn't scroll to cell selection's end corner.
   *     preventScrolling.value = true;
   *   }}
   * />
   * ```
   * :::
   */
  "afterSelection",
  /**
   * Fired after one or more cells are selected.
   *
   * The `prop` and `prop2` arguments represent the source object property name instead of the column number.
   *
   * @event Hooks#afterSelectionByProp
   * @param {number} row Selection start visual row index.
   * @param {string} prop Selection start data source object property name.
   * @param {number} row2 Selection end visual row index.
   * @param {string} prop2 Selection end data source object property name.
   * @param {object} preventScrolling Object with `value` property where its value change will be observed.
   * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.
   * @example
   * ```js
   * ::: only-for javascript
   * new Handsontable(element, {
   *   afterSelectionByProp: (row, column, row2, column2, preventScrolling, selectionLayerLevel) => {
   *     // setting if prevent scrolling after selection
   *     preventScrolling.value = true;
   *   }
   * })
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * <HotTable
   *   afterSelectionByProp={(row, column, row2, column2, preventScrolling, selectionLayerLevel) => {
   *     // setting if prevent scrolling after selection
   *     preventScrolling.value = true;
   *   }}
   * />
   * ```
   * :::
   */
  "afterSelectionByProp",
  /**
   * Fired after one or more cells are selected (e.g. On mouse up).
   *
   * @event Hooks#afterSelectionEnd
   * @param {number} row Selection start visual row index.
   * @param {number} column Selection start visual column index.
   * @param {number} row2 Selection end visual row index.
   * @param {number} column2 Selection end visual column index.
   * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.
   */
  "afterSelectionEnd",
  /**
   * Fired after one or more cells are selected (e.g. On mouse up).
   *
   * The `prop` and `prop2` arguments represent the source object property name instead of the column number.
   *
   * @event Hooks#afterSelectionEndByProp
   * @param {number} row Selection start visual row index.
   * @param {string} prop Selection start data source object property index.
   * @param {number} row2 Selection end visual row index.
   * @param {string} prop2 Selection end data source object property index.
   * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.
   */
  "afterSelectionEndByProp",
  /**
   * Fired after cell meta is changed.
   *
   * @event Hooks#afterSetCellMeta
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string} key The updated meta key.
   * @param {*} value The updated meta value.
   */
  "afterSetCellMeta",
  /**
   * Fired after cell meta is removed.
   *
   * @event Hooks#afterRemoveCellMeta
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string} key The removed meta key.
   * @param {*} value Value which was under removed key of cell meta.
   */
  "afterRemoveCellMeta",
  /**
   * Fired after cell data was changed.
   *
   * @event Hooks#afterSetDataAtCell
   * @param {Array} changes An array of changes in format `[[row, column, oldValue, value], ...]`.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "afterSetDataAtCell",
  /**
   * Fired after cell data was changed.
   * Called only when `setDataAtRowProp` was executed.
   *
   * @event Hooks#afterSetDataAtRowProp
   * @param {Array} changes An array of changes in format `[[row, prop, oldValue, value], ...]`.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "afterSetDataAtRowProp",
  /**
   * Fired after cell source data was changed.
   *
   * @event Hooks#afterSetSourceDataAtCell
   * @since 8.0.0
   * @param {Array} changes An array of changes in format `[[row, column, oldValue, value], ...]`.
   * @param {string} [source] String that identifies source of hook call.
   */
  "afterSetSourceDataAtCell",
  /**
   * Fired after calling the `updateSettings` method.
   *
   * @event Hooks#afterUpdateSettings
   * @param {object} newSettings New settings object.
   */
  "afterUpdateSettings",
  /**
   * @description
   * A plugin hook executed after validator function, only if validator function is defined.
   * Validation result is the first parameter. This can be used to determinate if validation passed successfully or not.
   *
   * __Returning false from the callback will mark the cell as invalid__.
   *
   * @event Hooks#afterValidate
   * @param {boolean} isValid `true` if valid, `false` if not.
   * @param {*} value The value in question.
   * @param {number} row Visual row index.
   * @param {string|number} prop Property name / visual column index.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @returns {undefined | boolean} If `false` the cell will be marked as invalid, `true` otherwise.
   */
  "afterValidate",
  /**
   * Fired before successful change of language (when proper language code was set).
   *
   * @event Hooks#beforeLanguageChange
   * @since 0.35.0
   * @param {string} languageCode New language code.
   */
  "beforeLanguageChange",
  /**
   * Fired after successful change of language (when proper language code was set).
   *
   * @event Hooks#afterLanguageChange
   * @since 0.35.0
   * @param {string} languageCode New language code.
   */
  "afterLanguageChange",
  /**
   * Fired by {@link Autofill} plugin before populating the data in the autofill feature. This hook is fired when
   * {@link Options#fillHandle} option is enabled.
   *
   * @event Hooks#beforeAutofill
   * @param {Array[]} selectionData Data the autofill operation will start from.
   * @param {CellRange} sourceRange The range values will be filled from.
   * @param {CellRange} targetRange The range new values will be filled into.
   * @param {string} direction Declares the direction of the autofill. Possible values: `up`, `down`, `left`, `right`.
   *
   * @returns {boolean|Array[]} If false, the operation is cancelled. If array of arrays, the returned data
   *                              will be passed into `populateFromArray` instead of the default autofill
   *                              algorithm's result.
   */
  "beforeAutofill",
  /**
   * Fired by {@link Autofill} plugin after populating the data in the autofill feature. This hook is fired when
   * {@link Options#fillHandle} option is enabled.
   *
   * @event Hooks#afterAutofill
   * @since 8.0.0
   * @param {Array[]} fillData The data that was used to fill the `targetRange`. If `beforeAutofill` was used
   *                            and returned `[[]]`, this will be the same object that was returned from `beforeAutofill`.
   * @param {CellRange} sourceRange The range values will be filled from.
   * @param {CellRange} targetRange The range new values will be filled into.
   * @param {string} direction Declares the direction of the autofill. Possible values: `up`, `down`, `left`, `right`.
   */
  "afterAutofill",
  /**
   * Fired before aligning the cell contents.
   *
   * @event Hooks#beforeCellAlignment
   * @param {object} stateBefore An object with class names defining the cell alignment.
   * @param {CellRange[]} range An array of CellRange coordinates where the alignment will be applied.
   * @param {string} type Type of the alignment - either `horizontal` or `vertical`.
   * @param {string} alignmentClass String defining the alignment class added to the cell.
   * Possible values:
   * * `htLeft`
   * * `htCenter`
   * * `htRight`
   * * `htJustify`
   * * `htTop`
   * * `htMiddle`
   * * `htBottom`.
   */
  "beforeCellAlignment",
  /**
   * Fired before one or more cells are changed.
   *
   * Use this hook to silently alter the user's changes before Handsontable re-renders.
   *
   * To ignore the user's changes, use a nullified array or return `false`.
   *
   * @event Hooks#beforeChange
   * @param {Array[]} changes 2D array containing information about each of the edited cells `[[row, prop, oldVal, newVal], ...]`. `row` is a visual row index.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @returns {undefined | boolean} If `false` all changes were cancelled, `true` otherwise.
   * @example
   * ::: only-for javascript
   * ```js
   * // to alter a single change, overwrite the value with `changes[i][3]`
   * new Handsontable(element, {
   *   beforeChange: (changes, source) => {
   *     // [[row, prop, oldVal, newVal], ...]
   *     changes[0][3] = 10;
   *   }
   * });
   *
   * // to ignore a single change, set `changes[i]` to `null`
   * // or remove `changes[i]` from the array, by using `changes.splice(i, 1)`
   * new Handsontable(element, {
   *   beforeChange: (changes, source) => {
   *     // [[row, prop, oldVal, newVal], ...]
   *     changes[0] = null;
   *   }
   * });
   *
   * // to ignore all changes, return `false`
   * // or set the array's length to 0, by using `changes.length = 0`
   * new Handsontable(element, {
   *   beforeChange: (changes, source) => {
   *     // [[row, prop, oldVal, newVal], ...]
   *     return false;
   *   }
   * });
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * // to alter a single change, overwrite the desired value with `changes[i][3]`
   * <HotTable
   *   beforeChange={(changes, source) => {
   *     // [[row, prop, oldVal, newVal], ...]
   *     changes[0][3] = 10;
   *   }}
   * />
   *
   * // to ignore a single change, set `changes[i]` to `null`
   * // or remove `changes[i]` from the array, by using changes.splice(i, 1).
   * <HotTable
   *   beforeChange={(changes, source) => {
   *     // [[row, prop, oldVal, newVal], ...]
   *     changes[0] = null;
   *   }}
   * />
   *
   * // to ignore all changes, return `false`
   * // or set the array's length to 0 (`changes.length = 0`)
   * <HotTable
   *   beforeChange={(changes, source) => {
   *     // [[row, prop, oldVal, newVal], ...]
   *     return false;
   *   }}
   * />
   * ```
   * :::
   */
  "beforeChange",
  /**
   * Fired right before rendering the changes.
   *
   * @event Hooks#beforeChangeRender
   * @param {Array[]} changes Array in form of `[row, prop, oldValue, newValue]`.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "beforeChangeRender",
  /**
   * Fired before drawing the borders.
   *
   * @event Hooks#beforeDrawBorders
   * @param {Array} corners Array specifying the current selection borders.
   * @param {string} borderClassName Specifies the border class name.
   */
  "beforeDrawBorders",
  /**
   * Fired before getting cell settings.
   *
   * @event Hooks#beforeGetCellMeta
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {object} cellProperties Object containing the cell's properties.
   */
  "beforeGetCellMeta",
  /**
   * Fired before cell meta is removed.
   *
   * @event Hooks#beforeRemoveCellMeta
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string} key The removed meta key.
   * @param {*} value Value which is under removed key of cell meta.
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  "beforeRemoveCellMeta",
  /**
   * Fired before the Handsontable instance is initiated.
   *
   * @event Hooks#beforeInit
   */
  "beforeInit",
  /**
   * Fired before the Walkontable instance is initiated.
   *
   * @event Hooks#beforeInitWalkontable
   * @param {object} walkontableConfig Walkontable configuration object.
   */
  "beforeInitWalkontable",
  /**
   * Fired before Handsontable's [`data`](@/api/options.md#data)
   * gets modified by the [`loadData()`](@/api/core.md#loaddata) method
   * or the [`updateSettings()`](@/api/core.md#updatesettings) method.
   *
   * Read more:
   * - [Binding to data](@/guides/getting-started/binding-to-data.md)
   * - [Saving data](@/guides/getting-started/saving-data.md)
   *
   * @event Hooks#beforeLoadData
   * @since 8.0.0
   * @param {Array} sourceData An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data
   * @param {boolean} initialLoad A flag that indicates whether the data was loaded at Handsontable's initialization (`true`) or later (`false`)
   * @param {string} source The source of the call
   * @returns {Array} The returned array will be used as Handsontable's new dataset.
   */
  "beforeLoadData",
  /**
   * Fired before the [`updateData()`](@/api/core.md#updatedata) method
   * modifies Handsontable's [`data`](@/api/options.md#data).
   *
   * Read more:
   * - [Binding to data](@/guides/getting-started/binding-to-data.md)
   * - [Saving data](@/guides/getting-started/saving-data.md)
   *
   * @event Hooks#beforeUpdateData
   * @since 11.1.0
   * @param {Array} sourceData An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data
   * @param {boolean} initialLoad A flag that indicates whether the data was loaded at Handsontable's initialization (`true`) or later (`false`)
   * @param {string} source The source of the call
   * @returns {Array} The returned array will be used as Handsontable's new dataset.
   */
  "beforeUpdateData",
  /**
   * Hook fired before keydown event is handled. It can be used to stop default key bindings.
   *
   * __Note__: To prevent default behavior you need to call `false` in your `beforeKeyDown` handler.
   *
   * @event Hooks#beforeKeyDown
   * @param {Event} event Original DOM event.
   */
  "beforeKeyDown",
  /**
   * Fired after the user clicked a cell, but before all the calculations related with it.
   *
   * @event Hooks#beforeOnCellMouseDown
   * @param {Event} event The `mousedown` event object.
   * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.
   * @param {HTMLTableCellElement} TD TD element.
   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
   *                            a boolean value that allows or disallows changing the selection for that particular area.
   */
  "beforeOnCellMouseDown",
  /**
   * Fired after the user clicked a cell.
   *
   * @event Hooks#beforeOnCellMouseUp
   * @param {Event} event The `mouseup` event object.
   * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.
   * @param {HTMLTableCellElement} TD TD element.
   */
  "beforeOnCellMouseUp",
  /**
   * Fired after the user clicked a cell, but before all the calculations related with it.
   *
   * @event Hooks#beforeOnCellContextMenu
   * @since 4.1.0
   * @param {Event} event The `contextmenu` event object.
   * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.
   * @param {HTMLTableCellElement} TD TD element.
   */
  "beforeOnCellContextMenu",
  /**
   * Fired after the user moved cursor over a cell, but before all the calculations related with it.
   *
   * @event Hooks#beforeOnCellMouseOver
   * @param {Event} event The `mouseover` event object.
   * @param {CellCoords} coords CellCoords object containing the visual coordinates of the clicked cell.
   * @param {HTMLTableCellElement} TD TD element.
   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
   *                            a boolean value that allows or disallows changing the selection for that particular area.
   */
  "beforeOnCellMouseOver",
  /**
   * Fired after the user moved cursor out from a cell, but before all the calculations related with it.
   *
   * @event Hooks#beforeOnCellMouseOut
   * @param {Event} event The `mouseout` event object.
   * @param {CellCoords} coords CellCoords object containing the visual coordinates of the leaved cell.
   * @param {HTMLTableCellElement} TD TD element.
   */
  "beforeOnCellMouseOut",
  /**
   * Fired before one or more columns are about to be removed.
   *
   * @event Hooks#beforeRemoveCol
   * @param {number} index Visual index of starter column.
   * @param {number} amount Amount of columns to be removed.
   * @param {number[]} physicalColumns An array of physical columns removed from the data source.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  "beforeRemoveCol",
  /**
   * Fired when one or more rows are about to be removed.
   *
   * @event Hooks#beforeRemoveRow
   * @param {number} index Visual index of starter row.
   * @param {number} amount Amount of rows to be removed.
   * @param {number[]} physicalRows An array of physical rows removed from the data source.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  "beforeRemoveRow",
  /**
   * Fired before Handsontable's view-rendering engine is rendered.
   *
   * __Note:__ In Handsontable 9.x and earlier, the `beforeViewRender` hook was named `beforeRender`.
   *
   * @event Hooks#beforeViewRender
   * @since 10.0.0
   * @param {boolean} isForced If set to `true`, the rendering gets triggered by a change of settings, a change of
   *                           data, or a logic that needs a full Handsontable render cycle.
   *                           If set to `false`, the rendering gets triggered by scrolling or moving the selection.
   * @param {object} skipRender Object with `skipRender` property, if it is set to `true ` the next rendering cycle will be skipped.
   */
  "beforeViewRender",
  /**
   * Fired after Handsontable's view-rendering engine is rendered,
   * but before redrawing the selection borders and before scroll syncing.
   *
   * __Note:__ In Handsontable 9.x and earlier, the `afterViewRender` hook was named `afterRender`.
   *
   * @event Hooks#afterViewRender
   * @since 10.0.0
   * @param {boolean} isForced If set to `true`, the rendering gets triggered by a change of settings, a change of
   *                           data, or a logic that needs a full Handsontable render cycle.
   *                           If set to `false`, the rendering gets triggered by scrolling or moving the selection.
   */
  "afterViewRender",
  /**
   * Fired before Handsontable's view-rendering engine updates the view.
   *
   * The `beforeRender` event is fired right after the Handsontable
   * business logic is executed and right before the rendering engine starts calling
   * the Core logic, renderers, cell meta objects etc. to update the view.
   *
   * @event Hooks#beforeRender
   * @param {boolean} isForced If set to `true`, the rendering gets triggered by a change of settings, a change of
   *                           data, or a logic that needs a full Handsontable render cycle.
   *                           If set to `false`, the rendering gets triggered by scrolling or moving the selection.
   */
  "beforeRender",
  /**
   * Fired after Handsontable's view-rendering engine updates the view.
   *
   * @event Hooks#afterRender
   * @param {boolean} isForced If set to `true`, the rendering gets triggered by a change of settings, a change of
   *                           data, or a logic that needs a full Handsontable render cycle.
   *                           If set to `false`, the rendering gets triggered by scrolling or moving the selection.
   */
  "afterRender",
  /**
   * Fired before cell meta is changed.
   *
   * @event Hooks#beforeSetCellMeta
   * @since 8.0.0
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {string} key The updated meta key.
   * @param {*} value The updated meta value.
   * @returns {boolean|undefined} If false is returned the action is canceled.
   */
  "beforeSetCellMeta",
  /**
   * Fired before setting range is started but not finished yet.
   *
   * @event Hooks#beforeSetRangeStartOnly
   * @param {CellCoords} coords CellCoords instance.
   */
  "beforeSetRangeStartOnly",
  /**
   * Fired before setting range is started.
   *
   * @event Hooks#beforeSetRangeStart
   * @param {CellCoords} coords CellCoords instance.
   */
  "beforeSetRangeStart",
  /**
   * Fired before setting range is ended.
   *
   * @event Hooks#beforeSetRangeEnd
   * @param {CellCoords} coords CellCoords instance.
   */
  "beforeSetRangeEnd",
  /**
   * Fired before the logic of handling a touch scroll, when user started scrolling on a touch-enabled device.
   *
   * @event Hooks#beforeTouchScroll
   */
  "beforeTouchScroll",
  /**
   * Fired before cell validation, only if validator function is defined. This can be used to manipulate the value
   * of changed cell before it is applied to the validator function.
   *
   * __Note:__ this will not affect values of changes. This will change value *ONLY* for validation.
   *
   * @event Hooks#beforeValidate
   * @param {*} value Value of the cell.
   * @param {number} row Visual row index.
   * @param {string|number} prop Property name / column index.
   * @param {string} [source] String that identifies source of hook call
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   */
  "beforeValidate",
  /**
   * Fired before cell value is rendered into the DOM (through renderer function). This can be used to manipulate the
   * value which is passed to the renderer without modifying the renderer itself.
   *
   * @event Hooks#beforeValueRender
   * @param {*} value Cell value to render.
   * @param {object} cellProperties An object containing the cell properties.
   */
  "beforeValueRender",
  /**
   * Fired after Handsontable instance is constructed (using `new` operator).
   *
   * @event Hooks#construct
   */
  "construct",
  /**
   * Fired after Handsontable instance is initiated but before table is rendered.
   *
   * @event Hooks#init
   */
  "init",
  /**
   * Fired when a column header index is about to be modified by a callback function.
   *
   * @event Hooks#modifyColHeader
   * @param {number} column Visual column header index.
   */
  "modifyColHeader",
  /**
   * Fired when a column width is about to be modified by a callback function.
   *
   * @event Hooks#modifyColWidth
   * @param {number} width Current column width.
   * @param {number} column Visual column index.
   */
  "modifyColWidth",
  /**
   * Fired when a row header index is about to be modified by a callback function.
   *
   * @event Hooks#modifyRowHeader
   * @param {number} row Visual row header index.
   */
  "modifyRowHeader",
  /**
   * Fired when a row height is about to be modified by a callback function.
   *
   * @event Hooks#modifyRowHeight
   * @param {number} height Row height.
   * @param {number} row Visual row index.
   */
  "modifyRowHeight",
  /**
   * Fired when a data was retrieved or modified.
   *
   * @event Hooks#modifyData
   * @param {number} row Physical row index.
   * @param {number} column Visual column index.
   * @param {object} valueHolder Object which contains original value which can be modified by overwriting `.value` property.
   * @param {string} ioMode String which indicates for what operation hook is fired (`get` or `set`).
   */
  "modifyData",
  /**
   * Fired when a data was retrieved or modified from the source data set.
   *
   * @event Hooks#modifySourceData
   * @since 8.0.0
   * @param {number} row Physical row index.
   * @param {number} column Physical column index or property name.
   * @param {object} valueHolder Object which contains original value which can be modified by overwriting `.value` property.
   * @param {string} ioMode String which indicates for what operation hook is fired (`get` or `set`).
   */
  "modifySourceData",
  /**
   * Fired when a data was retrieved or modified.
   *
   * @event Hooks#modifyRowData
   * @param {number} row Physical row index.
   */
  "modifyRowData",
  /**
   * Used to modify the cell coordinates when using the `getCell` method, opening editor, getting value from the editor
   * and saving values from the closed editor.
   *
   * @event Hooks#modifyGetCellCoords
   * @since 0.36.0
   * @param {number} row Visual row index.
   * @param {number} column Visual column index.
   * @param {boolean} topmost If set to `true`, it returns the TD element from the topmost overlay. For example,
   *                          if the wanted cell is in the range of fixed rows, it will return a TD element
   *                          from the `top` overlay.
   * @returns {undefined|number[]}
   */
  "modifyGetCellCoords",
  /**
   * Allows modify the visual row index that is used to retrieve the row header element (TH) before it's
   * highlighted (proper CSS class names are added). Modifying the visual row index allows building a custom
   * implementation of the nested headers feature or other features that require highlighting other DOM
   * elements than that the rendering engine, by default, would have highlighted.
   *
   * @event Hooks#beforeHighlightingRowHeader
   * @since 8.4.0
   * @param {number} row Visual row index.
   * @param {number} headerLevel Column header level (0 = most distant to the table).
   * @param {object} highlightMeta An object that contains additional information about processed selection.
   * @returns {number|undefined}
   */
  "beforeHighlightingRowHeader",
  /**
   * Allows modify the visual column index that is used to retrieve the column header element (TH) before it's
   * highlighted (proper CSS class names are added). Modifying the visual column index allows building a custom
   * implementation of the nested headers feature or other features that require highlighting other DOM
   * elements than that the rendering engine, by default, would have highlighted.
   *
   * @event Hooks#beforeHighlightingColumnHeader
   * @since 8.4.0
   * @param {number} column Visual column index.
   * @param {number} headerLevel Row header level (0 = most distant to the table).
   * @param {object} highlightMeta An object that contains additional information about processed selection.
   * @returns {number|undefined}
   */
  "beforeHighlightingColumnHeader",
  /**
   * Fired by {@link PersistentState} plugin, after loading value, saved under given key, from browser local storage.
   *
   * The `persistentStateLoad` hook is fired even when the {@link Options#persistentState} option is disabled.
   *
   * @event Hooks#persistentStateLoad
   * @param {string} key Key.
   * @param {object} valuePlaceholder Object containing the loaded value under `valuePlaceholder.value` (if no value have been saved, `value` key will be undefined).
   */
  "persistentStateLoad",
  /**
   * Fired by {@link PersistentState} plugin after resetting data from local storage. If no key is given, all values associated with table will be cleared.
   * This hook is fired when {@link Options#persistentState} option is enabled.
   *
   * @event Hooks#persistentStateReset
   * @param {string} [key] Key.
   */
  "persistentStateReset",
  /**
   * Fired by {@link PersistentState} plugin, after saving value under given key in browser local storage.
   *
   * The `persistentStateSave` hook is fired even when the {@link Options#persistentState} option is disabled.
   *
   * @event Hooks#persistentStateSave
   * @param {string} key Key.
   * @param {Mixed} value Value to save.
   */
  "persistentStateSave",
  /**
   * Fired by {@link ColumnSorting} and {@link MultiColumnSorting} plugins before sorting the column. If you return `false` value inside callback for hook, then sorting
   * will be not applied by the Handsontable (useful for server-side sorting).
   *
   * This hook is fired when {@link Options#columnSorting} or {@link Options#multiColumnSorting} option is enabled.
   *
   * @event Hooks#beforeColumnSort
   * @param {Array} currentSortConfig Current sort configuration (for all sorted columns).
   * @param {Array} destinationSortConfigs Destination sort configuration (for all sorted columns).
   * @returns {boolean | undefined} If `false` the column will not be sorted, `true` otherwise.
   */
  "beforeColumnSort",
  /**
   * Fired by {@link ColumnSorting} and {@link MultiColumnSorting} plugins after sorting the column. This hook is fired when {@link Options#columnSorting}
   * or {@link Options#multiColumnSorting} option is enabled.
   *
   * @event Hooks#afterColumnSort
   * @param {Array} currentSortConfig Current sort configuration (for all sorted columns).
   * @param {Array} destinationSortConfigs Destination sort configuration (for all sorted columns).
   */
  "afterColumnSort",
  /**
   * Fired by {@link Autofill} plugin after setting range of autofill. This hook is fired when {@link Options#fillHandle}
   * option is enabled.
   *
   * @event Hooks#modifyAutofillRange
   * @param {Array} startArea Array of visual coordinates of the starting point for the drag-down operation (`[startRow, startColumn, endRow, endColumn]`).
   * @param {Array} entireArea Array of visual coordinates of the entire area of the drag-down operation (`[startRow, startColumn, endRow, endColumn]`).
   */
  "modifyAutofillRange",
  /**
   * Fired to allow modifying the copyable range with a callback function.
   *
   * @event Hooks#modifyCopyableRange
   * @param {Array[]} copyableRanges Array of objects defining copyable cells.
   */
  "modifyCopyableRange",
  /**
   * Fired by {@link CopyPaste} plugin before copying the values to the clipboard and before clearing values of
   * the selected cells. This hook is fired when {@link Options#copyPaste} option is enabled.
   *
   * @event Hooks#beforeCut
   * @param {Array[]} data An array of arrays which contains data to cut.
   * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
   *                       which will be cut out.
   * @returns {*} If returns `false` then operation of the cutting out is canceled.
   * @example
   * ::: only-for javascript
   * ```js
   * // To disregard a single row, remove it from the array using data.splice(i, 1).
   * new Handsontable(element, {
   *   beforeCut: function(data, coords) {
   *     // data -> [[1, 2, 3], [4, 5, 6]]
   *     data.splice(0, 1);
   *     // data -> [[4, 5, 6]]
   *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
   *   }
   * });
   * // To cancel a cutting action, just return `false`.
   * new Handsontable(element, {
   *   beforeCut: function(data, coords) {
   *     return false;
   *   }
   * });
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * // To disregard a single row, remove it from the array using data.splice(i, 1).
   * <HotTable
   *   beforeCut={(data, coords) => {
   *     // data -> [[1, 2, 3], [4, 5, 6]]
   *     data.splice(0, 1);
   *     // data -> [[4, 5, 6]]
   *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
   *   }}
   * />
   * // To cancel a cutting action, just return `false`.
   * <HotTable
   *   beforeCut={(data, coords) => {
   *     return false;
   *   }}
   * />
   * ```
   * :::
   */
  "beforeCut",
  /**
   * Fired by {@link CopyPaste} plugin after data was cut out from the table. This hook is fired when
   * {@link Options#copyPaste} option is enabled.
   *
   * @event Hooks#afterCut
   * @param {Array[]} data An array of arrays with the cut data.
   * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
   *                       which was cut out.
   */
  "afterCut",
  /**
   * Fired before values are copied to the clipboard.
   *
   * @event Hooks#beforeCopy
   * @param {Array[]} data An array of arrays which contains data to copied.
   * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
   *                         which will copied.
   * @param {{ columnHeadersCount: number }} copiedHeadersCount (Since 12.3.0) The number of copied column headers.
   * @returns {*} If returns `false` then copying is canceled.
   *
   * @example
   * ::: only-for javascript
   * ```js
   * // To disregard a single row, remove it from array using data.splice(i, 1).
   * ...
   * new Handsontable(document.getElementById('example'), {
   *   beforeCopy: (data, coords) => {
   *     // data -> [[1, 2, 3], [4, 5, 6]]
   *     data.splice(0, 1);
   *     // data -> [[4, 5, 6]]
   *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
   *   }
   * });
   * ...
   *
   * // To cancel copying, return false from the callback.
   * ...
   * new Handsontable(document.getElementById('example'), {
   *   beforeCopy: (data, coords) => {
   *     return false;
   *   }
   * });
   * ...
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * // To disregard a single row, remove it from array using data.splice(i, 1).
   * ...
   * <HotTable
   *   beforeCopy={(data, coords) => {
   *     // data -> [[1, 2, 3], [4, 5, 6]]
   *     data.splice(0, 1);
   *     // data -> [[4, 5, 6]]
   *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
   *   }}
   * />
   * ...
   *
   * // To cancel copying, return false from the callback.
   * ...
   * <HotTable
   *   beforeCopy={(data, coords) => {
   *     return false;
   *   }}
   * />
   * ...
   * ```
   * :::
   */
  "beforeCopy",
  /**
   * Fired by {@link CopyPaste} plugin after data are pasted into table. This hook is fired when {@link Options#copyPaste}
   * option is enabled.
   *
   * @event Hooks#afterCopy
   * @param {Array[]} data An array of arrays which contains the copied data.
   * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
   *                         which was copied.
   * @param {{ columnHeadersCount: number }} copiedHeadersCount (Since 12.3.0) The number of copied column headers.
   */
  "afterCopy",
  /**
   * Fired by {@link CopyPaste} plugin before values are pasted into table. This hook is fired when
   * {@link Options#copyPaste} option is enabled.
   *
   * @event Hooks#beforePaste
   * @param {Array[]} data An array of arrays which contains data to paste.
   * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
   *                       that correspond to the previously selected area.
   * @returns {*} If returns `false` then pasting is canceled.
   * @example
   * ```js
   * ::: only-for javascript
   * // To disregard a single row, remove it from array using data.splice(i, 1).
   * new Handsontable(example, {
   *   beforePaste: (data, coords) => {
   *     // data -> [[1, 2, 3], [4, 5, 6]]
   *     data.splice(0, 1);
   *     // data -> [[4, 5, 6]]
   *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
   *   }
   * });
   * // To cancel pasting, return false from the callback.
   * new Handsontable(example, {
   *   beforePaste: (data, coords) => {
   *     return false;
   *   }
   * });
   * ```
   * :::
   *
   * ::: only-for react
   * ```jsx
   * // To disregard a single row, remove it from array using data.splice(i, 1).
   * <HotTable
   *   beforePaste={(data, coords) => {
   *     // data -> [[1, 2, 3], [4, 5, 6]]
   *     data.splice(0, 1);
   *     // data -> [[4, 5, 6]]
   *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]
   *   }}
   * />
   * // To cancel pasting, return false from the callback.
   * <HotTable
   *   beforePaste={(data, coords) => {
   *     return false;
   *   }}
   * />
   * ```
   * :::
   */
  "beforePaste",
  /**
   * Fired by {@link CopyPaste} plugin after values are pasted into table. This hook is fired when
   * {@link Options#copyPaste} option is enabled.
   *
   * @event Hooks#afterPaste
   * @param {Array[]} data An array of arrays with the pasted data.
   * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
   *                       that correspond to the previously selected area.
   */
  "afterPaste",
  /**
   * Fired by the {@link ManualColumnFreeze} plugin, before freezing a column.
   *
   * @event Hooks#beforeColumnFreeze
   * @since 12.1.0
   * @param {number} column The visual index of the column that is going to freeze.
   * @param {boolean} freezePerformed If `true`: the column is going to freeze. If `false`: the column is not going to freeze (which might happen if the column is already frozen).
   * @returns {boolean|undefined} If `false`: the column is not going to freeze, and the `afterColumnFreeze` hook won't fire.
   */
  "beforeColumnFreeze",
  /**
   * Fired by the {@link ManualColumnFreeze} plugin, right after freezing a column.
   *
   * @event Hooks#afterColumnFreeze
   * @since 12.1.0
   * @param {number} column The visual index of the frozen column.
   * @param {boolean} freezePerformed If `true`: the column got successfully frozen. If `false`: the column didn't get frozen.
   */
  "afterColumnFreeze",
  /**
   * Fired by {@link ManualColumnMove} plugin before change order of the visual indexes. This hook is fired when
   * {@link Options#manualColumnMove} option is enabled.
   *
   * @event Hooks#beforeColumnMove
   * @param {Array} movedColumns Array of visual column indexes to be moved.
   * @param {number} finalIndex Visual column index, being a start index for the moved columns.
   *                            Points to where the elements will be placed after the moving action.
   *                            To check visualization of final index please take a look at
   *                            [documentation](@/guides/columns/column-moving.md).
   * @param {number|undefined} dropIndex Visual column index, being a drop index for the moved columns.
   *                                     Points to where we are going to drop the moved elements. To check
   *                                     visualization of drop index please take a look at
   *                                     [documentation](@/guides/columns/column-moving.md).
   *                                     It's `undefined` when `dragColumns` function wasn't called.
   * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.
   * @returns {undefined | boolean} If `false` the column will not be moved, `true` otherwise.
   */
  "beforeColumnMove",
  /**
   * Fired by {@link ManualColumnMove} plugin after changing order of the visual indexes.
   * This hook is fired when {@link Options#manualColumnMove} option is enabled.
   *
   * @event Hooks#afterColumnMove
   * @param {Array} movedColumns Array of visual column indexes to be moved.
   * @param {number} finalIndex Visual column index, being a start index for the moved columns.
   *                            Points to where the elements will be placed after the moving action.
   *                            To check visualization of final index please take a look at
   *                            [documentation](@/guides/columns/column-moving.md).
   * @param {number|undefined} dropIndex Visual column index, being a drop index for the moved columns.
   *                                     Points to where we are going to drop the moved elements.
   *                                     To check visualization of drop index please take a look at
   *                                     [documentation](@/guides/columns/column-moving.md).
   *                                     It's `undefined` when `dragColumns` function wasn't called.
   * @param {boolean} movePossible Indicates if it was possible to move columns to the desired position.
   * @param {boolean} orderChanged Indicates if order of columns was changed by move.
   */
  "afterColumnMove",
  /**
   * Fired by the {@link ManualColumnFreeze} plugin, before unfreezing a column.
   *
   * @event Hooks#beforeColumnUnfreeze
   * @since 12.1.0
   * @param {number} column The visual index of the column that is going to unfreeze.
   * @param {boolean} unfreezePerformed If `true`: the column is going to unfreeze. If `false`: the column is not going to unfreeze (which might happen if the column is already unfrozen).
   * @returns {boolean|undefined} If `false`: the column is not going to unfreeze, and the `afterColumnUnfreeze` hook won't fire.
   */
  "beforeColumnUnfreeze",
  /**
   * Fired by the {@link ManualColumnFreeze} plugin, right after unfreezing a column.
   *
   * @event Hooks#afterColumnUnfreeze
   * @since 12.1.0
   * @param {number} column The visual index of the unfrozen column.
   * @param {boolean} unfreezePerformed If `true`: the column got successfully unfrozen. If `false`: the column didn't get unfrozen.
   */
  "afterColumnUnfreeze",
  /**
   * Fired by {@link ManualRowMove} plugin before changing the order of the visual indexes. This hook is fired when
   * {@link Options#manualRowMove} option is enabled.
   *
   * @event Hooks#beforeRowMove
   * @param {Array} movedRows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows.
   *                            Points to where the elements will be placed after the moving action.
   *                            To check visualization of final index please take a look at
   *                            [documentation](@/guides/rows/row-moving.md).
   * @param {number|undefined} dropIndex Visual row index, being a drop index for the moved rows.
   *                                     Points to where we are going to drop the moved elements.
   *                                     To check visualization of drop index please take a look at
   *                                     [documentation](@/guides/rows/row-moving.md).
   *                                     It's `undefined` when `dragRows` function wasn't called.
   * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  "beforeRowMove",
  /**
   * Fired by {@link ManualRowMove} plugin after changing the order of the visual indexes.
   * This hook is fired when {@link Options#manualRowMove} option is enabled.
   *
   * @event Hooks#afterRowMove
   * @param {Array} movedRows Array of visual row indexes to be moved.
   * @param {number} finalIndex Visual row index, being a start index for the moved rows.
   *                            Points to where the elements will be placed after the moving action.
   *                            To check visualization of final index please take a look at
   *                            [documentation](@/guides/rows/row-moving.md).
   * @param {number|undefined} dropIndex Visual row index, being a drop index for the moved rows.
   *                                     Points to where we are going to drop the moved elements.
   *                                     To check visualization of drop index please take a look at
   *                                     [documentation](@/guides/rows/row-moving.md).
   *                                     It's `undefined` when `dragRows` function wasn't called.
   * @param {boolean} movePossible Indicates if it was possible to move rows to the desired position.
   * @param {boolean} orderChanged Indicates if order of rows was changed by move.
   */
  "afterRowMove",
  /**
   * Fired by {@link ManualColumnResize} plugin before rendering the table with modified column sizes. This hook is
   * fired when {@link Options#manualColumnResize} option is enabled.
   *
   * @event Hooks#beforeColumnResize
   * @param {number} newSize Calculated new column width.
   * @param {number} column Visual index of the resized column.
   * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.
   * @returns {number} Returns a new column size or `undefined`, if column size should be calculated automatically.
   */
  "beforeColumnResize",
  /**
   * Fired by {@link ManualColumnResize} plugin after rendering the table with modified column sizes. This hook is
   * fired when {@link Options#manualColumnResize} option is enabled.
   *
   * @event Hooks#afterColumnResize
   * @param {number} newSize Calculated new column width.
   * @param {number} column Visual index of the resized column.
   * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.
   */
  "afterColumnResize",
  /**
   * Fired by {@link ManualRowResize} plugin before rendering the table with modified row sizes. This hook is
   * fired when {@link Options#manualRowResize} option is enabled.
   *
   * @event Hooks#beforeRowResize
   * @param {number} newSize Calculated new row height.
   * @param {number} row Visual index of the resized row.
   * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.
   * @returns {number|undefined} Returns the new row size or `undefined` if row size should be calculated automatically.
   */
  "beforeRowResize",
  /**
   * Fired by {@link ManualRowResize} plugin after rendering the table with modified row sizes. This hook is
   * fired when {@link Options#manualRowResize} option is enabled.
   *
   * @event Hooks#afterRowResize
   * @param {number} newSize Calculated new row height.
   * @param {number} row Visual index of the resized row.
   * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.
   */
  "afterRowResize",
  /**
   * Fired after getting the column header renderers.
   *
   * @event Hooks#afterGetColumnHeaderRenderers
   * @param {Function[]} renderers An array of the column header renderers.
   */
  "afterGetColumnHeaderRenderers",
  /**
   * Fired after getting the row header renderers.
   *
   * @event Hooks#afterGetRowHeaderRenderers
   * @param {Function[]} renderers An array of the row header renderers.
   */
  "afterGetRowHeaderRenderers",
  /**
   * Fired before applying stretched column width to column.
   *
   * @event Hooks#beforeStretchingColumnWidth
   * @param {number} stretchedWidth Calculated width.
   * @param {number} column Visual column index.
   * @returns {number|undefined} Returns new width which will be applied to the column element.
   */
  "beforeStretchingColumnWidth",
  /**
   * Fired by the [`Filters`](@/api/filters.md) plugin,
   * before a [column filter](@/guides/columns/column-filter.md) gets applied.
   *
   * [`beforeFilter`](#beforefilter) takes one argument (`conditionsStack`), which is an array of objects.
   * Each object represents one of your [column filters](@/api/filters.md#addcondition),
   * and consists of the following properties:
   *
   * | Property     | Possible values                                                         | Description                                                                                                              |
   * | ------------ | ----------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ |
   * | `column`     | Number                                                                  | A visual index of the column to which the filter will be applied.                                                        |
   * | `conditions` | Array of objects                                                        | Each object represents one condition. For details, see [`addCondition()`](@/api/filters.md#addcondition).                |
   * | `operation`  | `'conjunction'` \| `'disjunction'` \| `'disjunctionWithExtraCondition'` | An operation to perform on your set of `conditions`. For details, see [`addCondition()`](@/api/filters.md#addcondition). |
   *
   * An example of the format of the `conditionsStack` argument:
   *
   * ```js
   * [
   *   {
   *     column: 2,
   *     conditions: [
   *       {name: 'begins_with', args: [['S']]}
   *     ],
   *     operation: 'conjunction'
   *   },
   *   {
   *     column: 4,
   *     conditions: [
   *       {name: 'not_empty', args: []}
   *     ],
   *     operation: 'conjunction'
   *   },
   * ]
   * ```
   *
   * To perform server-side filtering (i.e., to not apply filtering to Handsontable's UI),
   * set [`beforeFilter`](#beforefilter) to return `false`:
   *
   * ```js
   * new Handsontable(document.getElementById('example'), {
   *   beforeFilter: (conditionsStack) => {
   *     return false;
   *   }
   * });
   *```
   *
   * Read more:
   * - [Guides: Column filter](@/guides/columns/column-filter.md)
   * - [Hooks: `afterFilter`](#afterfilter)
   * - [Options: `filters`](@/api/options.md#filters)
   * - [Plugins: `Filters`](@/api/filters.md)
   * â [Plugin methods: `addCondition()`](@/api/filters.md#addcondition)
   *
   * @event Hooks#beforeFilter
   * @param {object[]} conditionsStack An array of objects with your [column filters](@/api/filters.md#addcondition).
   * @returns {boolean} To perform server-side filtering (i.e., to not apply filtering to Handsontable's UI), return `false`.
   */
  "beforeFilter",
  /**
   * Fired by the [`Filters`](@/api/filters.md) plugin,
   * after a [column filter](@/guides/columns/column-filter.md) gets applied.
   *
   * [`afterFilter`](#afterfilter) takes one argument (`conditionsStack`), which is an array of objects.
   * Each object represents one of your [column filters](@/api/filters.md#addcondition),
   * and consists of the following properties:
   *
   * | Property     | Possible values                                                         | Description                                                                                                              |
   * | ------------ | ----------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ |
   * | `column`     | Number                                                                  | A visual index of the column to which the filter was applied.                                                            |
   * | `conditions` | Array of objects                                                        | Each object represents one condition. For details, see [`addCondition()`](@/api/filters.md#addcondition).                |
   * | `operation`  | `'conjunction'` \| `'disjunction'` \| `'disjunctionWithExtraCondition'` | An operation to perform on your set of `conditions`. For details, see [`addCondition()`](@/api/filters.md#addcondition). |
   *
   * An example of the format of the `conditionsStack` argument:
   *
   * ```js
   * [
   *   {
   *     column: 2,
   *     conditions: [
   *       {name: 'begins_with', args: [['S']]}
   *     ],
   *     operation: 'conjunction'
   *   },
   *   {
   *     column: 4,
   *     conditions: [
   *       {name: 'not_empty', args: []}
   *     ],
   *     operation: 'conjunction'
   *   },
   * ]
   * ```
   *
   * Read more:
   * - [Guides: Column filter](@/guides/columns/column-filter.md)
   * - [Hooks: `beforeFilter`](#beforefilter)
   * - [Options: `filters`](@/api/options.md#filters)
   * - [Plugins: `Filters`](@/api/filters.md)
   * â [Plugin methods: `addCondition()`](@/api/filters.md#addcondition)
   *
   * @event Hooks#afterFilter
   * @param {object[]} conditionsStack An array of objects with your [column filters](@/api/filters.md#addcondition).
   */
  "afterFilter",
  /**
   * Fired by the {@link Formulas} plugin, when any cell value changes.
   *
   * Returns an array of objects that contains:
   * - The addresses (`sheet`, `row`, `col`) and new values (`newValue`) of the changed cells.
   * - The addresses and new values of any cells that had to be recalculated (because their formulas depend on the cells that changed).
   *
   * This hook gets also fired on Handsontable's initialization, returning the addresses and values of all cells.
   *
   * Read more:
   * - [Guides: Formula calculation](@/guides/formulas/formula-calculation.md)
   * - [HyperFormula documentation: `valuesUpdated`](https://hyperformula.handsontable.com/api/interfaces/listeners.html#valuesupdated)
   *
   * @since 9.0.0
   * @event Hooks#afterFormulasValuesUpdate
   * @param {Array} changes The addresses and new values of all the changed and recalculated cells.
   */
  "afterFormulasValuesUpdate",
  /**
   * Fired when a named expression is added to the Formulas' engine instance.
   *
   * @since 9.0.0
   * @event Hooks#afterNamedExpressionAdded
   * @param {string} namedExpressionName The name of the added expression.
   * @param {Array} changes The values and location of applied changes.
   */
  "afterNamedExpressionAdded",
  /**
   * Fired when a named expression is removed from the Formulas' engine instance.
   *
   * @since 9.0.0
   * @event Hooks#afterNamedExpressionRemoved
   * @param {string} namedExpressionName The name of the removed expression.
   * @param {Array} changes The values and location of applied changes.
   */
  "afterNamedExpressionRemoved",
  /**
   * Fired when a new sheet is added to the Formulas' engine instance.
   *
   * @since 9.0.0
   * @event Hooks#afterSheetAdded
   * @param {string} addedSheetDisplayName The name of the added sheet.
   */
  "afterSheetAdded",
  /**
   * Fired when a sheet in the Formulas' engine instance is renamed.
   *
   * @since 9.0.0
   * @event Hooks#afterSheetRenamed
   * @param {string} oldDisplayName The old name of the sheet.
   * @param {string} newDisplayName The new name of the sheet.
   */
  "afterSheetRenamed",
  /**
   * Fired when a sheet is removed from the Formulas' engine instance.
   *
   * @since 9.0.0
   * @event Hooks#afterSheetRemoved
   * @param {string} removedSheetDisplayName The removed sheet name.
   * @param {Array} changes The values and location of applied changes.
   */
  "afterSheetRemoved",
  /**
   * Fired while retrieving the column header height.
   *
   * @event Hooks#modifyColumnHeaderHeight
   */
  "modifyColumnHeaderHeight",
  /**
   * Fired while retrieving a column header's value.
   *
   * @since 12.3.0
   * @event Hooks#modifyColumnHeaderValue
   * @param {string} value A column header value.
   * @param {number} visualColumnIndex A visual column index.
   * @param {number} [headerLevel=0] Header level index. Accepts positive (0 to n)
   *                                 and negative (-1 to -n) values. For positive values, 0 points to the
   *                                 topmost header. For negative values, -1 points to the bottom-most
   *                                 header (the header closest to the cells).
   * @returns {string} The column header value to be updated.
   */
  "modifyColumnHeaderValue",
  /**
   * Fired by {@link UndoRedo} plugin before the undo action. Contains information about the action that is being undone.
   * This hook is fired when {@link Options#undo} option is enabled.
   *
   * @event Hooks#beforeUndo
   * @param {object} action The action object. Contains information about the action being undone. The `actionType`
   *                        property of the object specifies the type of the action in a String format. (e.g. `'remove_row'`).
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  "beforeUndo",
  /**
   * Fired by {@link UndoRedo} plugin before changing undo stack.
   *
   * @event Hooks#beforeUndoStackChange
   * @since 8.4.0
   * @param {Array} doneActions Stack of actions which may be undone.
   * @param {string} [source] String that identifies source of action
   *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).
   * @returns {*|boolean} If false is returned the action of changing undo stack is canceled.
   */
  "beforeUndoStackChange",
  /**
   * Fired by {@link UndoRedo} plugin after the undo action. Contains information about the action that is being undone.
   * This hook is fired when {@link Options#undo} option is enabled.
   *
   * @event Hooks#afterUndo
   * @param {object} action The action object. Contains information about the action being undone. The `actionType`
   *                        property of the object specifies the type of the action in a String format. (e.g. `'remove_row'`).
   */
  "afterUndo",
  /**
   * Fired by {@link UndoRedo} plugin after changing undo stack.
   *
   * @event Hooks#afterUndoStackChange
   * @since 8.4.0
   * @param {Array} doneActionsBefore Stack of actions which could be undone before performing new action.
   * @param {Array} doneActionsAfter Stack of actions which can be undone after performing new action.
   */
  "afterUndoStackChange",
  /**
   * Fired by {@link UndoRedo} plugin before the redo action. Contains information about the action that is being redone.
   * This hook is fired when {@link Options#undo} option is enabled.
   *
   * @event Hooks#beforeRedo
   * @param {object} action The action object. Contains information about the action being redone. The `actionType`
   *                        property of the object specifies the type of the action in a String format (e.g. `'remove_row'`).
   * @returns {*|boolean} If false is returned the action is canceled.
   */
  "beforeRedo",
  /**
   * Fired by {@link UndoRedo} plugin before changing redo stack.
   *
   * @event Hooks#beforeRedoStackChange
   * @since 8.4.0
   * @param {Array} undoneActions Stack of actions which may be redone.
   */
  "beforeRedoStackChange",
  /**
   * Fired by {@link UndoRedo} plugin after the redo action. Contains information about the action that is being redone.
   * This hook is fired when {@link Options#undo} option is enabled.
   *
   * @event Hooks#afterRedo
   * @param {object} action The action object. Contains information about the action being redone. The `actionType`
   *                        property of the object specifies the type of the action in a String format (e.g. `'remove_row'`).
   */
  "afterRedo",
  /**
   * Fired by {@link UndoRedo} plugin after changing redo stack.
   *
   * @event Hooks#afterRedoStackChange
   * @since 8.4.0
   * @param {Array} undoneActionsBefore Stack of actions which could be redone before performing new action.
   * @param {Array} undoneActionsAfter Stack of actions which can be redone after performing new action.
   */
  "afterRedoStackChange",
  /**
   * Fired while retrieving the row header width.
   *
   * @event Hooks#modifyRowHeaderWidth
   * @param {number} rowHeaderWidth Row header width.
   */
  "modifyRowHeaderWidth",
  /**
   * Fired from the `populateFromArray` method during the `autofill` process. Fired for each "autofilled" cell individually.
   *
   * @deprecated
   * @event Hooks#beforeAutofillInsidePopulate
   * @param {object} index Object containing `row` and `col` properties, defining the number of rows/columns from the initial cell of the autofill.
   * @param {string} direction Declares the direction of the autofill. Possible values: `up`, `down`, `left`, `right`.
   * @param {Array[]} input Contains an array of rows with data being used in the autofill.
   * @param {Array} deltas The deltas array passed to the `populateFromArray` method.
   */
  "beforeAutofillInsidePopulate",
  /**
   * Fired when the start of the selection is being modified (e.g. Moving the selection with the arrow keys).
   *
   * @event Hooks#modifyTransformStart
   * @param {CellCoords} delta Cell coords object declaring the delta of the new selection relative to the previous one.
   */
  "modifyTransformStart",
  /**
   * Fired when the end of the selection is being modified (e.g. Moving the selection with the arrow keys).
   *
   * @event Hooks#modifyTransformEnd
   * @param {CellCoords} delta Cell coords object declaring the delta of the new selection relative to the previous one.
   */
  "modifyTransformEnd",
  /**
   * Fired after the start of the selection is being modified (e.g. Moving the selection with the arrow keys).
   *
   * @event Hooks#afterModifyTransformStart
   * @param {CellCoords} coords Coords of the freshly selected cell.
   * @param {number} rowTransformDir `-1` if trying to select a cell with a negative row index. `0` otherwise.
   * @param {number} colTransformDir `-1` if trying to select a cell with a negative column index. `0` otherwise.
   */
  "afterModifyTransformStart",
  /**
   * Fired after the end of the selection is being modified (e.g. Moving the selection with the arrow keys).
   *
   * @event Hooks#afterModifyTransformEnd
   * @param {CellCoords} coords Visual coords of the freshly selected cell.
   * @param {number} rowTransformDir `-1` if trying to select a cell with a negative row index. `0` otherwise.
   * @param {number} colTransformDir `-1` if trying to select a cell with a negative column index. `0` otherwise.
   */
  "afterModifyTransformEnd",
  /**
   * Fired inside the `viewportRowCalculatorOverride` method. Allows modifying the row calculator parameters.
   *
   * @event Hooks#afterViewportRowCalculatorOverride
   * @param {object} calc The row calculator.
   */
  "afterViewportRowCalculatorOverride",
  /**
   * Fired inside the `viewportColumnCalculatorOverride` method. Allows modifying the row calculator parameters.
   *
   * @event Hooks#afterViewportColumnCalculatorOverride
   * @param {object} calc The row calculator.
   */
  "afterViewportColumnCalculatorOverride",
  /**
   * Fired after initializing all the plugins.
   * This hook should be added before Handsontable is initialized.
   *
   * @event Hooks#afterPluginsInitialized
   *
   * @example
   * ```js
   * Handsontable.hooks.add('afterPluginsInitialized', myCallback);
   * ```
   */
  "afterPluginsInitialized",
  /**
   * Fired by {@link HiddenRows} plugin before marking the rows as hidden. Fired only if the {@link Options#hiddenRows} option is enabled.
   * Returning `false` in the callback will prevent the hiding action from completing.
   *
   * @event Hooks#beforeHideRows
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.
   * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the hiding action will not be completed.
   */
  "beforeHideRows",
  /**
   * Fired by {@link HiddenRows} plugin after marking the rows as hidden. Fired only if the {@link Options#hiddenRows} option is enabled.
   *
   * @event Hooks#afterHideRows
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.
   * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.
   * @param {boolean} stateChanged `true`, if the action affected any non-hidden rows, `false` otherwise.
   */
  "afterHideRows",
  /**
   * Fired by {@link HiddenRows} plugin before marking the rows as not hidden. Fired only if the {@link Options#hiddenRows} option is enabled.
   * Returning `false` in the callback will prevent the row revealing action from completing.
   *
   * @event Hooks#beforeUnhideRows
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.
   * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the revealing action will not be completed.
   */
  "beforeUnhideRows",
  /**
   * Fired by {@link HiddenRows} plugin after marking the rows as not hidden. Fired only if the {@link Options#hiddenRows} option is enabled.
   *
   * @event Hooks#afterUnhideRows
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.
   * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.
   * @param {boolean} stateChanged `true`, if the action affected any hidden rows, `false` otherwise.
   */
  "afterUnhideRows",
  /**
   * Fired by {@link HiddenColumns} plugin before marking the columns as hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.
   * Returning `false` in the callback will prevent the hiding action from completing.
   *
   * @event Hooks#beforeHideColumns
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.
   * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the hiding action will not be completed.
   */
  "beforeHideColumns",
  /**
   * Fired by {@link HiddenColumns} plugin after marking the columns as hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.
   *
   * @event Hooks#afterHideColumns
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.
   * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.
   * @param {boolean} stateChanged `true`, if the action affected any non-hidden columns, `false` otherwise.
   */
  "afterHideColumns",
  /**
   * Fired by {@link HiddenColumns} plugin before marking the columns as not hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.
   * Returning `false` in the callback will prevent the column revealing action from completing.
   *
   * @event Hooks#beforeUnhideColumns
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.
   * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the hiding action will not be completed.
   */
  "beforeUnhideColumns",
  /**
   * Fired by {@link HiddenColumns} plugin after marking the columns as not hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.
   *
   * @event Hooks#afterUnhideColumns
   * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.
   * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.
   * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.
   * @param {boolean} stateChanged `true`, if the action affected any hidden columns, `false` otherwise.
   */
  "afterUnhideColumns",
  /**
   * Fired by {@link TrimRows} plugin before trimming rows. This hook is fired when {@link Options#trimRows} option is enabled.
   *
   * @event Hooks#beforeTrimRow
   * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.
   * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.
   * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the trimming action will not be completed.
   */
  "beforeTrimRow",
  /**
   * Fired by {@link TrimRows} plugin after trimming rows. This hook is fired when {@link Options#trimRows} option is enabled.
   *
   * @event Hooks#afterTrimRow
   * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.
   * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.
   * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.
   * @param {boolean} stateChanged `true`, if the action affected any non-trimmed rows, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the trimming action will not be completed.
   */
  "afterTrimRow",
  /**
   * Fired by {@link TrimRows} plugin before untrimming rows. This hook is fired when {@link Options#trimRows} option is enabled.
   *
   * @event Hooks#beforeUntrimRow
   * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.
   * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.
   * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the untrimming action will not be completed.
   */
  "beforeUntrimRow",
  /**
   * Fired by {@link TrimRows} plugin after untrimming rows. This hook is fired when {@link Options#trimRows} option is enabled.
   *
   * @event Hooks#afterUntrimRow
   * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.
   * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.
   * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.
   * @param {boolean} stateChanged `true`, if the action affected any trimmed rows, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the untrimming action will not be completed.
   */
  "afterUntrimRow",
  /**
   * Fired by {@link DropdownMenu} plugin before opening the dropdown menu. This hook is fired when {@link Options#dropdownMenu}
   * option is enabled.
   *
   * @event Hooks#beforeDropdownMenuShow
   * @param {DropdownMenu} dropdownMenu The DropdownMenu instance.
   */
  "beforeDropdownMenuShow",
  /**
   * Fired by {@link DropdownMenu} plugin after opening the Dropdown Menu. This hook is fired when {@link Options#dropdownMenu}
   * option is enabled.
   *
   * @event Hooks#afterDropdownMenuShow
   * @param {DropdownMenu} dropdownMenu The DropdownMenu instance.
   */
  "afterDropdownMenuShow",
  /**
   * Fired by {@link DropdownMenu} plugin after hiding the Dropdown Menu. This hook is fired when {@link Options#dropdownMenu}
   * option is enabled.
   *
   * @event Hooks#afterDropdownMenuHide
   * @param {DropdownMenu} instance The DropdownMenu instance.
   */
  "afterDropdownMenuHide",
  /**
   * Fired by {@link NestedRows} plugin before adding a children to the NestedRows structure. This hook is fired when
   * {@link Options#nestedRows} option is enabled.
   *
   * @event Hooks#beforeAddChild
   * @param {object} parent The parent object.
   * @param {object|undefined} element The element added as a child. If `undefined`, a blank child was added.
   * @param {number|undefined} index The index within the parent where the new child was added. If `undefined`, the element was added as the last child.
   */
  "beforeAddChild",
  /**
   * Fired by {@link NestedRows} plugin after adding a children to the NestedRows structure. This hook is fired when
   * {@link Options#nestedRows} option is enabled.
   *
   * @event Hooks#afterAddChild
   * @param {object} parent The parent object.
   * @param {object|undefined} element The element added as a child. If `undefined`, a blank child was added.
   * @param {number|undefined} index The index within the parent where the new child was added. If `undefined`, the element was added as the last child.
   */
  "afterAddChild",
  /**
   * Fired by {@link NestedRows} plugin before detaching a child from its parent. This hook is fired when
   * {@link Options#nestedRows} option is enabled.
   *
   * @event Hooks#beforeDetachChild
   * @param {object} parent An object representing the parent from which the element is to be detached.
   * @param {object} element The detached element.
   */
  "beforeDetachChild",
  /**
   * Fired by {@link NestedRows} plugin after detaching a child from its parent. This hook is fired when
   * {@link Options#nestedRows} option is enabled.
   *
   * @event Hooks#afterDetachChild
   * @param {object} parent An object representing the parent from which the element was detached.
   * @param {object} element The detached element.
   * @param {number} finalElementPosition The final row index of the detached element.
   */
  "afterDetachChild",
  /**
   * Fired after the editor is opened and rendered.
   *
   * @event Hooks#afterBeginEditing
   * @param {number} row Visual row index of the edited cell.
   * @param {number} column Visual column index of the edited cell.
   */
  "afterBeginEditing",
  /**
   * Fired by {@link MergeCells} plugin before cell merging. This hook is fired when {@link Options#mergeCells}
   * option is enabled.
   *
   * @event Hooks#beforeMergeCells
   * @param {CellRange} cellRange Selection cell range.
   * @param {boolean} [auto=false] `true` if called automatically by the plugin.
   */
  "beforeMergeCells",
  /**
   * Fired by {@link MergeCells} plugin after cell merging. This hook is fired when {@link Options#mergeCells}
   * option is enabled.
   *
   * @event Hooks#afterMergeCells
   * @param {CellRange} cellRange Selection cell range.
   * @param {object} mergeParent The parent collection of the provided cell range.
   * @param {boolean} [auto=false] `true` if called automatically by the plugin.
   */
  "afterMergeCells",
  /**
   * Fired by {@link MergeCells} plugin before unmerging the cells. This hook is fired when {@link Options#mergeCells}
   * option is enabled.
   *
   * @event Hooks#beforeUnmergeCells
   * @param {CellRange} cellRange Selection cell range.
   * @param {boolean} [auto=false] `true` if called automatically by the plugin.
   */
  "beforeUnmergeCells",
  /**
   * Fired by {@link MergeCells} plugin after unmerging the cells. This hook is fired when {@link Options#mergeCells}
   * option is enabled.
   *
   * @event Hooks#afterUnmergeCells
   * @param {CellRange} cellRange Selection cell range.
   * @param {boolean} [auto=false] `true` if called automatically by the plugin.
   */
  "afterUnmergeCells",
  /**
   * Fired after the table was switched into listening mode. This allows Handsontable to capture keyboard events and
   * respond in the right way.
   *
   * @event Hooks#afterListen
   */
  "afterListen",
  /**
   * Fired after the table was switched off from the listening mode. This makes the Handsontable inert for any
   * keyboard events.
   *
   * @event Hooks#afterUnlisten
   */
  "afterUnlisten",
  /**
   * Fired after the window was resized or the size of the Handsontable root element was changed.
   *
   * @event Hooks#afterRefreshDimensions
   * @param {object} previousDimensions Previous dimensions of the container.
   * @param {object} currentDimensions Current dimensions of the container.
   * @param {boolean} stateChanged `true`, if the container was re-render, `false` otherwise.
   */
  "afterRefreshDimensions",
  /**
   * Cancellable hook, called after resizing a window or after detecting size change of the
   * Handsontable root element, but before redrawing a table.
   *
   * @event Hooks#beforeRefreshDimensions
   * @param {object} previousDimensions Previous dimensions of the container.
   * @param {object} currentDimensions Current dimensions of the container.
   * @param {boolean} actionPossible `true`, if current and previous dimensions are different, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the refresh action will not be completed.
   */
  "beforeRefreshDimensions",
  /**
   * Fired by {@link CollapsibleColumns} plugin before columns collapse. This hook is fired when {@link Options#collapsibleColumns} option is enabled.
   *
   * @event Hooks#beforeColumnCollapse
   * @since 8.0.0
   * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.
   * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.
   * @param {boolean} collapsePossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the collapsing action will not be completed.
   */
  "beforeColumnCollapse",
  /**
   * Fired by {@link CollapsibleColumns} plugin before columns collapse. This hook is fired when {@link Options#collapsibleColumns} option is enabled.
   *
   * @event Hooks#afterColumnCollapse
   * @since 8.0.0
   * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.
   * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.
   * @param {boolean} collapsePossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.
   * @param {boolean} successfullyCollapsed `true`, if the action affected any non-collapsible column, `false` otherwise.
   */
  "afterColumnCollapse",
  /**
   * Fired by {@link CollapsibleColumns} plugin before columns expand. This hook is fired when {@link Options#collapsibleColumns} option is enabled.
   *
   * @event Hooks#beforeColumnExpand
   * @since 8.0.0
   * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.
   * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.
   * @param {boolean} expandPossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.
   * @returns {undefined|boolean} If the callback returns `false`, the expanding action will not be completed.
   */
  "beforeColumnExpand",
  /**
   * Fired by {@link CollapsibleColumns} plugin before columns expand. This hook is fired when {@link Options#collapsibleColumns} option is enabled.
   *
   * @event Hooks#afterColumnExpand
   * @since 8.0.0
   * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.
   * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.
   * @param {boolean} expandPossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.
   * @param {boolean} successfullyExpanded `true`, if the action affected any non-collapsible column, `false` otherwise.
   */
  "afterColumnExpand",
  /**
   * Fired by {@link AutoColumnSize} plugin within SampleGenerator utility.
   *
   * @event Hooks#modifyAutoColumnSizeSeed
   * @since 8.4.0
   * @param {string|undefined} seed Seed ID, unique name to categorize samples.
   * @param {object} cellProperties Object containing the cell properties.
   * @param {*} cellValue Value of the cell.
   */
  "modifyAutoColumnSizeSeed"
], Gae = ut(cI || (cI = Yae([`The plugin hook "[hookName]" was removed in Handsontable [removedInVersion]. 
  Please consult release notes https://github.com/handsontable/handsontable/releases/tag/[removedInVersion] to 
  learn about the migration path.`], [`The plugin hook "[hookName]" was removed in Handsontable [removedInVersion].\\x20
  Please consult release notes https://github.com/handsontable/handsontable/releases/tag/[removedInVersion] to\\x20
  learn about the migration path.`]))), Cw = /* @__PURE__ */ new Map([["modifyRow", "8.0.0"], ["modifyCol", "8.0.0"], ["unmodifyRow", "8.0.0"], ["unmodifyCol", "8.0.0"], ["skipLengthCache", "8.0.0"], ["hiddenColumn", "8.0.0"], ["hiddenRow", "8.0.0"]]), _w = /* @__PURE__ */ new Map([["beforeAutofillInsidePopulate", 'The plugin hook "beforeAutofillInsidePopulate" is deprecated and will be removed in the next major release.']]), NV = /* @__PURE__ */ function() {
  function e() {
    Vae(this, e), this.globalBucket = this.createEmptyBucket();
  }
  return Wae(e, [{
    key: "createEmptyBucket",
    value: function() {
      var r = /* @__PURE__ */ Object.create(null);
      return I(hl, function(n) {
        return r[n] = [];
      }), r;
    }
    /**
     * Get hook bucket based on the context of the object or if argument is `undefined`, get the global hook bucket.
     *
     * @param {object} [context=null] A Handsontable instance.
     * @returns {object} Returns a global or Handsontable instance bucket.
     */
  }, {
    key: "getBucket",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      return r ? (r.pluginHookBucket || (r.pluginHookBucket = this.createEmptyBucket()), r.pluginHookBucket) : this.globalBucket;
    }
    /**
     * Adds a listener (globally or locally) to a specified hook name.
     * If the `context` parameter is provided, the hook will be added only to the instance it references.
     * Otherwise, the callback will be used everytime the hook fires on any Handsontable instance.
     * You can provide an array of callback functions as the `callback` argument, this way they will all be fired
     * once the hook is triggered.
     *
     * @see Core#addHook
     * @param {string} key Hook name.
     * @param {Function|Array} callback Callback function or an array of functions.
     * @param {object} [context=null] The context for the hook callback to be added - a Handsontable instance or leave empty.
     * @returns {Hooks} Instance of Hooks.
     *
     * @example
     * ```js
     * // single callback, added locally
     * Handsontable.hooks.add('beforeInit', myCallback, hotInstance);
     *
     * // single callback, added globally
     * Handsontable.hooks.add('beforeInit', myCallback);
     *
     * // multiple callbacks, added locally
     * Handsontable.hooks.add('beforeInit', [myCallback, anotherCallback], hotInstance);
     *
     * // multiple callbacks, added globally
     * Handsontable.hooks.add('beforeInit', [myCallback, anotherCallback]);
     * ```
     */
  }, {
    key: "add",
    value: function(r, n) {
      var o = this, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      if (Array.isArray(n))
        I(n, function(s) {
          return o.add(r, s, i);
        });
      else {
        Cw.has(r) && ht(wV(Gae, {
          hookName: r,
          removedInVersion: Cw.get(r)
        })), _w.has(r) && ht(_w.get(r));
        var a = this.getBucket(i);
        if (typeof a[r] > "u" && (this.register(r), a[r] = []), n.skip = !1, a[r].indexOf(n) === -1) {
          var l = !1;
          n.initialHook && I(a[r], function(s, u) {
            if (s.initialHook)
              return a[r][u] = n, l = !0, !1;
          }), l || a[r].push(n);
        }
      }
      return this;
    }
    /**
     * Adds a listener to a specified hook. After the hook runs this listener will be automatically removed from the bucket.
     *
     * @see Core#addHookOnce
     * @param {string} key Hook/Event name.
     * @param {Function|Array} callback Callback function.
     * @param {object} [context=null] A Handsontable instance.
     *
     * @example
     * ```js
     * Handsontable.hooks.once('beforeInit', myCallback, hotInstance);
     * ```
     */
  }, {
    key: "once",
    value: function(r, n) {
      var o = this, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      Array.isArray(n) ? I(n, function(a) {
        return o.once(r, a, i);
      }) : (n.runOnce = !0, this.add(r, n, i));
    }
    /**
     * Removes a listener from a hook with a given name. If the `context` argument is provided, it removes a listener from a local hook assigned to the given Handsontable instance.
     *
     * @see Core#removeHook
     * @param {string} key Hook/Event name.
     * @param {Function} callback Callback function (needs the be the function that was previously added to the hook).
     * @param {object} [context=null] Handsontable instance.
     * @returns {boolean} Returns `true` if hook was removed, `false` otherwise.
     *
     * @example
     * ```js
     * Handsontable.hooks.remove('beforeInit', myCallback);
     * ```
     */
  }, {
    key: "remove",
    value: function(r, n) {
      var o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null, i = this.getBucket(o);
      return typeof i[r] < "u" && i[r].indexOf(n) >= 0 ? (n.skip = !0, !0) : !1;
    }
    /**
     * Checks whether there are any registered listeners for the provided hook name.
     * If the `context` parameter is provided, it only checks for listeners assigned to the given Handsontable instance.
     *
     * @param {string} key Hook name.
     * @param {object} [context=null] A Handsontable instance.
     * @returns {boolean} `true` for success, `false` otherwise.
     */
  }, {
    key: "has",
    value: function(r) {
      var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, o = this.getBucket(n);
      return !!(o[r] !== void 0 && o[r].length);
    }
    /**
     * Runs all local and global callbacks assigned to the hook identified by the `key` parameter.
     * It returns either a return value from the last called callback or the first parameter (`p1`) passed to the `run` function.
     *
     * @see Core#runHooks
     * @param {object} context Handsontable instance.
     * @param {string} key Hook/Event name.
     * @param {*} [p1] Parameter to be passed as an argument to the callback function.
     * @param {*} [p2] Parameter to be passed as an argument to the callback function.
     * @param {*} [p3] Parameter to be passed as an argument to the callback function.
     * @param {*} [p4] Parameter to be passed as an argument to the callback function.
     * @param {*} [p5] Parameter to be passed as an argument to the callback function.
     * @param {*} [p6] Parameter to be passed as an argument to the callback function.
     * @returns {*} Either a return value from the last called callback or `p1`.
     *
     * @example
     * ```js
     * Handsontable.hooks.run(hot, 'beforeInit');
     * ```
     */
  }, {
    key: "run",
    value: function(r, n, o, i, a, l, s, u) {
      {
        var f = this.globalBucket[n], c = f ? f.length : 0, h = 0;
        if (c)
          for (; h < c; ) {
            if (!f[h] || f[h].skip) {
              h += 1;
              continue;
            }
            var d = FC(f[h], r, o, i, a, l, s, u);
            d !== void 0 && (o = d), f[h] && f[h].runOnce && this.remove(n, f[h]), h += 1;
          }
      }
      {
        var y = this.getBucket(r)[n], p = y ? y.length : 0, g = 0;
        if (p)
          for (; g < p; ) {
            if (!y[g] || y[g].skip) {
              g += 1;
              continue;
            }
            var w = FC(y[g], r, o, i, a, l, s, u);
            w !== void 0 && (o = w), y[g] && y[g].runOnce && this.remove(n, y[g], r), g += 1;
          }
      }
      return o;
    }
    /**
     * Destroy all listeners connected to the context. If no context is provided, the global listeners will be destroyed.
     *
     * @param {object} [context=null] A Handsontable instance.
     * @example
     * ```js
     * // destroy the global listeners
     * Handsontable.hooks.destroy();
     *
     * // destroy the local listeners
     * Handsontable.hooks.destroy(hotInstance);
     * ```
     */
  }, {
    key: "destroy",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      Ye(this.getBucket(r), function(n, o, i) {
        return i[o].length = 0;
      });
    }
    /**
     * Registers a hook name (adds it to the list of the known hook names). Used by plugins.
     * It is not necessary to call register, but if you use it, your plugin hook will be used returned by
     * the `getRegistered` method. (which itself is used in the [demo](@/guides/getting-started/events-and-hooks.md)).
     *
     * @param {string} key The hook name.
     *
     * @example
     * ```js
     * Handsontable.hooks.register('myHook');
     * ```
     */
  }, {
    key: "register",
    value: function(r) {
      this.isRegistered(r) || hl.push(r);
    }
    /**
     * Deregisters a hook name (removes it from the list of known hook names).
     *
     * @param {string} key The hook name.
     *
     * @example
     * ```js
     * Handsontable.hooks.deregister('myHook');
     * ```
     */
  }, {
    key: "deregister",
    value: function(r) {
      this.isRegistered(r) && hl.splice(hl.indexOf(r), 1);
    }
    /**
     * Returns a boolean value depending on if a hook by such name has been removed or deprecated.
     *
     * @param {string} hookName The hook name to check.
     * @returns {boolean} Returns `true` if the provided hook name was marked as deprecated or
     * removed from API, `false` otherwise.
     * @example
     * ```js
     * Handsontable.hooks.isDeprecated('skipLengthCache');
     *
     * // Results:
     * true
     * ```
     */
  }, {
    key: "isDeprecated",
    value: function(r) {
      return _w.has(r) || Cw.has(r);
    }
    /**
     * Returns a boolean depending on if a hook by such name has been registered.
     *
     * @param {string} hookName The hook name to check.
     * @returns {boolean} `true` for success, `false` otherwise.
     * @example
     * ```js
     * Handsontable.hooks.isRegistered('beforeInit');
     *
     * // Results:
     * true
     * ```
     */
  }, {
    key: "isRegistered",
    value: function(r) {
      return hl.indexOf(r) >= 0;
    }
    /**
     * Returns an array of registered hooks.
     *
     * @returns {Array} An array of registered hooks.
     *
     * @example
     * ```js
     * Handsontable.hooks.getRegistered();
     *
     * // Results:
     * [
     * ...
     *   'beforeInit',
     *   'beforeRender',
     *   'beforeSetRangeEnd',
     *   'beforeDrawBorders',
     *   'beforeChange',
     * ...
     * ]
     * ```
     */
  }, {
    key: "getRegistered",
    value: function() {
      return hl;
    }
  }], [{
    key: "getSingleton",
    value: function() {
      return qae();
    }
  }]), e;
}(), Kae = new NV();
function qae() {
  return Kae;
}
const we = NV;
function dI(e) {
  return Jae(e) || Qae(e) || Zae(e) || Xae();
}
function Xae() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Zae(e, t) {
  if (e) {
    if (typeof e == "string")
      return BC(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return BC(e, t);
  }
}
function Qae(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function Jae(e) {
  if (Array.isArray(e))
    return BC(e);
}
function BC(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
var Ow = /* @__PURE__ */ new Map();
function nn() {
  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "common";
  Ow.has(e) || Ow.set(e, /* @__PURE__ */ new Map());
  var t = Ow.get(e);
  function r(l, s) {
    t.set(l, s);
  }
  function n(l) {
    return t.get(l);
  }
  function o(l) {
    return t.has(l);
  }
  function i() {
    return dI(t.keys());
  }
  function a() {
    return dI(t.values());
  }
  return {
    register: r,
    getItem: n,
    hasItem: o,
    getNames: i,
    getValues: a
  };
}
var VC = /* @__PURE__ */ new WeakMap(), dv = nn("editors"), ele = dv.register, HV = dv.getItem, LV = dv.hasItem;
dv.getNames;
dv.getValues;
function tle(e) {
  var t = {}, r = e;
  this.getConstructor = function() {
    return e;
  }, this.getInstance = function(n) {
    return n.guid in t || (t[n.guid] = new r(n)), t[n.guid];
  }, we.getSingleton().add("afterDestroy", function() {
    t[this.guid] = null;
  });
}
function jV(e, t) {
  var r;
  if (typeof e == "function")
    VC.get(e) || Nr(null, e), r = VC.get(e);
  else if (typeof e == "string")
    r = HV(e);
  else
    throw Error('Only strings and functions can be passed as "editor" parameter');
  if (!r)
    throw Error('No editor registered under name "'.concat(e, '"'));
  return r.getInstance(t);
}
function vI(e) {
  if (typeof e == "function")
    return e;
  if (!LV(e))
    throw Error('No registered editor found under "'.concat(e, '" name'));
  return HV(e).getConstructor();
}
function Nr(e, t) {
  e && typeof e != "string" && (t = e, e = t.EDITOR_TYPE);
  var r = new tle(t);
  typeof e == "string" && ele(e, r), VC.set(t, r);
}
function Vc(e) {
  "@babel/helpers - typeof";
  return Vc = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Vc(e);
}
function rle(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function yI(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, ole(n.key), n);
  }
}
function nle(e, t, r) {
  return t && yI(e.prototype, t), r && yI(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function ole(e) {
  var t = ile(e, "string");
  return Vc(t) === "symbol" ? t : String(t);
}
function ile(e, t) {
  if (Vc(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Vc(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var ale = /* @__PURE__ */ function() {
  function e() {
    var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    rle(this, e), this.context = t || this, this.context.eventListeners || (this.context.eventListeners = []);
  }
  return nle(e, [{
    key: "addEventListener",
    value: function(r, n, o) {
      var i = this, a = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
      function l(s) {
        o.call(this, lle(s));
      }
      return typeof a != "boolean" && !cee() && (a = !1), this.context.eventListeners.push({
        element: r,
        event: n,
        callback: o,
        callbackProxy: l,
        options: a,
        eventManager: this
      }), r.addEventListener(n, l, a), function() {
        i.removeEventListener(r, n, o);
      };
    }
    /**
     * Remove the event listener previously registered.
     *
     * @param {Element} element Target element.
     * @param {string} eventName Event name.
     * @param {Function} callback Function to remove from the event target. It must be the same as during registration listener.
     * @param {boolean} [onlyOwnEvents] Whether whould remove only events registered using this instance of EventManager.
     */
  }, {
    key: "removeEventListener",
    value: function(r, n, o) {
      for (var i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1, a = this.context.eventListeners.length, l; a; )
        if (a -= 1, l = this.context.eventListeners[a], l.event === n && l.element === r) {
          if (o && o !== l.callback || i && l.eventManager !== this)
            continue;
          this.context.eventListeners.splice(a, 1), l.element.removeEventListener(l.event, l.callbackProxy, l.options);
        }
    }
    /**
     * Clear all previously registered events.
     *
     * @private
     * @since 0.15.0-beta3
     * @param {boolean} [onlyOwnEvents] Whether whould remove only events registered using this instance of EventManager.
     */
  }, {
    key: "clearEvents",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      if (this.context)
        for (var n = this.context.eventListeners.length; n; ) {
          n -= 1;
          var o = this.context.eventListeners[n];
          r && o.eventManager !== this || (this.context.eventListeners.splice(n, 1), o.element.removeEventListener(o.event, o.callbackProxy, o.options));
        }
    }
    /**
     * Clear all previously registered events.
     */
  }, {
    key: "clear",
    value: function() {
      this.clearEvents();
    }
    /**
     * Destroy instance of EventManager, clearing all events of the context.
     */
  }, {
    key: "destroy",
    value: function() {
      this.clearEvents(), this.context = null;
    }
    /**
     * Destroy instance of EventManager, clearing only the own events.
     */
  }, {
    key: "destroyWithOwnEventsOnly",
    value: function() {
      this.clearEvents(!0), this.context = null;
    }
    /**
     * Trigger event at the specified target element.
     *
     * @param {Element} element Target element.
     * @param {string} eventName Event name.
     */
  }, {
    key: "fireEvent",
    value: function(r, n) {
      var o = r.document, i = r;
      o || (o = r.ownerDocument ? r.ownerDocument : r, i = o.defaultView);
      var a = {
        bubbles: !0,
        cancelable: n !== "mousemove",
        view: i,
        detail: 0,
        screenX: 0,
        screenY: 0,
        clientX: 1,
        clientY: 1,
        ctrlKey: !1,
        altKey: !1,
        shiftKey: !1,
        metaKey: !1,
        button: 0,
        relatedTarget: void 0
      }, l;
      o.createEvent ? (l = o.createEvent("MouseEvents"), l.initMouseEvent(n, a.bubbles, a.cancelable, a.view, a.detail, a.screenX, a.screenY, a.clientX, a.clientY, a.ctrlKey, a.altKey, a.shiftKey, a.metaKey, a.button, o.body.parentNode)) : l = o.createEventObject(), r.dispatchEvent ? r.dispatchEvent(l) : r.fireEvent("on".concat(n), l);
    }
  }]), e;
}();
function lle(e) {
  var t = e.stopImmediatePropagation;
  return e.stopImmediatePropagation = function() {
    t.apply(this), Fn(this);
  }, e;
}
const It = ale;
function Wc(e) {
  "@babel/helpers - typeof";
  return Wc = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Wc(e);
}
function sle(e, t) {
  return hle(e) || cle(e, t) || fle(e, t) || ule();
}
function ule() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function fle(e, t) {
  if (e) {
    if (typeof e == "string")
      return pI(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return pI(e, t);
  }
}
function pI(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function cle(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function hle(e) {
  if (Array.isArray(e))
    return e;
}
function dle(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function mI(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, yle(n.key), n);
  }
}
function vle(e, t, r) {
  return t && mI(e.prototype, t), r && mI(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function yle(e) {
  var t = ple(e, "string");
  return Wc(t) === "symbol" ? t : String(t);
}
function ple(e, t) {
  if (Wc(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Wc(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var $g = "editorManager.navigation", bc = "editorManager.handlingEditor", WC = /* @__PURE__ */ function() {
  function e(t, r, n) {
    var o = this;
    dle(this, e), this.instance = t, this.tableMeta = r, this.selection = n, this.eventManager = new It(t), this.destroyed = !1, this.lock = !1, this.activeEditor = void 0, this.cellProperties = void 0;
    var i = this.instance.getShortcutManager();
    i.addContext("editor"), this.registerShortcuts(), this.instance.addHook("afterDocumentKeyDown", function(a) {
      return o.onAfterDocumentKeyDown(a);
    }), this.eventManager.addEventListener(this.instance.rootDocument.documentElement, "compositionstart", function(a) {
      !o.destroyed && o.instance.isListening() && o.openEditor("", a);
    }), this.instance.view._wt.update("onCellDblClick", function(a, l, s) {
      return o.onCellDblClick(a, l, s);
    });
  }
  return vle(e, [{
    key: "registerShortcuts",
    value: function() {
      var r = this, n = this.instance.getShortcutManager(), o = n.getContext("grid"), i = n.getContext("editor"), a = {
        group: bc
      };
      i.addShortcuts([{
        keys: [["Enter"], ["Enter", "Shift"], ["Enter", "Control/Meta"], ["Enter", "Control/Meta", "Shift"]],
        callback: function(s, u) {
          r.closeEditorAndSaveChanges(n.isCtrlPressed()), r.moveSelectionAfterEnter(u.includes("shift"));
        }
      }, {
        keys: [["Escape"], ["Escape", "Control/Meta"]],
        callback: function() {
          r.closeEditorAndRestoreOriginalValue(n.isCtrlPressed()), r.activeEditor.focus();
        }
      }], a), o.addShortcuts([{
        keys: [["F2"]],
        callback: function(s) {
          r.openEditor(null, s, !0);
        }
      }, {
        keys: [["Backspace"], ["Delete"]],
        callback: function() {
          r.instance.emptySelectedCells(), r.prepareEditor();
        }
      }, {
        keys: [["Enter"], ["Enter", "Shift"]],
        callback: function(s, u) {
          r.instance.getSettings().enterBeginsEditing ? r.cellProperties.readOnly ? r.moveSelectionAfterEnter() : r.openEditor(null, s, !0) : r.moveSelectionAfterEnter(u.includes("shift")), Fn(s);
        }
      }], a);
    }
    /**
     * Lock the editor from being prepared and closed. Locking the editor prevents its closing and
     * reinitialized after selecting the new cell. This feature is necessary for a mobile editor.
     */
  }, {
    key: "lockEditor",
    value: function() {
      this.lock = !0;
    }
    /**
     * Unlock the editor from being prepared and closed. This method restores the original behavior of
     * the editors where for every new selection its instances are closed.
     */
  }, {
    key: "unlockEditor",
    value: function() {
      this.lock = !1;
    }
    /**
     * Destroy current editor, if exists.
     *
     * @param {boolean} revertOriginal If `false` and the cell using allowInvalid option,
     *                                 then an editor won't be closed until validation is passed.
     */
  }, {
    key: "destroyEditor",
    value: function(r) {
      this.lock || this.closeEditor(r);
    }
    /**
     * Get active editor.
     *
     * @returns {BaseEditor}
     */
  }, {
    key: "getActiveEditor",
    value: function() {
      return this.activeEditor;
    }
    /**
     * Prepare text input to be displayed at given grid cell.
     */
  }, {
    key: "prepareEditor",
    value: function() {
      var r = this;
      if (!this.lock) {
        if (this.activeEditor && this.activeEditor.isWaiting()) {
          this.closeEditor(!1, !1, function(p) {
            p && r.prepareEditor();
          });
          return;
        }
        var n = this.instance.getSelectedRangeLast().highlight, o = n.row, i = n.col, a = this.instance.runHooks("modifyGetCellCoords", o, i), l = o, s = i;
        if (Array.isArray(a)) {
          var u = sle(a, 2);
          l = u[0], s = u[1];
        }
        this.cellProperties = this.instance.getCellMeta(l, s);
        var f = this.instance.rootDocument.activeElement;
        if (f && vT(f) && f.blur(), !this.isCellEditable()) {
          this.clearActiveEditor();
          return;
        }
        var c = this.instance.getCell(o, i, !0);
        if (c) {
          var h = this.instance.getCellEditor(this.cellProperties), d = this.instance.colToProp(s), y = this.instance.getSourceDataAtCell(this.instance.toPhysicalRow(l), s);
          this.activeEditor = jV(h, this.instance), this.activeEditor.prepare(o, i, d, c, y, this.cellProperties);
        }
      }
    }
    /**
     * Check is editor is opened/showed.
     *
     * @returns {boolean}
     */
  }, {
    key: "isEditorOpened",
    value: function() {
      return this.activeEditor && this.activeEditor.isOpened();
    }
    /**
     * Open editor with initial value.
     *
     * @param {null|string} newInitialValue New value from which editor will start if handled property it's not the `null`.
     * @param {Event} event The event object.
     * @param {boolean} [enableFullEditMode=false] When true, an editor works in full editing mode. Mode disallows closing an editor
     *                                             when arrow keys are pressed.
     */
  }, {
    key: "openEditor",
    value: function(r, n) {
      var o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
      if (!this.isCellEditable()) {
        this.clearActiveEditor();
        return;
      }
      if (!this.activeEditor) {
        var i = this.instance.getSelectedRangeLast().highlight, a = i.row, l = i.col, s = this.instance.rowIndexMapper.getRenderableFromVisualIndex(a), u = this.instance.columnIndexMapper.getRenderableFromVisualIndex(l);
        this.instance.view.scrollViewport(this.instance._createCellCoords(s, u)), this.instance.view.render(), this.prepareEditor();
      }
      this.activeEditor && (o && this.activeEditor.enableFullEditMode(), this.activeEditor.beginEditing(r, n));
    }
    /**
     * Close editor, finish editing cell.
     *
     * @param {boolean} restoreOriginalValue If `true`, then closes editor without saving value from the editor into a cell.
     * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.
     * @param {Function} callback The callback function, fired after editor closing.
     */
  }, {
    key: "closeEditor",
    value: function(r, n, o) {
      this.activeEditor ? this.activeEditor.finishEditing(r, n, o) : o && o(!1);
    }
    /**
     * Close editor and save changes.
     *
     * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.
     */
  }, {
    key: "closeEditorAndSaveChanges",
    value: function(r) {
      this.closeEditor(!1, r);
    }
    /**
     * Close editor and restore original value.
     *
     * @param {boolean} isCtrlPressed Indication of whether the CTRL button is pressed.
     */
  }, {
    key: "closeEditorAndRestoreOriginalValue",
    value: function(r) {
      this.closeEditor(!0, r);
    }
    /**
     * Clears reference to an instance of the active editor.
     *
     * @private
     */
  }, {
    key: "clearActiveEditor",
    value: function() {
      this.activeEditor = void 0;
    }
    /**
     * Checks if the currently selected cell (pointed by selection highlight coords) is editable.
     * Editable cell is when:
     *   - the cell has defined an editor type;
     *   - the cell is not marked as read-only;
     *   - the cell is not hidden.
     *
     * @private
     * @returns {boolean}
     */
  }, {
    key: "isCellEditable",
    value: function() {
      var r = this.instance.getCellEditor(this.cellProperties), n = this.instance.getSelectedRangeLast().highlight, o = n.row, i = n.col, a = this.instance, l = a.rowIndexMapper, s = a.columnIndexMapper, u = l.isHidden(this.instance.toPhysicalRow(o)) || s.isHidden(this.instance.toPhysicalColumn(i));
      return !(this.cellProperties.readOnly || !r || u);
    }
    /**
     * Controls selection's behaviour after clicking `Enter`.
     *
     * @private
     * @param {boolean} isShiftPressed If `true`, then the selection will move up after hit enter.
     */
  }, {
    key: "moveSelectionAfterEnter",
    value: function(r) {
      var n = typeof this.tableMeta.enterMoves == "function" ? this.tableMeta.enterMoves(event) : this.tableMeta.enterMoves;
      r ? this.selection.transformStart(-n.row, -n.col) : this.selection.transformStart(n.row, n.col, !0);
    }
    /**
     * OnAfterDocumentKeyDown callback.
     *
     * @private
     * @param {KeyboardEvent} event The keyboard event object.
     */
  }, {
    key: "onAfterDocumentKeyDown",
    value: function(r) {
      var n = this;
      if (this.instance.isListening()) {
        var o = r.keyCode;
        if (this.selection.isSelected()) {
          var i = (r.ctrlKey || r.metaKey) && !r.altKey;
          if ((!this.activeEditor || this.activeEditor && !this.activeEditor.isWaiting()) && !DV(o) && !Bae(o) && !i && !this.isEditorOpened()) {
            var a = this.instance.getShortcutManager(), l = a.getContext("editor"), s = {
              runOnlyIf: function() {
                return be(n.instance.getSelected());
              },
              group: $g
            };
            l.addShortcuts([{
              keys: [["ArrowUp"]],
              callback: function() {
                n.instance.selection.transformStart(-1, 0);
              }
            }, {
              keys: [["ArrowDown"]],
              callback: function() {
                n.instance.selection.transformStart(1, 0);
              }
            }, {
              keys: [["ArrowLeft"]],
              callback: function() {
                n.instance.selection.transformStart(0, -1 * n.instance.getDirectionFactor());
              }
            }, {
              keys: [["ArrowRight"]],
              callback: function() {
                n.instance.selection.transformStart(0, n.instance.getDirectionFactor());
              }
            }], s), this.openEditor("", r);
          }
        }
      }
    }
    /**
     * OnCellDblClick callback.
     *
     * @private
     * @param {MouseEvent} event The mouse event object.
     * @param {object} coords The cell coordinates.
     * @param {HTMLTableCellElement|HTMLTableHeaderCellElement} elem The element which triggers the action.
     */
  }, {
    key: "onCellDblClick",
    value: function(r, n, o) {
      o.nodeName === "TD" && this.openEditor(null, r, !0);
    }
    /**
     * Destroy the instance.
     */
  }, {
    key: "destroy",
    value: function() {
      this.destroyed = !0, this.eventManager.destroy();
    }
  }]), e;
}(), gI = /* @__PURE__ */ new WeakMap();
WC.getInstance = function(e, t, r) {
  var n = gI.get(e);
  return n || (n = new WC(e, t, r), gI.set(e, n)), n;
};
const mle = WC;
var gle = Ie, ble = kr, FV = qd, wle = Fe, Sle = wle(function() {
  FV(1);
});
gle({ target: "Object", stat: !0, forced: Sle }, {
  keys: function(t) {
    return FV(ble(t));
  }
});
var Cle = Ie, _le = zE;
Cle({ target: "String", proto: !0 }, {
  repeat: _le
});
var Ole = Kt, Rle = hg, Ele = Nt, Tle = gn, Ple = Qa, Rw = Wt, kle = Pr, $le = qa, Ale = IE, bI = dg;
Rle("match", function(e, t, r) {
  return [
    // `String.prototype.match` method
    // https://tc39.es/ecma262/#sec-string.prototype.match
    function(o) {
      var i = kle(this), a = Tle(o) ? void 0 : $le(o, e);
      return a ? Ole(a, o, i) : new RegExp(o)[e](Rw(i));
    },
    // `RegExp.prototype[@@match]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
    function(n) {
      var o = Ele(this), i = Rw(n), a = r(t, o, i);
      if (a.done)
        return a.value;
      if (!o.global)
        return bI(o, i);
      var l = o.unicode;
      o.lastIndex = 0;
      for (var s = [], u = 0, f; (f = bI(o, i)) !== null; ) {
        var c = Rw(f[0]);
        s[u] = c, c === "" && (o.lastIndex = Ale(i, Ple(o.lastIndex), l)), u++;
      }
      return u === 0 ? null : s;
    }
  ];
});
var Ile = el, Mle = Vr, xle = ki, Dle = en, Nle = wf, Hle = Math.min, UC = [].lastIndexOf, BV = !!UC && 1 / [1].lastIndexOf(1, -0) < 0, Lle = Nle("lastIndexOf"), jle = BV || !Lle, Fle = jle ? function(t) {
  if (BV)
    return Ile(UC, this, arguments) || 0;
  var r = Mle(this), n = Dle(r), o = n - 1;
  for (arguments.length > 1 && (o = Hle(o, xle(arguments[1]))), o < 0 && (o = n + o); o >= 0; o--)
    if (o in r && r[o] === t)
      return o || 0;
  return -1;
} : UC, Ble = Ie, wI = Fle;
Ble({ target: "Array", proto: !0, forced: wI !== [].lastIndexOf }, {
  lastIndexOf: wI
});
var Vle = Ka, Wle = kr, Ule = Bd, zle = en, Yle = TypeError, SI = function(e) {
  return function(t, r, n, o) {
    Vle(r);
    var i = Wle(t), a = Ule(i), l = zle(i), s = e ? l - 1 : 0, u = e ? -1 : 1;
    if (n < 2)
      for (; ; ) {
        if (s in a) {
          o = a[s], s += u;
          break;
        }
        if (s += u, e ? s < 0 : l <= s)
          throw Yle("Reduce of empty array with no initial value");
      }
    for (; e ? s >= 0 : l > s; s += u)
      s in a && (o = r(o, a[s], s, i));
    return o;
  };
}, Gle = {
  // `Array.prototype.reduce` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduce
  left: SI(!1),
  // `Array.prototype.reduceRight` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduceright
  right: SI(!0)
}, Kle = Ie, qle = Gle.left, Xle = wf, CI = Vd, Zle = iB, Qle = !Zle && CI > 79 && CI < 83, Jle = Qle || !Xle("reduce");
Kle({ target: "Array", proto: !0, forced: Jle }, {
  reduce: function(t) {
    var r = arguments.length;
    return qle(this, t, r, r > 1 ? arguments[1] : void 0);
  }
});
var ese = Ie, tse = Ja.findIndex, rse = nv, zC = "findIndex", VV = !0;
zC in [] && Array(1)[zC](function() {
  VV = !1;
});
ese({ target: "Array", proto: !0, forced: VV }, {
  findIndex: function(t) {
    return tse(this, t, arguments.length > 1 ? arguments[1] : void 0);
  }
});
rse(zC);
function Ew(e) {
  return ase(e) || ise(e) || ose(e) || nse();
}
function nse() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function ose(e, t) {
  if (e) {
    if (typeof e == "string")
      return YC(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return YC(e, t);
  }
}
function ise(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function ase(e) {
  if (Array.isArray(e))
    return YC(e);
}
function YC(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
var WV = {
  "&nbsp;": " ",
  "&amp;": "&",
  "&lt;": "<",
  "&gt;": ">"
}, lse = new RegExp(Object.keys(WV).map(function(e) {
  return "(".concat(e, ")");
}).join("|"), "gi");
function sse(e) {
  return (e && e.nodeName || "") === "TABLE";
}
function _I(e) {
  for (var t = e.hasColHeaders(), r = e.hasRowHeaders(), n = [t ? -1 : 0, r ? -1 : 0, e.countRows() - 1, e.countCols() - 1], o = e.getData.apply(e, n), i = o.length, a = i > 0 ? o[0].length : 0, l = ["<table>", "</table>"], s = t ? ["<thead>", "</thead>"] : [], u = ["<tbody>", "</tbody>"], f = r ? 1 : 0, c = t ? 1 : 0, h = 0; h < i; h += 1) {
    for (var d = t && h === 0, y = [], p = 0; p < a; p += 1) {
      var g = !d && r && p === 0, w = "";
      if (d)
        w = "<th>".concat(e.getColHeader(p - f), "</th>");
      else if (g)
        w = "<th>".concat(e.getRowHeader(h - c), "</th>");
      else {
        var C = o[h][p], _ = e.getCellMeta(h - c, p - f), k = _.hidden, E = _.rowspan, j = _.colspan;
        if (!k) {
          var Y = [];
          if (E && Y.push('rowspan="'.concat(E, '"')), j && Y.push('colspan="'.concat(j, '"')), Xt(C))
            w = "<td ".concat(Y.join(" "), "></td>");
          else {
            var Q = C.toString().replace("<", "&lt;").replace(">", "&gt;").replace(/(<br(\s*|\/)>(\r\n|\n)?|\r\n|\n)/g, `<br>\r
`).replace(/\x20/gi, "&nbsp;").replace(/\t/gi, "&#9;");
            w = "<td ".concat(Y.join(" "), ">").concat(Q, "</td>");
          }
        }
      }
      y.push(w);
    }
    var X = ["<tr>"].concat(y, ["</tr>"]).join("");
    d ? s.splice(1, 0, X) : u.splice(-1, 0, X);
  }
  return l.splice(1, 0, s.join(""), u.join("")), l.join("");
}
function OI(e) {
  for (var t = e.length, r = ["<table>"], n = 0; n < t; n += 1) {
    var o = e[n], i = o.length, a = [];
    n === 0 && r.push("<tbody>");
    for (var l = 0; l < i; l += 1) {
      var s = o[l], u = Xt(s) ? "" : s.toString().replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/(<br(\s*|\/)>(\r\n|\n)?|\r\n|\n)/g, `<br>\r
`).replace(/\x20{2,}/gi, function(f) {
        return '<span style="mso-spacerun: yes">'.concat("&nbsp;".repeat(f.length - 1), " </span>");
      }).replace(/\t/gi, "&#9;");
      a.push("<td>".concat(u, "</td>"));
    }
    r.push.apply(r, ["<tr>"].concat(a, ["</tr>"])), n + 1 === t && r.push("</tbody>");
  }
  return r.push("</table>"), r.join("");
}
function use(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : document, r = {}, n = t.createDocumentFragment(), o = t.createElement("div");
  n.appendChild(o);
  var i = e;
  if (typeof i == "string") {
    var a = i.replace(/<td\b[^>]*?>([\s\S]*?)<\/\s*td>/g, function(S) {
      var R = S.match(/<td\b[^>]*?>/g)[0], $ = S.substring(R.length, S.lastIndexOf("<")).replace(/(<(?!br)([^>]+)>)/gi, ""), H = "</td>";
      return "".concat(R).concat($).concat(H);
    });
    o.insertAdjacentHTML("afterbegin", "".concat(a)), i = o.querySelector("table");
  }
  if (!(!i || !sse(i))) {
    var l = o.querySelector('meta[name$="enerator"]'), s = i.querySelector("tbody th") !== null, u = i.querySelector("tr"), f = u ? Array.from(u.cells).reduce(function(S, R) {
      return S + R.colSpan;
    }, 0) - (s ? 1 : 0) : 0, c = i.tFoot && Array.from(i.tFoot.rows) || [], h = [], d = !1, y = 0, p = 0;
    if (i.tHead) {
      var g = Array.from(i.tHead.rows).filter(function(S) {
        var R = S.querySelector("td") !== null;
        return R && h.push(S), !R;
      });
      y = g.length, d = y > 0, y > 1 ? r.nestedHeaders = Array.from(g).reduce(function(S, R) {
        var $ = Array.from(R.cells).reduce(function(H, F, K) {
          if (s && K === 0)
            return H;
          var te = F.colSpan, re = F.innerHTML, ce = te > 1 ? {
            label: re,
            colspan: te
          } : re;
          return H.push(ce), H;
        }, []);
        return S.push($), S;
      }, []) : d && (r.colHeaders = Array.from(g[0].children).reduce(function(S, R, $) {
        return s && $ === 0 || S.push(R.innerHTML), S;
      }, []));
    }
    h.length && (r.fixedRowsTop = h.length), c.length && (r.fixedRowsBottom = c.length);
    var w = [].concat(h, Ew(Array.from(i.tBodies).reduce(function(S, R) {
      return S.push.apply(S, Ew(Array.from(R.rows))), S;
    }, [])), Ew(c));
    p = w.length;
    for (var C = new Array(p), _ = 0; _ < p; _++)
      C[_] = new Array(f);
    for (var k = [], E = [], j = 0; j < p; j++)
      for (var Y = w[j], Q = Array.from(Y.cells), X = Q.length, q = 0; q < X; q++) {
        var J = Q[q], le = J.nodeName, ee = J.innerHTML, U = J.rowSpan, Z = J.colSpan, oe = C[j].findIndex(function(S) {
          return S === void 0;
        });
        if (le === "TD") {
          if (U > 1 || Z > 1) {
            for (var ie = j; ie < j + U; ie++)
              if (ie < p)
                for (var T = oe; T < oe + Z; T++)
                  C[ie][T] = null;
            var v = J.getAttribute("style"), m = v && v.includes("mso-ignore:colspan");
            m || k.push({
              col: oe,
              row: j,
              rowspan: U,
              colspan: Z
            });
          }
          var b = "";
          l && /excel/gi.test(l.content) ? b = ee.replace(/[\r\n][\x20]{0,2}/g, " ").replace(/<br(\s*|\/)>[\r\n]?[\x20]{0,3}/gim, `\r
`) : b = ee.replace(/<br(\s*|\/)>[\r\n]?/gim, `\r
`), C[j][oe] = b.replace(lse, function(S) {
            return WV[S];
          });
        } else
          E.push(ee);
      }
    return k.length && (r.mergeCells = k), E.length && (r.rowHeaders = E), C.length && (r.data = C), r;
  }
}
function fse(e) {
  return vse(e) || dse(e) || hse(e) || cse();
}
function cse() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function hse(e, t) {
  if (e) {
    if (typeof e == "string")
      return GC(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return GC(e, t);
  }
}
function dse(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function vse(e) {
  if (Array.isArray(e))
    return GC(e);
}
function GC(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function KC(e) {
  "@babel/helpers - typeof";
  return KC = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, KC(e);
}
function Er(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], r = KC(e);
  if (r === "number")
    return !isNaN(e) && isFinite(e);
  if (r === "string") {
    if (e.length === 0)
      return !1;
    if (e.length === 1)
      return /\d/.test(e);
    var n = Array.from(new Set(["."].concat(fse(t)))).map(function(o) {
      return "\\".concat(o);
    }).join("|");
    return new RegExp("^[+-]?\\s*(((".concat(n, ")?\\d+((").concat(n, ")\\d+)?(e[+-]?\\d+)?)|(0x[a-f\\d]+))$"), "i").test(e.trim());
  } else if (r === "object")
    return !!e && typeof e.valueOf() == "number" && !(e instanceof Date);
  return !1;
}
function yse(e) {
  return Er(e, [","]);
}
function _e(e, t, r) {
  var n = -1;
  for (typeof t == "function" ? (r = t, t = e) : n = e - 1; ++n <= t && r(n) !== !1; )
    ;
}
function qC(e, t, r) {
  var n = e + 1;
  for (typeof t == "function" && (r = t, t = 0); --n >= t && r(n) !== !1; )
    ;
}
function UV(e, t) {
  return t = parseInt(t.toString().replace("%", ""), 10), t = isNaN(t) ? 0 : t, parseInt(e * t / 100, 10);
}
function pse(e) {
  return bse(e) || gse(e) || zV(e) || mse();
}
function mse() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function gse(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function bse(e) {
  if (Array.isArray(e))
    return XC(e);
}
function wse(e, t) {
  return _se(e) || Cse(e, t) || zV(e, t) || Sse();
}
function Sse() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function zV(e, t) {
  if (e) {
    if (typeof e == "string")
      return XC(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return XC(e, t);
  }
}
function XC(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function Cse(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function _se(e) {
  if (Array.isArray(e))
    return e;
}
var ZC = "asc", Ose = "desc", RI = /* @__PURE__ */ new Map([[ZC, [-1, 1]], [Ose, [1, -1]]]), Rse = function(t) {
  return "The priority '".concat(t, "' is already declared in a map.");
}, Ese = function(t) {
  return "The priority '".concat(t, "' is not a number.");
};
function Tse() {
  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, t = e.errorPriorityExists, r = e.errorPriorityNaN, n = /* @__PURE__ */ new Map();
  t = wt(t) ? t : Rse, r = wt(r) ? r : Ese;
  function o(a, l) {
    if (!Er(a))
      throw new Error(r(a));
    if (n.has(a))
      throw new Error(t(a));
    n.set(a, l);
  }
  function i() {
    var a = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ZC, l = RI.get(a) || RI.get(ZC), s = wse(l, 2), u = s[0], f = s[1];
    return pse(n).sort(function(c, h) {
      return c[0] < h[0] ? u : f;
    }).map(function(c) {
      return c[1];
    });
  }
  return {
    addItem: o,
    getItems: i
  };
}
var Pse = Ie, kse = Ja.find, $se = nv, QC = "find", YV = !0;
QC in [] && Array(1)[QC](function() {
  YV = !1;
});
Pse({ target: "Array", proto: !0, forced: YV }, {
  find: function(t) {
    return kse(this, t, arguments.length > 1 ? arguments[1] : void 0);
  }
});
$se(QC);
function Ase(e) {
  return xse(e) || Mse(e) || GV(e) || Ise();
}
function Ise() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Mse(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function xse(e) {
  if (Array.isArray(e))
    return JC(e);
}
function EI(e, t) {
  return Hse(e) || Nse(e, t) || GV(e, t) || Dse();
}
function Dse() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function GV(e, t) {
  if (e) {
    if (typeof e == "string")
      return JC(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return JC(e, t);
  }
}
function JC(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function Nse(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function Hse(e) {
  if (Array.isArray(e))
    return e;
}
var Lse = function(t) {
  return "The id '".concat(t, "' is already declared in a map.");
};
function Ag() {
  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, t = e.errorIdExists, r = /* @__PURE__ */ new Map();
  t = wt(t) ? t : Lse;
  function n(f, c) {
    if (u(f))
      throw new Error(t(f));
    r.set(f, c);
  }
  function o(f) {
    return r.delete(f);
  }
  function i() {
    r.clear();
  }
  function a(f) {
    var c = s().find(function(y) {
      var p = EI(y, 2), g = p[0], w = p[1];
      return f === w ? g : !1;
    }) || [null], h = EI(c, 1), d = h[0];
    return d;
  }
  function l(f) {
    return r.get(f);
  }
  function s() {
    return Ase(r);
  }
  function u(f) {
    return r.has(f);
  }
  return {
    addItem: n,
    clear: i,
    getId: a,
    getItem: l,
    getItems: s,
    hasItem: u,
    removeItem: o
  };
}
function jse(e) {
  return Wse(e) || Vse(e) || Bse(e) || Fse();
}
function Fse() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Bse(e, t) {
  if (e) {
    if (typeof e == "string")
      return e_(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return e_(e, t);
  }
}
function Vse(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function Wse(e) {
  if (Array.isArray(e))
    return e_(e);
}
function e_(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
var Use = function(t) {
  return "'".concat(t, "' value is already declared in a unique set.");
};
function zse() {
  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, t = e.errorItemExists, r = /* @__PURE__ */ new Set();
  t = wt(t) ? t : Use;
  function n(a) {
    if (r.has(a))
      throw new Error(t(a));
    r.add(a);
  }
  function o() {
    return jse(r);
  }
  function i() {
    r.clear();
  }
  return {
    addItem: n,
    clear: i,
    getItems: o
  };
}
function Yse(e, t) {
  return qse(e) || Kse(e, t) || KV(e, t) || Gse();
}
function Gse() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Kse(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function qse(e) {
  if (Array.isArray(e))
    return e;
}
function TI(e) {
  return Qse(e) || Zse(e) || KV(e) || Xse();
}
function Xse() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function KV(e, t) {
  if (e) {
    if (typeof e == "string")
      return t_(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return t_(e, t);
  }
}
function Zse(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function Qse(e) {
  if (Array.isArray(e))
    return t_(e);
}
function t_(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
var mT = function(t) {
  return 'There is already registered "'.concat(t, '" plugin.');
}, Jse = function(t) {
  return 'There is already registered plugin on priority "'.concat(t, '".');
}, eue = function(t) {
  return 'The priority "'.concat(t, '" is not a number.');
}, qV = Tse({
  errorPriorityExists: Jse,
  errorPriorityNaN: eue
}), XV = zse({
  errorItemExists: mT
}), r_ = Ag({
  errorIdExists: mT
});
function ZV() {
  return [].concat(TI(qV.getItems()), TI(XV.getItems()));
}
function gT(e) {
  var t = vn(e);
  return r_.getItem(t);
}
function tue(e) {
  return !!gT(e);
}
function nt(e, t, r) {
  var n = nue(e, t, r), o = Yse(n, 3);
  e = o[0], t = o[1], r = o[2], gT(e) === void 0 && rue(e, t, r);
}
function rue(e, t, r) {
  var n = vn(e);
  if (r_.hasItem(n))
    throw new Error(mT(n));
  r === void 0 ? XV.addItem(n) : qV.addItem(r, n), r_.addItem(n, t);
}
function nue(e, t, r) {
  return typeof e == "function" && (t = e, e = t.PLUGIN_KEY, r = t.PLUGIN_PRIORITY), [e, t, r];
}
var vv = nn("renderers"), oue = vv.register, iue = vv.getItem, QV = vv.hasItem;
vv.getNames;
vv.getValues;
function PI(e) {
  if (typeof e == "function")
    return e;
  if (!QV(e))
    throw Error('No registered renderer found under "'.concat(e, '" name'));
  return iue(e);
}
function ro(e, t) {
  typeof e != "string" && (t = e, e = t.RENDERER_TYPE), oue(e, t);
}
var yv = nn("validators"), aue = yv.register, lue = yv.getItem, JV = yv.hasItem;
yv.getNames;
yv.getValues;
function sue(e) {
  if (typeof e == "function")
    return e;
  if (!JV(e))
    throw Error('No registered validator found under "'.concat(e, '" name'));
  return lue(e);
}
function fc(e, t) {
  typeof e != "string" && (t = e, e = t.VALIDATOR_TYPE), aue(e, t);
}
var ea = 1, ar = 2;
function Uc(e) {
  "@babel/helpers - typeof";
  return Uc = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Uc(e);
}
function uue(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function kI(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, cue(n.key), n);
  }
}
function fue(e, t, r) {
  return t && kI(e.prototype, t), r && kI(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function cue(e) {
  var t = hue(e, "string");
  return Uc(t) === "symbol" ? t : String(t);
}
function hue(e, t) {
  if (Uc(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Uc(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var dl = /* @__PURE__ */ new WeakMap(), due = /* @__PURE__ */ function() {
  function e() {
    var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, r = t.viewportSize, n = t.scrollOffset, o = t.totalItems, i = t.itemSizeFn, a = t.overrideFn, l = t.calculationType, s = t.stretchMode, u = t.stretchingItemWidthFn, f = u === void 0 ? function(h) {
      return h;
    } : u, c = t.inlineStartOffset;
    uue(this, e), dl.set(this, {
      viewportWidth: r,
      scrollOffset: n,
      totalColumns: o,
      columnWidthFn: i,
      overrideFn: a,
      calculationType: l,
      stretchingColumnWidthFn: f,
      inlineStartOffset: c
    }), this.count = 0, this.startColumn = null, this.endColumn = null, this.startPosition = null, this.isVisibleInTrimmingContainer = !1, this.stretchAllRatio = 0, this.stretchLastWidth = 0, this.stretch = s, this.totalTargetWidth = 0, this.needVerifyLastColumnWidth = !0, this.stretchAllColumnsWidth = [], this.calculate();
  }
  return fue(e, [{
    key: "calculate",
    value: function() {
      for (var r = 0, n = !0, o = [], i, a = 0, l = 0, s = dl.get(this), u = s.calculationType, f = s.overrideFn, c = s.scrollOffset, h = Math.max(s.scrollOffset, 0), d = s.totalColumns, y = s.viewportWidth, p = h > 0 ? y + 1 : y, g = 0; g < d; g++)
        if (i = this._getColumnWidth(g), r <= h && u !== ar && (this.startColumn = g, a = i), r >= h && r + (u === ar ? i : 0) <= h + p && ((this.startColumn === null || this.startColumn === void 0) && (this.startColumn = g, a = i), this.endColumn = g), o.push(r), r += i, l = i, u !== ar && (this.endColumn = g), r >= h + y) {
          n = !1;
          break;
        }
      var w = c + y - p, C = u === ar ? 0 : l, _ = u === ar ? a : 0;
      if (// the table is to the left of the viewport
      w < -1 * s.inlineStartOffset || c > o.at(-1) + C || // the table is to the right of the viewport
      -1 * s.scrollOffset - s.viewportWidth > -1 * _ ? this.isVisibleInTrimmingContainer = !1 : this.isVisibleInTrimmingContainer = !0, this.endColumn === d - 1 && n)
        for (this.startColumn = this.endColumn; this.startColumn > 0; ) {
          var k = o[this.endColumn] + i - o[this.startColumn - 1];
          if ((k <= y || u !== ar) && (this.startColumn -= 1), k > y)
            break;
        }
      u === ea && this.startColumn !== null && f && f(this), this.startPosition = o[this.startColumn], this.startPosition === void 0 && (this.startPosition = null), d < this.endColumn && (this.endColumn = d - 1), this.startColumn !== null && (this.count = this.endColumn - this.startColumn + 1);
    }
    /**
     * Recalculate columns stretching.
     *
     * @param {number} totalWidth The total width of the table.
     */
  }, {
    key: "refreshStretching",
    value: function(r) {
      if (this.stretch !== "none") {
        var n = r;
        this.totalTargetWidth = n;
        for (var o = dl.get(this), i = o.totalColumns, a = 0, l = 0; l < i; l++) {
          var s = this._getColumnWidth(l), u = o.stretchingColumnWidthFn(void 0, l);
          typeof u == "number" ? n -= u : a += s;
        }
        var f = n - a;
        if (this.stretch === "all" && f > 0)
          this.stretchAllRatio = n / a, this.stretchAllColumnsWidth = [], this.needVerifyLastColumnWidth = !0;
        else if (this.stretch === "last" && n !== 1 / 0) {
          var c = this._getColumnWidth(i - 1), h = f + c;
          this.stretchLastWidth = h >= 0 ? h : c;
        }
      }
    }
    /**
     * Get stretched column width based on stretchH (all or last) setting passed in handsontable instance.
     *
     * @param {number} column The visual column index.
     * @param {number} baseWidth The default column width.
     * @returns {number|null}
     */
  }, {
    key: "getStretchedColumnWidth",
    value: function(r, n) {
      var o = null;
      return this.stretch === "all" && this.stretchAllRatio !== 0 ? o = this._getStretchedAllColumnWidth(r, n) : this.stretch === "last" && this.stretchLastWidth !== 0 && (o = this._getStretchedLastColumnWidth(r)), o;
    }
    /**
     * @param {number} column The visual column index.
     * @param {number} baseWidth The default column width.
     * @returns {number}
     * @private
     */
  }, {
    key: "_getStretchedAllColumnWidth",
    value: function(r, n) {
      var o = 0, i = dl.get(this), a = i.totalColumns;
      if (!this.stretchAllColumnsWidth[r]) {
        var l = Math.round(n * this.stretchAllRatio), s = i.stretchingColumnWidthFn(l, r);
        s === void 0 ? this.stretchAllColumnsWidth[r] = l : this.stretchAllColumnsWidth[r] = isNaN(s) ? this._getColumnWidth(r) : s;
      }
      if (this.stretchAllColumnsWidth.length === a && this.needVerifyLastColumnWidth) {
        this.needVerifyLastColumnWidth = !1;
        for (var u = 0; u < this.stretchAllColumnsWidth.length; u++)
          o += this.stretchAllColumnsWidth[u];
        o !== this.totalTargetWidth && (this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length - 1] += this.totalTargetWidth - o);
      }
      return this.stretchAllColumnsWidth[r];
    }
    /**
     * @param {number} column The visual column index.
     * @returns {number|null}
     * @private
     */
  }, {
    key: "_getStretchedLastColumnWidth",
    value: function(r) {
      var n = dl.get(this), o = n.totalColumns;
      return r === o - 1 ? this.stretchLastWidth : null;
    }
    /**
     * @param {number} column The visual column index.
     * @returns {number}
     * @private
     */
  }, {
    key: "_getColumnWidth",
    value: function(r) {
      var n = dl.get(this).columnWidthFn(r);
      return isNaN(n) && (n = e.DEFAULT_WIDTH), n;
    }
  }], [{
    key: "DEFAULT_WIDTH",
    get: (
      /**
       * Default column width.
       *
       * @type {number}
       */
      function() {
        return 50;
      }
    )
  }]), e;
}();
const bT = due;
function zc(e) {
  "@babel/helpers - typeof";
  return zc = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, zc(e);
}
function vue(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function $I(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, pue(n.key), n);
  }
}
function yue(e, t, r) {
  return t && $I(e.prototype, t), r && $I(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function pue(e) {
  var t = mue(e, "string");
  return zc(t) === "symbol" ? t : String(t);
}
function mue(e, t) {
  if (zc(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (zc(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var AI = /* @__PURE__ */ new WeakMap(), gue = /* @__PURE__ */ function() {
  function e() {
    var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, r = t.viewportSize, n = t.scrollOffset, o = t.totalItems, i = t.itemSizeFn, a = t.overrideFn, l = t.calculationType, s = t.scrollbarHeight;
    vue(this, e), AI.set(this, {
      viewportHeight: r,
      scrollOffset: n,
      totalRows: o,
      rowHeightFn: i,
      overrideFn: a,
      calculationType: l,
      horizontalScrollbarHeight: s
    }), this.count = 0, this.startRow = null, this.endRow = null, this.startPosition = null, this.isVisibleInTrimmingContainer = !1, this.calculate();
  }
  return yue(e, [{
    key: "calculate",
    value: function() {
      for (var r = AI.get(this), n = r.calculationType, o = r.overrideFn, i = r.rowHeightFn, a = r.scrollOffset, l = Math.max(r.scrollOffset, 0), s = r.totalRows, u = r.viewportHeight, f = r.horizontalScrollbarHeight || 0, c = 0, h = !0, d = [], y, p = 0, g = 0, w = 0; w < s; w++)
        if (y = i(w), isNaN(y) && (y = e.DEFAULT_HEIGHT), c <= l && n !== ar && (this.startRow = w, p = y), c >= l && c + (n === ar ? y : 0) <= l + u - f && (this.startRow === null && (this.startRow = w, p = y), this.endRow = w), d.push(c), c += y, g = y, n !== ar && (this.endRow = w), c >= l + u - f) {
          h = !1;
          break;
        }
      var C = a + u - f, _ = n === ar ? p : 0, k = n === ar ? 0 : g;
      if (C < _ || a > d.at(-1) + k ? this.isVisibleInTrimmingContainer = !1 : this.isVisibleInTrimmingContainer = !0, this.endRow === s - 1 && h)
        for (this.startRow = this.endRow; this.startRow > 0; ) {
          var E = d[this.endRow] + y - d[this.startRow - 1];
          if ((E <= u - f || n !== ar) && (this.startRow -= 1), E >= u - f)
            break;
        }
      n === ea && this.startRow !== null && o && o(this), this.startPosition = d[this.startRow], this.startPosition === void 0 && (this.startPosition = null), s < this.endRow && (this.endRow = s - 1), this.startRow !== null && (this.count = this.endRow - this.startRow + 1);
    }
  }], [{
    key: "DEFAULT_HEIGHT",
    get: (
      /**
       * Default row height.
       *
       * @type {number}
       */
      function() {
        return 23;
      }
    )
  }]), e;
}();
const eW = gue;
function Yc(e) {
  "@babel/helpers - typeof";
  return Yc = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Yc(e);
}
function bue(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function II(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, tW(n.key), n);
  }
}
function wue(e, t, r) {
  return t && II(e.prototype, t), r && II(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Sue(e, t, r) {
  Cue(e, t), t.set(e, r);
}
function Cue(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function MI(e, t, r) {
  return t = tW(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function tW(e) {
  var t = _ue(e, "string");
  return Yc(t) === "symbol" ? t : String(t);
}
function _ue(e, t) {
  if (Yc(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Yc(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Bf(e, t) {
  var r = rW(e, t, "get");
  return Oue(e, r);
}
function Oue(e, t) {
  return t.get ? t.get.call(e) : t.value;
}
function Rue(e, t, r) {
  var n = rW(e, t, "set");
  return Eue(e, n, r), r;
}
function rW(e, t, r) {
  if (!t.has(e))
    throw new TypeError("attempted to " + r + " private field on non-instance");
  return t.get(e);
}
function Eue(e, t, r) {
  if (t.set)
    t.set.call(e, r);
  else {
    if (!t.writable)
      throw new TypeError("attempted to set read only private field");
    t.value = r;
  }
}
var Fi = /* @__PURE__ */ new WeakMap(), Tue = /* @__PURE__ */ function() {
  function e(t, r) {
    var n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
    bue(this, e), MI(this, "row", null), MI(this, "col", null), Sue(this, Fi, {
      writable: !0,
      value: !1
    }), Rue(this, Fi, n), typeof t < "u" && typeof r < "u" && (this.row = t, this.col = r);
  }
  return wue(e, [{
    key: "isValid",
    value: function(r) {
      return !(this.row < 0 || this.col < 0 || this.row >= r.getSetting("totalRows") || this.col >= r.getSetting("totalColumns"));
    }
    /**
     * Checks if another set of coordinates (`cellCoords`)
     * is equal to the coordinates in your `CellCoords` instance.
     *
     * @param {CellCoords} cellCoords Coordinates to check.
     * @returns {boolean}
     */
  }, {
    key: "isEqual",
    value: function(r) {
      return r === this ? !0 : this.row === r.row && this.col === r.col;
    }
    /**
     * Checks if another set of coordinates (`testedCoords`)
     * is south-east of the coordinates in your `CellCoords` instance.
     *
     * @param {CellCoords} testedCoords Coordinates to check.
     * @returns {boolean}
     */
  }, {
    key: "isSouthEastOf",
    value: function(r) {
      return this.row >= r.row && (Bf(this, Fi) ? this.col <= r.col : this.col >= r.col);
    }
    /**
     * Checks if another set of coordinates (`testedCoords`)
     * is north-west of the coordinates in your `CellCoords` instance.
     *
     * @param {CellCoords} testedCoords Coordinates to check.
     * @returns {boolean}
     */
  }, {
    key: "isNorthWestOf",
    value: function(r) {
      return this.row <= r.row && (Bf(this, Fi) ? this.col >= r.col : this.col <= r.col);
    }
    /**
     * Checks if another set of coordinates (`testedCoords`)
     * is south-west of the coordinates in your `CellCoords` instance.
     *
     * @param {CellCoords} testedCoords Coordinates to check.
     * @returns {boolean}
     */
  }, {
    key: "isSouthWestOf",
    value: function(r) {
      return this.row >= r.row && (Bf(this, Fi) ? this.col >= r.col : this.col <= r.col);
    }
    /**
     * Checks if another set of coordinates (`testedCoords`)
     * is north-east of the coordinates in your `CellCoords` instance.
     *
     * @param {CellCoords} testedCoords Coordinates to check.
     * @returns {boolean}
     */
  }, {
    key: "isNorthEastOf",
    value: function(r) {
      return this.row <= r.row && (Bf(this, Fi) ? this.col <= r.col : this.col >= r.col);
    }
    /**
     * Normalizes the coordinates in your `CellCoords` instance to the nearest valid position.
     *
     * Coordinates that point to headers (negative values) are normalized to `0`.
     *
     * @returns {CellCoords}
     */
  }, {
    key: "normalize",
    value: function() {
      return this.row = this.row === null ? this.row : Math.max(this.row, 0), this.col = this.col === null ? this.col : Math.max(this.col, 0), this;
    }
    /**
     * Clones your `CellCoords` instance.
     *
     * @returns {CellCoords}
     */
  }, {
    key: "clone",
    value: function() {
      return new e(this.row, this.col, Bf(this, Fi));
    }
    /**
     * Converts your `CellCoords` instance into an object literal with `row` and `col` properties.
     *
     * @returns {{row: number, col: number}} An object literal with `row` and `col` properties.
     */
  }, {
    key: "toObject",
    value: function() {
      return {
        row: this.row,
        col: this.col
      };
    }
  }]), e;
}();
const Kp = Tue;
function Gc(e) {
  "@babel/helpers - typeof";
  return Gc = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Gc(e);
}
function Pue(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function xI(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, nW(n.key), n);
  }
}
function kue(e, t, r) {
  return t && xI(e.prototype, t), r && xI(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function $ue(e, t, r) {
  Aue(e, t), t.set(e, r);
}
function Aue(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Tw(e, t, r) {
  return t = nW(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function nW(e) {
  var t = Iue(e, "string");
  return Gc(t) === "symbol" ? t : String(t);
}
function Iue(e, t) {
  if (Gc(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Gc(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Sn(e, t) {
  var r = oW(e, t, "get");
  return Mue(e, r);
}
function Mue(e, t) {
  return t.get ? t.get.call(e) : t.value;
}
function xue(e, t, r) {
  var n = oW(e, t, "set");
  return Due(e, n, r), r;
}
function oW(e, t, r) {
  if (!t.has(e))
    throw new TypeError("attempted to " + r + " private field on non-instance");
  return t.get(e);
}
function Due(e, t, r) {
  if (t.set)
    t.set.call(e, r);
  else {
    if (!t.writable)
      throw new TypeError("attempted to set read only private field");
    t.value = r;
  }
}
var zr = /* @__PURE__ */ new WeakMap(), Nue = /* @__PURE__ */ function() {
  function e(t) {
    var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : t, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : t, o = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
    Pue(this, e), Tw(this, "highlight", null), Tw(this, "from", null), Tw(this, "to", null), $ue(this, zr, {
      writable: !0,
      value: !1
    }), this.highlight = t.clone().normalize(), this.from = r.clone(), this.to = n.clone(), xue(this, zr, o);
  }
  return kue(e, [{
    key: "setHighlight",
    value: function(r) {
      return this.highlight = r.clone().normalize(), this;
    }
    /**
     * Sets the `coords` coordinates as the start of your range.
     *
     * @param {CellCoords} coords Coordinates to use.
     * @returns {CellRange}
     */
  }, {
    key: "setFrom",
    value: function(r) {
      return this.from = r.clone(), this;
    }
    /**
     * Sets the `coords` coordinates as the end of your range.
     *
     * @param {CellCoords} coords Coordinates to use.
     * @returns {CellRange}
     */
  }, {
    key: "setTo",
    value: function(r) {
      return this.to = r.clone(), this;
    }
    /**
     * Checks if the coordinates in your `CellRange` instance are valid
     * in the context of a given Walkontable instance.
     *
     * See the [`isValid()`](@/api/cellCoords.md#isvalid) method of the [`CellCoords`](@/api/cellCoords.md) class.
     *
     * @param {Walkontable} wot A Walkontable instance.
     * @returns {boolean}
     */
  }, {
    key: "isValid",
    value: function(r) {
      return this.from.isValid(r) && this.to.isValid(r);
    }
    /**
     * Checks if your range is just a single cell.
     *
     * @returns {boolean}
     */
  }, {
    key: "isSingle",
    value: function() {
      return this.from.row >= 0 && this.from.row === this.to.row && this.from.col >= 0 && this.from.col === this.to.col;
    }
    /**
     * Returns the height of your range (as a number of rows, including row headers).
     *
     * @returns {number}
     */
  }, {
    key: "getOuterHeight",
    value: function() {
      return Math.max(this.from.row, this.to.row) - Math.min(this.from.row, this.to.row) + 1;
    }
    /**
     * Returns the width of your range (as a number of columns, including column headers).
     *
     * @returns {number}
     */
  }, {
    key: "getOuterWidth",
    value: function() {
      return Math.max(this.from.col, this.to.col) - Math.min(this.from.col, this.to.col) + 1;
    }
    /**
     * Returns the height of your range (as a number of rows, excluding row headers).
     *
     * @returns {number}
     */
  }, {
    key: "getHeight",
    value: function() {
      if (this.from.row < 0 && this.to.row < 0)
        return 0;
      var r = Math.max(this.from.row, 0), n = Math.max(this.to.row, 0);
      return Math.max(r, n) - Math.min(r, n) + 1;
    }
    /**
     * Returns the width of your range (as a number of columns, excluding column headers).
     *
     * @returns {number}
     */
  }, {
    key: "getWidth",
    value: function() {
      if (this.from.col < 0 && this.to.col < 0)
        return 0;
      var r = Math.max(this.from.col, 0), n = Math.max(this.to.col, 0);
      return Math.max(r, n) - Math.min(r, n) + 1;
    }
    /**
     * Returns the number of cells within your range (excluding column and row headers).
     *
     * @returns {number}
     */
  }, {
    key: "getCellsCount",
    value: function() {
      return this.getWidth() * this.getHeight();
    }
    /**
     * Checks if another set of coordinates (`cellCoords`)
     * is within the `from` and `to` coordinates of your range.
     *
     * @param {CellCoords} cellCoords Coordinates to check.
     * @returns {boolean}
     */
  }, {
    key: "includes",
    value: function(r) {
      var n = r.row, o = r.col, i = this.getOuterTopStartCorner(), a = this.getOuterBottomEndCorner();
      return i.row <= n && a.row >= n && i.col <= o && a.col >= o;
    }
    /**
     * Checks if another range (`cellRange`) is within your range.
     *
     * @param {CellRange} cellRange A range to check.
     * @returns {boolean}
     */
  }, {
    key: "includesRange",
    value: function(r) {
      return this.includes(r.getOuterTopStartCorner()) && this.includes(r.getOuterBottomEndCorner());
    }
    /**
     * Checks if another range (`cellRange`) is equal to your range.
     *
     * @param {CellRange} cellRange A range to check.
     * @returns {boolean}
     */
  }, {
    key: "isEqual",
    value: function(r) {
      return Math.min(this.from.row, this.to.row) === Math.min(r.from.row, r.to.row) && Math.max(this.from.row, this.to.row) === Math.max(r.from.row, r.to.row) && Math.min(this.from.col, this.to.col) === Math.min(r.from.col, r.to.col) && Math.max(this.from.col, this.to.col) === Math.max(r.from.col, r.to.col);
    }
    /**
     * Checks if another range (`cellRange`) overlaps your range.
     *
     * Range A overlaps range B if the intersection of A and B (or B and A) is not empty.
     *
     * @param {CellRange} cellRange A range to check.
     * @returns {boolean}
     */
  }, {
    key: "overlaps",
    value: function(r) {
      return r.isSouthEastOf(this.getOuterTopLeftCorner()) && r.isNorthWestOf(this.getOuterBottomRightCorner());
    }
    /**
     * Checks if another range (`cellRange`) is south-east of your range.
     *
     * @param {CellRange} cellRange A range to check.
     * @returns {boolean}
     */
  }, {
    key: "isSouthEastOf",
    value: function(r) {
      return this.getOuterTopLeftCorner().isSouthEastOf(r) || this.getOuterBottomRightCorner().isSouthEastOf(r);
    }
    /**
     * Checks if another range (`cellRange`) is north-west of your range.
     *
     * @param {CellRange} cellRange A range to check.
     * @returns {boolean}
     */
  }, {
    key: "isNorthWestOf",
    value: function(r) {
      return this.getOuterTopLeftCorner().isNorthWestOf(r) || this.getOuterBottomRightCorner().isNorthWestOf(r);
    }
    /**
     * Checks if another range (`cellRange`) overlaps your range horizontally.
     *
     * For example: returns `true` if the last column of your range is `5`
     * and the first column of the `cellRange` range is `3`.
     *
     * @param {CellRange} cellRange A range to check.
     * @returns {boolean}
     */
  }, {
    key: "isOverlappingHorizontally",
    value: function(r) {
      return this.getOuterTopRightCorner().col >= r.getOuterTopLeftCorner().col && this.getOuterTopRightCorner().col <= r.getOuterTopRightCorner().col || this.getOuterTopLeftCorner().col <= r.getOuterTopRightCorner().col && this.getOuterTopLeftCorner().col >= r.getOuterTopLeftCorner().col;
    }
    /**
     * Checks if another range (`cellRange`) overlaps your range vertically.
     *
     * For example: returns `true` if the last row of your range is `5`
     * and the first row of the `cellRange` range is `3`.
     *
     * @param {CellRange} cellRange A range to check.
     * @returns {boolean}
     */
  }, {
    key: "isOverlappingVertically",
    value: function(r) {
      return this.getOuterBottomRightCorner().row >= r.getOuterTopRightCorner().row && this.getOuterBottomRightCorner().row <= r.getOuterBottomRightCorner().row || this.getOuterTopRightCorner().row <= r.getOuterBottomRightCorner().row && this.getOuterTopRightCorner().row >= r.getOuterTopRightCorner().row;
    }
    /**
     * Adds a cell to your range, at `cellCoords` coordinates.
     *
     * The `cellCoords` coordinates must exceed a corner of your range.
     *
     * @param {CellCoords} cellCoords A new cell's coordinates.
     * @returns {boolean}
     */
  }, {
    key: "expand",
    value: function(r) {
      var n = this.getOuterTopStartCorner(), o = this.getOuterBottomEndCorner();
      return r.row < n.row || r.col < n.col || r.row > o.row || r.col > o.col ? (this.from = this._createCellCoords(Math.min(n.row, r.row), Math.min(n.col, r.col)), this.to = this._createCellCoords(Math.max(o.row, r.row), Math.max(o.col, r.col)), !0) : !1;
    }
    /**
     * Expand your range with another range (`expandingRange`).
     *
     * @param {CellRange} expandingRange A new range.
     * @returns {boolean}
     */
  }, {
    key: "expandByRange",
    value: function(r) {
      if (this.includesRange(r) || !this.overlaps(r))
        return !1;
      var n = this.getOuterTopStartCorner(), o = this.getOuterBottomEndCorner(), i = this.getDirection(), a = r.getOuterTopStartCorner(), l = r.getOuterBottomEndCorner(), s = Math.min(n.row, a.row), u = Math.min(n.col, a.col), f = Math.max(o.row, l.row), c = Math.max(o.col, l.col), h = this._createCellCoords(s, u), d = this._createCellCoords(f, c);
      return this.from = h, this.to = d, this.setDirection(i), this.highlight.row === this.getOuterBottomRightCorner().row && this.getVerticalDirection() === "N-S" && this.flipDirectionVertically(), this.highlight.col === this.getOuterTopRightCorner().col && this.getHorizontalDirection() === "W-E" && this.flipDirectionHorizontally(), !0;
    }
    /**
     * Gets the direction of the selection.
     *
     * @returns {string} Returns one of the values: `'NW-SE'`, `'NE-SW'`, `'SE-NW'`, `'SW-NE'`.
     */
  }, {
    key: "getDirection",
    value: function() {
      if (this.from.isNorthWestOf(this.to))
        return "NW-SE";
      if (this.from.isNorthEastOf(this.to))
        return "NE-SW";
      if (this.from.isSouthEastOf(this.to))
        return "SE-NW";
      if (this.from.isSouthWestOf(this.to))
        return "SW-NE";
    }
    /**
     * Sets the direction of the selection.
     *
     * @param {string} direction One of the values: `'NW-SE'`, `'NE-SW'`, `'SE-NW'`, `'SW-NE'`.
     */
  }, {
    key: "setDirection",
    value: function(r) {
      switch (r) {
        case "NW-SE":
          var n = [this.getOuterTopLeftCorner(), this.getOuterBottomRightCorner()];
          this.from = n[0], this.to = n[1];
          break;
        case "NE-SW":
          var o = [this.getOuterTopRightCorner(), this.getOuterBottomLeftCorner()];
          this.from = o[0], this.to = o[1];
          break;
        case "SE-NW":
          var i = [this.getOuterBottomRightCorner(), this.getOuterTopLeftCorner()];
          this.from = i[0], this.to = i[1];
          break;
        case "SW-NE":
          var a = [this.getOuterBottomLeftCorner(), this.getOuterTopRightCorner()];
          this.from = a[0], this.to = a[1];
          break;
      }
    }
    /**
     * Gets the vertical direction of the selection.
     *
     * @returns {string} Returns one of the values: `N-S` (north->south), `S-N` (south->north).
     */
  }, {
    key: "getVerticalDirection",
    value: function() {
      return ["NE-SW", "NW-SE"].indexOf(this.getDirection()) > -1 ? "N-S" : "S-N";
    }
    /**
     * Gets the horizontal direction of the selection.
     *
     * @returns {string} Returns one of the values: `W-E` (west->east), `E-W` (east->west).
     */
  }, {
    key: "getHorizontalDirection",
    value: function() {
      return ["NW-SE", "SW-NE"].indexOf(this.getDirection()) > -1 ? "W-E" : "E-W";
    }
    /**
     * Flips the direction of your range vertically (e.g., `NW-SE` changes to `SW-NE`).
     */
  }, {
    key: "flipDirectionVertically",
    value: function() {
      var r = this.getDirection();
      switch (r) {
        case "NW-SE":
          this.setDirection("SW-NE");
          break;
        case "NE-SW":
          this.setDirection("SE-NW");
          break;
        case "SE-NW":
          this.setDirection("NE-SW");
          break;
        case "SW-NE":
          this.setDirection("NW-SE");
          break;
      }
    }
    /**
     * Flips the direction of your range horizontally (e.g., `NW-SE` changes to `NE-SW`).
     */
  }, {
    key: "flipDirectionHorizontally",
    value: function() {
      var r = this.getDirection();
      switch (r) {
        case "NW-SE":
          this.setDirection("NE-SW");
          break;
        case "NE-SW":
          this.setDirection("NW-SE");
          break;
        case "SE-NW":
          this.setDirection("SW-NE");
          break;
        case "SW-NE":
          this.setDirection("SE-NW");
          break;
      }
    }
    /**
     * Gets the top-left (in LTR) or top-right (in RTL) corner coordinates of your range.
     *
     * If the corner contains header coordinates (negative values),
     * the corner coordinates are normalized to `0`.
     *
     * @returns {CellCoords}
     */
  }, {
    key: "getTopStartCorner",
    value: function() {
      return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.min(this.from.col, this.to.col)).normalize();
    }
    /**
     * Gets the top-left corner coordinates of your range,
     * both in the LTR and RTL layout direction.
     *
     * If the corner contains header coordinates (negative values),
     * the corner coordinates are normalized to `0`.
     *
     * @returns {CellCoords}
     */
  }, {
    key: "getTopLeftCorner",
    value: function() {
      return Sn(this, zr) ? this.getTopEndCorner() : this.getTopStartCorner();
    }
    /**
     * Gets the bottom right (in LTR) or bottom left (in RTL) corner coordinates of your range.
     *
     * If the corner contains header coordinates (negative values),
     * the corner coordinates are normalized to `0`.
     *
     * @returns {CellCoords}
     */
  }, {
    key: "getBottomEndCorner",
    value: function() {
      return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.max(this.from.col, this.to.col)).normalize();
    }
    /**
     * Gets the bottom right corner coordinates of your range,
     * both in the LTR and RTL layout direction.
     *
     * If the corner contains header coordinates (negative values),
     * the corner coordinates are normalized to `0`.
     *
     * @returns {CellCoords}
     */
  }, {
    key: "getBottomRightCorner",
    value: function() {
      return Sn(this, zr) ? this.getBottomStartCorner() : this.getBottomEndCorner();
    }
    /**
     * Gets the top right (in LTR) or top left (in RTL) corner coordinates of your range.
     *
     * If the corner contains header coordinates (negative values),
     * the corner coordinates are normalized to `0`.
     *
     * @returns {CellCoords}
     */
  }, {
    key: "getTopEndCorner",
    value: function() {
      return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.max(this.from.col, this.to.col)).normalize();
    }
    /**
     * Gets the top right corner coordinates of your range,
     * both in the LTR and RTL layout direction.
     *
     * If the corner contains header coordinates (negative values),
     * the corner coordinates are normalized to `0`.
     *
     * @returns {CellCoords}
     */
  }, {
    key: "getTopRightCorner",
    value: function() {
      return Sn(this, zr) ? this.getTopStartCorner() : this.getTopEndCorner();
    }
    /**
     * Gets the bottom left (in LTR) or bottom right (in RTL) corner coordinates of your range.
     *
     * If the corner contains header coordinates (negative values),
     * the corner coordinates are normalized to `0`.
     *
     * @returns {CellCoords}
     */
  }, {
    key: "getBottomStartCorner",
    value: function() {
      return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.min(this.from.col, this.to.col)).normalize();
    }
    /**
     * Gets the bottom left corner coordinates of your range,
     * both in the LTR and RTL layout direction.
     *
     * If the corner contains header coordinates (negative values),
     * the corner coordinates are normalized to `0`.
     *
     * @returns {CellCoords}
     */
  }, {
    key: "getBottomLeftCorner",
    value: function() {
      return Sn(this, zr) ? this.getBottomEndCorner() : this.getBottomStartCorner();
    }
    /**
     * Gets the top left (in LTR) or top right (in RTL) corner coordinates of your range.
     *
     * If the corner contains header coordinates (negative values),
     * the top and start coordinates are pointed to that header.
     *
     * @returns {CellCoords}
     */
  }, {
    key: "getOuterTopStartCorner",
    value: function() {
      return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.min(this.from.col, this.to.col));
    }
    /**
     * Gets the top left corner coordinates of your range,
     * both in the LTR and RTL layout direction.
     *
     * If the corner contains header coordinates (negative values),
     * the top and left coordinates are pointed to that header.
     *
     * @returns {CellCoords}
     */
  }, {
    key: "getOuterTopLeftCorner",
    value: function() {
      return Sn(this, zr) ? this.getOuterTopEndCorner() : this.getOuterTopStartCorner();
    }
    /**
     * Gets the bottom right (in LTR) or bottom left (in RTL) corner coordinates of your range.
     *
     * If the corner contains header coordinates (negative values),
     * the top and start coordinates are pointed to that header.
     *
     * @returns {CellCoords}
     */
  }, {
    key: "getOuterBottomEndCorner",
    value: function() {
      return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.max(this.from.col, this.to.col));
    }
    /**
     * Gets the bottom right corner coordinates of your range,
     * both in the LTR and RTL layout direction.
     *
     * If the corner contains header coordinates (negative values),
     * the top and left coordinates are pointed to that header.
     *
     * @returns {CellCoords}
     */
  }, {
    key: "getOuterBottomRightCorner",
    value: function() {
      return Sn(this, zr) ? this.getOuterBottomStartCorner() : this.getOuterBottomEndCorner();
    }
    /**
     * Gets the top right (in LTR) or top left (in RTL) corner coordinates of your range.
     *
     * If the corner contains header coordinates (negative values),
     * the top and start coordinates are pointed to that header.
     *
     * @returns {CellCoords}
     */
  }, {
    key: "getOuterTopEndCorner",
    value: function() {
      return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.max(this.from.col, this.to.col));
    }
    /**
     * Gets the top right corner coordinates of your range,
     * both in the LTR and RTL layout direction.
     *
     * If the corner contains header coordinates (negative values),
     * the top and left coordinates are pointed to that header.
     *
     * @returns {CellCoords}
     */
  }, {
    key: "getOuterTopRightCorner",
    value: function() {
      return Sn(this, zr) ? this.getOuterTopStartCorner() : this.getOuterTopEndCorner();
    }
    /**
     * Gets the bottom left (in LTR) or bottom right (in RTL) corner coordinates of your range.
     *
     * If the corner contains header coordinates (negative values),
     * the top and start coordinates are pointed to that header.
     *
     * @returns {CellCoords}
     */
  }, {
    key: "getOuterBottomStartCorner",
    value: function() {
      return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.min(this.from.col, this.to.col));
    }
    /**
     * Gets the bottom left corner coordinates of your range,
     * both in the LTR and RTL layout direction.
     *
     * If the corner contains header coordinates (negative values),
     * the top and left coordinates are pointed to that header.
     *
     * @returns {CellCoords}
     */
  }, {
    key: "getOuterBottomLeftCorner",
    value: function() {
      return Sn(this, zr) ? this.getOuterBottomEndCorner() : this.getOuterBottomStartCorner();
    }
    /**
     * Checks if a set of coordinates (`coords`) matches one of the 4 corners of your range.
     *
     * @param {CellCoords} coords Coordinates to check.
     * @param {CellRange} [expandedRange] A range to compare with.
     * @returns {boolean}
     */
  }, {
    key: "isCorner",
    value: function(r, n) {
      return n && n.includes(r) && (this.getOuterTopLeftCorner().isEqual(this._createCellCoords(n.from.row, n.from.col)) || this.getOuterTopRightCorner().isEqual(this._createCellCoords(n.from.row, n.to.col)) || this.getOuterBottomLeftCorner().isEqual(this._createCellCoords(n.to.row, n.from.col)) || this.getOuterBottomRightCorner().isEqual(this._createCellCoords(n.to.row, n.to.col))) ? !0 : r.isEqual(this.getOuterTopLeftCorner()) || r.isEqual(this.getOuterTopRightCorner()) || r.isEqual(this.getOuterBottomLeftCorner()) || r.isEqual(this.getOuterBottomRightCorner());
    }
    /**
     * Gets the coordinates of a range corner opposite to the provided `coords`.
     *
     * For example: if the `coords` coordinates match the bottom-right corner of your range,
     * the coordinates of the top-left corner of your range are returned.
     *
     * @param {CellCoords} coords Coordinates to check.
     * @param {CellRange} [expandedRange] A range to compare with.
     * @returns {CellCoords}
     */
  }, {
    key: "getOppositeCorner",
    value: function(r, n) {
      if (!(r instanceof Kp))
        return !1;
      if (n) {
        var o = n.from, i = n.to;
        if (n.includes(r)) {
          if (this.getOuterTopStartCorner().isEqual(this._createCellCoords(o.row, o.col)))
            return this.getOuterBottomEndCorner();
          if (this.getOuterTopEndCorner().isEqual(this._createCellCoords(o.row, i.col)))
            return this.getOuterBottomStartCorner();
          if (this.getOuterBottomStartCorner().isEqual(this._createCellCoords(i.row, o.col)))
            return this.getOuterTopEndCorner();
          if (this.getOuterBottomEndCorner().isEqual(this._createCellCoords(i.row, i.col)))
            return this.getOuterTopStartCorner();
        }
      }
      if (r.isEqual(this.getOuterBottomEndCorner()))
        return this.getOuterTopStartCorner();
      if (r.isEqual(this.getOuterTopStartCorner()))
        return this.getOuterBottomEndCorner();
      if (r.isEqual(this.getOuterTopEndCorner()))
        return this.getOuterBottomStartCorner();
      if (r.isEqual(this.getOuterBottomStartCorner()))
        return this.getOuterTopEndCorner();
    }
    /**
     * Indicates which borders (top, right, bottom, left) are shared between
     * your `CellRange`instance and another `range` that's within your range.
     *
     * @param {CellRange} range A range to compare with.
     * @returns {Array<'top' | 'right' | 'bottom' | 'left'>}
     */
  }, {
    key: "getBordersSharedWith",
    value: function(r) {
      if (!this.includesRange(r))
        return [];
      var n = {
        top: Math.min(this.from.row, this.to.row),
        bottom: Math.max(this.from.row, this.to.row),
        left: Math.min(this.from.col, this.to.col),
        right: Math.max(this.from.col, this.to.col)
      }, o = {
        top: Math.min(r.from.row, r.to.row),
        bottom: Math.max(r.from.row, r.to.row),
        left: Math.min(r.from.col, r.to.col),
        right: Math.max(r.from.col, r.to.col)
      }, i = [];
      return n.top === o.top && i.push("top"), n.right === o.right && i.push("right"), n.bottom === o.bottom && i.push("bottom"), n.left === o.left && i.push("left"), i;
    }
    /**
     * Gets the coordinates of the inner cells of your range.
     *
     * @returns {CellCoords[]}
     */
  }, {
    key: "getInner",
    value: function() {
      for (var r = this.getOuterTopStartCorner(), n = this.getOuterBottomEndCorner(), o = [], i = r.row; i <= n.row; i++)
        for (var a = r.col; a <= n.col; a++)
          !(this.from.row === i && this.from.col === a) && !(this.to.row === i && this.to.col === a) && o.push(this._createCellCoords(i, a));
      return o;
    }
    /**
     * Gets the coordinates of all cells of your range.
     *
     * @returns {CellCoords[]}
     */
  }, {
    key: "getAll",
    value: function() {
      for (var r = this.getOuterTopStartCorner(), n = this.getOuterBottomEndCorner(), o = [], i = r.row; i <= n.row; i++)
        for (var a = r.col; a <= n.col; a++)
          r.row === i && r.col === a ? o.push(r) : n.row === i && n.col === a ? o.push(n) : o.push(this._createCellCoords(i, a));
      return o;
    }
    /**
     * Runs a callback function on all cells within your range.
     *
     * You can break the iteration by returning `false` in the callback function.
     *
     * @param {function(number, number): boolean} callback A callback function.
     */
  }, {
    key: "forAll",
    value: function(r) {
      for (var n = this.getOuterTopStartCorner(), o = this.getOuterBottomEndCorner(), i = n.row; i <= o.row; i++)
        for (var a = n.col; a <= o.col; a++) {
          var l = r(i, a);
          if (l === !1)
            return;
        }
    }
    /**
     * Clones your `CellRange` instance.
     *
     * @returns {CellRange}
     */
  }, {
    key: "clone",
    value: function() {
      return new e(this.highlight, this.from, this.to, Sn(this, zr));
    }
    /**
     * Converts your `CellRange` instance into an object literal with the following properties:
     *
     * - `from`
     *    - `row`
     *    - `col`
     * - `to`
     *    - `row`
     *    - `col`
     *
     * @returns {{from: {row: number, col: number}, to: {row: number, col: number}}} An object literal with `from` and `to` properties.
     */
  }, {
    key: "toObject",
    value: function() {
      return {
        from: this.from.toObject(),
        to: this.to.toObject()
      };
    }
    /**
     * Creates and returns a new instance of the `CellCoords` class.
     *
     * The new `CellCoords` instance automatically inherits the LTR/RTL flag
     * from your `CellRange` instance.
     *
     * @private
     * @param {number} row A row index.
     * @param {number} column A column index.
     * @returns {CellCoords}
     */
  }, {
    key: "_createCellCoords",
    value: function(r, n) {
      return new Kp(r, n, Sn(this, zr));
    }
  }]), e;
}();
const wT = Nue;
var Hue = Ie, Lue = vE;
Hue({ target: "Object", stat: !0 }, {
  setPrototypeOf: Lue
});
var iW = Be, jue = Ka, Fue = Vt, Bue = At, DI = ev, Vue = Ld, aW = Function, Wue = iW([].concat), Uue = iW([].join), Pw = {}, zue = function(e, t, r) {
  if (!Bue(Pw, t)) {
    for (var n = [], o = 0; o < t; o++)
      n[o] = "a[" + o + "]";
    Pw[t] = aW("C,a", "return new C(" + Uue(n, ",") + ")");
  }
  return Pw[t](e, r);
}, Yue = Vue ? aW.bind : function(t) {
  var r = jue(this), n = r.prototype, o = DI(arguments, 1), i = function() {
    var l = Wue(o, DI(arguments));
    return this instanceof i ? zue(r, l.length, l) : r.apply(t, l);
  };
  return Fue(n) && (i.prototype = n), i;
}, Gue = Ie, Kue = Bo, kw = el, que = Yue, NI = gB, Xue = Nt, HI = Vt, Zue = mf, lW = Fe, ST = Kue("Reflect", "construct"), Que = Object.prototype, Jue = [].push, sW = lW(function() {
  function e() {
  }
  return !(ST(function() {
  }, [], e) instanceof e);
}), uW = !lW(function() {
  ST(function() {
  });
}), LI = sW || uW;
Gue({ target: "Reflect", stat: !0, forced: LI, sham: LI }, {
  construct: function(t, r) {
    NI(t), Xue(r);
    var n = arguments.length < 3 ? t : NI(arguments[2]);
    if (uW && !sW)
      return ST(t, r, n);
    if (t == n) {
      switch (r.length) {
        case 0:
          return new t();
        case 1:
          return new t(r[0]);
        case 2:
          return new t(r[0], r[1]);
        case 3:
          return new t(r[0], r[1], r[2]);
        case 4:
          return new t(r[0], r[1], r[2], r[3]);
      }
      var o = [null];
      return kw(Jue, o, r), new (kw(que, t, o))();
    }
    var i = n.prototype, a = Zue(HI(i) ? i : Que), l = kw(t, a, r);
    return HI(l) ? l : a;
  }
});
function Kc(e) {
  "@babel/helpers - typeof";
  return Kc = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Kc(e);
}
function efe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function jI(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, rfe(n.key), n);
  }
}
function tfe(e, t, r) {
  return t && jI(e.prototype, t), r && jI(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function rfe(e) {
  var t = nfe(e, "string");
  return Kc(t) === "symbol" ? t : String(t);
}
function nfe(e, t) {
  if (Kc(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Kc(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var vl = /* @__PURE__ */ new WeakMap(), ofe = /* @__PURE__ */ function() {
  function e(t, r, n, o, i, a) {
    var l = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : null;
    efe(this, e), this.wtSettings = n, this.domBindings = r, this.wtTable = i, this.selections = a, this.parent = l, this.eventManager = o, this.facadeGetter = t, vl.set(this, {
      selectedCellBeforeTouchEnd: void 0,
      dblClickTimeout: [null, null],
      dblClickOrigin: [null, null]
    }), this.registerEvents();
  }
  return tfe(e, [{
    key: "registerEvents",
    value: function() {
      var r = this;
      this.eventManager.addEventListener(this.wtTable.holder, "contextmenu", function(i) {
        return r.onContextMenu(i);
      }), this.eventManager.addEventListener(this.wtTable.TABLE, "mouseover", function(i) {
        return r.onMouseOver(i);
      }), this.eventManager.addEventListener(this.wtTable.TABLE, "mouseout", function(i) {
        return r.onMouseOut(i);
      });
      var n = function() {
        r.eventManager.addEventListener(r.wtTable.holder, "touchstart", function(a) {
          return r.onTouchStart(a);
        }), r.eventManager.addEventListener(r.wtTable.holder, "touchend", function(a) {
          return r.onTouchEnd(a);
        }), r.momentumScrolling || (r.momentumScrolling = {}), r.eventManager.addEventListener(r.wtTable.holder, "scroll", function() {
          clearTimeout(r.momentumScrolling._timeout), r.momentumScrolling.ongoing || r.wtSettings.getSetting("onBeforeTouchScroll"), r.momentumScrolling.ongoing = !0, r.momentumScrolling._timeout = setTimeout(function() {
            r.touchApplied || (r.momentumScrolling.ongoing = !1, r.wtSettings.getSetting("onAfterMomentumScroll"));
          }, 200);
        });
      }, o = function() {
        r.eventManager.addEventListener(r.wtTable.holder, "mouseup", function(a) {
          return r.onMouseUp(a);
        }), r.eventManager.addEventListener(r.wtTable.holder, "mousedown", function(a) {
          return r.onMouseDown(a);
        });
      };
      Nn() ? n() : (pB() && n(), o());
    }
    /**
     * Checks if an element is already selected.
     *
     * @private
     * @param {Element} touchTarget An element to check.
     * @returns {boolean}
     */
  }, {
    key: "selectedCellWasTouched",
    value: function(r) {
      var n = vl.get(this), o = this.parentCell(r), i = o.coords;
      if (n.selectedCellBeforeTouchEnd && i) {
        var a = [i.row, n.selectedCellBeforeTouchEnd.from.row], l = a[0], s = a[1], u = [i.col, n.selectedCellBeforeTouchEnd.from.col], f = u[0], c = u[1];
        return l === s && f === c;
      }
      return !1;
    }
    /**
     * Gets closest TD or TH element.
     *
     * @private
     * @param {Element} elem An element from the traversing starts.
     * @returns {object} Contains coordinates and reference to TD or TH if it exists. Otherwise it's empty object.
     */
  }, {
    key: "parentCell",
    value: function(r) {
      var n = {}, o = this.wtTable.TABLE, i = Gv(r, ["TD", "TH"], o);
      return i ? (n.coords = this.wtTable.getCoords(i), n.TD = i) : Me(r, "wtBorder") && Me(r, "current") ? (n.coords = this.selections.getCell().cellRange.highlight, n.TD = this.wtTable.getCell(n.coords)) : Me(r, "wtBorder") && Me(r, "area") && this.selections.createOrGetArea().cellRange && (n.coords = this.selections.createOrGetArea().cellRange.to, n.TD = this.wtTable.getCell(n.coords)), n;
    }
    /**
     * OnMouseDown callback.
     *
     * @private
     * @param {MouseEvent} event The mouse event object.
     */
  }, {
    key: "onMouseDown",
    value: function(r) {
      var n = vl.get(this), o = this.domBindings.rootDocument.activeElement, i = RV(aae, r.target), a = r.target;
      if (!(a === o || i(0) === o || i(1) === o)) {
        var l = this.parentCell(a);
        Me(a, "corner") ? this.wtSettings.getSetting("onCellCornerMouseDown", r, a) : l.TD && this.wtSettings.has("onCellMouseDown") && this.callListener("onCellMouseDown", r, l.coords, l.TD), (r.button === 0 || this.touchApplied) && l.TD && (n.dblClickOrigin[0] = l.TD, clearTimeout(n.dblClickTimeout[0]), n.dblClickTimeout[0] = setTimeout(function() {
          n.dblClickOrigin[0] = null;
        }, 1e3));
      }
    }
    /**
     * OnContextMenu callback.
     *
     * @private
     * @param {MouseEvent} event The mouse event object.
     */
  }, {
    key: "onContextMenu",
    value: function(r) {
      if (this.wtSettings.has("onCellContextMenu")) {
        var n = this.parentCell(r.target);
        n.TD && this.callListener("onCellContextMenu", r, n.coords, n.TD);
      }
    }
    /**
     * OnMouseOver callback.
     *
     * @private
     * @param {MouseEvent} event The mouse event object.
     */
  }, {
    key: "onMouseOver",
    value: function(r) {
      if (this.wtSettings.has("onCellMouseOver")) {
        var n = this.wtTable.TABLE, o = Gv(r.target, ["TD", "TH"], n), i = this.parent || this;
        o && o !== i.lastMouseOver && Ia(o, n) && (i.lastMouseOver = o, this.callListener("onCellMouseOver", r, this.wtTable.getCoords(o), o));
      }
    }
    /**
     * OnMouseOut callback.
     *
     * @private
     * @param {MouseEvent} event The mouse event object.
     */
  }, {
    key: "onMouseOut",
    value: function(r) {
      if (this.wtSettings.has("onCellMouseOut")) {
        var n = this.wtTable.TABLE, o = Gv(r.target, ["TD", "TH"], n), i = Gv(r.relatedTarget, ["TD", "TH"], n), a = this.parent || this;
        o && o !== i && Ia(o, n) && (this.callListener("onCellMouseOut", r, this.wtTable.getCoords(o), o), i === null && (a.lastMouseOver = null));
      }
    }
    /**
     * OnMouseUp callback.
     *
     * @private
     * @param {MouseEvent} event The mouse event object.
     */
  }, {
    key: "onMouseUp",
    value: function(r) {
      var n = vl.get(this), o = this.parentCell(r.target);
      o.TD && this.wtSettings.has("onCellMouseUp") && this.callListener("onCellMouseUp", r, o.coords, o.TD), !(r.button !== 0 && !this.touchApplied) && (o.TD === n.dblClickOrigin[0] && o.TD === n.dblClickOrigin[1] ? (Me(r.target, "corner") ? this.callListener("onCellCornerDblClick", r, o.coords, o.TD) : this.callListener("onCellDblClick", r, o.coords, o.TD), n.dblClickOrigin[0] = null, n.dblClickOrigin[1] = null) : o.TD === n.dblClickOrigin[0] && (n.dblClickOrigin[1] = o.TD, clearTimeout(n.dblClickTimeout[1]), n.dblClickTimeout[1] = setTimeout(function() {
        n.dblClickOrigin[1] = null;
      }, 500)));
    }
    /**
     * OnTouchStart callback. Simulates mousedown event.
     *
     * @private
     * @param {MouseEvent} event The mouse event object.
     */
  }, {
    key: "onTouchStart",
    value: function(r) {
      var n = vl.get(this);
      n.selectedCellBeforeTouchEnd = this.selections.getCell().cellRange, this.touchApplied = !0, this.onMouseDown(r);
    }
    /**
     * OnTouchEnd callback. Simulates mouseup event.
     *
     * @private
     * @param {MouseEvent} event The mouse event object.
     */
  }, {
    key: "onTouchEnd",
    value: function(r) {
      var n, o = r.target, i = (n = this.parentCell(o)) === null || n === void 0 ? void 0 : n.coords, a = be(i) && i.row >= 0 && i.col >= 0, l = r.cancelable && a && this.wtSettings.getSetting("isDataViewInstance");
      if (l) {
        var s = ["A", "BUTTON", "INPUT"];
        CB() && (Zee() || Qee()) && this.selectedCellWasTouched(o) && !s.includes(o.tagName) ? r.preventDefault() : this.selectedCellWasTouched(o) || r.preventDefault();
      }
      this.onMouseUp(r), this.touchApplied = !1;
    }
    /**
     * Call listener with backward compatibility.
     *
     * @private
     * @param {string} name Name of listener.
     * @param {MouseEvent} event The event object.
     * @param {CellCoords} coords Coordinates.
     * @param {HTMLElement} target Event target.
     */
  }, {
    key: "callListener",
    value: function(r, n, o, i) {
      var a = this.wtSettings.getSettingPure(r);
      a && a(n, o, i, this.facadeGetter());
    }
    /**
     * Clears double-click timeouts and destroys the internal eventManager instance.
     */
  }, {
    key: "destroy",
    value: function() {
      var r = vl.get(this);
      clearTimeout(r.dblClickTimeout[0]), clearTimeout(r.dblClickTimeout[1]), this.eventManager.destroy();
    }
  }]), e;
}();
const fW = ofe;
function qc(e) {
  "@babel/helpers - typeof";
  return qc = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, qc(e);
}
function ife(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function FI(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, lfe(n.key), n);
  }
}
function afe(e, t, r) {
  return t && FI(e.prototype, t), r && FI(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function lfe(e) {
  var t = sfe(e, "string");
  return qc(t) === "symbol" ? t : String(t);
}
function sfe(e, t) {
  if (qc(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (qc(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var ufe = /* @__PURE__ */ function() {
  function e(t, r, n) {
    ife(this, e), this.offset = t, this.total = r, this.countTH = n;
  }
  return afe(e, [{
    key: "offsetted",
    value: function(r) {
      return r + this.offset;
    }
    /**
     * @param {number} index The visual column index.
     * @returns {number}
     */
  }, {
    key: "unOffsetted",
    value: function(r) {
      return r - this.offset;
    }
    /**
     * @param {number} index The visual column index.
     * @returns {number}
     */
  }, {
    key: "renderedToSource",
    value: function(r) {
      return this.offsetted(r);
    }
    /**
     * @param {number} index The visual column index.
     * @returns {number}
     */
  }, {
    key: "sourceToRendered",
    value: function(r) {
      return this.unOffsetted(r);
    }
    /**
     * @param {number} index The visual column index.
     * @returns {number}
     */
  }, {
    key: "offsettedTH",
    value: function(r) {
      return r - this.countTH;
    }
    /**
     * @param {number} index The visual column index.
     * @returns {number}
     */
  }, {
    key: "unOffsettedTH",
    value: function(r) {
      return r + this.countTH;
    }
    /**
     * @param {number} index The visual column index.
     * @returns {number}
     */
  }, {
    key: "visibleRowHeadedColumnToSourceColumn",
    value: function(r) {
      return this.renderedToSource(this.offsettedTH(r));
    }
    /**
     * @param {number} index The visual column index.
     * @returns {number}
     */
  }, {
    key: "sourceColumnToVisibleRowHeadedColumn",
    value: function(r) {
      return this.unOffsettedTH(this.sourceToRendered(r));
    }
  }]), e;
}();
const ffe = ufe;
function Xc(e) {
  "@babel/helpers - typeof";
  return Xc = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Xc(e);
}
function cfe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function BI(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, dfe(n.key), n);
  }
}
function hfe(e, t, r) {
  return t && BI(e.prototype, t), r && BI(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function dfe(e) {
  var t = vfe(e, "string");
  return Xc(t) === "symbol" ? t : String(t);
}
function vfe(e, t) {
  if (Xc(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Xc(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var yfe = /* @__PURE__ */ function() {
  function e(t, r, n) {
    cfe(this, e), this.offset = t, this.total = r, this.countTH = n;
  }
  return hfe(e, [{
    key: "offsetted",
    value: function(r) {
      return r + this.offset;
    }
    /**
     * @param {number} index The visual row index.
     * @returns {number}
     */
  }, {
    key: "unOffsetted",
    value: function(r) {
      return r - this.offset;
    }
    /**
     * @param {number} index The visual row index.
     * @returns {number}
     */
  }, {
    key: "renderedToSource",
    value: function(r) {
      return this.offsetted(r);
    }
    /**
     * @param {number} index The visual row index.
     * @returns {number}
     */
  }, {
    key: "sourceToRendered",
    value: function(r) {
      return this.unOffsetted(r);
    }
    /**
     * @param {number} index The visual row index.
     * @returns {number}
     */
  }, {
    key: "offsettedTH",
    value: function(r) {
      return r - this.countTH;
    }
    /**
     * @param {number} index The visual row index.
     * @returns {number}
     */
  }, {
    key: "unOffsettedTH",
    value: function(r) {
      return r + this.countTH;
    }
    /**
     * @param {number} index The visual row index.
     * @returns {number}
     */
  }, {
    key: "visibleColHeadedRowToSourceRow",
    value: function(r) {
      return this.renderedToSource(this.offsettedTH(r));
    }
    /**
     * @param {number} index The visual row index.
     * @returns {number}
     */
  }, {
    key: "sourceRowToVisibleColHeadedRow",
    value: function(r) {
      return this.unOffsettedTH(this.sourceToRendered(r));
    }
  }]), e;
}();
const pfe = yfe;
var mfe = 0, qp = 1, Xp = 2;
function Zc(e) {
  "@babel/helpers - typeof";
  return Zc = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Zc(e);
}
function gfe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function VI(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, wfe(n.key), n);
  }
}
function bfe(e, t, r) {
  return t && VI(e.prototype, t), r && VI(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function wfe(e) {
  var t = Sfe(e, "string");
  return Zc(t) === "symbol" ? t : String(t);
}
function Sfe(e, t) {
  if (Zc(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Zc(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var WI = /* @__PURE__ */ function() {
  function e() {
    gfe(this, e), this.currentSize = 0, this.nextSize = 0, this.currentOffset = 0, this.nextOffset = 0;
  }
  return bfe(e, [{
    key: "setSize",
    value: function(r) {
      this.currentSize = this.nextSize, this.nextSize = r;
    }
    /**
     * Sets new offset.
     *
     * @param {number} offset The offset.
     */
  }, {
    key: "setOffset",
    value: function(r) {
      this.currentOffset = this.nextOffset, this.nextOffset = r;
    }
  }]), e;
}();
function Qc(e) {
  "@babel/helpers - typeof";
  return Qc = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Qc(e);
}
function Cfe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function UI(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Ofe(n.key), n);
  }
}
function _fe(e, t, r) {
  return t && UI(e.prototype, t), r && UI(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Ofe(e) {
  var t = Rfe(e, "string");
  return Qc(t) === "symbol" ? t : String(t);
}
function Rfe(e, t) {
  if (Qc(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Qc(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var Efe = /* @__PURE__ */ function() {
  function e() {
    Cfe(this, e), this.size = new WI(), this.workingSpace = mfe, this.sharedSize = null;
  }
  return _fe(e, [{
    key: "setSize",
    value: function(r) {
      this.size.setSize(r);
    }
    /**
     * Sets the offset for rendered elements. The offset describes the shift between 0 and
     * the first rendered element according to the scroll position.
     *
     * @param {number} offset The offset.
     */
  }, {
    key: "setOffset",
    value: function(r) {
      this.size.setOffset(r);
    }
    /**
     * Returns ViewSize instance.
     *
     * @returns {ViewSize}
     */
  }, {
    key: "getViewSize",
    value: function() {
      return this.size;
    }
    /**
     * Checks if this ViewSizeSet is sharing the size with another instance.
     *
     * @returns {boolean}
     */
  }, {
    key: "isShared",
    value: function() {
      return this.sharedSize instanceof WI;
    }
    /**
     * Checks what working space describes this size instance.
     *
     * @param {number} workingSpace The number which describes the type of the working space (see constants.js).
     * @returns {boolean}
     */
  }, {
    key: "isPlaceOn",
    value: function(r) {
      return this.workingSpace === r;
    }
    /**
     * Appends the ViewSizeSet instance to this instance that turns it into a shared mode.
     *
     * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.
     */
  }, {
    key: "append",
    value: function(r) {
      this.workingSpace = qp, r.workingSpace = Xp, this.sharedSize = r.getViewSize();
    }
    /**
     * Prepends the ViewSize instance to this instance that turns it into a shared mode.
     *
     * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.
     */
  }, {
    key: "prepend",
    value: function(r) {
      this.workingSpace = Xp, r.workingSpace = qp, this.sharedSize = r.getViewSize();
    }
  }]), e;
}();
function Jc(e) {
  "@babel/helpers - typeof";
  return Jc = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Jc(e);
}
function Tfe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function zI(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, kfe(n.key), n);
  }
}
function Pfe(e, t, r) {
  return t && zI(e.prototype, t), r && zI(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function kfe(e) {
  var t = $fe(e, "string");
  return Jc(t) === "symbol" ? t : String(t);
}
function $fe(e, t) {
  if (Jc(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Jc(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var cW = /* @__PURE__ */ function() {
  function e(t, r, n) {
    Tfe(this, e), this.rootNode = t, this.nodesPool = r, this.sizeSet = new Efe(), this.childNodeType = n.toUpperCase(), this.visualIndex = 0, this.collectedNodes = [];
  }
  return Pfe(e, [{
    key: "setSize",
    value: function(r) {
      return this.sizeSet.setSize(r), this;
    }
    /**
     * Sets the offset for rendered elements. The offset describes the shift between 0 and
     * the first rendered element according to the scroll position.
     *
     * @param {number} offset The offset.
     * @returns {OrderView}
     */
  }, {
    key: "setOffset",
    value: function(r) {
      return this.sizeSet.setOffset(r), this;
    }
    /**
     * Checks if this instance of the view shares the root node with another instance. This happens only once when
     * a row (TR) as a root node is managed by two OrderView instances. If this happens another DOM injection
     * algorithm is performed to achieve consistent order.
     *
     * @returns {boolean}
     */
  }, {
    key: "isSharedViewSet",
    value: function() {
      return this.sizeSet.isShared();
    }
    /**
     * Returns rendered DOM element based on visual index.
     *
     * @param {number} visualIndex The visual index.
     * @returns {HTMLElement}
     */
  }, {
    key: "getNode",
    value: function(r) {
      return r < this.collectedNodes.length ? this.collectedNodes[r] : null;
    }
    /**
     * Returns currently processed DOM element.
     *
     * @returns {HTMLElement}
     */
  }, {
    key: "getCurrentNode",
    value: function() {
      var r = this.collectedNodes.length;
      return r > 0 ? this.collectedNodes[r - 1] : null;
    }
    /**
     * Returns rendered child count for this instance.
     *
     * @returns {number}
     */
  }, {
    key: "getRenderedChildCount",
    value: function() {
      var r = this.rootNode, n = this.sizeSet, o = 0;
      if (this.isSharedViewSet())
        for (var i = r.firstElementChild; i; ) {
          if (i.tagName === this.childNodeType)
            o += 1;
          else if (n.isPlaceOn(qp))
            break;
          i = i.nextElementSibling;
        }
      else
        o = r.childElementCount;
      return o;
    }
    /**
     * Setups and prepares all necessary properties and start the rendering process.
     * This method has to be called only once (at the start) for the render cycle.
     */
  }, {
    key: "start",
    value: function() {
      this.collectedNodes.length = 0, this.visualIndex = 0;
      for (var r = this.rootNode, n = this.sizeSet, o = this.isSharedViewSet(), i = n.getViewSize(), a = i.nextSize, l = this.getRenderedChildCount(); l < a; ) {
        var s = this.nodesPool();
        !o || o && n.isPlaceOn(Xp) ? r.appendChild(s) : r.insertBefore(s, r.firstChild), l += 1;
      }
      for (var u = o && n.isPlaceOn(qp); l > a; )
        r.removeChild(u ? r.firstChild : r.lastChild), l -= 1;
    }
    /**
     * Renders the DOM element based on visual index (which is calculated internally).
     * This method has to be called as many times as the size count is met (to cover all previously rendered DOM elements).
     */
  }, {
    key: "render",
    value: function() {
      var r = this.rootNode, n = this.sizeSet, o = this.visualIndex;
      this.isSharedViewSet() && n.isPlaceOn(Xp) && (o += n.sharedSize.nextSize);
      var i = r.childNodes[o];
      if (i.tagName !== this.childNodeType) {
        var a = this.nodesPool();
        r.replaceChild(a, i), i = a;
      }
      this.collectedNodes.push(i), this.visualIndex += 1;
    }
    /**
     * Ends the render process.
     * This method has to be called only once (at the end) for the render cycle.
     */
  }, {
    key: "end",
    value: function() {
    }
  }]), e;
}();
function cs(e) {
  "@babel/helpers - typeof";
  return cs = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, cs(e);
}
function Afe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function YI(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Mfe(n.key), n);
  }
}
function Ife(e, t, r) {
  return t && YI(e.prototype, t), r && YI(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Mfe(e) {
  var t = xfe(e, "string");
  return cs(t) === "symbol" ? t : String(t);
}
function xfe(e, t) {
  if (cs(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (cs(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Dfe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && n_(e, t);
}
function n_(e, t) {
  return n_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, n_(e, t);
}
function Nfe(e) {
  var t = jfe();
  return function() {
    var n = Zp(e), o;
    if (t) {
      var i = Zp(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return Hfe(this, o);
  };
}
function Hfe(e, t) {
  if (t && (cs(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return Lfe(e);
}
function Lfe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function jfe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Zp(e) {
  return Zp = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Zp(e);
}
var hW = /* @__PURE__ */ function(e) {
  Dfe(r, e);
  var t = Nfe(r);
  function r() {
    return Afe(this, r), t.apply(this, arguments);
  }
  return Ife(r, [{
    key: "prependView",
    value: (
      /**
       * The method results in merging external order view into the current order. This happens only for order views which
       * operate on the same root node.
       *
       * In the table, there is only one scenario when this happens. TR root element
       * has a common root node with cells order view and row headers order view. Both classes have to share
       * information about their order sizes to make proper diff calculations.
       *
       * @param {OrderView} orderView The order view to merging with. The view will be added at the beginning of the list.
       * @returns {SharedOrderView}
       */
      function(o) {
        return this.sizeSet.prepend(o.sizeSet), o.sizeSet.append(this.sizeSet), this;
      }
    )
    /**
     * The method results in merging external order view into the current order. This happens only for order views which
     * operate on the same root node.
     *
     * In the table, there is only one scenario when this happens. TR root element
     * has a common root node with cells order view and row headers order view. Both classes have to share
     * information about their order sizes to make proper diff calculations.
     *
     * @param {OrderView} orderView The order view to merging with. The view will be added at the end of the list.
     * @returns {SharedOrderView}
     */
  }, {
    key: "appendView",
    value: function(o) {
      return this.sizeSet.append(o.sizeSet), o.sizeSet.prepend(this.sizeSet), this;
    }
  }]), r;
}(cW);
function eh(e) {
  "@babel/helpers - typeof";
  return eh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, eh(e);
}
function Ffe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function GI(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Vfe(n.key), n);
  }
}
function Bfe(e, t, r) {
  return t && GI(e.prototype, t), r && GI(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Vfe(e) {
  var t = Wfe(e, "string");
  return eh(t) === "symbol" ? t : String(t);
}
function Wfe(e, t) {
  if (eh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (eh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var Ufe = /* @__PURE__ */ function() {
  function e(t) {
    Ffe(this, e), this.nodeType = t.toUpperCase();
  }
  return Bfe(e, [{
    key: "setRootDocument",
    value: function(r) {
      this.rootDocument = r;
    }
    /**
     * Obtains an element. The returned elements in the feature can be cached.
     *
     * @returns {HTMLElement}
     */
  }, {
    key: "obtain",
    value: function() {
      return this.rootDocument.createElement(this.nodeType);
    }
  }]), e;
}();
function th(e) {
  "@babel/helpers - typeof";
  return th = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, th(e);
}
function zfe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function KI(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Gfe(n.key), n);
  }
}
function Yfe(e, t, r) {
  return t && KI(e.prototype, t), r && KI(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Gfe(e) {
  var t = Kfe(e, "string");
  return th(t) === "symbol" ? t : String(t);
}
function Kfe(e, t) {
  if (th(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (th(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var pv = /* @__PURE__ */ function() {
  function e(t, r) {
    zfe(this, e), this.nodesPool = typeof t == "string" ? new Ufe(t) : null, this.nodeType = t, this.rootNode = r, this.table = null, this.renderedNodes = 0;
  }
  return Yfe(e, [{
    key: "setTable",
    value: function(r) {
      this.nodesPool && this.nodesPool.setRootDocument(r.rootDocument), this.table = r;
    }
    /**
     * Adjusts the number of rendered nodes.
     */
  }, {
    key: "adjust",
    value: function() {
    }
    /**
     * Renders the contents to the elements.
     */
  }, {
    key: "render",
    value: function() {
    }
  }]), e;
}();
function hs(e) {
  "@babel/helpers - typeof";
  return hs = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, hs(e);
}
function qfe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function qI(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Zfe(n.key), n);
  }
}
function Xfe(e, t, r) {
  return t && qI(e.prototype, t), r && qI(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Zfe(e) {
  var t = Qfe(e, "string");
  return hs(t) === "symbol" ? t : String(t);
}
function Qfe(e, t) {
  if (hs(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (hs(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Jfe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && o_(e, t);
}
function o_(e, t) {
  return o_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, o_(e, t);
}
function ece(e) {
  var t = nce();
  return function() {
    var n = Qp(e), o;
    if (t) {
      var i = Qp(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return tce(this, o);
  };
}
function tce(e, t) {
  if (t && (hs(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return rce(e);
}
function rce(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function nce() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Qp(e) {
  return Qp = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Qp(e);
}
var oce = /* @__PURE__ */ function(e) {
  Jfe(r, e);
  var t = ece(r);
  function r() {
    var n;
    return qfe(this, r), n = t.call(this, "TH"), n.orderViews = /* @__PURE__ */ new WeakMap(), n.sourceRowIndex = 0, n;
  }
  return Xfe(r, [{
    key: "obtainOrderView",
    value: function(o) {
      var i = this, a;
      return this.orderViews.has(o) ? a = this.orderViews.get(o) : (a = new hW(o, function(l) {
        return i.nodesPool.obtain(i.sourceRowIndex, l);
      }, this.nodeType), this.orderViews.set(o, a)), a;
    }
    /**
     * Renders the cells.
     */
  }, {
    key: "render",
    value: function() {
      for (var o = this.table, i = o.rowsToRender, a = o.rowHeaderFunctions, l = o.rowHeadersCount, s = o.rows, u = o.cells, f = 0; f < i; f++) {
        var c = this.table.renderedRowToSource(f), h = s.getRenderedNode(f);
        this.sourceRowIndex = c;
        var d = this.obtainOrderView(h), y = u.obtainOrderView(h);
        d.appendView(y).setSize(l).setOffset(this.table.renderedColumnToSource(0)).start();
        for (var p = 0; p < l; p++) {
          d.render();
          var g = d.getCurrentNode();
          g.className = "", g.removeAttribute("style"), a[p](c, g, p);
        }
        d.end();
      }
    }
  }]), r;
}(pv);
function ds(e) {
  "@babel/helpers - typeof";
  return ds = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, ds(e);
}
function ice(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function XI(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, lce(n.key), n);
  }
}
function ace(e, t, r) {
  return t && XI(e.prototype, t), r && XI(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function lce(e) {
  var t = sce(e, "string");
  return ds(t) === "symbol" ? t : String(t);
}
function sce(e, t) {
  if (ds(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (ds(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function uce(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && i_(e, t);
}
function i_(e, t) {
  return i_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, i_(e, t);
}
function fce(e) {
  var t = dce();
  return function() {
    var n = Jp(e), o;
    if (t) {
      var i = Jp(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return cce(this, o);
  };
}
function cce(e, t) {
  if (t && (ds(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return hce(e);
}
function hce(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function dce() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Jp(e) {
  return Jp = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Jp(e);
}
var vce = /* @__PURE__ */ function(e) {
  uce(r, e);
  var t = fce(r);
  function r(n) {
    return ice(this, r), t.call(this, null, n);
  }
  return ace(r, [{
    key: "adjust",
    value: function() {
      var o = this.table, i = o.columnHeadersCount, a = o.rowHeadersCount, l = this.rootNode.firstChild;
      if (i) {
        for (var s = this.table.columnsToRender, u = s + a, f = 0, c = i; f < c; f++) {
          for (l = this.rootNode.childNodes[f], l || (l = this.table.rootDocument.createElement("tr"), this.rootNode.appendChild(l)), this.renderedNodes = l.childNodes.length; this.renderedNodes < u; )
            l.appendChild(this.table.rootDocument.createElement("th")), this.renderedNodes += 1;
          for (; this.renderedNodes > u; )
            l.removeChild(l.lastChild), this.renderedNodes -= 1;
        }
        var h = this.rootNode.childNodes.length;
        if (h > i)
          for (var d = i; d < h; d++)
            this.rootNode.removeChild(this.rootNode.lastChild);
      } else
        l && jn(l);
    }
    /**
     * Renders the TH elements.
     */
  }, {
    key: "render",
    value: function() {
      for (var o = this.table.columnHeadersCount, i = 0; i < o; i += 1)
        for (var a = this.table, l = a.columnHeaderFunctions, s = a.columnsToRender, u = a.rowHeadersCount, f = this.rootNode.childNodes[i], c = -1 * u; c < s; c += 1) {
          var h = this.table.renderedColumnToSource(c), d = f.childNodes[c + u];
          d.className = "", d.removeAttribute("style"), l[i](h, d, i);
        }
    }
  }]), r;
}(pv);
function vs(e) {
  "@babel/helpers - typeof";
  return vs = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, vs(e);
}
function yce(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function ZI(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, mce(n.key), n);
  }
}
function pce(e, t, r) {
  return t && ZI(e.prototype, t), r && ZI(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function mce(e) {
  var t = gce(e, "string");
  return vs(t) === "symbol" ? t : String(t);
}
function gce(e, t) {
  if (vs(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (vs(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function bce(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && a_(e, t);
}
function a_(e, t) {
  return a_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, a_(e, t);
}
function wce(e) {
  var t = _ce();
  return function() {
    var n = em(e), o;
    if (t) {
      var i = em(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return Sce(this, o);
  };
}
function Sce(e, t) {
  if (t && (vs(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return Cce(e);
}
function Cce(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function _ce() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function em(e) {
  return em = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, em(e);
}
var Oce = /* @__PURE__ */ function(e) {
  bce(r, e);
  var t = wce(r);
  function r(n) {
    return yce(this, r), t.call(this, null, n);
  }
  return pce(r, [{
    key: "adjust",
    value: function() {
      for (var o = this.table, i = o.columnsToRender, a = o.rowHeadersCount, l = i + a; this.renderedNodes < l; )
        this.rootNode.appendChild(this.table.rootDocument.createElement("col")), this.renderedNodes += 1;
      for (; this.renderedNodes > l; )
        this.rootNode.removeChild(this.rootNode.lastChild), this.renderedNodes -= 1;
    }
    /**
     * Renders the col group elements.
     */
  }, {
    key: "render",
    value: function() {
      this.adjust();
      for (var o = this.table, i = o.columnsToRender, a = o.rowHeadersCount, l = 0; l < a; l++) {
        var s = this.table.renderedColumnToSource(l), u = this.table.columnUtils.getHeaderWidth(s);
        this.rootNode.childNodes[l].style.width = "".concat(u, "px");
      }
      for (var f = 0; f < i; f++) {
        var c = this.table.renderedColumnToSource(f), h = this.table.columnUtils.getStretchedColumnWidth(c);
        this.rootNode.childNodes[f + a].style.width = "".concat(h, "px");
      }
      var d = this.rootNode.firstChild;
      d && ae(d, "rowHeader");
    }
  }]), r;
}(pv);
function ys(e) {
  "@babel/helpers - typeof";
  return ys = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, ys(e);
}
var QI;
function Rce(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } }));
}
function Ece(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function JI(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Pce(n.key), n);
  }
}
function Tce(e, t, r) {
  return t && JI(e.prototype, t), r && JI(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Pce(e) {
  var t = kce(e, "string");
  return ys(t) === "symbol" ? t : String(t);
}
function kce(e, t) {
  if (ys(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (ys(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function $ce(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && l_(e, t);
}
function l_(e, t) {
  return l_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, l_(e, t);
}
function Ace(e) {
  var t = xce();
  return function() {
    var n = tm(e), o;
    if (t) {
      var i = tm(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return Ice(this, o);
  };
}
function Ice(e, t) {
  if (t && (ys(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return Mce(e);
}
function Mce(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function xce() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function tm(e) {
  return tm = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, tm(e);
}
var e1 = !1, Dce = /* @__PURE__ */ function(e) {
  $ce(r, e);
  var t = Ace(r);
  function r(n) {
    var o;
    return Ece(this, r), o = t.call(this, "TR", n), o.orderView = new cW(n, function(i) {
      return o.nodesPool.obtain(i);
    }, o.nodeType), o;
  }
  return Tce(r, [{
    key: "getRenderedNode",
    value: function(o) {
      return this.orderView.getNode(o);
    }
    /**
     * Renders the cells.
     */
  }, {
    key: "render",
    value: function() {
      var o = this.table.rowsToRender;
      !e1 && o > 1e3 && (e1 = !0, ht(ut(QI || (QI = Rce([`Performance tip: Handsontable rendered more than 1000 visible rows. Consider limiting 
        the number of rendered rows by specifying the table height and/or turning off the "renderAllRows" option.`], [`Performance tip: Handsontable rendered more than 1000 visible rows. Consider limiting\\x20
        the number of rendered rows by specifying the table height and/or turning off the "renderAllRows" option.`]))))), this.orderView.setSize(o).setOffset(this.table.renderedRowToSource(0)).start();
      for (var i = 0; i < o; i++)
        this.orderView.render();
      this.orderView.end();
    }
  }]), r;
}(pv);
function ps(e) {
  "@babel/helpers - typeof";
  return ps = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, ps(e);
}
function Nce(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function t1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Lce(n.key), n);
  }
}
function Hce(e, t, r) {
  return t && t1(e.prototype, t), r && t1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Lce(e) {
  var t = jce(e, "string");
  return ps(t) === "symbol" ? t : String(t);
}
function jce(e, t) {
  if (ps(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (ps(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Fce(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && s_(e, t);
}
function s_(e, t) {
  return s_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, s_(e, t);
}
function Bce(e) {
  var t = Uce();
  return function() {
    var n = rm(e), o;
    if (t) {
      var i = rm(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return Vce(this, o);
  };
}
function Vce(e, t) {
  if (t && (ps(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return Wce(e);
}
function Wce(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function Uce() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function rm(e) {
  return rm = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, rm(e);
}
var zce = /* @__PURE__ */ function(e) {
  Fce(r, e);
  var t = Bce(r);
  function r() {
    var n;
    return Nce(this, r), n = t.call(this, "TD"), n.orderViews = /* @__PURE__ */ new WeakMap(), n.sourceRowIndex = 0, n;
  }
  return Hce(r, [{
    key: "obtainOrderView",
    value: function(o) {
      var i = this, a;
      return this.orderViews.has(o) ? a = this.orderViews.get(o) : (a = new hW(o, function(l) {
        return i.nodesPool.obtain(i.sourceRowIndex, l);
      }, this.nodeType), this.orderViews.set(o, a)), a;
    }
    /**
     * Renders the cells.
     */
  }, {
    key: "render",
    value: function() {
      for (var o = this.table, i = o.rowsToRender, a = o.columnsToRender, l = o.rows, s = o.rowHeaders, u = 0; u < i; u++) {
        var f = this.table.renderedRowToSource(u), c = l.getRenderedNode(u);
        this.sourceRowIndex = f;
        var h = this.obtainOrderView(c), d = s.obtainOrderView(c);
        h.prependView(d).setSize(a).setOffset(this.table.renderedColumnToSource(0)).start();
        for (var y = 0; y < a; y++) {
          h.render();
          var p = h.getCurrentNode(), g = this.table.renderedColumnToSource(y);
          Me(p, "hide") || (p.className = ""), p.removeAttribute("style"), p.removeAttribute("dir"), this.table.cellRenderer(f, g, p);
        }
        h.end();
      }
    }
  }]), r;
}(pv);
function rh(e) {
  "@babel/helpers - typeof";
  return rh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, rh(e);
}
function Yce(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function r1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Kce(n.key), n);
  }
}
function Gce(e, t, r) {
  return t && r1(e.prototype, t), r && r1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Kce(e) {
  var t = qce(e, "string");
  return rh(t) === "symbol" ? t : String(t);
}
function qce(e, t) {
  if (rh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (rh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var Xce = /* @__PURE__ */ function() {
  function e(t) {
    var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, n = r.cellRenderer;
    Yce(this, e), this.rootNode = t, this.rootDocument = this.rootNode.ownerDocument, this.rowHeaders = null, this.columnHeaders = null, this.colGroup = null, this.rows = null, this.cells = null, this.rowFilter = null, this.columnFilter = null, this.rowUtils = null, this.columnUtils = null, this.rowsToRender = 0, this.columnsToRender = 0, this.rowHeaderFunctions = [], this.rowHeadersCount = 0, this.columnHeaderFunctions = [], this.columnHeadersCount = 0, this.cellRenderer = n;
  }
  return Gce(e, [{
    key: "setAxisUtils",
    value: function(r, n) {
      this.rowUtils = r, this.columnUtils = n;
    }
    /**
     * Sets viewport size of the table.
     *
     * @param {number} rowsCount An amount of rows to render.
     * @param {number} columnsCount An amount of columns to render.
     */
  }, {
    key: "setViewportSize",
    value: function(r, n) {
      this.rowsToRender = r, this.columnsToRender = n;
    }
    /**
     * Sets row and column filter instances.
     *
     * @param {RowFilter} rowFilter Row filter instance which contains all necessary information about row index transformation.
     * @param {ColumnFilter} columnFilter Column filter instance which contains all necessary information about row
     * index transformation.
     */
  }, {
    key: "setFilters",
    value: function(r, n) {
      this.rowFilter = r, this.columnFilter = n;
    }
    /**
     * Sets row and column header functions.
     *
     * @param {Function[]} rowHeaders Row header functions. Factories for creating content for row headers.
     * @param {Function[]} columnHeaders Column header functions. Factories for creating content for column headers.
     */
  }, {
    key: "setHeaderContentRenderers",
    value: function(r, n) {
      this.rowHeaderFunctions = r, this.rowHeadersCount = r.length, this.columnHeaderFunctions = n, this.columnHeadersCount = n.length;
    }
    /**
     * Sets table renderers.
     *
     * @param {renderers} renderers The renderer units.
     * @param {RowHeadersRenderer} renderers.rowHeaders Row headers renderer.
     * @param {ColumnHeadersRenderer} renderers.columnHeaders Column headers renderer.
     * @param {ColGroupRenderer} renderers.colGroup Col group renderer.
     * @param {RowsRenderer} renderers.rows Rows renderer.
     * @param {CellsRenderer} renderers.cells Cells renderer.
     */
  }, {
    key: "setRenderers",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, n = r.rowHeaders, o = r.columnHeaders, i = r.colGroup, a = r.rows, l = r.cells;
      n.setTable(this), o.setTable(this), i.setTable(this), a.setTable(this), l.setTable(this), this.rowHeaders = n, this.columnHeaders = o, this.colGroup = i, this.rows = a, this.cells = l;
    }
    /**
     * Transforms visual/rendered row index to source index.
     *
     * @param {number} rowIndex Rendered index.
     * @returns {number}
     */
  }, {
    key: "renderedRowToSource",
    value: function(r) {
      return this.rowFilter.renderedToSource(r);
    }
    /**
     * Transforms visual/rendered column index to source index.
     *
     * @param {number} columnIndex Rendered index.
     * @returns {number}
     */
  }, {
    key: "renderedColumnToSource",
    value: function(r) {
      return this.columnFilter.renderedToSource(r);
    }
    /**
     * Renders the table.
     */
  }, {
    key: "render",
    value: function() {
      this.colGroup.adjust(), this.columnHeaders.adjust(), this.rows.adjust(), this.rowHeaders.adjust(), this.columnHeaders.render(), this.rows.render(), this.rowHeaders.render(), this.cells.render(), this.columnUtils.calculateWidths(), this.colGroup.render();
      for (var r = this.rowsToRender, n = this.rows, o = 0; o < r; o++) {
        var i = n.getRenderedNode(o);
        if (i.firstChild) {
          var a = this.renderedRowToSource(o), l = this.rowUtils.getHeight(a);
          l ? i.firstChild.style.height = "".concat(l - 1, "px") : i.firstChild.style.height = "";
        }
      }
    }
  }]), e;
}();
function nh(e) {
  "@babel/helpers - typeof";
  return nh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, nh(e);
}
function Zce(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function n1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Jce(n.key), n);
  }
}
function Qce(e, t, r) {
  return t && n1(e.prototype, t), r && n1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Jce(e) {
  var t = ehe(e, "string");
  return nh(t) === "symbol" ? t : String(t);
}
function ehe(e, t) {
  if (nh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (nh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var the = /* @__PURE__ */ function() {
  function e() {
    var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, r = t.TABLE, n = t.THEAD, o = t.COLGROUP, i = t.TBODY, a = t.rowUtils, l = t.columnUtils, s = t.cellRenderer;
    Zce(this, e), this.renderer = new Xce(r, {
      cellRenderer: s
    }), this.renderer.setRenderers({
      rowHeaders: new oce(),
      columnHeaders: new vce(n),
      colGroup: new Oce(o),
      rows: new Dce(i),
      cells: new zce()
    }), this.renderer.setAxisUtils(a, l);
  }
  return Qce(e, [{
    key: "setFilters",
    value: function(r, n) {
      return this.renderer.setFilters(r, n), this;
    }
    /**
     * Sets the viewport size of the rendered table.
     *
     * @param {number} rowsCount An amount of rows to render.
     * @param {number} columnsCount An amount of columns to render.
     * @returns {Renderer}
     */
  }, {
    key: "setViewportSize",
    value: function(r, n) {
      return this.renderer.setViewportSize(r, n), this;
    }
    /**
     * Sets row and column header functions.
     *
     * @param {Function[]} rowHeaders Row header functions. Factories for creating content for row headers.
     * @param {Function[]} columnHeaders Column header functions. Factories for creating content for column headers.
     * @returns {Renderer}
     */
  }, {
    key: "setHeaderContentRenderers",
    value: function(r, n) {
      return this.renderer.setHeaderContentRenderers(r, n), this;
    }
    /**
     * Adjusts the table (preparing for render).
     */
  }, {
    key: "adjust",
    value: function() {
      this.renderer.adjust();
    }
    /**
     * Renders the table.
     */
  }, {
    key: "render",
    value: function() {
      this.renderer.render();
    }
  }]), e;
}();
function oh(e) {
  "@babel/helpers - typeof";
  return oh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, oh(e);
}
function rhe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function o1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, ohe(n.key), n);
  }
}
function nhe(e, t, r) {
  return t && o1(e.prototype, t), r && o1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function ohe(e) {
  var t = ihe(e, "string");
  return oh(t) === "symbol" ? t : String(t);
}
function ihe(e, t) {
  if (oh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (oh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var ahe = /* @__PURE__ */ function() {
  function e(t, r) {
    rhe(this, e), this.dataAccessObject = t, this.wtSettings = r, this.headerWidths = /* @__PURE__ */ new Map();
  }
  return nhe(e, [{
    key: "getWidth",
    value: function(r) {
      return this.wtSettings.getSetting("columnWidth", r) || this.wtSettings.getSetting("defaultColumnWidth");
    }
    /**
     * Returns stretched column width based on passed source index.
     *
     * @param {number} sourceIndex Column source index.
     * @returns {number}
     */
  }, {
    key: "getStretchedColumnWidth",
    value: function(r) {
      var n = this.dataAccessObject.wtViewport.columnsRenderCalculator, o = this.getWidth(r);
      if (n) {
        var i = n.getStretchedColumnWidth(r, o);
        i && (o = i);
      }
      return o;
    }
    /**
     * Returns column header height based on passed header level.
     *
     * @param {number} level Column header level.
     * @returns {number}
     */
  }, {
    key: "getHeaderHeight",
    value: function(r) {
      var n = this.wtSettings.getSetting("defaultRowHeight"), o = this.dataAccessObject.wtViewport.oversizedColumnHeaders[r];
      return o !== void 0 && (n = n ? Math.max(n, o) : o), n;
    }
    /**
     * Returns column header width based on passed source index.
     *
     * @param {number} sourceIndex Column source index.
     * @returns {number}
     */
  }, {
    key: "getHeaderWidth",
    value: function(r) {
      return this.headerWidths.get(this.dataAccessObject.wtTable.columnFilter.sourceToRendered(r));
    }
    /**
     * Calculates column header widths that can be retrieved from the cache.
     */
  }, {
    key: "calculateWidths",
    value: function() {
      var r = this.wtSettings, n = this.dataAccessObject, o = n.wtTable, i = n.wtViewport, a = n.cloneSource, l = a ? a.wtTable.holder : o.holder, s = l.offsetHeight < l.scrollHeight ? tr() : 0, u = r.getSetting("rowHeaderWidth");
      if (i.columnsRenderCalculator.refreshStretching(i.getViewportWidth() - s), u = r.getSetting("onModifyRowHeaderWidth", u), u != null)
        for (var f = r.getSetting("rowHeaders").length, c = r.getSetting("defaultColumnWidth"), h = 0; h < f; h++) {
          var d = Array.isArray(u) ? u[h] : u;
          d = d ?? c, this.headerWidths.set(h, d);
        }
    }
  }]), e;
}();
function ih(e) {
  "@babel/helpers - typeof";
  return ih = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, ih(e);
}
function lhe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function i1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, uhe(n.key), n);
  }
}
function she(e, t, r) {
  return t && i1(e.prototype, t), r && i1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function uhe(e) {
  var t = fhe(e, "string");
  return ih(t) === "symbol" ? t : String(t);
}
function fhe(e, t) {
  if (ih(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (ih(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var che = /* @__PURE__ */ function() {
  function e(t, r) {
    lhe(this, e), this.dataAccessObject = t, this.wtSettings = r;
  }
  return she(e, [{
    key: "getHeight",
    value: function(r) {
      var n = this.wtSettings.getSetting("rowHeight", r), o = this.dataAccessObject.wtViewport.oversizedRows[r];
      return o !== void 0 && (n = n === void 0 ? o : Math.max(n, o)), n;
    }
  }]), e;
}();
function ah(e) {
  "@babel/helpers - typeof";
  return ah = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, ah(e);
}
function hhe(e) {
  return yhe(e) || vhe(e) || dW(e) || dhe();
}
function dhe() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function vhe(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function yhe(e) {
  if (Array.isArray(e))
    return u_(e);
}
function phe(e, t) {
  return bhe(e) || ghe(e, t) || dW(e, t) || mhe();
}
function mhe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function dW(e, t) {
  if (e) {
    if (typeof e == "string")
      return u_(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return u_(e, t);
  }
}
function u_(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function ghe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function bhe(e) {
  if (Array.isArray(e))
    return e;
}
function whe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function a1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, vW(n.key), n);
  }
}
function She(e, t, r) {
  return t && a1(e.prototype, t), r && a1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Cn(e, t, r) {
  return t = vW(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function vW(e) {
  var t = Che(e, "string");
  return ah(t) === "symbol" ? t : String(t);
}
function Che(e, t) {
  if (ah(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (ah(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var _he = /* @__PURE__ */ function() {
  function e(t, r, n, o, i) {
    var a = this;
    whe(this, e), Cn(this, "wtSettings", null), Cn(this, "domBindings", void 0), Cn(this, "TBODY", null), Cn(this, "THEAD", null), Cn(this, "COLGROUP", null), Cn(this, "hasTableHeight", !0), Cn(this, "hasTableWidth", !0), Cn(this, "isTableVisible", !1), Cn(this, "tableOffset", 0), Cn(this, "holderOffset", 0), this.domBindings = n, this.isMaster = i === "master", this.name = i, this.dataAccessObject = t, this.facadeGetter = r, this.wtSettings = o, this.instance = this.dataAccessObject.wot, this.wot = this.dataAccessObject.wot, this.TABLE = n.rootTable, SV(this.TABLE), this.spreader = this.createSpreader(this.TABLE), this.hider = this.createHider(this.spreader), this.holder = this.createHolder(this.hider), this.wtRootElement = this.holder.parentNode, this.isMaster && this.alignOverlaysWithTrimmingContainer(), this.fixTableDomTree(), this.rowFilter = null, this.columnFilter = null, this.correctHeaderWidth = !1;
    var l = this.wtSettings.getSettingPure("rowHeaderWidth");
    this.wtSettings.update("rowHeaderWidth", function() {
      return a._modifyRowHeaderWidth(l);
    }), this.rowUtils = new che(this.dataAccessObject, this.wtSettings), this.columnUtils = new ahe(this.dataAccessObject, this.wtSettings), this.tableRenderer = new the({
      // TODO refactoring, It can be passed through IOC.
      TABLE: this.TABLE,
      THEAD: this.THEAD,
      COLGROUP: this.COLGROUP,
      TBODY: this.TBODY,
      rowUtils: this.rowUtils,
      columnUtils: this.columnUtils,
      cellRenderer: this.wtSettings.getSettingPure("cellRenderer")
    });
  }
  return She(e, [{
    key: "is",
    value: function(r) {
      return this.name === r;
    }
    /**
     *
     */
  }, {
    key: "fixTableDomTree",
    value: function() {
      var r = this.domBindings.rootDocument;
      this.TBODY = this.TABLE.querySelector("tbody"), this.TBODY || (this.TBODY = r.createElement("tbody"), this.TABLE.appendChild(this.TBODY)), this.THEAD = this.TABLE.querySelector("thead"), this.THEAD || (this.THEAD = r.createElement("thead"), this.TABLE.insertBefore(this.THEAD, this.TBODY)), this.COLGROUP = this.TABLE.querySelector("colgroup"), this.COLGROUP || (this.COLGROUP = r.createElement("colgroup"), this.TABLE.insertBefore(this.COLGROUP, this.THEAD));
    }
    /**
     * @param {HTMLTableElement} table An element to process.
     * @returns {HTMLElement}
     */
  }, {
    key: "createSpreader",
    value: function(r) {
      var n = r.parentNode, o;
      return (!n || n.nodeType !== Node.ELEMENT_NODE || !Me(n, "wtHolder")) && (o = this.domBindings.rootDocument.createElement("div"), o.className = "wtSpreader", n && n.insertBefore(o, r), o.appendChild(r)), o.style.position = "relative", o;
    }
    /**
     * @param {HTMLElement} spreader An element to the hider element is injected.
     * @returns {HTMLElement}
     */
  }, {
    key: "createHider",
    value: function(r) {
      var n = r.parentNode, o;
      return (!n || n.nodeType !== Node.ELEMENT_NODE || !Me(n, "wtHolder")) && (o = this.domBindings.rootDocument.createElement("div"), o.className = "wtHider", n && n.insertBefore(o, r), o.appendChild(r)), o;
    }
    /**
     *
     * @param {HTMLElement} hider An element to the holder element is injected.
     * @returns {HTMLElement}
     */
  }, {
    key: "createHolder",
    value: function(r) {
      var n = r.parentNode, o;
      return (!n || n.nodeType !== Node.ELEMENT_NODE || !Me(n, "wtHolder")) && (o = this.domBindings.rootDocument.createElement("div"), o.style.position = "relative", o.className = "wtHolder", n && n.insertBefore(o, r), this.isMaster && (o.parentNode.className += "ht_master handsontable", o.parentNode.setAttribute("dir", this.wtSettings.getSettingPure("rtlMode") ? "rtl" : "ltr")), o.appendChild(r)), o;
    }
    /**
     * Redraws the table.
     *
     * @param {boolean} [fastDraw=false] If TRUE, will try to avoid full redraw and only update the border positions.
     *                                   If FALSE or UNDEFINED, will perform a full redraw.
     * @returns {Table}
     */
  }, {
    key: "draw",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, n = this.wtSettings, o = this.dataAccessObject, i = o.wtOverlays, a = o.wtViewport, l = n.getSetting("totalRows"), s = n.getSetting("totalColumns"), u = n.getSetting("rowHeaders"), f = u.length, c = n.getSetting("columnHeaders"), h = c.length, d = !1, y = r;
      if (this.isMaster && (this.holderOffset = Yt(this.holder), y = a.createRenderCalculators(y), f && !n.getSetting("fixedColumnsStart"))) {
        var p = i.inlineStartOverlay.getScrollPosition(), g = this.correctHeaderWidth;
        this.correctHeaderWidth = p !== 0, g !== this.correctHeaderWidth && (y = !1);
      }
      if (this.isMaster && (d = i.updateStateOfRendering()), y)
        this.isMaster && a.createVisibleCalculators(), i && i.refresh(!0);
      else {
        this.isMaster ? this.tableOffset = Yt(this.TABLE) : this.tableOffset = this.dataAccessObject.parentTableOffset;
        var w = l > 0 ? this.getFirstRenderedRow() : 0, C = s > 0 ? this.getFirstRenderedColumn() : 0;
        this.rowFilter = new pfe(w, l, h), this.columnFilter = new ffe(C, s, f);
        var _ = !0;
        if (this.isMaster) {
          this.alignOverlaysWithTrimmingContainer();
          var k = {};
          this.wtSettings.getSetting("beforeDraw", !0, k), _ = k.skipRender !== !0;
        }
        if (_) {
          this.tableRenderer.setHeaderContentRenderers(u, c), (this.is(Dn) || this.is(yi)) && this.tableRenderer.setHeaderContentRenderers(u, []), this.resetOversizedRows(), this.tableRenderer.setViewportSize(this.getRenderedRowsCount(), this.getRenderedColumnsCount()).setFilters(this.rowFilter, this.columnFilter).render();
          var E;
          if (this.isMaster && (E = this.dataAccessObject.workspaceWidth, this.dataAccessObject.wtViewport.containerWidth = null, this.markOversizedColumnHeaders()), this.adjustColumnHeaderHeights(), (this.isMaster || this.is(Dn)) && this.markOversizedRows(), this.isMaster) {
            this.dataAccessObject.wtViewport.createVisibleCalculators(), this.dataAccessObject.wtOverlays.refresh(!1), this.dataAccessObject.wtOverlays.applyToDOM();
            var j = yt(this.hider), Y = yt(this.TABLE);
            j !== 0 && Y !== j && (this.columnUtils.calculateWidths(), this.tableRenderer.renderer.colGroup.render()), E !== this.dataAccessObject.wtViewport.getWorkspaceWidth() && (this.dataAccessObject.wtViewport.containerWidth = null, this.columnUtils.calculateWidths(), this.tableRenderer.renderer.colGroup.render()), this.wtSettings.getSetting("onDraw", !0);
          } else
            this.is(Dn) && this.dataAccessObject.cloneSource.wtOverlays.adjustElementsSize();
        }
      }
      var Q = !1;
      return this.isMaster && (Q = i.topOverlay.resetFixedPosition(), i.bottomOverlay.clone && (Q = i.bottomOverlay.resetFixedPosition() || Q), Q = i.inlineStartOverlay.resetFixedPosition() || Q, i.topInlineStartCornerOverlay && i.topInlineStartCornerOverlay.resetFixedPosition(), i.bottomInlineStartCornerOverlay && i.bottomInlineStartCornerOverlay.clone && i.bottomInlineStartCornerOverlay.resetFixedPosition()), Q ? (i.refreshAll(), i.adjustElementsSize()) : this.refreshSelections(y), d && i.syncScrollWithMaster(), this.dataAccessObject.drawn = !0, this;
    }
    /**
     * @param {number} col The visual column index.
     */
  }, {
    key: "markIfOversizedColumnHeader",
    value: function(r) {
      for (var n = this.columnFilter.renderedToSource(r), o = this.wtSettings.getSetting("columnHeaders").length, i = this.wtSettings.getSetting("defaultRowHeight"), a, l, s, u = this.wtSettings.getSetting("columnHeaderHeight") || []; o; )
        o -= 1, a = this.getColumnHeaderHeight(o), l = this.getColumnHeader(n, o), l && (s = ci(l), (!a && i < s || a < s) && (this.dataAccessObject.wtViewport.oversizedColumnHeaders[o] = s), Array.isArray(u) ? u[o] !== null && u[o] !== void 0 && (this.dataAccessObject.wtViewport.oversizedColumnHeaders[o] = u[o]) : isNaN(u) || (this.dataAccessObject.wtViewport.oversizedColumnHeaders[o] = u), this.dataAccessObject.wtViewport.oversizedColumnHeaders[o] < (u[o] || u) && (this.dataAccessObject.wtViewport.oversizedColumnHeaders[o] = u[o] || u));
    }
    /**
     *
     */
  }, {
    key: "adjustColumnHeaderHeights",
    value: function() {
      for (var r = this.wtSettings, n = this.THEAD.childNodes, o = this.dataAccessObject.wtViewport.oversizedColumnHeaders, i = r.getSetting("columnHeaders"), a = 0, l = i.length; a < l; a++)
        if (o[a]) {
          if (!n[a] || n[a].childNodes.length === 0)
            return;
          n[a].childNodes[0].style.height = "".concat(o[a], "px");
        }
    }
    /**
     * Resets cache of row heights. The cache should be cached for each render cycle in a case
     * when new cell values have content which increases/decreases cell height.
     */
  }, {
    key: "resetOversizedRows",
    value: function() {
      var r = this.wtSettings, n = this.dataAccessObject.wtViewport;
      if (!(!this.isMaster && !this.is(Dn)) && !r.getSetting("externalRowCalculator"))
        for (var o = this.getRenderedRowsCount(), i = 0; i < o; i++) {
          var a = this.rowFilter.renderedToSource(i);
          n.oversizedRows && n.oversizedRows[a] && (n.oversizedRows[a] = void 0);
        }
    }
    /**
     * @param {string} className The CSS class name to remove from the table cells.
     */
  }, {
    key: "removeClassFromCells",
    value: function(r) {
      for (var n = this.TABLE.querySelectorAll(".".concat(r)), o = 0, i = n.length; o < i; o++)
        Le(n[o], r);
    }
    /**
     * Refresh the table selection by re-rendering Selection instances connected with that instance.
     *
     * @param {boolean} fastDraw If fast drawing is enabled than additionally className clearing is applied.
     */
  }, {
    key: "refreshSelections",
    value: function(r) {
      var n = this.wtSettings, o = this.dataAccessObject.selections;
      if (o) {
        var i = Array.from(o), a = i.length;
        if (r) {
          for (var l = [], s = 0; s < a; s++) {
            for (var u = i[s].settings, f = u.highlightHeaderClassName, c = u.highlightRowClassName, h = u.highlightColumnClassName, d = i[s].classNames, y = d.length, p = 0; p < y; p++)
              l.includes(d[p]) || l.push(d[p]);
            f && !l.includes(f) && l.push(f), c && !l.includes(c) && l.push(c), h && !l.includes(h) && l.push(h);
          }
          var g = n.getSetting("onBeforeRemoveCellClassNames");
          if (Array.isArray(g))
            for (var w = 0; w < g.length; w++)
              l.push(g[w]);
          for (var C = l.length, _ = 0; _ < C; _++)
            this.removeClassFromCells(l[_]);
        }
        for (var k = 0; k < a; k++)
          i[k].draw(this.facadeGetter(), r);
      }
    }
    /**
     * Get cell element at coords.
     * Negative coords.row or coords.col are used to retrieve header cells. If there are multiple header levels, the
     * negative value corresponds to the distance from the working area. For example, when there are 3 levels of column
     * headers, coords.col=-1 corresponds to the most inner header element, while coords.col=-3 corresponds to the
     * outmost header element.
     *
     * In case an element for the coords is not rendered, the method returns an error code.
     * To produce the error code, the input parameters are validated in the order in which they
     * are given. Thus, if both the row and the column coords are out of the rendered bounds,
     * the method returns the error code for the row.
     *
     * @param {CellCoords} coords The cell coordinates.
     * @returns {HTMLElement|number} HTMLElement on success or Number one of the exit codes on error:
     *  -1 row before viewport
     *  -2 row after viewport
     *  -3 column before viewport
     *  -4 column after viewport.
     */
  }, {
    key: "getCell",
    value: function(r) {
      var n = r.row, o = r.col, i = this.wtSettings.getSetting("onModifyGetCellCoords", n, o);
      if (i && Array.isArray(i)) {
        var a = phe(i, 2);
        n = a[0], o = a[1];
      }
      if (this.isRowBeforeRenderedRows(n))
        return -1;
      if (this.isRowAfterRenderedRows(n))
        return -2;
      if (this.isColumnBeforeRenderedColumns(o))
        return -3;
      if (this.isColumnAfterRenderedColumns(o))
        return -4;
      var l = this.getRow(n);
      if (!l && n >= 0)
        throw new Error("TR was expected to be rendered but is not");
      var s = l.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(o)];
      if (!s && o >= 0)
        throw new Error("TD or TH was expected to be rendered but is not");
      return s;
    }
    /**
     * Get the DOM element of the row with the provided index.
     *
     * @param {number} rowIndex Row index.
     * @returns {HTMLTableRowElement|boolean} Return the row's DOM element or `false` if the row with the provided
     * index doesn't exist.
     */
  }, {
    key: "getRow",
    value: function(r) {
      var n = null, o = null;
      if (r < 0) {
        var i;
        n = (i = this.rowFilter) === null || i === void 0 ? void 0 : i.sourceRowToVisibleColHeadedRow(r), o = this.THEAD;
      } else {
        var a;
        n = (a = this.rowFilter) === null || a === void 0 ? void 0 : a.sourceToRendered(r), o = this.TBODY;
      }
      return n !== void 0 && o !== void 0 ? o.childNodes.length < n + 1 ? !1 : o.childNodes[n] : !1;
    }
    /**
     * GetColumnHeader.
     *
     * @param {number} col Column index.
     * @param {number} [level=0] Header level (0 = most distant to the table).
     * @returns {object} HTMLElement on success or undefined on error.
     */
  }, {
    key: "getColumnHeader",
    value: function(r) {
      var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, o = this.THEAD.childNodes[n];
      return o == null ? void 0 : o.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(r)];
    }
    /**
     * Gets all columns headers (TH elements) from the table.
     *
     * @param {number} column A source column index.
     * @returns {HTMLTableCellElement[]}
     */
  }, {
    key: "getColumnHeaders",
    value: function(r) {
      var n = [], o = this.columnFilter.sourceColumnToVisibleRowHeadedColumn(r);
      return this.THEAD.childNodes.forEach(function(i) {
        var a = i.childNodes[o];
        a && n.push(a);
      }), n;
    }
    /**
     * GetRowHeader.
     *
     * @param {number} row Row index.
     * @param {number} [level=0] Header level (0 = most distant to the table).
     * @returns {HTMLElement} HTMLElement on success or Number one of the exit codes on error: `null table doesn't have
     *   row headers`.
     */
  }, {
    key: "getRowHeader",
    value: function(r) {
      var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      if (this.columnFilter.sourceColumnToVisibleRowHeadedColumn(0) !== 0) {
        var o = this.wtSettings.getSetting("rowHeaders").length;
        if (!(n >= o)) {
          var i = this.TBODY.childNodes[this.rowFilter.sourceToRendered(r)];
          return i == null ? void 0 : i.childNodes[n];
        }
      }
    }
    /**
     * Gets all rows headers (TH elements) from the table.
     *
     * @param {number} row A source row index.
     * @returns {HTMLTableCellElement[]}
     */
  }, {
    key: "getRowHeaders",
    value: function(r) {
      if (this.columnFilter.sourceColumnToVisibleRowHeadedColumn(0) === 0)
        return [];
      for (var n = [], o = this.wtSettings.getSetting("rowHeaders").length, i = 0; i < o; i++) {
        var a = this.TBODY.childNodes[this.rowFilter.sourceToRendered(r)], l = a == null ? void 0 : a.childNodes[i];
        l && n.push(l);
      }
      return n;
    }
    /**
     * Returns cell coords object for a given TD (or a child element of a TD element).
     *
     * @param {HTMLTableCellElement} TD A cell DOM element (or a child of one).
     * @returns {CellCoords|null} The coordinates of the provided TD element (or the closest TD element) or null, if the
     *   provided element is not applicable.
     */
  }, {
    key: "getCoords",
    value: function(r) {
      var n = r;
      if (n.nodeName !== "TD" && n.nodeName !== "TH" && (n = Aa(n, ["TD", "TH"])), n === null)
        return null;
      var o = n.parentNode, i = o.parentNode, a = sae(o), l = n.cellIndex;
      if (ji(ja, n, this.wtRootElement) || ji(Ha, n, this.wtRootElement))
        i.nodeName === "THEAD" && (a -= i.childNodes.length);
      else if (ji(yi, n, this.wtRootElement) || ji(Dn, n, this.wtRootElement)) {
        var s = this.wtSettings.getSetting("totalRows");
        a = s - i.childNodes.length + a;
      } else
        i === this.THEAD ? a = this.rowFilter.visibleColHeadedRowToSourceRow(a) : a = this.rowFilter.renderedToSource(a);
      return ji(ja, n, this.wtRootElement) || ji(La, n, this.wtRootElement) || ji(yi, n, this.wtRootElement) ? l = this.columnFilter.offsettedTH(l) : l = this.columnFilter.visibleRowHeadedColumnToSourceColumn(l), this.wot.createCellCoords(a, l);
    }
    /**
     * Check if any of the rendered rows is higher than expected, and if so, cache them.
     */
  }, {
    key: "markOversizedRows",
    value: function() {
      if (!this.wtSettings.getSetting("externalRowCalculator")) {
        var r = this.TBODY.childNodes.length, n = r * this.wtSettings.getSetting("defaultRowHeight"), o = ci(this.TBODY) - 1, i, a, l, s, u;
        if (!(n === o && !this.wtSettings.getSetting("fixedRowsBottom")))
          for (; r; )
            r -= 1, l = this.rowFilter.renderedToSource(r), i = this.getRowHeight(l), s = this.getTrForRow(l), u = s.querySelector("th"), u ? a = ci(u) : a = ci(s) - 1, (!i && this.wtSettings.getSetting("defaultRowHeight") < a || i < a) && (a += 1, this.dataAccessObject.wtViewport.oversizedRows[l] = a);
      }
    }
    /**
     * @param {number} row The visual row index.
     * @returns {HTMLTableElement}
     */
  }, {
    key: "getTrForRow",
    value: function(r) {
      return this.TBODY.childNodes[this.rowFilter.sourceToRendered(r)];
    }
    /**
     * Checks if the column index (negative value from -1 to N) is rendered.
     *
     * @param {number} column The column index (negative value from -1 to N).
     * @returns {boolean}
     */
  }, {
    key: "isColumnHeaderRendered",
    value: function(r) {
      if (r >= 0)
        return !1;
      var n = this.wtSettings.getSetting("rowHeaders"), o = n.length;
      return Math.abs(r) <= o;
    }
    /**
     * Checks if the row index (negative value from -1 to N) is rendered.
     *
     * @param {number} row The row index (negative value from -1 to N).
     * @returns {boolean}
     */
  }, {
    key: "isRowHeaderRendered",
    value: function(r) {
      if (r >= 0)
        return !1;
      var n = this.wtSettings.getSetting("columnHeaders"), o = n.length;
      return Math.abs(r) <= o;
    }
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * Check if the given row index is lower than the index of the first row that
     * is currently rendered and return TRUE in that case, or FALSE otherwise.
     *
     * Negative row index is used to check the columns' headers.
     *
     *  Headers
     *           +--------------+                                     â
     *       -3  â    â    â    â                                     â
     *           +--------------+                                     â
     *       -2  â    â    â    â                                     â TRUE
     *           +--------------+                                     â
     *       -1  â    â    â    â                                     â
     *  Cells  +==================+                                   â
     *        0  â    â    â    â <--- For fixedRowsTop: 1            â
     *           +--------------+      the master overlay do       ---+ first rendered row (index 1)
     *        1  â A2 â B2 â C2 â      not render the first row.      â
     *           +--------------+                                     â FALSE
     *        2  â A3 â B3 â C3 â                                     â
     *           +--------------+                                  ---+ last rendered row
     *                                                                â
     *                                                                â FALSE
     *
     * @param {number} row The visual row index.
     * @memberof Table#
     * @function isRowBeforeRenderedRows
     * @returns {boolean}
     */
    /* eslint-enable jsdoc/require-description-complete-sentence */
  }, {
    key: "isRowBeforeRenderedRows",
    value: function(r) {
      var n = this.getFirstRenderedRow();
      return r < 0 && n <= 0 ? !this.isRowHeaderRendered(r) : r < n;
    }
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * Check if the given column index is greater than the index of the last column that
     * is currently rendered and return TRUE in that case, or FALSE otherwise.
     *
     * The negative row index is used to check the columns' headers. However,
     * keep in mind that for negative indexes, the method always returns FALSE as
     * it is not possible to render headers partially. The "after" index can not be
     * lower than -1.
     *
     *  Headers
     *           +--------------+                                     â
     *       -3  â    â    â    â                                     â
     *           +--------------+                                     â
     *       -2  â    â    â    â                                     â FALSE
     *           +--------------+                                     â
     *       -1  â    â    â    â                                     â
     *  Cells  +==================+                                   â
     *        0  â    â    â    â <--- For fixedRowsTop: 1            â
     *           +--------------+      the master overlay do       ---+ first rendered row (index 1)
     *        1  â A2 â B2 â C2 â      not render the first rows      â
     *           +--------------+                                     â FALSE
     *        2  â A3 â B3 â C3 â                                     â
     *           +--------------+                                  ---+ last rendered row
     *                                                                â
     *                                                                â TRUE
     *
     * @param {number} row The visual row index.
     * @memberof Table#
     * @function isRowAfterRenderedRows
     * @returns {boolean}
     */
    /* eslint-enable jsdoc/require-description-complete-sentence */
  }, {
    key: "isRowAfterRenderedRows",
    value: function(r) {
      return r > this.getLastRenderedRow();
    }
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * Check if the given column index is lower than the index of the first column that
     * is currently rendered and return TRUE in that case, or FALSE otherwise.
     *
     * Negative column index is used to check the rows' headers.
     *
     *                            For fixedColumnsStart: 1 the master overlay
     *                            do not render this first columns.
     *  Headers    -3   -2   -1    |
     *           +----+----+----ââ â +------+------+
     *           â    â    â    â    â  B1  â  C1  â
     *           +--------------ââ â --------------â
     *           â    â    â    â    â  B2  â  C2  â
     *           +--------------ââ â --------------â
     *           â    â    â    â    â  B3  â  C3  â
     *           +----+----+----ââ â +------+------+
     *                               â·             â·
     *      -------------------------+-------------+---------------->
     *          TRUE             first    FALSE   last         FALSE
     *                           rendered         rendered
     *                           column           column
     *
     * @param {number} column The visual column index.
     * @memberof Table#
     * @function isColumnBeforeRenderedColumns
     * @returns {boolean}
     */
    /* eslint-enable jsdoc/require-description-complete-sentence */
  }, {
    key: "isColumnBeforeRenderedColumns",
    value: function(r) {
      var n = this.getFirstRenderedColumn();
      return r < 0 && n <= 0 ? !this.isColumnHeaderRendered(r) : r < n;
    }
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * Check if the given column index is greater than the index of the last column that
     * is currently rendered and return TRUE in that case, or FALSE otherwise.
     *
     * The negative column index is used to check the rows' headers. However,
     * keep in mind that for negative indexes, the method always returns FALSE as
     * it is not possible to render headers partially. The "after" index can not be
     * lower than -1.
     *
     *                            For fixedColumnsStart: 1 the master overlay
     *                            do not render this first columns.
     *  Headers    -3   -2   -1    |
     *           +----+----+----ââ â +------+------+
     *           â    â    â    â    â  B1  â  C1  â
     *           +--------------ââ â --------------â
     *           â    â    â    â    â  B2  â  C2  â
     *           +--------------ââ â --------------â
     *           â    â    â    â    â  B3  â  C3  â
     *           +----+----+----ââ â +------+------+
     *                               â·             â·
     *      -------------------------+-------------+---------------->
     *          FALSE             first    FALSE   last         TRUE
     *                           rendered         rendered
     *                           column           column
     *
     * @param {number} column The visual column index.
     * @memberof Table#
     * @function isColumnAfterRenderedColumns
     * @returns {boolean}
     */
    /* eslint-enable jsdoc/require-description-complete-sentence */
  }, {
    key: "isColumnAfterRenderedColumns",
    value: function(r) {
      return this.columnFilter && r > this.getLastRenderedColumn();
    }
  }, {
    key: "isColumnAfterViewport",
    value: function(r) {
      return this.columnFilter && r > this.getLastVisibleColumn();
    }
  }, {
    key: "isRowAfterViewport",
    value: function(r) {
      return this.rowFilter && r > this.getLastVisibleRow();
    }
  }, {
    key: "isColumnBeforeViewport",
    value: function(r) {
      return this.columnFilter && this.columnFilter.sourceToRendered(r) < 0 && r >= 0;
    }
  }, {
    key: "isLastRowFullyVisible",
    value: function() {
      return this.getLastVisibleRow() === this.getLastRenderedRow();
    }
  }, {
    key: "isLastColumnFullyVisible",
    value: function() {
      return this.getLastVisibleColumn() === this.getLastRenderedColumn();
    }
  }, {
    key: "allRowsInViewport",
    value: function() {
      return this.wtSettings.getSetting("totalRows") === this.getVisibleRowsCount();
    }
  }, {
    key: "allColumnsInViewport",
    value: function() {
      return this.wtSettings.getSetting("totalColumns") === this.getVisibleColumnsCount();
    }
    /**
     * Checks if any of the row's cells content exceeds its initial height, and if so, returns the oversized height.
     *
     * @param {number} sourceRow The physical row index.
     * @returns {number}
     */
  }, {
    key: "getRowHeight",
    value: function(r) {
      return this.rowUtils.getHeight(r);
    }
    /**
     * @param {number} level The column level.
     * @returns {number}
     */
  }, {
    key: "getColumnHeaderHeight",
    value: function(r) {
      return this.columnUtils.getHeaderHeight(r);
    }
    /**
     * @param {number} sourceColumn The physical column index.
     * @returns {number}
     */
  }, {
    key: "getColumnWidth",
    value: function(r) {
      return this.columnUtils.getWidth(r);
    }
    /**
     * @param {number} sourceColumn The physical column index.
     * @returns {number}
     */
  }, {
    key: "getStretchedColumnWidth",
    value: function(r) {
      return this.columnUtils.getStretchedColumnWidth(r);
    }
    /**
     * Checks if the table has defined size. It returns `true` when the table has width and height
     * set bigger than `0px`.
     *
     * @returns {boolean}
     */
  }, {
    key: "hasDefinedSize",
    value: function() {
      return this.hasTableHeight && this.hasTableWidth;
    }
    /**
     * Gets table's width. The returned width is the width of the rendered cells that fit in the
     * current viewport. The value may change depends on the viewport position (scroll position).
     *
     * @returns {number}
     */
  }, {
    key: "getWidth",
    value: function() {
      return yt(this.TABLE);
    }
    /**
     * Gets table's height. The returned height is the height of the rendered cells that fit in the
     * current viewport. The value may change depends on the viewport position (scroll position).
     *
     * @returns {number}
     */
  }, {
    key: "getHeight",
    value: function() {
      return $t(this.TABLE);
    }
    /**
     * Gets table's total width. The returned width is the width of all rendered cells (including headers)
     * that can be displayed in the table.
     *
     * @returns {number}
     */
  }, {
    key: "getTotalWidth",
    value: function() {
      var r = yt(this.hider);
      return r !== 0 ? r : this.getWidth();
    }
    /**
     * Gets table's total height. The returned height is the height of all rendered cells (including headers)
     * that can be displayed in the table.
     *
     * @returns {number}
     */
  }, {
    key: "getTotalHeight",
    value: function() {
      var r = $t(this.hider);
      return r !== 0 ? r : this.getHeight();
    }
    /**
     * Checks if the table is visible. It returns `true` when the holder element (or its parents)
     * has CSS 'display' property different than 'none'.
     *
     * @returns {boolean}
     */
  }, {
    key: "isVisible",
    value: function() {
      return Hc(this.TABLE);
    }
    /**
     * Modify row header widths provided by user in class contructor.
     *
     * @private
     * @param {Function} rowHeaderWidthFactory The function which can provide default width values for rows..
     * @returns {number}
     */
  }, {
    key: "_modifyRowHeaderWidth",
    value: function(r) {
      var n = wt(r) ? r() : null;
      return Array.isArray(n) ? (n = hhe(n), n[n.length - 1] = this._correctRowHeaderWidth(n[n.length - 1])) : n = this._correctRowHeaderWidth(n), n;
    }
    /**
     * Correct row header width if necessary.
     *
     * @private
     * @param {number} width The width to process.
     * @returns {number}
     */
  }, {
    key: "_correctRowHeaderWidth",
    value: function(r) {
      var n = r;
      return typeof r != "number" && (n = this.wtSettings.getSetting("defaultColumnWidth")), this.correctHeaderWidth && (n += 1), n;
    }
  }]), e;
}();
const Of = _he;
var Ohe = "stickyRowsBottom", yW = {
  /**
   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getFirstRenderedRow: function() {
    var t = this.wtSettings.getSetting("totalRows"), r = this.wtSettings.getSetting("fixedRowsBottom"), n = t - r;
    return t === 0 || r === 0 ? -1 : n < 0 ? 0 : n;
  },
  /**
   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
   * Assumes that all rendered rows are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getFirstVisibleRow: function() {
    return this.getFirstRenderedRow();
  },
  /**
   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getLastRenderedRow: function() {
    return this.wtSettings.getSetting("totalRows") - 1;
  },
  /**
   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
   * Assumes that all rendered rows are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getLastVisibleRow: function() {
    return this.getLastRenderedRow();
  },
  /**
   * Get the number of rendered rows.
   *
   * @returns {number}
   * @this Table
   */
  getRenderedRowsCount: function() {
    var t = this.wtSettings.getSetting("totalRows");
    return Math.min(this.wtSettings.getSetting("fixedRowsBottom"), t);
  },
  /**
   * Get the number of fully visible rows in the viewport.
   * Assumes that all rendered rows are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getVisibleRowsCount: function() {
    return this.getRenderedRowsCount();
  }
};
Wo(yW, "MIXIN_NAME", Ohe, {
  writable: !1,
  enumerable: !1
});
const pW = yW;
var Rhe = "stickyColumnsStart", mW = {
  /**
   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getFirstRenderedColumn: function() {
    var t = this.wtSettings.getSetting("totalColumns");
    return t === 0 ? -1 : 0;
  },
  /**
   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.
   * Assumes that all rendered columns are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getFirstVisibleColumn: function() {
    return this.getFirstRenderedColumn();
  },
  /**
   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getLastRenderedColumn: function() {
    return this.getRenderedColumnsCount() - 1;
  },
  /**
   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.
   * Assumes that all rendered columns are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getLastVisibleColumn: function() {
    return this.getLastRenderedColumn();
  },
  /**
   * Get the number of rendered columns.
   *
   * @returns {number}
   * @this Table
   */
  getRenderedColumnsCount: function() {
    var t = this.wtSettings.getSetting("totalColumns");
    return Math.min(this.wtSettings.getSetting("fixedColumnsStart"), t);
  },
  /**
   * Get the number of fully visible columns in the viewport.
   * Assumes that all rendered columns are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getVisibleColumnsCount: function() {
    return this.getRenderedColumnsCount();
  }
};
Wo(mW, "MIXIN_NAME", Rhe, {
  writable: !1,
  enumerable: !1
});
const CT = mW;
function ms(e) {
  "@babel/helpers - typeof";
  return ms = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, ms(e);
}
function l1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, The(n.key), n);
  }
}
function Ehe(e, t, r) {
  return t && l1(e.prototype, t), r && l1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function The(e) {
  var t = Phe(e, "string");
  return ms(t) === "symbol" ? t : String(t);
}
function Phe(e, t) {
  if (ms(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (ms(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function khe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function $he(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && f_(e, t);
}
function f_(e, t) {
  return f_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, f_(e, t);
}
function Ahe(e) {
  var t = xhe();
  return function() {
    var n = nm(e), o;
    if (t) {
      var i = nm(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return Ihe(this, o);
  };
}
function Ihe(e, t) {
  if (t && (ms(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return Mhe(e);
}
function Mhe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function xhe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function nm(e) {
  return nm = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, nm(e);
}
var _T = /* @__PURE__ */ function(e) {
  $he(r, e);
  var t = Ahe(r);
  function r(n, o, i, a) {
    return khe(this, r), t.call(this, n, o, i, a, yi);
  }
  return Ehe(r);
}(Of);
bt(_T, pW);
bt(_T, CT);
const Dhe = _T;
var Ha = "top", Dn = "bottom", La = "inline_start", ja = "top_inline_start_corner", yi = "bottom_inline_start_corner", Nhe = [Ha, Dn, La, ja, yi], Hhe = /* @__PURE__ */ new Map([[Ha, "ht_clone_".concat(Ha)], [Dn, "ht_clone_".concat(Dn)], [La, "ht_clone_".concat(La, " ht_clone_left")], [ja, "ht_clone_".concat(ja, " ht_clone_top_left_corner")], [yi, "ht_clone_".concat(yi, " ht_clone_bottom_left_corner")]]);
function lh(e) {
  "@babel/helpers - typeof";
  return lh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, lh(e);
}
function Lhe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function s1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, gW(n.key), n);
  }
}
function jhe(e, t, r) {
  return t && s1(e.prototype, t), r && s1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function $w(e, t, r) {
  return t = gW(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function gW(e) {
  var t = Fhe(e, "string");
  return lh(t) === "symbol" ? t : String(t);
}
function Fhe(e, t) {
  if (lh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (lh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var Bhe = /* @__PURE__ */ function() {
  function e(t) {
    Lhe(this, e), $w(this, "dataAccessObject", void 0), $w(this, "lastScrolledColumnPos", -1), $w(this, "lastScrolledRowPos", -1), this.dataAccessObject = t;
  }
  return jhe(e, [{
    key: "scrollViewport",
    value: function(r, n, o, i, a) {
      var l = this.scrollViewportHorizontally(r.col, o, a), s = this.scrollViewportVertically(r.row, n, i);
      return l || s;
    }
    /**
     * Scrolls viewport to a column.
     *
     * @param {number} column Visual column index.
     * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.
     * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.
     * @returns {boolean}
     */
  }, {
    key: "scrollViewportHorizontally",
    value: function(r, n, o) {
      var i = this.dataAccessObject, a = i.drawn, l = i.totalColumns;
      if (!a || !Number.isInteger(r) || r < 0 || r > l)
        return !1;
      var s = this.getFirstVisibleColumn(), u = this.getLastVisibleColumn(), f = n === void 0 && o === void 0, c = this.dataAccessObject, h = c.fixedColumnsStart, d = c.inlineStartOverlay;
      if (f && r < h)
        return !1;
      var y = !1;
      return s === -1 ? y = d.scrollTo(r, f ? r > this.lastScrolledColumnPos : n) : (f && (r < s || r > u) || !f) && (y = d.scrollTo(r, f ? r > u : n)), y && (this.lastScrolledColumnPos = r), y;
    }
    /**
     * Scrolls viewport to a row.
     *
     * @param {number} row Visual row index.
     * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
     * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.
     * @returns {boolean}
     */
  }, {
    key: "scrollViewportVertically",
    value: function(r, n, o) {
      var i = this.dataAccessObject, a = i.drawn, l = i.totalRows;
      if (!a || !Number.isInteger(r) || r < 0 || r > l)
        return !1;
      var s = this.getFirstVisibleRow(), u = this.getLastVisibleRow(), f = n === void 0 && o === void 0, c = this.dataAccessObject, h = c.fixedRowsBottom, d = c.fixedRowsTop, y = c.topOverlay;
      if (f && (r < d || r > l - h - 1))
        return !1;
      var p = !1;
      return s === -1 ? p = y.scrollTo(r, f ? r > this.lastScrolledRowPos : o) : (f && (r < s || r > u) || !f) && (p = y.scrollTo(r, f ? r > u : o)), p && (this.lastScrolledRowPos = r), p;
    }
    /**
     * Get first visible row based on virtual dom and how table is visible in browser window viewport.
     *
     * @returns {number}
     */
  }, {
    key: "getFirstVisibleRow",
    value: function() {
      var r = this.dataAccessObject, n = r.topOverlay, o = r.wtTable, i = r.wtViewport, a = r.totalRows, l = r.fixedRowsTop, s = r.rootWindow, u = o.getFirstVisibleRow();
      if (n.mainTableScrollableElement === s) {
        var f = Yt(o.wtRootElement), c = ci(o.hider), h = ci(s), d = zp(s, s);
        if (f.top + c - h <= d) {
          var y = i.getColumnHeaderHeight();
          y += n.sumCellSizes(0, l);
          for (var p = a; p > 0; p--)
            if (y += n.sumCellSizes(p - 1, p), f.top + c - y <= d) {
              u = p;
              break;
            }
        }
      }
      return u;
    }
    /**
     * Get last visible row based on virtual dom and how table is visible in browser window viewport.
     *
     * @returns {number}
     */
  }, {
    key: "getLastVisibleRow",
    value: function() {
      var r = this.dataAccessObject, n = r.topOverlay, o = r.wtTable, i = r.wtViewport, a = r.totalRows, l = r.rootWindow, s = o.getLastVisibleRow();
      if (n.mainTableScrollableElement === l) {
        var u = Yt(o.wtRootElement), f = zp(l, l);
        if (u.top > f) {
          for (var c = ci(l), h = i.getColumnHeaderHeight(), d = 1; d <= a; d++)
            if (h += n.sumCellSizes(d - 1, d), u.top + h - f >= c) {
              s = d - 2;
              break;
            }
        }
      }
      return s;
    }
    /**
     * Get first visible column based on virtual dom and how table is visible in browser window viewport.
     *
     * @returns {number}
     */
  }, {
    key: "getFirstVisibleColumn",
    value: function() {
      var r = this.dataAccessObject, n = r.inlineStartOverlay, o = r.wtTable, i = r.wtViewport, a = r.totalColumns, l = r.rootWindow, s = o.getFirstVisibleColumn();
      if (n.mainTableScrollableElement === l) {
        var u = Yt(o.wtRootElement), f = Jy(o.hider), c = Jy(l), h = Math.abs(jC(l, l));
        if (u.left + f - c <= h) {
          for (var d = i.getRowHeaderWidth(), y = a; y > 0; y--)
            if (d += n.sumCellSizes(y - 1, y), u.left + f - d <= h) {
              s = y;
              break;
            }
        }
      }
      return s;
    }
    /**
     * Get last visible column based on virtual dom and how table is visible in browser window viewport.
     *
     * @returns {number}
     */
  }, {
    key: "getLastVisibleColumn",
    value: function() {
      var r = this.dataAccessObject, n = r.wtSettings, o = r.inlineStartOverlay, i = r.wtTable, a = r.wtViewport, l = r.totalColumns, s = r.rootWindow, u = i.getLastVisibleColumn();
      if (o.mainTableScrollableElement === s) {
        var f = n.getSetting("rtlMode"), c = null;
        if (f) {
          var h = i.TABLE.getBoundingClientRect(), d = this.dataAccessObject.rootWindow.document, y = d.documentElement.offsetWidth;
          c = Math.abs(h.right - y);
        } else {
          var p = Yt(i.wtRootElement);
          c = p.left;
        }
        var g = Math.abs(jC(s, s));
        if (c > g) {
          for (var w = Jy(s), C = a.getRowHeaderWidth(), _ = 1; _ <= l; _++)
            if (C += o.sumCellSizes(_ - 1, _), c + C - g >= w) {
              u = _ - 2;
              break;
            }
        }
      }
      return u;
    }
  }]), e;
}();
const Vhe = Bhe;
function sh(e) {
  "@babel/helpers - typeof";
  return sh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, sh(e);
}
function Whe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function u1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, bW(n.key), n);
  }
}
function Uhe(e, t, r) {
  return t && u1(e.prototype, t), r && u1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function an(e, t, r) {
  return t = bW(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function bW(e) {
  var t = zhe(e, "string");
  return sh(t) === "symbol" ? t : String(t);
}
function zhe(e, t) {
  if (sh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (sh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var OT = /* @__PURE__ */ function() {
  function e(t, r) {
    Whe(this, e), an(this, "wtTable", void 0), an(this, "wtScroll", void 0), an(this, "wtViewport", void 0), an(this, "wtOverlays", void 0), an(this, "selections", void 0), an(this, "wtEvent", void 0), an(this, "guid", "wt_".concat(gV())), an(this, "drawInterrupted", !1), an(this, "drawn", !1), an(this, "domBindings", void 0), an(this, "wtSettings", void 0), this.domBindings = {
      rootTable: t,
      rootDocument: t.ownerDocument,
      rootWindow: t.ownerDocument.defaultView
    }, this.wtSettings = r, this.wtScroll = new Vhe(this.createScrollDao());
  }
  return Uhe(e, [{
    key: "eventManager",
    get: function() {
      return new It(this);
    }
  }, {
    key: "findOriginalHeaders",
    value: function() {
      var r = [];
      if (this.wtTable.THEAD.childNodes.length && this.wtTable.THEAD.childNodes[0].childNodes.length) {
        for (var n = 0, o = this.wtTable.THEAD.childNodes[0].childNodes.length; n < o; n++)
          r.push(this.wtTable.THEAD.childNodes[0].childNodes[n].innerHTML);
        this.wtSettings.getSetting("columnHeaders").length || this.wtSettings.update("columnHeaders", [function(i, a) {
          xa(a, r[i]);
        }]);
      }
    }
    /**
     * Creates and returns the CellCoords object.
     *
     * @param {*} row The row index.
     * @param {*} column The column index.
     * @returns {CellCoords}
     */
  }, {
    key: "createCellCoords",
    value: function(r, n) {
      return new Kp(r, n, this.wtSettings.getSetting("rtlMode"));
    }
    /**
     * Creates and returns the CellRange object.
     *
     * @param {CellCoords} highlight The highlight coordinates.
     * @param {CellCoords} from The from coordinates.
     * @param {CellCoords} to The to coordinates.
     * @returns {CellRange}
     */
  }, {
    key: "createCellRange",
    value: function(r, n, o) {
      return new wT(r, n, o, this.wtSettings.getSetting("rtlMode"));
    }
    /**
     * Force rerender of Walkontable.
     *
     * @param {boolean} [fastDraw=false] When `true`, try to refresh only the positions of borders without rerendering
     *                                   the data. It will only work if Table.draw() does not force
     *                                   rendering anyway.
     * @returns {Walkontable}
     */
  }, {
    key: "draw",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      return this.drawInterrupted = !1, !r && !this.wtTable.isVisible() ? this.drawInterrupted = !0 : this.wtTable.draw(r), this;
    }
    /**
     * Returns the TD at coords. If topmost is set to true, returns TD from the topmost overlay layer,
     * if not set or set to false, returns TD from the master table.
     *
     * @param {CellCoords} coords The cell coordinates.
     * @param {boolean} [topmost=false] If set to `true`, it returns the TD element from the topmost overlay. For example,
     *                                  if the wanted cell is in the range of fixed rows, it will return a TD element
     *                                  from the top overlay.
     * @returns {HTMLElement}
     */
  }, {
    key: "getCell",
    value: function(r) {
      var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
      if (!n)
        return this.wtTable.getCell(r);
      var o = this.wtSettings.getSetting("totalRows"), i = this.wtSettings.getSetting("fixedRowsTop"), a = this.wtSettings.getSetting("fixedRowsBottom"), l = this.wtSettings.getSetting("fixedColumnsStart");
      if (r.row < i && r.col < l)
        return this.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.getCell(r);
      if (r.row < i)
        return this.wtOverlays.topOverlay.clone.wtTable.getCell(r);
      if (r.col < l && r.row >= o - a) {
        if (this.wtOverlays.bottomInlineStartCornerOverlay && this.wtOverlays.bottomInlineStartCornerOverlay.clone)
          return this.wtOverlays.bottomInlineStartCornerOverlay.clone.wtTable.getCell(r);
      } else {
        if (r.col < l)
          return this.wtOverlays.inlineStartOverlay.clone.wtTable.getCell(r);
        if (r.row < o && r.row >= o - a && this.wtOverlays.bottomOverlay && this.wtOverlays.bottomOverlay.clone)
          return this.wtOverlays.bottomOverlay.clone.wtTable.getCell(r);
      }
      return this.wtTable.getCell(r);
    }
    /**
     * Scrolls the viewport to a cell (rerenders if needed).
     *
     * @param {CellCoords} coords The cell coordinates to scroll to.
     * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
     * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.
     * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.
     * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.
     * @returns {boolean}
     */
  }, {
    key: "scrollViewport",
    value: function(r, n, o, i, a) {
      return r.col < 0 || r.row < 0 ? !1 : this.wtScroll.scrollViewport(r, n, o, i, a);
    }
    /**
     * Scrolls the viewport to a column (rerenders if needed).
     *
     * @param {number} column Visual column index.
     * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.
     * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.
     * @returns {boolean}
     */
  }, {
    key: "scrollViewportHorizontally",
    value: function(r, n, o) {
      return r < 0 ? !1 : this.wtScroll.scrollViewportHorizontally(r, n, o);
    }
    /**
     * Scrolls the viewport to a row (rerenders if needed).
     *
     * @param {number} row Visual row index.
     * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
     * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.
     * @returns {boolean}
     */
  }, {
    key: "scrollViewportVertically",
    value: function(r, n, o) {
      return r < 0 ? !1 : this.wtScroll.scrollViewportVertically(r, n, o);
    }
    /**
     * @returns {Array}
     */
  }, {
    key: "getViewport",
    value: function() {
      return [this.wtTable.getFirstVisibleRow(), this.wtTable.getFirstVisibleColumn(), this.wtTable.getLastVisibleRow(), this.wtTable.getLastVisibleColumn()];
    }
    /**
     * Destroy instance.
     */
  }, {
    key: "destroy",
    value: function() {
      this.wtOverlays.destroy(), this.wtEvent.destroy();
    }
    /**
     * Create data access object for scroll.
     *
     * @protected
     * @returns {ScrollDao}
     */
  }, {
    key: "createScrollDao",
    value: function() {
      var r = this;
      return {
        get drawn() {
          return r.drawn;
        },
        get topOverlay() {
          return r.wtOverlays.topOverlay;
        },
        get inlineStartOverlay() {
          return r.wtOverlays.inlineStartOverlay;
        },
        get wtTable() {
          return r.wtTable;
        },
        get wtViewport() {
          return r.wtViewport;
        },
        get wtSettings() {
          return r.wtSettings;
        },
        get rootWindow() {
          return r.domBindings.rootWindow;
        },
        // TODO refactoring, consider about using injecting wtSettings into scroll (it'll enables remove dao layer)
        get totalRows() {
          return r.wtSettings.getSetting("totalRows");
        },
        get totalColumns() {
          return r.wtSettings.getSetting("totalColumns");
        },
        get fixedRowsTop() {
          return r.wtSettings.getSetting("fixedRowsTop");
        },
        get fixedRowsBottom() {
          return r.wtSettings.getSetting("fixedRowsBottom");
        },
        get fixedColumnsStart() {
          return r.wtSettings.getSetting("fixedColumnsStart");
        }
      };
    }
    // TODO refactoring: it will be much better to not use DAO objects. They are needed for now to provide
    // dynamically access to related objects
    /**
     * Create data access object for wtTable.
     *
     * @protected
     * @returns {TableDao}
     */
  }, {
    key: "getTableDao",
    value: function() {
      var r = this;
      return {
        get wot() {
          return r;
        },
        get parentTableOffset() {
          return r.cloneSource.wtTable.tableOffset;
        },
        get cloneSource() {
          return r.cloneSource;
        },
        get workspaceWidth() {
          return r.wtViewport.getWorkspaceWidth();
        },
        get wtViewport() {
          return r.wtViewport;
        },
        get wtOverlays() {
          return r.wtOverlays;
        },
        get selections() {
          return r.selections;
        },
        get drawn() {
          return r.drawn;
        },
        set drawn(n) {
          r.drawn = n;
        },
        get wtTable() {
          return r.wtTable;
        },
        get startColumnRendered() {
          return r.wtViewport.columnsRenderCalculator.startColumn;
        },
        get startColumnVisible() {
          return r.wtViewport.columnsVisibleCalculator.startColumn;
        },
        get endColumnRendered() {
          return r.wtViewport.columnsRenderCalculator.endColumn;
        },
        get endColumnVisible() {
          return r.wtViewport.columnsVisibleCalculator.endColumn;
        },
        get countColumnsRendered() {
          return r.wtViewport.columnsRenderCalculator.count;
        },
        get countColumnsVisible() {
          return r.wtViewport.columnsVisibleCalculator.count;
        },
        get startRowRendered() {
          return r.wtViewport.rowsRenderCalculator.startRow;
        },
        get startRowVisible() {
          return r.wtViewport.rowsVisibleCalculator.startRow;
        },
        get endRowRendered() {
          return r.wtViewport.rowsRenderCalculator.endRow;
        },
        get endRowVisible() {
          return r.wtViewport.rowsVisibleCalculator.endRow;
        },
        get countRowsRendered() {
          return r.wtViewport.rowsRenderCalculator.count;
        },
        get countRowsVisible() {
          return r.wtViewport.rowsVisibleCalculator.count;
        }
      };
    }
  }]), e;
}();
function gs(e) {
  "@babel/helpers - typeof";
  return gs = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, gs(e);
}
function f1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, wW(n.key), n);
  }
}
function Yhe(e, t, r) {
  return t && f1(e.prototype, t), r && f1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Ghe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function Khe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && c_(e, t);
}
function c_(e, t) {
  return c_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, c_(e, t);
}
function qhe(e) {
  var t = Zhe();
  return function() {
    var n = om(e), o;
    if (t) {
      var i = om(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return Xhe(this, o);
  };
}
function Xhe(e, t) {
  if (t && (gs(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return rp(e);
}
function rp(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function Zhe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function om(e) {
  return om = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, om(e);
}
function c1(e, t, r) {
  return t = wW(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function wW(e) {
  var t = Qhe(e, "string");
  return gs(t) === "symbol" ? t : String(t);
}
function Qhe(e, t) {
  if (gs(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (gs(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var Jhe = /* @__PURE__ */ function(e) {
  Khe(r, e);
  var t = qhe(r);
  function r(n, o, i) {
    var a;
    Ghe(this, r), a = t.call(this, n, o), c1(rp(a), "cloneSource", void 0), c1(rp(a), "cloneOverlay", void 0);
    var l = a.wtSettings.getSetting("facade", rp(a));
    return a.cloneSource = i.source, a.cloneOverlay = i.overlay, a.wtTable = a.cloneOverlay.createTable(a.getTableDao(), l, a.domBindings, a.wtSettings), a.wtViewport = i.viewport, a.selections = i.selections, a.wtEvent = new fW(l, a.domBindings, a.wtSettings, a.eventManager, a.wtTable, a.selections, i.event), a.findOriginalHeaders(), a;
  }
  return Yhe(r);
}(OT);
function uh(e) {
  "@babel/helpers - typeof";
  return uh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, uh(e);
}
function ede(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function h1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, SW(n.key), n);
  }
}
function tde(e, t, r) {
  return t && h1(e.prototype, t), r && h1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function rde(e, t, r) {
  return t = SW(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function SW(e) {
  var t = nde(e, "string");
  return uh(t) === "symbol" ? t : String(t);
}
function nde(e, t) {
  if (uh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (uh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var mv = /* @__PURE__ */ function() {
  function e(t, r, n, o, i) {
    ede(this, e), rde(this, "wtSettings", null), Wo(this, "wot", t, {
      writable: !1
    }), this.domBindings = i, this.facadeGetter = r, this.wtSettings = o;
    var a = this.wot.wtTable, l = a.TABLE, s = a.hider, u = a.spreader, f = a.holder, c = a.wtRootElement;
    this.instance = this.wot, this.type = n, this.mainTableScrollableElement = null, this.TABLE = l, this.hider = s, this.spreader = u, this.holder = f, this.wtRootElement = c, this.trimmingContainer = fs(this.hider.parentNode.parentNode), this.updateStateOfRendering(), this.clone = this.makeClone();
  }
  return tde(e, [{
    key: "updateStateOfRendering",
    value: function() {
      var r = this.needFullRender;
      this.needFullRender = this.shouldBeRendered();
      var n = r !== this.needFullRender;
      return n && !this.needFullRender && this.reset(), n;
    }
    /**
     * Checks if overlay should be fully rendered.
     *
     * @returns {boolean}
     */
  }, {
    key: "shouldBeRendered",
    value: function() {
      return !0;
    }
    /**
     * Update the trimming container.
     */
  }, {
    key: "updateTrimmingContainer",
    value: function() {
      this.trimmingContainer = fs(this.hider.parentNode.parentNode);
    }
    /**
     * Update the main scrollable element.
     */
  }, {
    key: "updateMainScrollableElement",
    value: function() {
      var r = this.wot.wtTable, n = this.domBindings.rootWindow;
      n.getComputedStyle(r.wtRootElement.parentNode).getPropertyValue("overflow") === "hidden" ? this.mainTableScrollableElement = this.wot.wtTable.holder : this.mainTableScrollableElement = Yp(r.TABLE);
    }
    /**
     * Calculates coordinates of the provided element, relative to the root Handsontable element.
     * NOTE: The element needs to be a child of the overlay in order for the method to work correctly.
     *
     * @param {HTMLElement} element The cell element to calculate the position for.
     * @param {number} rowIndex Visual row index.
     * @param {number} columnIndex Visual column index.
     * @returns {{top: number, start: number}|undefined}
     */
  }, {
    key: "getRelativeCellPosition",
    value: function(r, n, o) {
      if (this.clone.wtTable.holder.contains(r) === !1) {
        ht("The provided element is not a child of the ".concat(this.type, " overlay"));
        return;
      }
      var i = this.mainTableScrollableElement === this.domBindings.rootWindow, a = o < this.wtSettings.getSetting("fixedColumnsStart"), l = n < this.wtSettings.getSetting("fixedRowsTop"), s = n >= this.wtSettings.getSetting("totalRows") - this.wtSettings.getSetting("fixedRowsBottom"), u = this.clone.wtTable.spreader, f = {
        start: this.getRelativeStartPosition(u),
        top: u.offsetTop
      }, c = {
        start: this.getRelativeStartPosition(r),
        top: r.offsetTop
      }, h = null;
      return i ? h = this.getRelativeCellPositionWithinWindow(l, a, c, f) : h = this.getRelativeCellPositionWithinHolder(l, s, a, c, f), h;
    }
    /**
     * Get inline start value depending of direction.
     *
     * @param {HTMLElement} el Element.
     * @returns {number}
     */
  }, {
    key: "getRelativeStartPosition",
    value: function(r) {
      return this.isRtl() ? r.offsetParent.offsetWidth - r.offsetLeft - r.offsetWidth : r.offsetLeft;
    }
    /**
     * Calculates coordinates of the provided element, relative to the root Handsontable element within a table with window
     * as a scrollable element.
     *
     * @private
     * @param {boolean} onFixedRowTop `true` if the coordinates point to a place within the top fixed rows.
     * @param {boolean} onFixedColumn `true` if the coordinates point to a place within the fixed columns.
     * @param {number} elementOffset Offset position of the cell element.
     * @param {number} spreaderOffset Offset position of the spreader element.
     * @returns {{top: number, left: number}}
     */
  }, {
    key: "getRelativeCellPositionWithinWindow",
    value: function(r, n, o, i) {
      var a = this.wot.wtTable.wtRootElement.getBoundingClientRect(), l = 0, s = 0;
      if (!n)
        l = i.start;
      else {
        var u = a.left;
        this.isRtl() && (u = this.domBindings.rootWindow.innerWidth - (a.left + a.width + tr())), l = u <= 0 ? -1 * u : 0;
      }
      if (r) {
        var f = this.clone.wtTable.TABLE.getBoundingClientRect();
        s = f.top - a.top;
      } else
        s = i.top;
      return {
        start: o.start + l,
        top: o.top + s
      };
    }
    /**
     * Calculates coordinates of the provided element, relative to the root Handsontable element within a table with window
     * as a scrollable element.
     *
     * @private
     * @param {boolean} onFixedRowTop `true` if the coordinates point to a place within the top fixed rows.
     * @param {boolean} onFixedRowBottom `true` if the coordinates point to a place within the bottom fixed rows.
     * @param {boolean} onFixedColumn `true` if the coordinates point to a place within the fixed columns.
     * @param {number} elementOffset Offset position of the cell element.
     * @param {number} spreaderOffset Offset position of the spreader element.
     * @returns {{top: number, left: number}}
     */
  }, {
    key: "getRelativeCellPositionWithinHolder",
    value: function(r, n, o, i, a) {
      var l = {
        horizontal: this.wot.wtOverlays.inlineStartOverlay.getScrollPosition(),
        vertical: this.wot.wtOverlays.topOverlay.getScrollPosition()
      }, s = 0, u = 0;
      if (o || (s = l.horizontal - a.start), n) {
        var f = this.wot.wtTable.wtRootElement.getBoundingClientRect(), c = this.clone.wtTable.TABLE.getBoundingClientRect();
        u = c.top * -1 + f.top;
      } else
        r || (u = l.vertical - a.top);
      return {
        start: i.start - s,
        top: i.top - u
      };
    }
    /**
     * Make a clone of table for overlay.
     *
     * @returns {Clone}
     */
  }, {
    key: "makeClone",
    value: function() {
      if (Nhe.indexOf(this.type) === -1)
        throw new Error('Clone type "'.concat(this.type, '" is not supported.'));
      var r = this.wot.wtTable, n = this.domBindings, o = n.rootDocument, i = n.rootWindow, a = o.createElement("DIV"), l = o.createElement("TABLE"), s = r.wtRootElement.parentNode;
      a.className = "".concat(Hhe.get(this.type), " handsontable"), a.setAttribute("dir", this.isRtl() ? "rtl" : "ltr"), a.style.position = "absolute", a.style.top = 0, a.style.overflow = "visible", this.isRtl() ? a.style.right = 0 : a.style.left = 0, l.className = r.TABLE.className, a.appendChild(l), s.appendChild(a);
      var u = this.wtSettings.getSetting("preventOverflow");
      return u === !0 || u === "horizontal" && this.type === Ha || u === "vertical" && this.type === La ? this.mainTableScrollableElement = i : i.getComputedStyle(s).getPropertyValue("overflow") === "hidden" ? this.mainTableScrollableElement = r.holder : this.mainTableScrollableElement = Yp(r.TABLE), new Jhe(l, this.wtSettings, {
        // todo ioc factory
        source: this.wot,
        overlay: this,
        viewport: this.wot.wtViewport,
        // todo ioc , or factor func if used only here
        event: this.wot.wtEvent,
        // todo ioc , or factory func if used only here
        selections: this.wot.selections
        // todo ioc , or factory func if used only here
      });
    }
    /**
     * Refresh/Redraw overlay.
     *
     * @param {boolean} [fastDraw=false] When `true`, try to refresh only the positions of borders without rerendering
     *                                   the data. It will only work if Table.draw() does not force
     *                                   rendering anyway.
     */
  }, {
    key: "refresh",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, n = this.shouldBeRendered();
      this.clone && (this.needFullRender || n) && this.clone.draw(r), this.needFullRender = n;
    }
    /**
     * Reset overlay styles to initial values.
     */
  }, {
    key: "reset",
    value: function() {
      if (this.clone) {
        var r = this.clone.wtTable.holder, n = this.clone.wtTable.hider, o = r.style, i = n.style, a = r.parentNode.style;
        I([o, i, a], function(l) {
          l.width = "", l.height = "";
        });
      }
    }
    /**
     * Determine if Walkontable is running in RTL mode.
     *
     * @returns {boolean}
     */
  }, {
    key: "isRtl",
    value: function() {
      return this.wtSettings.getSetting("rtlMode");
    }
    /**
     * Destroy overlay instance.
     */
  }, {
    key: "destroy",
    value: function() {
      this.clone.eventManager.destroy();
    }
  }]), e;
}();
function bs(e) {
  "@babel/helpers - typeof";
  return bs = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, bs(e);
}
function np(e, t, r) {
  return CW() ? np = Reflect.construct.bind() : np = function(o, i, a) {
    var l = [null];
    l.push.apply(l, i);
    var s = Function.bind.apply(o, l), u = new s();
    return a && im(u, a.prototype), u;
  }, np.apply(null, arguments);
}
function ode(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function d1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, ade(n.key), n);
  }
}
function ide(e, t, r) {
  return t && d1(e.prototype, t), r && d1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function ade(e) {
  var t = lde(e, "string");
  return bs(t) === "symbol" ? t : String(t);
}
function lde(e, t) {
  if (bs(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (bs(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function sde(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && im(e, t);
}
function im(e, t) {
  return im = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, im(e, t);
}
function ude(e) {
  var t = CW();
  return function() {
    var n = am(e), o;
    if (t) {
      var i = am(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return fde(this, o);
  };
}
function fde(e, t) {
  if (t && (bs(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return cde(e);
}
function cde(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function CW() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function am(e) {
  return am = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, am(e);
}
var hde = /* @__PURE__ */ function(e) {
  sde(r, e);
  var t = ude(r);
  function r(n, o, i, a, l, s) {
    var u;
    return ode(this, r), u = t.call(this, n, o, yi, i, a), u.bottomOverlay = l, u.inlineStartOverlay = s, u;
  }
  return ide(r, [{
    key: "createTable",
    value: function() {
      for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
        i[a] = arguments[a];
      return np(Dhe, i);
    }
    /**
     * Checks if overlay should be fully rendered.
     *
     * @returns {boolean}
     */
  }, {
    key: "shouldBeRendered",
    value: function() {
      return this.wtSettings.getSetting("shouldRenderBottomOverlay") && this.wtSettings.getSetting("shouldRenderInlineStartOverlay");
    }
    /**
     * Updates the corner overlay position.
     *
     * @returns {boolean}
     */
  }, {
    key: "resetFixedPosition",
    value: function() {
      var o = this.wot;
      if (this.updateTrimmingContainer(), !o.wtTable.holder.parentNode)
        return !1;
      var i = this.clone.wtTable.holder.parentNode;
      if (i.style.top = "", this.trimmingContainer === this.domBindings.rootWindow) {
        var a = this.inlineStartOverlay.getOverlayOffset(), l = this.bottomOverlay.getOverlayOffset();
        i.style[this.isRtl() ? "right" : "left"] = "".concat(a, "px"), i.style.bottom = "".concat(l, "px");
      } else
        kg(i), this.repositionOverlay();
      var s = $t(this.clone.wtTable.TABLE), u = yt(this.clone.wtTable.TABLE);
      return this.wot.wtTable.hasDefinedSize() || (s = 0), i.style.height = "".concat(s, "px"), i.style.width = "".concat(u, "px"), !1;
    }
    /**
     * Reposition the overlay.
     */
  }, {
    key: "repositionOverlay",
    value: function() {
      var o = this.wot, i = o.wtTable, a = o.wtViewport, l = this.domBindings.rootDocument, s = this.clone.wtTable.holder.parentNode, u = 0;
      a.hasVerticalScroll() || (u += a.getWorkspaceHeight() - i.getTotalHeight()), a.hasVerticalScroll() && a.hasHorizontalScroll() && (u += tr(l)), s.style.bottom = "".concat(u, "px");
    }
  }]), r;
}(mv), dde = "calculatedColumns", _W = {
  /**
   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getFirstRenderedColumn: function() {
    var t = this.dataAccessObject.startColumnRendered;
    return t === null ? -1 : t;
  },
  /**
   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getFirstVisibleColumn: function() {
    var t = this.dataAccessObject.startColumnVisible;
    return t === null ? -1 : t;
  },
  /**
   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getLastRenderedColumn: function() {
    var t = this.dataAccessObject.endColumnRendered;
    return t === null ? -1 : t;
  },
  /**
   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getLastVisibleColumn: function() {
    var t = this.dataAccessObject.endColumnVisible;
    return t === null ? -1 : t;
  },
  /**
   * Get the number of rendered columns.
   *
   * @returns {number}
   * @this Table
   */
  getRenderedColumnsCount: function() {
    return this.dataAccessObject.countColumnsRendered;
  },
  /**
   * Get the number of fully visible columns in the viewport.
   *
   * @returns {number}
   * @this Table
   */
  getVisibleColumnsCount: function() {
    return this.dataAccessObject.countColumnsVisible;
  }
};
Wo(_W, "MIXIN_NAME", dde, {
  writable: !1,
  enumerable: !1
});
const RT = _W;
function ws(e) {
  "@babel/helpers - typeof";
  return ws = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, ws(e);
}
function v1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, yde(n.key), n);
  }
}
function vde(e, t, r) {
  return t && v1(e.prototype, t), r && v1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function yde(e) {
  var t = pde(e, "string");
  return ws(t) === "symbol" ? t : String(t);
}
function pde(e, t) {
  if (ws(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (ws(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function mde(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function gde(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && h_(e, t);
}
function h_(e, t) {
  return h_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, h_(e, t);
}
function bde(e) {
  var t = Cde();
  return function() {
    var n = lm(e), o;
    if (t) {
      var i = lm(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return wde(this, o);
  };
}
function wde(e, t) {
  if (t && (ws(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return Sde(e);
}
function Sde(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function Cde() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function lm(e) {
  return lm = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, lm(e);
}
var ET = /* @__PURE__ */ function(e) {
  gde(r, e);
  var t = bde(r);
  function r(n, o, i, a) {
    return mde(this, r), t.call(this, n, o, i, a, Dn);
  }
  return vde(r);
}(Of);
bt(ET, pW);
bt(ET, RT);
const _de = ET;
function Ss(e) {
  "@babel/helpers - typeof";
  return Ss = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Ss(e);
}
function op(e, t, r) {
  return RW() ? op = Reflect.construct.bind() : op = function(o, i, a) {
    var l = [null];
    l.push.apply(l, i);
    var s = Function.bind.apply(o, l), u = new s();
    return a && sm(u, a.prototype), u;
  }, op.apply(null, arguments);
}
function Ode(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function y1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, EW(n.key), n);
  }
}
function Rde(e, t, r) {
  return t && y1(e.prototype, t), r && y1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Ede(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && sm(e, t);
}
function sm(e, t) {
  return sm = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, sm(e, t);
}
function Tde(e) {
  var t = RW();
  return function() {
    var n = um(e), o;
    if (t) {
      var i = um(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return Pde(this, o);
  };
}
function Pde(e, t) {
  if (t && (Ss(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return OW(e);
}
function OW(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function RW() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function um(e) {
  return um = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, um(e);
}
function kde(e, t, r) {
  return t = EW(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function EW(e) {
  var t = $de(e, "string");
  return Ss(t) === "symbol" ? t : String(t);
}
function $de(e, t) {
  if (Ss(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Ss(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var Ade = /* @__PURE__ */ function(e) {
  Ede(r, e);
  var t = Tde(r);
  function r(n, o, i, a) {
    var l;
    return Ode(this, r), l = t.call(this, n, o, Dn, i, a), kde(OW(l), "cachedFixedRowsBottom", -1), l.cachedFixedRowsBottom = l.wtSettings.getSetting("fixedRowsBottom"), l;
  }
  return Rde(r, [{
    key: "createTable",
    value: function() {
      for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
        i[a] = arguments[a];
      return op(_de, i);
    }
    /**
     * Checks if overlay should be fully rendered.
     *
     * @returns {boolean}
     */
  }, {
    key: "shouldBeRendered",
    value: function() {
      return this.wtSettings.getSetting("shouldRenderBottomOverlay");
    }
    /**
     * Updates the top overlay position.
     *
     * @returns {boolean}
     */
  }, {
    key: "resetFixedPosition",
    value: function() {
      if (!this.needFullRender || !this.wot.wtTable.holder.parentNode)
        return !1;
      var o = this.domBindings.rootWindow, i = this.clone.wtTable.holder.parentNode;
      i.style.top = "";
      var a = 0, l = this.wtSettings.getSetting("preventOverflow");
      this.trimmingContainer === o && (!l || l !== "vertical") ? (a = this.getOverlayOffset(), i.style.bottom = "".concat(a, "px")) : (a = this.getScrollPosition(), this.repositionOverlay());
      var s = this.adjustHeaderBordersPosition(a);
      return this.adjustElementsSize(), s;
    }
    /**
     * Updates the bottom overlay position.
     */
  }, {
    key: "repositionOverlay",
    value: function() {
      var o = this.wot, i = o.wtTable, a = o.wtViewport, l = this.domBindings.rootDocument, s = this.clone.wtTable.holder.parentNode, u = 0;
      a.hasVerticalScroll() || (u += a.getWorkspaceHeight() - i.getTotalHeight()), a.hasVerticalScroll() && a.hasHorizontalScroll() && (u += tr(l)), s.style.bottom = "".concat(u, "px");
    }
    /**
     * Sets the main overlay's vertical scroll position.
     *
     * @param {number} pos The scroll position.
     * @returns {boolean}
     */
  }, {
    key: "setScrollPosition",
    value: function(o) {
      var i = this.domBindings.rootWindow, a = !1;
      return this.mainTableScrollableElement === i ? (i.scrollTo(us(i), o), a = !0) : this.mainTableScrollableElement.scrollTop !== o && (this.mainTableScrollableElement.scrollTop = o, a = !0), a;
    }
    /**
     * Triggers onScroll hook callback.
     */
  }, {
    key: "onScroll",
    value: function() {
      this.wtSettings.getSetting("onScrollHorizontally");
    }
    /**
     * Calculates total sum cells height.
     *
     * @param {number} from Row index which calculates started from.
     * @param {number} to Row index where calculation is finished.
     * @returns {number} Height sum.
     */
  }, {
    key: "sumCellSizes",
    value: function(o, i) {
      for (var a = this.wot, l = a.wtTable, s = a.wtSettings, u = s.getSetting("defaultRowHeight"), f = o, c = 0; f < i; ) {
        var h = l.getRowHeight(f);
        c += h === void 0 ? u : h, f += 1;
      }
      return c;
    }
    /**
     * Adjust overlay root element, childs and master table element sizes (width, height).
     *
     * @param {boolean} [force=false] When `true`, it adjusts the DOM nodes sizes for that overlay.
     */
  }, {
    key: "adjustElementsSize",
    value: function() {
      var o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      this.updateTrimmingContainer(), (this.needFullRender || o) && (this.adjustRootElementSize(), this.adjustRootChildrenSize());
    }
    /**
     * Adjust overlay root element size (width and height).
     */
  }, {
    key: "adjustRootElementSize",
    value: function() {
      var o = this.wot, i = o.wtTable, a = o.wtViewport, l = this.domBindings, s = l.rootDocument, u = l.rootWindow, f = tr(s), c = this.clone.wtTable.holder.parentNode, h = c.style, d = this.wtSettings.getSetting("preventOverflow");
      if (this.trimmingContainer !== u || d === "horizontal") {
        var y = a.getWorkspaceWidth();
        this.wot.wtOverlays.hasScrollbarRight && (y -= f), y = Math.min(y, i.wtRootElement.scrollWidth), h.width = "".concat(y, "px");
      } else
        h.width = "";
      this.clone.wtTable.holder.style.width = h.width;
      var p = $t(this.clone.wtTable.TABLE);
      this.wot.wtTable.hasDefinedSize() || (p = 0), h.height = "".concat(p, "px");
    }
    /**
     * Adjust overlay root childs size.
     */
  }, {
    key: "adjustRootChildrenSize",
    value: function() {
      var o = this.clone.wtTable.holder;
      this.clone.wtTable.hider.style.width = this.hider.style.width, o.style.width = o.parentNode.style.width, o.style.height = o.parentNode.style.height;
    }
    /**
     * Adjust the overlay dimensions and position.
     */
  }, {
    key: "applyToDOM",
    value: function() {
      var o = this.wtSettings.getSetting("totalRows");
      if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition == "number")
        this.spreader.style.top = "".concat(this.wot.wtViewport.rowsRenderCalculator.startPosition, "px");
      else if (o === 0)
        this.spreader.style.top = "0";
      else
        throw new Error("Incorrect value of the rowsRenderCalculator");
      this.spreader.style.bottom = "", this.needFullRender && this.syncOverlayOffset();
    }
    /**
     * Synchronize calculated left position to an element.
     */
  }, {
    key: "syncOverlayOffset",
    value: function() {
      var o = this.isRtl() ? "right" : "left", i = this.clone.wtTable.spreader;
      typeof this.wot.wtViewport.columnsRenderCalculator.startPosition == "number" ? i.style[o] = "".concat(this.wot.wtViewport.columnsRenderCalculator.startPosition, "px") : i.style[o] = "";
    }
    /**
     * Scrolls vertically to a row.
     *
     * @param {number} sourceRow Row index which you want to scroll to.
     * @param {boolean} [bottomEdge=false] If `true`, scrolls according to the bottom edge (top edge is by default).
     */
  }, {
    key: "scrollTo",
    value: function(o, i) {
      var a = this.getTableParentOffset(), l = this.wot.cloneSource ? this.wot.cloneSource : this.wot, s = l.wtTable.holder, u = 0;
      i && s.offsetHeight !== s.clientHeight && (u = tr(this.domBindings.rootDocument)), i ? (a += this.sumCellSizes(0, o + 1), a -= this.wot.wtViewport.getViewportHeight(), a += 1) : a += this.sumCellSizes(this.wtSettings.getSetting("fixedRowsBottom"), o), a += u, this.setScrollPosition(a);
    }
    /**
     * Gets table parent top position.
     *
     * @returns {number}
     */
  }, {
    key: "getTableParentOffset",
    value: function() {
      return this.mainTableScrollableElement === this.domBindings.rootWindow ? this.wot.wtTable.holderOffset.top : 0;
    }
    /**
     * Gets the main overlay's vertical scroll position.
     *
     * @returns {number} Main table's vertical scroll position.
     */
  }, {
    key: "getScrollPosition",
    value: function() {
      return zp(this.mainTableScrollableElement, this.domBindings.rootWindow);
    }
    /**
     * Gets the main overlay's vertical overlay offset.
     *
     * @returns {number} Main table's vertical overlay offset.
     */
  }, {
    key: "getOverlayOffset",
    value: function() {
      var o = this.domBindings.rootWindow, i = this.wtSettings.getSetting("preventOverflow"), a = 0;
      if (this.trimmingContainer === o && (!i || i !== "vertical")) {
        var l = this.wot.wtTable.getTotalHeight(), s = this.clone.wtTable.getTotalHeight(), u = l - s, f = this.domBindings.rootDocument.documentElement.clientHeight;
        a = Math.max(this.getTableParentOffset() - this.getScrollPosition() - f + l, 0), a > u && (a = 0);
      }
      return a;
    }
    /**
     * Adds css classes to hide the header border's header (cell-selection border hiding issue).
     *
     * @param {number} position Header Y position if trimming container is window or scroll top if not.
     * @returns {boolean}
     */
  }, {
    key: "adjustHeaderBordersPosition",
    value: function(o) {
      var i = this.wtSettings.getSetting("fixedRowsBottom"), a = this.cachedFixedRowsBottom !== i, l = this.wtSettings.getSetting("columnHeaders"), s = !1;
      if ((a || i === 0) && l.length > 0) {
        var u = this.wot.wtTable.holder.parentNode, f = Me(u, "innerBorderBottom");
        this.cachedFixedRowsBottom = this.wtSettings.getSetting("fixedRowsBottom"), o || this.wtSettings.getSetting("totalRows") === 0 ? (ae(u, "innerBorderBottom"), s = !f) : (Le(u, "innerBorderBottom"), s = f);
      }
      return s;
    }
  }]), r;
}(mv), Ide = "calculatedRows", TW = {
  /**
   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getFirstRenderedRow: function() {
    var t = this.dataAccessObject.startRowRendered;
    return t === null ? -1 : t;
  },
  /**
   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getFirstVisibleRow: function() {
    var t = this.dataAccessObject.startRowVisible;
    return t === null ? -1 : t;
  },
  /**
   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getLastRenderedRow: function() {
    var t = this.dataAccessObject.endRowRendered;
    return t === null ? -1 : t;
  },
  /**
   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getLastVisibleRow: function() {
    var t = this.dataAccessObject.endRowVisible;
    return t === null ? -1 : t;
  },
  /**
   * Get the number of rendered rows.
   *
   * @returns {number}
   * @this Table
   */
  getRenderedRowsCount: function() {
    return this.dataAccessObject.countRowsRendered;
  },
  /**
   * Get the number of fully visible rows in the viewport.
   *
   * @returns {number}
   * @this Table
   */
  getVisibleRowsCount: function() {
    return this.dataAccessObject.countRowsVisible;
  }
};
Wo(TW, "MIXIN_NAME", Ide, {
  writable: !1,
  enumerable: !1
});
const PW = TW;
function Cs(e) {
  "@babel/helpers - typeof";
  return Cs = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Cs(e);
}
function p1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, xde(n.key), n);
  }
}
function Mde(e, t, r) {
  return t && p1(e.prototype, t), r && p1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function xde(e) {
  var t = Dde(e, "string");
  return Cs(t) === "symbol" ? t : String(t);
}
function Dde(e, t) {
  if (Cs(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Cs(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Nde(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function Hde(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && d_(e, t);
}
function d_(e, t) {
  return d_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, d_(e, t);
}
function Lde(e) {
  var t = Bde();
  return function() {
    var n = fm(e), o;
    if (t) {
      var i = fm(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return jde(this, o);
  };
}
function jde(e, t) {
  if (t && (Cs(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return Fde(e);
}
function Fde(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function Bde() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function fm(e) {
  return fm = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, fm(e);
}
var TT = /* @__PURE__ */ function(e) {
  Hde(r, e);
  var t = Lde(r);
  function r(n, o, i, a) {
    return Nde(this, r), t.call(this, n, o, i, a, La);
  }
  return Mde(r);
}(Of);
bt(TT, PW);
bt(TT, CT);
const Vde = TT;
function _s(e) {
  "@babel/helpers - typeof";
  return _s = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, _s(e);
}
function ip(e, t, r) {
  return kW() ? ip = Reflect.construct.bind() : ip = function(o, i, a) {
    var l = [null];
    l.push.apply(l, i);
    var s = Function.bind.apply(o, l), u = new s();
    return a && cm(u, a.prototype), u;
  }, ip.apply(null, arguments);
}
function Wde(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function m1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, zde(n.key), n);
  }
}
function Ude(e, t, r) {
  return t && m1(e.prototype, t), r && m1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function zde(e) {
  var t = Yde(e, "string");
  return _s(t) === "symbol" ? t : String(t);
}
function Yde(e, t) {
  if (_s(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (_s(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Gde(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && cm(e, t);
}
function cm(e, t) {
  return cm = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, cm(e, t);
}
function Kde(e) {
  var t = kW();
  return function() {
    var n = hm(e), o;
    if (t) {
      var i = hm(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return qde(this, o);
  };
}
function qde(e, t) {
  if (t && (_s(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return Xde(e);
}
function Xde(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function kW() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function hm(e) {
  return hm = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, hm(e);
}
var Zde = /* @__PURE__ */ function(e) {
  Gde(r, e);
  var t = Kde(r);
  function r(n, o, i, a) {
    return Wde(this, r), t.call(this, n, o, La, i, a);
  }
  return Ude(r, [{
    key: "createTable",
    value: function() {
      for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
        i[a] = arguments[a];
      return ip(Vde, i);
    }
    /**
     * Checks if overlay should be fully rendered.
     *
     * @returns {boolean}
     */
  }, {
    key: "shouldBeRendered",
    value: function() {
      return this.wtSettings.getSetting("shouldRenderInlineStartOverlay");
    }
    /**
     * Updates the left overlay position.
     *
     * @returns {boolean}
     */
  }, {
    key: "resetFixedPosition",
    value: function() {
      var o = this.wot.wtTable;
      if (!this.needFullRender || !o.holder.parentNode)
        return !1;
      var i = this.domBindings.rootWindow, a = this.clone.wtTable.holder.parentNode, l = this.wtSettings.getSetting("preventOverflow"), s = 0;
      this.trimmingContainer === i && (!l || l !== "horizontal") ? (s = this.getOverlayOffset() * (this.isRtl() ? -1 : 1), dT(a, "".concat(s, "px"), "0px")) : (s = this.getScrollPosition(), kg(a));
      var u = this.adjustHeaderBordersPosition(s);
      return this.adjustElementsSize(), u;
    }
    /**
     * Sets the main overlay's horizontal scroll position.
     *
     * @param {number} pos The scroll position.
     * @returns {boolean}
     */
  }, {
    key: "setScrollPosition",
    value: function(o) {
      var i = this.domBindings.rootWindow, a = !1;
      return this.isRtl() && (o = -o), this.mainTableScrollableElement === i && i.scrollX !== o ? (i.scrollTo(o, Lc(i)), a = !0) : this.mainTableScrollableElement.scrollLeft !== o && (this.mainTableScrollableElement.scrollLeft = o, a = !0), a;
    }
    /**
     * Triggers onScroll hook callback.
     */
  }, {
    key: "onScroll",
    value: function() {
      this.wtSettings.getSetting("onScrollVertically");
    }
    /**
     * Calculates total sum cells width.
     *
     * @param {number} from Column index which calculates started from.
     * @param {number} to Column index where calculation is finished.
     * @returns {number} Width sum.
     */
  }, {
    key: "sumCellSizes",
    value: function(o, i) {
      for (var a = this.wtSettings.getSetting("defaultColumnWidth"), l = o, s = 0; l < i; )
        s += this.wot.wtTable.getStretchedColumnWidth(l) || a, l += 1;
      return s;
    }
    /**
     * Adjust overlay root element, childs and master table element sizes (width, height).
     *
     * @param {boolean} [force=false] When `true`, it adjusts the DOM nodes sizes for that overlay.
     */
  }, {
    key: "adjustElementsSize",
    value: function() {
      var o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      this.updateTrimmingContainer(), (this.needFullRender || o) && (this.adjustRootElementSize(), this.adjustRootChildrenSize());
    }
    /**
     * Adjust overlay root element size (width and height).
     */
  }, {
    key: "adjustRootElementSize",
    value: function() {
      var o = this.wot.wtTable, i = this.domBindings, a = i.rootDocument, l = i.rootWindow, s = tr(a), u = this.clone.wtTable.holder.parentNode, f = u.style, c = this.wtSettings.getSetting("preventOverflow");
      if (this.trimmingContainer !== l || c === "vertical") {
        var h = this.wot.wtViewport.getWorkspaceHeight();
        this.wot.wtOverlays.hasScrollbarBottom && (h -= s), h = Math.min(h, o.wtRootElement.scrollHeight), f.height = "".concat(h, "px");
      } else
        f.height = "";
      this.clone.wtTable.holder.style.height = f.height;
      var d = yt(this.clone.wtTable.TABLE);
      f.width = "".concat(d, "px");
    }
    /**
     * Adjust overlay root childs size.
     */
  }, {
    key: "adjustRootChildrenSize",
    value: function() {
      var o, i = this.clone.wtTable.holder, a = this.wot.selections, l = this.facadeGetter(), s = Math.abs((o = a == null ? void 0 : a.getCell().getBorder(l).cornerCenterPointOffset) !== null && o !== void 0 ? o : 0);
      this.clone.wtTable.hider.style.height = this.hider.style.height, i.style.height = i.parentNode.style.height, i.style.width = "".concat(parseInt(i.parentNode.style.width, 10) + s, "px");
    }
    /**
     * Adjust the overlay dimensions and position.
     */
  }, {
    key: "applyToDOM",
    value: function() {
      var o = this.wtSettings.getSetting("totalColumns"), i = this.isRtl() ? "right" : "left";
      if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition == "number")
        this.spreader.style[i] = "".concat(this.wot.wtViewport.columnsRenderCalculator.startPosition, "px");
      else if (o === 0)
        this.spreader.style[i] = "0";
      else
        throw new Error("Incorrect value of the columnsRenderCalculator");
      this.isRtl() ? this.spreader.style.left = "" : this.spreader.style.right = "", this.needFullRender && this.syncOverlayOffset();
    }
    /**
     * Synchronize calculated top position to an element.
     */
  }, {
    key: "syncOverlayOffset",
    value: function() {
      typeof this.wot.wtViewport.rowsRenderCalculator.startPosition == "number" ? this.clone.wtTable.spreader.style.top = "".concat(this.wot.wtViewport.rowsRenderCalculator.startPosition, "px") : this.clone.wtTable.spreader.style.top = "";
    }
    /**
     * Scrolls horizontally to a column at the left edge of the viewport.
     *
     * @param {number} sourceCol  Column index which you want to scroll to.
     * @param {boolean} [beyondRendered]  If `true`, scrolls according to the right
     *                                    edge (left edge is by default).
     * @returns {boolean}
     */
  }, {
    key: "scrollTo",
    value: function(o, i) {
      var a = this.getTableParentOffset(), l = this.wot.cloneSource ? this.wot.cloneSource : this.wot, s = l.wtTable.holder, u = 0;
      if (i) {
        var f = this.wot.wtTable.getColumnWidth(o), c = this.wot.wtViewport.getViewportWidth();
        f > c && (i = !1);
      }
      return i && s.offsetWidth !== s.clientWidth && (u = tr(this.domBindings.rootDocument)), i ? (a += this.sumCellSizes(0, o + 1), a -= this.wot.wtViewport.getViewportWidth()) : a += this.sumCellSizes(this.wtSettings.getSetting("fixedColumnsStart"), o), a += u, this.setScrollPosition(a);
    }
    /**
     * Gets table parent left position.
     *
     * @returns {number}
     */
  }, {
    key: "getTableParentOffset",
    value: function() {
      var o = this.wtSettings.getSetting("preventOverflow"), i = 0;
      return !o && this.trimmingContainer === this.domBindings.rootWindow && (i = this.wot.wtTable.holderOffset.left), i;
    }
    /**
     * Gets the main overlay's horizontal scroll position.
     *
     * @returns {number} Main table's horizontal scroll position.
     */
  }, {
    key: "getScrollPosition",
    value: function() {
      return Math.abs(jC(this.mainTableScrollableElement, this.domBindings.rootWindow));
    }
    /**
     * Gets the main overlay's horizontal overlay offset.
     *
     * @returns {number} Main table's horizontal overlay offset.
     */
  }, {
    key: "getOverlayOffset",
    value: function() {
      var o = this.domBindings.rootWindow, i = this.wtSettings.getSetting("preventOverflow"), a = 0;
      if (this.trimmingContainer === o && (!i || i !== "horizontal")) {
        this.isRtl() ? a = Math.abs(Math.min(this.getTableParentOffset() - this.getScrollPosition(), 0)) : a = Math.max(this.getScrollPosition() - this.getTableParentOffset(), 0);
        var l = this.wot.wtTable.getTotalWidth(), s = this.clone.wtTable.getTotalWidth(), u = l - s;
        a > u && (a = 0);
      }
      return a;
    }
    /**
     * Adds css classes to hide the header border's header (cell-selection border hiding issue).
     *
     * @param {number} position Header X position if trimming container is window or scroll top if not.
     * @returns {boolean}
     */
  }, {
    key: "adjustHeaderBordersPosition",
    value: function(o) {
      var i = this.wot.wtTable.holder.parentNode, a = this.wtSettings.getSetting("rowHeaders"), l = this.wtSettings.getSetting("fixedColumnsStart"), s = this.wtSettings.getSetting("totalRows");
      s ? Le(i, "emptyRows") : ae(i, "emptyRows");
      var u = !1;
      if (l && !a.length)
        ae(i, "innerBorderLeft innerBorderInlineStart");
      else if (!l && a.length) {
        var f = Me(i, "innerBorderInlineStart");
        o ? (ae(i, "innerBorderLeft innerBorderInlineStart"), u = !f) : (Le(i, "innerBorderLeft innerBorderInlineStart"), u = f);
      }
      return u;
    }
  }]), r;
}(mv), Qde = "stickyRowsTop", $W = {
  /**
   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getFirstRenderedRow: function() {
    var t = this.wtSettings.getSetting("totalRows");
    return t === 0 ? -1 : 0;
  },
  /**
   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
   * Assumes that all rendered rows are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getFirstVisibleRow: function() {
    return this.getFirstRenderedRow();
  },
  /**
   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.
   *
   * @returns {number}
   * @this Table
   */
  getLastRenderedRow: function() {
    return this.getRenderedRowsCount() - 1;
  },
  /**
   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.
   * Assumes that all rendered rows are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getLastVisibleRow: function() {
    return this.getLastRenderedRow();
  },
  /**
   * Get the number of rendered rows.
   *
   * @returns {number}
   * @this Table
   */
  getRenderedRowsCount: function() {
    var t = this.wtSettings.getSetting("totalRows");
    return Math.min(this.wtSettings.getSetting("fixedRowsTop"), t);
  },
  /**
   * Get the number of fully visible rows in the viewport.
   * Assumes that all rendered rows are fully visible.
   *
   * @returns {number}
   * @this Table
   */
  getVisibleRowsCount: function() {
    return this.getRenderedRowsCount();
  }
};
Wo($W, "MIXIN_NAME", Qde, {
  writable: !1,
  enumerable: !1
});
const AW = $W;
function Os(e) {
  "@babel/helpers - typeof";
  return Os = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Os(e);
}
function g1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, eve(n.key), n);
  }
}
function Jde(e, t, r) {
  return t && g1(e.prototype, t), r && g1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function eve(e) {
  var t = tve(e, "string");
  return Os(t) === "symbol" ? t : String(t);
}
function tve(e, t) {
  if (Os(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Os(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function rve(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function nve(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && v_(e, t);
}
function v_(e, t) {
  return v_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, v_(e, t);
}
function ove(e) {
  var t = lve();
  return function() {
    var n = dm(e), o;
    if (t) {
      var i = dm(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return ive(this, o);
  };
}
function ive(e, t) {
  if (t && (Os(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return ave(e);
}
function ave(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function lve() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function dm(e) {
  return dm = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, dm(e);
}
var PT = /* @__PURE__ */ function(e) {
  nve(r, e);
  var t = ove(r);
  function r(n, o, i, a) {
    return rve(this, r), t.call(this, n, o, i, a, ja);
  }
  return Jde(r);
}(Of);
bt(PT, AW);
bt(PT, CT);
const sve = PT;
function Rs(e) {
  "@babel/helpers - typeof";
  return Rs = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Rs(e);
}
function ap(e, t, r) {
  return IW() ? ap = Reflect.construct.bind() : ap = function(o, i, a) {
    var l = [null];
    l.push.apply(l, i);
    var s = Function.bind.apply(o, l), u = new s();
    return a && vm(u, a.prototype), u;
  }, ap.apply(null, arguments);
}
function uve(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function b1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, MW(n.key), n);
  }
}
function fve(e, t, r) {
  return t && b1(e.prototype, t), r && b1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function cve(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && vm(e, t);
}
function vm(e, t) {
  return vm = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, vm(e, t);
}
function hve(e) {
  var t = IW();
  return function() {
    var n = ym(e), o;
    if (t) {
      var i = ym(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return dve(this, o);
  };
}
function dve(e, t) {
  if (t && (Rs(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return y_(e);
}
function y_(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function IW() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function ym(e) {
  return ym = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, ym(e);
}
function w1(e, t, r) {
  return t = MW(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function MW(e) {
  var t = vve(e, "string");
  return Rs(t) === "symbol" ? t : String(t);
}
function vve(e, t) {
  if (Rs(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Rs(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var yve = /* @__PURE__ */ function(e) {
  cve(r, e);
  var t = hve(r);
  function r(n, o, i, a, l, s) {
    var u;
    return uve(this, r), u = t.call(this, n, o, ja, i, a), w1(y_(u), "topOverlay", void 0), w1(y_(u), "inlineStartOverlay", void 0), u.topOverlay = l, u.inlineStartOverlay = s, u;
  }
  return fve(r, [{
    key: "createTable",
    value: function() {
      for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
        i[a] = arguments[a];
      return ap(sve, i);
    }
    /**
     * Checks if overlay should be fully rendered.
     *
     * @returns {boolean}
     */
  }, {
    key: "shouldBeRendered",
    value: function() {
      return this.wtSettings.getSetting("shouldRenderTopOverlay") && this.wtSettings.getSetting("shouldRenderInlineStartOverlay");
    }
    /**
     * Updates the corner overlay position.
     *
     * @returns {boolean}
     */
  }, {
    key: "resetFixedPosition",
    value: function() {
      if (this.updateTrimmingContainer(), !this.wot.wtTable.holder.parentNode)
        return !1;
      var o = this.clone.wtTable.holder.parentNode;
      if (this.trimmingContainer === this.domBindings.rootWindow) {
        var i = this.inlineStartOverlay.getOverlayOffset() * (this.isRtl() ? -1 : 1), a = this.topOverlay.getOverlayOffset();
        dT(o, "".concat(i, "px"), "".concat(a, "px"));
      } else
        kg(o);
      var l = $t(this.clone.wtTable.TABLE), s = yt(this.clone.wtTable.TABLE);
      return this.wot.wtTable.hasDefinedSize() || (l = 0), o.style.height = "".concat(l, "px"), o.style.width = "".concat(s, "px"), !1;
    }
  }]), r;
}(mv);
function Es(e) {
  "@babel/helpers - typeof";
  return Es = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Es(e);
}
function S1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, mve(n.key), n);
  }
}
function pve(e, t, r) {
  return t && S1(e.prototype, t), r && S1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function mve(e) {
  var t = gve(e, "string");
  return Es(t) === "symbol" ? t : String(t);
}
function gve(e, t) {
  if (Es(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Es(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function bve(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function wve(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && p_(e, t);
}
function p_(e, t) {
  return p_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, p_(e, t);
}
function Sve(e) {
  var t = Ove();
  return function() {
    var n = pm(e), o;
    if (t) {
      var i = pm(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return Cve(this, o);
  };
}
function Cve(e, t) {
  if (t && (Es(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return _ve(e);
}
function _ve(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function Ove() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function pm(e) {
  return pm = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, pm(e);
}
var kT = /* @__PURE__ */ function(e) {
  wve(r, e);
  var t = Sve(r);
  function r(n, o, i, a) {
    return bve(this, r), t.call(this, n, o, i, a, Ha);
  }
  return pve(r);
}(Of);
bt(kT, AW);
bt(kT, RT);
const Rve = kT;
function Ts(e) {
  "@babel/helpers - typeof";
  return Ts = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Ts(e);
}
function lp(e, t, r) {
  return DW() ? lp = Reflect.construct.bind() : lp = function(o, i, a) {
    var l = [null];
    l.push.apply(l, i);
    var s = Function.bind.apply(o, l), u = new s();
    return a && mm(u, a.prototype), u;
  }, lp.apply(null, arguments);
}
function Eve(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function C1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, NW(n.key), n);
  }
}
function Tve(e, t, r) {
  return t && C1(e.prototype, t), r && C1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Pve(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && mm(e, t);
}
function mm(e, t) {
  return mm = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, mm(e, t);
}
function kve(e) {
  var t = DW();
  return function() {
    var n = gm(e), o;
    if (t) {
      var i = gm(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return $ve(this, o);
  };
}
function $ve(e, t) {
  if (t && (Ts(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return xW(e);
}
function xW(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function DW() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function gm(e) {
  return gm = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, gm(e);
}
function Ave(e, t, r) {
  return t = NW(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function NW(e) {
  var t = Ive(e, "string");
  return Ts(t) === "symbol" ? t : String(t);
}
function Ive(e, t) {
  if (Ts(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Ts(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var Mve = /* @__PURE__ */ function(e) {
  Pve(r, e);
  var t = kve(r);
  function r(n, o, i, a) {
    var l;
    return Eve(this, r), l = t.call(this, n, o, Ha, i, a), Ave(xW(l), "cachedFixedRowsTop", -1), l.cachedFixedRowsTop = l.wtSettings.getSetting("fixedRowsTop"), l;
  }
  return Tve(r, [{
    key: "createTable",
    value: function() {
      for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
        i[a] = arguments[a];
      return lp(Rve, i);
    }
    /**
     * Checks if overlay should be fully rendered.
     *
     * @returns {boolean}
     */
  }, {
    key: "shouldBeRendered",
    value: function() {
      return this.wtSettings.getSetting("shouldRenderTopOverlay");
    }
    /**
     * Updates the top overlay position.
     *
     * @returns {boolean}
     */
  }, {
    key: "resetFixedPosition",
    value: function() {
      if (!this.needFullRender || !this.wot.wtTable.holder.parentNode)
        return !1;
      var o = this.clone.wtTable.holder.parentNode, i = this.domBindings.rootWindow, a = this.wtSettings.getSetting("preventOverflow"), l = 0, s = !1;
      if (this.trimmingContainer === i && (!a || a !== "vertical")) {
        var u = this.wot.wtTable, f = u.hider.getBoundingClientRect(), c = Math.ceil(f.bottom), h = o.offsetHeight;
        s = c === h, l = this.getOverlayOffset(), dT(o, "0px", "".concat(l, "px"));
      } else
        l = this.getScrollPosition(), kg(o);
      var d = this.adjustHeaderBordersPosition(l, s);
      return this.adjustElementsSize(), d;
    }
    /**
     * Sets the main overlay's vertical scroll position.
     *
     * @param {number} pos The scroll position.
     * @returns {boolean}
     */
  }, {
    key: "setScrollPosition",
    value: function(o) {
      var i = this.domBindings.rootWindow, a = !1;
      return this.mainTableScrollableElement === i && i.scrollY !== o ? (i.scrollTo(us(i), o), a = !0) : this.mainTableScrollableElement.scrollTop !== o && (this.mainTableScrollableElement.scrollTop = o, a = !0), a;
    }
    /**
     * Triggers onScroll hook callback.
     */
  }, {
    key: "onScroll",
    value: function() {
      this.wtSettings.getSetting("onScrollHorizontally");
    }
    /**
     * Calculates total sum cells height.
     *
     * @param {number} from Row index which calculates started from.
     * @param {number} to Row index where calculation is finished.
     * @returns {number} Height sum.
     */
  }, {
    key: "sumCellSizes",
    value: function(o, i) {
      for (var a = this.wtSettings.getSetting("defaultRowHeight"), l = o, s = 0; l < i; ) {
        var u = this.wot.wtTable.getRowHeight(l);
        s += u === void 0 ? a : u, l += 1;
      }
      return s;
    }
    /**
     * Adjust overlay root element, childs and master table element sizes (width, height).
     *
     * @param {boolean} [force=false] When `true`, it adjusts the DOM nodes sizes for that overlay.
     */
  }, {
    key: "adjustElementsSize",
    value: function() {
      var o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      this.updateTrimmingContainer(), (this.needFullRender || o) && (this.adjustRootElementSize(), this.adjustRootChildrenSize());
    }
    /**
     * Adjust overlay root element size (width and height).
     */
  }, {
    key: "adjustRootElementSize",
    value: function() {
      var o = this.wot.wtTable, i = this.domBindings, a = i.rootDocument, l = i.rootWindow, s = tr(a), u = this.clone.wtTable.holder.parentNode, f = u.style, c = this.wtSettings.getSetting("preventOverflow");
      if (this.trimmingContainer !== l || c === "horizontal") {
        var h = this.wot.wtViewport.getWorkspaceWidth();
        this.wot.wtOverlays.hasScrollbarRight && (h -= s), h = Math.min(h, o.wtRootElement.scrollWidth), f.width = "".concat(h, "px");
      } else
        f.width = "";
      this.clone.wtTable.holder.style.width = f.width;
      var d = $t(this.clone.wtTable.TABLE);
      this.wot.wtTable.hasDefinedSize() || (d = 0), f.height = "".concat(d, "px");
    }
    /**
     * Adjust overlay root childs size.
     */
  }, {
    key: "adjustRootChildrenSize",
    value: function() {
      var o, i = this.clone.wtTable.holder, a = this.wot.selections, l = this.facadeGetter(), s = Math.abs((o = a == null ? void 0 : a.getCell().getBorder(l).cornerCenterPointOffset) !== null && o !== void 0 ? o : 0);
      this.clone.wtTable.hider.style.width = this.hider.style.width, i.style.width = i.parentNode.style.width, i.style.height = "".concat(parseInt(i.parentNode.style.height, 10) + s, "px");
    }
    /**
     * Adjust the overlay dimensions and position.
     */
  }, {
    key: "applyToDOM",
    value: function() {
      var o = this.wtSettings.getSetting("totalRows");
      if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition == "number")
        this.spreader.style.top = "".concat(this.wot.wtViewport.rowsRenderCalculator.startPosition, "px");
      else if (o === 0)
        this.spreader.style.top = "0";
      else
        throw new Error("Incorrect value of the rowsRenderCalculator");
      this.spreader.style.bottom = "", this.needFullRender && this.syncOverlayOffset();
    }
    /**
     * Synchronize calculated left position to an element.
     */
  }, {
    key: "syncOverlayOffset",
    value: function() {
      var o = this.isRtl() ? "right" : "left", i = this.clone.wtTable.spreader;
      typeof this.wot.wtViewport.columnsRenderCalculator.startPosition == "number" ? i.style[o] = "".concat(this.wot.wtViewport.columnsRenderCalculator.startPosition, "px") : i.style[o] = "";
    }
    /**
     * Scrolls vertically to a row.
     *
     * @param {number} sourceRow Row index which you want to scroll to.
     * @param {boolean} [bottomEdge] If `true`, scrolls according to the bottom edge (top edge is by default).
     * @returns {boolean}
     */
  }, {
    key: "scrollTo",
    value: function(o, i) {
      var a = this.wot, l = this.wtSettings, s = a.cloneSource ? a.cloneSource : a, u = s.wtTable.holder, f = this.getTableParentOffset(), c = 0;
      if (i) {
        var h = this.wot.wtTable.getRowHeight(o), d = this.wot.wtViewport.getViewportHeight();
        h > d && (i = !1);
      }
      if (i && u.offsetHeight !== u.clientHeight && (c = tr(this.domBindings.rootDocument)), i) {
        var y = l.getSetting("fixedRowsBottom"), p = l.getSetting("totalRows");
        f += this.sumCellSizes(0, o + 1), f -= a.wtViewport.getViewportHeight() - this.sumCellSizes(p - y, p), f += 1;
      } else
        f += this.sumCellSizes(l.getSetting("fixedRowsTop"), o);
      return f += c, this.setScrollPosition(f);
    }
    /**
     * Gets table parent top position.
     *
     * @returns {number}
     */
  }, {
    key: "getTableParentOffset",
    value: function() {
      return this.mainTableScrollableElement === this.domBindings.rootWindow ? this.wot.wtTable.holderOffset.top : 0;
    }
    /**
     * Gets the main overlay's vertical scroll position.
     *
     * @returns {number} Main table's vertical scroll position.
     */
  }, {
    key: "getScrollPosition",
    value: function() {
      return zp(this.mainTableScrollableElement, this.domBindings.rootWindow);
    }
    /**
     * Gets the main overlay's vertical overlay offset.
     *
     * @returns {number} Main table's vertical overlay offset.
     */
  }, {
    key: "getOverlayOffset",
    value: function() {
      var o = this.domBindings.rootWindow, i = this.wtSettings.getSetting("preventOverflow"), a = 0;
      if (this.trimmingContainer === o && (!i || i !== "vertical")) {
        var l = this.wot.wtTable.getTotalHeight(), s = this.clone.wtTable.getTotalHeight(), u = l - s;
        a = Math.max(this.getScrollPosition() - this.getTableParentOffset(), 0), a > u && (a = 0);
      }
      return a;
    }
    /**
     * Adds css classes to hide the header border's header (cell-selection border hiding issue).
     *
     * @param {number} position Header Y position if trimming container is window or scroll top if not.
     * @param {boolean} [skipInnerBorderAdjusting=false] If `true` the inner border adjusting will be skipped.
     * @returns {boolean}
     */
  }, {
    key: "adjustHeaderBordersPosition",
    value: function(o) {
      var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, a = this.wot.wtTable.holder.parentNode, l = this.wtSettings.getSetting("totalColumns");
      l ? Le(a, "emptyColumns") : ae(a, "emptyColumns");
      var s = !1;
      if (!i) {
        var u = this.wtSettings.getSetting("fixedRowsTop"), f = this.cachedFixedRowsTop !== u, c = this.wtSettings.getSetting("columnHeaders");
        if ((f || u === 0) && c.length > 0) {
          var h = Me(a, "innerBorderTop");
          this.cachedFixedRowsTop = this.wtSettings.getSetting("fixedRowsTop"), o || this.wtSettings.getSetting("totalRows") === 0 ? (ae(a, "innerBorderTop"), s = !h) : (Le(a, "innerBorderTop"), s = h);
        }
      }
      return s;
    }
  }]), r;
}(mv);
function fh(e) {
  "@babel/helpers - typeof";
  return fh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, fh(e);
}
function li(e, t, r) {
  return xve() ? li = Reflect.construct.bind() : li = function(o, i, a) {
    var l = [null];
    l.push.apply(l, i);
    var s = Function.bind.apply(o, l), u = new s();
    return a && m_(u, a.prototype), u;
  }, li.apply(null, arguments);
}
function xve() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function m_(e, t) {
  return m_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, m_(e, t);
}
function Dve(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function _1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, HW(n.key), n);
  }
}
function Nve(e, t, r) {
  return t && _1(e.prototype, t), r && _1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function qn(e, t, r) {
  return t = HW(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function HW(e) {
  var t = Hve(e, "string");
  return fh(t) === "symbol" ? t : String(t);
}
function Hve(e, t) {
  if (fh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (fh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var Lve = /* @__PURE__ */ function() {
  function e(t, r, n, o, i, a) {
    var l = this;
    Dve(this, e), qn(this, "wot", null), qn(this, "topOverlay", null), qn(this, "bottomOverlay", null), qn(this, "inlineStartOverlay", null), qn(this, "topInlineStartCornerOverlay", null), qn(this, "bottomInlineStartCornerOverlay", null), qn(this, "browserLineHeight", void 0), qn(this, "wtSettings", null), qn(this, "resizeObserver", new ResizeObserver(function(h) {
      BE(function() {
        !Array.isArray(h) || !h.length || l.wtSettings.getSetting("onContainerElementResize");
      });
    })), this.wot = t, this.wtSettings = o, this.domBindings = n, this.facadeGetter = r, this.wtTable = a;
    var s = this.domBindings, u = s.rootDocument, f = s.rootWindow;
    this.instance = this.wot, this.eventManager = i, this.scrollbarSize = tr(u);
    var c = f.getComputedStyle(a.wtRootElement.parentNode).getPropertyValue("overflow") === "hidden";
    this.scrollableElement = c ? a.holder : Yp(a.TABLE), this.initOverlays(), this.hasScrollbarBottom = !1, this.hasScrollbarRight = !1, this.destroyed = !1, this.keyPressed = !1, this.spreaderLastSize = {
      width: null,
      height: null
    }, this.verticalScrolling = !1, this.horizontalScrolling = !1, this.initBrowserLineHeight(), this.registerListeners(), this.lastScrollX = f.scrollX, this.lastScrollY = f.scrollY;
  }
  return Nve(e, [{
    key: "getOverlays",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, n = [this.topOverlay, this.topInlineStartCornerOverlay, this.inlineStartOverlay, this.bottomOverlay, this.bottomInlineStartCornerOverlay];
      return r && n.push(this.wtTable), n;
    }
    /**
     * Retrieve browser line height and apply its value to `browserLineHeight`.
     *
     * @private
     */
  }, {
    key: "initBrowserLineHeight",
    value: function() {
      var r = this.domBindings, n = r.rootWindow, o = r.rootDocument, i = n.getComputedStyle(o.body), a = parseInt(i.lineHeight, 10), l = parseInt(i.fontSize, 10) * 1.2;
      this.browserLineHeight = a || l;
    }
    /**
     * Prepare overlays based on user settings.
     *
     * @private
     */
  }, {
    key: "initOverlays",
    value: function() {
      var r = [this.wot, this.facadeGetter, this.wtSettings, this.domBindings];
      this.topOverlay = li(Mve, r), this.bottomOverlay = li(Ade, r), this.inlineStartOverlay = li(Zde, r), this.topInlineStartCornerOverlay = li(yve, r.concat([this.topOverlay, this.inlineStartOverlay])), this.bottomInlineStartCornerOverlay = li(hde, r.concat([this.bottomOverlay, this.inlineStartOverlay]));
    }
    /**
     * Update state of rendering, check if changed.
     *
     * @package
     * @returns {boolean} Returns `true` if changes applied to overlay needs scroll synchronization.
     */
  }, {
    key: "updateStateOfRendering",
    value: function() {
      var r = this.topOverlay.updateStateOfRendering();
      return r = this.bottomOverlay.updateStateOfRendering() || r, r = this.inlineStartOverlay.updateStateOfRendering() || r, this.inlineStartOverlay.needFullRender && (this.topOverlay.needFullRender && (r = this.topInlineStartCornerOverlay.updateStateOfRendering() || r), this.bottomOverlay.needFullRender && (r = this.bottomInlineStartCornerOverlay.updateStateOfRendering() || r)), r;
    }
    /**
     * Refresh and redraw table.
     */
  }, {
    key: "refreshAll",
    value: function() {
      if (this.wot.drawn) {
        if (!this.wtTable.holder.parentNode) {
          this.destroy();
          return;
        }
        this.wot.draw(!0), this.verticalScrolling && this.inlineStartOverlay.onScroll(), this.horizontalScrolling && this.topOverlay.onScroll(), this.verticalScrolling = !1, this.horizontalScrolling = !1;
      }
    }
    /**
     * Register all necessary event listeners.
     */
  }, {
    key: "registerListeners",
    value: function() {
      var r = this, n = this.domBindings, o = n.rootDocument, i = n.rootWindow, a = this.topOverlay.mainTableScrollableElement, l = this.inlineStartOverlay.mainTableScrollableElement;
      this.eventManager.addEventListener(o.documentElement, "keydown", function(y) {
        return r.onKeyDown(y);
      }), this.eventManager.addEventListener(o.documentElement, "keyup", function() {
        return r.onKeyUp();
      }), this.eventManager.addEventListener(o, "visibilitychange", function() {
        return r.onKeyUp();
      }), this.eventManager.addEventListener(a, "scroll", function(y) {
        return r.onTableScroll(y);
      }, {
        passive: !0
      }), a !== l && this.eventManager.addEventListener(l, "scroll", function(y) {
        return r.onTableScroll(y);
      }, {
        passive: !0
      });
      var s = i.devicePixelRatio && i.devicePixelRatio > 1, u = this.scrollableElement === i, f = this.wtSettings.getSetting("preventWheel"), c = {
        passive: u
      };
      (f || s || !SB()) && this.eventManager.addEventListener(this.wtTable.wtRootElement, "wheel", function(y) {
        return r.onCloneWheel(y, f);
      }, c);
      var h = [this.topOverlay, this.bottomOverlay, this.inlineStartOverlay, this.topInlineStartCornerOverlay, this.bottomInlineStartCornerOverlay];
      h.forEach(function(y) {
        if (y && y.needFullRender) {
          var p = y.clone.wtTable.holder;
          r.eventManager.addEventListener(p, "wheel", function(g) {
            return r.onCloneWheel(g, f);
          }, c);
        }
      });
      var d;
      this.eventManager.addEventListener(i, "resize", function() {
        clearTimeout(d), d = setTimeout(function() {
          r.wtSettings.getSetting("onWindowResize");
        }, 200);
      }), u || this.resizeObserver.observe(this.wtTable.wtRootElement.parentElement);
    }
    /**
     * Deregister all previously registered listeners.
     */
  }, {
    key: "deregisterListeners",
    value: function() {
      this.eventManager.clearEvents(!0);
    }
    /**
     * Scroll listener.
     *
     * @param {Event} event The mouse event object.
     */
  }, {
    key: "onTableScroll",
    value: function(r) {
      var n = this.domBindings.rootWindow, o = this.inlineStartOverlay.mainTableScrollableElement, i = this.topOverlay.mainTableScrollableElement, a = r.target;
      this.keyPressed && (i !== n && a !== n && !r.target.contains(i) || o !== n && a !== n && !r.target.contains(o)) || this.syncScrollPositions(r);
    }
    /**
     * Wheel listener for cloned overlays.
     *
     * @param {Event} event The mouse event object.
     * @param {boolean} preventDefault If `true`, the `preventDefault` will be called on event object.
     */
  }, {
    key: "onCloneWheel",
    value: function(r, n) {
      var o = this.domBindings.rootWindow, i = this.inlineStartOverlay.mainTableScrollableElement, a = this.topOverlay.mainTableScrollableElement, l = r.target, s = a !== o && l !== o && !l.contains(a), u = i !== o && l !== o && !l.contains(i);
      if (!(this.keyPressed && (s || u))) {
        var f = this.translateMouseWheelToScroll(r);
        (n || this.scrollableElement !== o && f) && r.preventDefault();
      }
    }
    /**
     * Key down listener.
     *
     * @param {Event} event The keyboard event object.
     */
  }, {
    key: "onKeyDown",
    value: function(r) {
      this.keyPressed = Fc(r.keyCode, "ARROW_UP|ARROW_RIGHT|ARROW_DOWN|ARROW_LEFT");
    }
    /**
     * Key up listener.
     */
  }, {
    key: "onKeyUp",
    value: function() {
      this.keyPressed = !1;
    }
    /**
     * Translate wheel event into scroll event and sync scroll overlays position.
     *
     * @private
     * @param {Event} event The mouse event object.
     * @returns {boolean}
     */
  }, {
    key: "translateMouseWheelToScroll",
    value: function(r) {
      var n = isNaN(r.deltaY) ? -1 * r.wheelDeltaY : r.deltaY, o = isNaN(r.deltaX) ? -1 * r.wheelDeltaX : r.deltaX;
      r.deltaMode === 1 && (o += o * this.browserLineHeight, n += n * this.browserLineHeight);
      var i = this.scrollVertically(n), a = this.scrollHorizontally(o);
      return i || a;
    }
    /**
     * Scrolls main scrollable element horizontally.
     *
     * @param {number} delta Relative value to scroll.
     * @returns {boolean}
     */
  }, {
    key: "scrollVertically",
    value: function(r) {
      var n = this.scrollableElement.scrollTop;
      return this.scrollableElement.scrollTop += r, n !== this.scrollableElement.scrollTop;
    }
    /**
     * Scrolls main scrollable element horizontally.
     *
     * @param {number} delta Relative value to scroll.
     * @returns {boolean}
     */
  }, {
    key: "scrollHorizontally",
    value: function(r) {
      var n = this.scrollableElement.scrollLeft;
      return this.scrollableElement.scrollLeft += r, n !== this.scrollableElement.scrollLeft;
    }
    /**
     * Synchronize scroll position between master table and overlay table.
     *
     * @private
     */
  }, {
    key: "syncScrollPositions",
    value: function() {
      if (!this.destroyed) {
        var r = this.domBindings.rootWindow, n = this.topOverlay.clone.wtTable.holder, o = this.inlineStartOverlay.clone.wtTable.holder, i = [this.scrollableElement.scrollLeft, this.scrollableElement.scrollTop], a = i[0], l = i[1];
        if (this.horizontalScrolling = n.scrollLeft !== a || this.lastScrollX !== r.scrollX, this.verticalScrolling = o.scrollTop !== l || this.lastScrollY !== r.scrollY, this.lastScrollX = r.scrollX, this.lastScrollY = r.scrollY, this.horizontalScrolling) {
          n.scrollLeft = a;
          var s = this.bottomOverlay.needFullRender ? this.bottomOverlay.clone.wtTable.holder : null;
          s && (s.scrollLeft = a);
        }
        this.verticalScrolling && (o.scrollTop = l), this.refreshAll();
      }
    }
    /**
     * Synchronize overlay scrollbars with the master scrollbar.
     */
  }, {
    key: "syncScrollWithMaster",
    value: function() {
      var r = this.topOverlay.mainTableScrollableElement, n = r.scrollLeft, o = r.scrollTop;
      this.topOverlay.needFullRender && (this.topOverlay.clone.wtTable.holder.scrollLeft = n), this.bottomOverlay.needFullRender && (this.bottomOverlay.clone.wtTable.holder.scrollLeft = n), this.inlineStartOverlay.needFullRender && (this.inlineStartOverlay.clone.wtTable.holder.scrollTop = o);
    }
    /**
     * Update the main scrollable elements for all the overlays.
     */
  }, {
    key: "updateMainScrollableElements",
    value: function() {
      this.deregisterListeners(), this.inlineStartOverlay.updateMainScrollableElement(), this.topOverlay.updateMainScrollableElement(), this.bottomOverlay.needFullRender && this.bottomOverlay.updateMainScrollableElement();
      var r = this.wtTable, n = this.domBindings.rootWindow;
      n.getComputedStyle(r.wtRootElement.parentNode).getPropertyValue("overflow") === "hidden" ? this.scrollableElement = r.holder : this.scrollableElement = Yp(r.TABLE), this.registerListeners();
    }
    /**
     *
     */
  }, {
    key: "destroy",
    value: function() {
      this.resizeObserver.disconnect(), this.eventManager.destroy(), this.topOverlay.destroy(), this.bottomOverlay.clone && this.bottomOverlay.destroy(), this.inlineStartOverlay.destroy(), this.topInlineStartCornerOverlay && this.topInlineStartCornerOverlay.destroy(), this.bottomInlineStartCornerOverlay && this.bottomInlineStartCornerOverlay.clone && this.bottomInlineStartCornerOverlay.destroy(), this.destroyed = !0;
    }
    /**
     * @param {boolean} [fastDraw=false] When `true`, try to refresh only the positions of borders without rerendering
     *                                   the data. It will only work if Table.draw() does not force
     *                                   rendering anyway.
     */
  }, {
    key: "refresh",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, n = this.updateLastSpreaderSize();
      n && this.adjustElementsSize(), this.bottomOverlay.clone && this.bottomOverlay.refresh(r), this.inlineStartOverlay.refresh(r), this.topOverlay.refresh(r), this.topInlineStartCornerOverlay && this.topInlineStartCornerOverlay.refresh(r), this.bottomInlineStartCornerOverlay && this.bottomInlineStartCornerOverlay.clone && this.bottomInlineStartCornerOverlay.refresh(r);
    }
    /**
     * Update the last cached spreader size with the current size.
     *
     * @returns {boolean} `true` if the lastSpreaderSize cache was updated, `false` otherwise.
     */
  }, {
    key: "updateLastSpreaderSize",
    value: function() {
      var r = this.wtTable.spreader, n = r.clientWidth, o = r.clientHeight, i = n !== this.spreaderLastSize.width || o !== this.spreaderLastSize.height;
      return i && (this.spreaderLastSize.width = n, this.spreaderLastSize.height = o), i;
    }
    /**
     * Adjust overlays elements size and master table size.
     *
     * @param {boolean} [force=false] When `true`, it adjust the DOM nodes sizes for all overlays.
     */
  }, {
    key: "adjustElementsSize",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, n = this.wot.wtViewport, o = this.wtTable, i = this.wtSettings.getSetting("totalColumns"), a = this.wtSettings.getSetting("totalRows"), l = n.getRowHeaderWidth(), s = n.getColumnHeaderHeight(), u = o.hider.style;
      if (u.width = "".concat(l + this.inlineStartOverlay.sumCellSizes(0, i), "px"), u.height = "".concat(s + this.topOverlay.sumCellSizes(0, a) + 1, "px"), this.scrollbarSize > 0) {
        var f = o.wtRootElement, c = f.scrollHeight, h = f.scrollWidth, d = o.holder, y = d.scrollHeight, p = d.scrollWidth;
        this.hasScrollbarRight = c < y, this.hasScrollbarBottom = h < p, this.hasScrollbarRight && o.hider.scrollWidth + this.scrollbarSize > h ? this.hasScrollbarBottom = !0 : this.hasScrollbarBottom && o.hider.scrollHeight + this.scrollbarSize > c && (this.hasScrollbarRight = !0);
      }
      this.topOverlay.adjustElementsSize(r), this.inlineStartOverlay.adjustElementsSize(r), this.bottomOverlay.adjustElementsSize(r);
    }
    /**
     *
     */
  }, {
    key: "applyToDOM",
    value: function() {
      this.wtTable.isVisible() && (this.topOverlay.applyToDOM(), this.bottomOverlay.clone && this.bottomOverlay.applyToDOM(), this.inlineStartOverlay.applyToDOM());
    }
    /**
     * Get the parent overlay of the provided element.
     *
     * @param {HTMLElement} element An element to process.
     * @returns {object|null}
     */
  }, {
    key: "getParentOverlay",
    value: function(r) {
      if (!r)
        return null;
      var n = [this.topOverlay, this.inlineStartOverlay, this.bottomOverlay, this.topInlineStartCornerOverlay, this.bottomInlineStartCornerOverlay], o = null;
      return I(n, function(i) {
        i && i.clone && i.clone.wtTable.TABLE.contains(r) && (o = i.clone);
      }), o;
    }
    /**
     * Synchronize the class names between the main overlay table and the tables on the other overlays.
     *
     */
  }, {
    key: "syncOverlayTableClassNames",
    value: function() {
      var r = this.wtTable.TABLE, n = [this.topOverlay, this.inlineStartOverlay, this.bottomOverlay, this.topInlineStartCornerOverlay, this.bottomInlineStartCornerOverlay];
      I(n, function(o) {
        o && (o.clone.wtTable.TABLE.className = r.className);
      });
    }
  }]), e;
}();
const jve = Lve;
function ch(e) {
  "@babel/helpers - typeof";
  return ch = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, ch(e);
}
function Fve(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function O1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, LW(n.key), n);
  }
}
function Bve(e, t, r) {
  return t && O1(e.prototype, t), r && O1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function R1(e, t, r) {
  return t = LW(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function LW(e) {
  var t = Vve(e, "string");
  return ch(t) === "symbol" ? t : String(t);
}
function Vve(e, t) {
  if (ch(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (ch(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var Wve = /* @__PURE__ */ function() {
  function e(t) {
    var r = this;
    Fve(this, e), R1(this, "settings", {}), R1(this, "defaults", Object.freeze(this.getDefaults())), Ye(this.defaults, function(n, o) {
      if (t[o] !== void 0)
        r.settings[o] = t[o];
      else {
        if (n === void 0)
          throw new Error('A required setting "'.concat(o, '" was not provided'));
        r.settings[o] = n;
      }
    });
  }
  return Bve(e, [{
    key: "getDefaults",
    value: function() {
      var r = this;
      return {
        facade: void 0,
        table: void 0,
        // Determines whether the Walkontable instance is used as dataset viewer. When its instance is used as
        // a context menu, autocomplete list, etc, the returned value is `false`.
        isDataViewInstance: !0,
        // presentation mode
        externalRowCalculator: !1,
        stretchH: "none",
        // values: all, last, none
        currentRowClassName: null,
        currentColumnClassName: null,
        preventOverflow: function() {
          return !1;
        },
        preventWheel: !1,
        // data source
        data: void 0,
        freezeOverlays: !1,
        // Number of renderable columns for the left overlay.
        fixedColumnsStart: 0,
        // Number of renderable rows for the top overlay.
        fixedRowsTop: 0,
        // Number of renderable rows for the bottom overlay.
        fixedRowsBottom: 0,
        // Enable the inline start overlay when conditions are met (left for LTR and right for RTL document mode).
        shouldRenderInlineStartOverlay: function() {
          return r.getSetting("fixedColumnsStart") > 0 || r.getSetting("rowHeaders").length > 0;
        },
        // Enable the top overlay when conditions are met.
        shouldRenderTopOverlay: function() {
          return r.getSetting("fixedRowsTop") > 0 || r.getSetting("columnHeaders").length > 0;
        },
        // Enable the bottom overlay when conditions are met.
        shouldRenderBottomOverlay: function() {
          return r.getSetting("fixedRowsBottom") > 0;
        },
        minSpareRows: 0,
        // this must be array of functions: [function (row, TH) {}]
        rowHeaders: function() {
          return [];
        },
        // this must be array of functions: [function (column, TH) {}]
        columnHeaders: function() {
          return [];
        },
        totalRows: void 0,
        totalColumns: void 0,
        cellRenderer: function(o, i, a) {
          var l = r.getSetting("data", o, i);
          xa(a, l ?? "");
        },
        // columnWidth: 50,
        columnWidth: function() {
        },
        rowHeight: function() {
        },
        defaultRowHeight: 23,
        defaultColumnWidth: 50,
        selections: null,
        hideBorderOnMouseDownOver: !1,
        viewportRowCalculatorOverride: null,
        viewportColumnCalculatorOverride: null,
        // callbacks
        onCellMouseDown: null,
        onCellContextMenu: null,
        onCellMouseOver: null,
        onCellMouseOut: null,
        onCellMouseUp: null,
        //    onCellMouseOut: null,
        onCellDblClick: null,
        onCellCornerMouseDown: null,
        onCellCornerDblClick: null,
        beforeDraw: null,
        onDraw: null,
        onBeforeRemoveCellClassNames: null,
        onAfterDrawSelection: null,
        onBeforeDrawBorders: null,
        onScrollVertically: null,
        onScrollHorizontally: null,
        onBeforeTouchScroll: null,
        onAfterMomentumScroll: null,
        onBeforeStretchingColumnWidth: function(o) {
          return o;
        },
        onModifyRowHeaderWidth: null,
        onModifyGetCellCoords: null,
        onBeforeHighlightingRowHeader: function(o) {
          return o;
        },
        onBeforeHighlightingColumnHeader: function(o) {
          return o;
        },
        onWindowResize: null,
        onContainerElementResize: null,
        renderAllRows: !1,
        groups: !1,
        rowHeaderWidth: null,
        columnHeaderHeight: null,
        headerClassName: null,
        rtlMode: !1
      };
    }
    /**
     * Update settings.
     *
     * @param {object} settings The singular settings to update or if passed as object to merge with.
     * @param {*} value The value to set if the first argument is passed as string.
     * @returns {Settings}
     */
  }, {
    key: "update",
    value: function(r, n) {
      var o = this;
      return n === void 0 ? Ye(r, function(i, a) {
        o.settings[a] = i;
      }) : this.settings[r] = n, this;
    }
    /**
     * Get setting by name.
     *
     * @param {$Keys<SettingsPure>} key The settings key to retrieve.
     * @param {*} [param1] Additional parameter passed to the options defined as function.
     * @param {*} [param2] Additional parameter passed to the options defined as function.
     * @param {*} [param3] Additional parameter passed to the options defined as function.
     * @param {*} [param4] Additional parameter passed to the options defined as function.
     * @returns {*}
     */
  }, {
    key: "getSetting",
    value: function(r, n, o, i, a) {
      return typeof this.settings[r] == "function" ? this.settings[r](n, o, i, a) : n !== void 0 && Array.isArray(this.settings[r]) ? this.settings[r][n] : this.settings[r];
    }
    /**
     * Get a setting value without any evaluation.
     *
     * @param {string} key The settings key to retrieve.
     * @returns {*}
     */
  }, {
    key: "getSettingPure",
    value: function(r) {
      return this.settings[r];
    }
    /**
     * Checks if setting exists.
     *
     * @param {boolean} key The settings key to check.
     * @returns {boolean}
     */
  }, {
    key: "has",
    value: function(r) {
      return !!this.settings[r];
    }
  }]), e;
}();
function Ps(e) {
  "@babel/helpers - typeof";
  return Ps = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Ps(e);
}
function Uve(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function E1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Yve(n.key), n);
  }
}
function zve(e, t, r) {
  return t && E1(e.prototype, t), r && E1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Yve(e) {
  var t = Gve(e, "string");
  return Ps(t) === "symbol" ? t : String(t);
}
function Gve(e, t) {
  if (Ps(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Ps(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Kve(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && g_(e, t);
}
function g_(e, t) {
  return g_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, g_(e, t);
}
function qve(e) {
  var t = Qve();
  return function() {
    var n = bm(e), o;
    if (t) {
      var i = bm(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return Xve(this, o);
  };
}
function Xve(e, t) {
  if (t && (Ps(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return Zve(e);
}
function Zve(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function Qve() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function bm(e) {
  return bm = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, bm(e);
}
var $T = /* @__PURE__ */ function(e) {
  Kve(r, e);
  var t = qve(r);
  function r(n, o, i, a) {
    return Uve(this, r), t.call(this, n, o, i, a, "master");
  }
  return zve(r, [{
    key: "alignOverlaysWithTrimmingContainer",
    value: function() {
      var o = fs(this.wtRootElement), i = this.domBindings.rootWindow;
      if (o === i) {
        var a = this.wtSettings.getSetting("preventOverflow");
        a || (this.holder.style.overflow = "visible", this.wtRootElement.style.overflow = "visible");
      } else {
        var l = o.parentElement, s = jc(o, "height", i), u = jc(o, "overflow", i), f = this.holder.style, c = o.scrollWidth, h = o.scrollHeight, d = o.getBoundingClientRect(), y = d.width, p = d.height, g = ["auto", "hidden", "scroll"];
        if (l && g.includes(u)) {
          var w = o.cloneNode(!1);
          w.style.overflow = "auto", w.style.position = "absolute", o.nextElementSibling ? l.insertBefore(w, o.nextElementSibling) : l.appendChild(w);
          var C = parseInt(Da(w, i).height, 10);
          l.removeChild(w), C === 0 && (p = 0);
        }
        p = Math.min(p, h), f.height = s === "auto" ? "auto" : "".concat(p, "px"), y = Math.min(y, c), f.width = "".concat(y, "px"), f.overflow = "", this.hasTableHeight = f.height === "auto" ? !0 : p > 0, this.hasTableWidth = y > 0;
      }
      this.isTableVisible = Hc(this.TABLE);
    }
  }, {
    key: "markOversizedColumnHeaders",
    value: function() {
      var o = this.wtSettings, i = this.dataAccessObject.wtViewport, a = "master", l = o.getSetting("columnHeaders"), s = l.length;
      if (s && !i.hasOversizedColumnHeadersMarked[a]) {
        for (var u = o.getSetting("rowHeaders"), f = u.length, c = this.getRenderedColumnsCount(), h = 0; h < s; h++)
          for (var d = -1 * f; d < c; d++)
            this.markIfOversizedColumnHeader(d);
        i.hasOversizedColumnHeadersMarked[a] = !0;
      }
    }
  }]), r;
}(Of);
bt($T, PW);
bt($T, RT);
const Jve = $T;
function hh(e) {
  "@babel/helpers - typeof";
  return hh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, hh(e);
}
function eye(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function T1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, rye(n.key), n);
  }
}
function tye(e, t, r) {
  return t && T1(e.prototype, t), r && T1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function rye(e) {
  var t = nye(e, "string");
  return hh(t) === "symbol" ? t : String(t);
}
function nye(e, t) {
  if (hh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (hh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var oye = /* @__PURE__ */ function() {
  function e(t, r, n, o, i) {
    var a = this;
    eye(this, e), this.dataAccessObject = t, this.wot = t.wot, this.instance = this.wot, this.domBindings = r, this.wtSettings = n, this.wtTable = i, this.oversizedRows = [], this.oversizedColumnHeaders = [], this.hasOversizedColumnHeadersMarked = {}, this.clientHeight = 0, this.containerWidth = NaN, this.rowHeaderWidth = NaN, this.rowsVisibleCalculator = null, this.columnsVisibleCalculator = null, this.eventManager = o, this.eventManager.addEventListener(this.domBindings.rootWindow, "resize", function() {
      a.clientHeight = a.getWorkspaceHeight();
    });
  }
  return tye(e, [{
    key: "getWorkspaceHeight",
    value: function() {
      var r = this.domBindings.rootDocument, n = this.dataAccessObject.topOverlayTrimmingContainer, o = 0;
      if (n === this.domBindings.rootWindow)
        o = r.documentElement.clientHeight;
      else {
        var i = $t(n);
        o = i > 0 && n.clientHeight > 0 ? n.clientHeight : 1 / 0;
      }
      return o;
    }
  }, {
    key: "getWorkspaceWidth",
    value: function() {
      var r = this.wtSettings, n = this.domBindings, o = n.rootDocument, i = n.rootWindow, a = this.dataAccessObject.inlineStartOverlayTrimmingContainer, l = o.documentElement.offsetWidth, s = r.getSetting("totalColumns"), u = r.getSetting("preventOverflow"), f = r.getSetting("rtlMode"), c = this.wtTable.TABLE.getBoundingClientRect(), h = f ? c.right - l : c.left, d = l - h, y, p;
      if (u)
        return yt(this.wtTable.wtRootElement);
      if (r.getSetting("freezeOverlays") ? y = Math.min(d, l) : y = Math.min(this.getContainerFillWidth(), d, l), a === i && s > 0 && this.sumColumnWidths(0, s - 1) > y)
        return o.documentElement.clientWidth;
      if (a !== i && (p = jc(this.dataAccessObject.inlineStartOverlayTrimmingContainer, "overflow", i), p === "scroll" || p === "hidden" || p === "auto"))
        return Math.max(y, a.clientWidth);
      var g = r.getSetting("stretchH");
      return g === "none" || !g ? Math.max(y, yt(this.wtTable.TABLE)) : y;
    }
    /**
     * Checks if viewport has vertical scroll.
     *
     * @returns {boolean}
     */
  }, {
    key: "hasVerticalScroll",
    value: function() {
      return this.wtTable.hider.offsetHeight > this.getWorkspaceHeight();
    }
    /**
     * Checks if viewport has horizontal scroll.
     *
     * @returns {boolean}
     */
  }, {
    key: "hasHorizontalScroll",
    value: function() {
      return this.wtTable.hider.offsetWidth > this.getWorkspaceWidth();
    }
    /**
     * @param {number} from The visual column index from the width sum is start calculated.
     * @param {number} length The length of the column to traverse.
     * @returns {number}
     */
  }, {
    key: "sumColumnWidths",
    value: function(r, n) {
      for (var o = 0, i = r; i < n; )
        o += this.wtTable.getColumnWidth(i), i += 1;
      return o;
    }
    /**
     * @returns {number}
     */
  }, {
    key: "getContainerFillWidth",
    value: function() {
      if (this.containerWidth)
        return this.containerWidth;
      var r = this.wtTable.holder, n = this.domBindings.rootDocument.createElement("div");
      n.style.width = "100%", n.style.height = "1px", r.appendChild(n);
      var o = n.offsetWidth;
      return this.containerWidth = o, r.removeChild(n), o;
    }
    /**
     * @returns {number}
     */
  }, {
    key: "getWorkspaceOffset",
    value: function() {
      return Yt(this.wtTable.TABLE);
    }
    /**
     * @returns {number}
     */
  }, {
    key: "getColumnHeaderHeight",
    value: function() {
      var r = this.wtSettings.getSetting("columnHeaders");
      return r.length ? isNaN(this.columnHeaderHeight) && (this.columnHeaderHeight = $t(this.wtTable.THEAD)) : this.columnHeaderHeight = 0, this.columnHeaderHeight;
    }
    /**
     * @returns {number}
     */
  }, {
    key: "getViewportHeight",
    value: function() {
      var r = this.getWorkspaceHeight();
      if (r === 1 / 0)
        return r;
      var n = this.getColumnHeaderHeight();
      return n > 0 && (r -= n), r;
    }
    /**
     * @returns {number}
     */
  }, {
    key: "getRowHeaderWidth",
    value: function() {
      var r = this.wtSettings.getSetting("rowHeaderWidth"), n = this.wtSettings.getSetting("rowHeaders");
      if (r) {
        this.rowHeaderWidth = 0;
        for (var o = 0, i = n.length; o < i; o++)
          this.rowHeaderWidth += r[o] || r;
      }
      if (isNaN(this.rowHeaderWidth))
        if (n.length) {
          var a = this.wtTable.TABLE.querySelector("TH");
          this.rowHeaderWidth = 0;
          for (var l = 0, s = n.length; l < s; l++)
            a ? (this.rowHeaderWidth += yt(a), a = a.nextSibling) : this.rowHeaderWidth += 50;
        } else
          this.rowHeaderWidth = 0;
      return this.rowHeaderWidth = this.wtSettings.getSetting("onModifyRowHeaderWidth", this.rowHeaderWidth) || this.rowHeaderWidth, this.rowHeaderWidth;
    }
    /**
     * @returns {number}
     */
  }, {
    key: "getViewportWidth",
    value: function() {
      var r = this.getWorkspaceWidth();
      if (r === 1 / 0)
        return r;
      var n = this.getRowHeaderWidth();
      return n > 0 ? r - n : r;
    }
    /**
     * Creates:
     * - rowsRenderCalculator (before draw, to qualify rows for rendering)
     * - rowsVisibleCalculator (after draw, to measure which rows are actually visible).
     *
     * @param {number} calculationType The render type ID, which determines for what type of
     *                                 calculation calculator is created.
     * @returns {ViewportRowsCalculator}
     */
  }, {
    key: "createRowsCalculator",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ea, n = this.wtSettings, o = this.wtTable, i, a, l;
      this.rowHeaderWidth = NaN, n.getSetting("renderAllRows") && r === ea ? i = 1 / 0 : i = this.getViewportHeight();
      var s = this.dataAccessObject.topScrollPosition - this.dataAccessObject.topParentOffset, u = n.getSetting("fixedRowsTop"), f = n.getSetting("fixedRowsBottom"), c = n.getSetting("totalRows");
      return u && s >= 0 && (l = this.dataAccessObject.topOverlay.sumCellSizes(0, u), s += l, i -= l), f && this.dataAccessObject.bottomOverlay.clone && (l = this.dataAccessObject.bottomOverlay.sumCellSizes(c - f, c), i -= l), o.holder.clientHeight === o.holder.offsetHeight ? a = 0 : a = tr(this.domBindings.rootDocument), new eW({
        viewportSize: i,
        scrollOffset: s,
        totalItems: n.getSetting("totalRows"),
        itemSizeFn: function(d) {
          return o.getRowHeight(d);
        },
        overrideFn: n.getSettingPure("viewportRowCalculatorOverride"),
        calculationType: r,
        scrollbarHeight: a
      });
    }
    /**
     * Creates:
     * - columnsRenderCalculator (before draw, to qualify columns for rendering)
     * - columnsVisibleCalculator (after draw, to measure which columns are actually visible).
     *
     * @param {number} calculationType The render type ID, which determines for what type of
     *                                 calculation calculator is created.
     * @returns {ViewportColumnsCalculator}
     */
  }, {
    key: "createColumnsCalculator",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ea, n = this.wtSettings, o = this.wtTable, i = this.getViewportWidth(), a = Math.abs(this.dataAccessObject.inlineStartScrollPosition) - this.dataAccessObject.inlineStartParentOffset;
      this.columnHeaderHeight = NaN;
      var l = n.getSetting("fixedColumnsStart");
      if (l && a >= 0) {
        var s = this.dataAccessObject.inlineStartOverlay.sumCellSizes(0, l);
        a += s, i -= s;
      }
      return o.holder.clientWidth !== o.holder.offsetWidth && (i -= tr(this.domBindings.rootDocument)), new bT({
        viewportSize: i,
        scrollOffset: a,
        totalItems: n.getSetting("totalColumns"),
        itemSizeFn: function(f) {
          return o.getColumnWidth(f);
        },
        overrideFn: n.getSettingPure("viewportColumnCalculatorOverride"),
        calculationType: r,
        stretchMode: n.getSetting("stretchH"),
        stretchingItemWidthFn: function(f, c) {
          return n.getSetting("onBeforeStretchingColumnWidth", f, c);
        },
        inlineStartOffset: this.dataAccessObject.inlineStartParentOffset
      });
    }
    /**
     * Creates rowsRenderCalculator and columnsRenderCalculator (before draw, to determine what rows and
     * cols should be rendered).
     *
     * @param {boolean} fastDraw If `true`, will try to avoid full redraw and only update the border positions.
     *                           If `false` or `undefined`, will perform a full redraw.
     * @returns {boolean} The fastDraw value, possibly modified.
     */
  }, {
    key: "createRenderCalculators",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, n = r;
      if (n) {
        var o = this.createRowsCalculator(ar), i = this.createColumnsCalculator(ar);
        this.areAllProposedVisibleRowsAlreadyRendered(o) && this.areAllProposedVisibleColumnsAlreadyRendered(i) || (n = !1);
      }
      return n || (this.rowsRenderCalculator = this.createRowsCalculator(ea), this.columnsRenderCalculator = this.createColumnsCalculator(ea)), this.rowsVisibleCalculator = null, this.columnsVisibleCalculator = null, n;
    }
    /**
     * Creates rowsVisibleCalculator and columnsVisibleCalculator (after draw, to determine what are
     * the actually fully visible rows and columns).
     */
  }, {
    key: "createVisibleCalculators",
    value: function() {
      this.rowsVisibleCalculator = this.createRowsCalculator(ar), this.columnsVisibleCalculator = this.createColumnsCalculator(ar);
    }
    /**
     * Returns information whether proposedRowsVisibleCalculator viewport
     * is contained inside rows rendered in previous draw (cached in rowsRenderCalculator).
     *
     * @param {ViewportRowsCalculator} proposedRowsVisibleCalculator The instance of the viewport calculator to compare with.
     * @returns {boolean} Returns `true` if all proposed visible rows are already rendered (meaning: redraw is not needed).
     *                    Returns `false` if at least one proposed visible row is not already rendered (meaning: redraw is needed).
     */
  }, {
    key: "areAllProposedVisibleRowsAlreadyRendered",
    value: function(r) {
      if (!this.rowsVisibleCalculator)
        return !1;
      var n = r.startRow, o = r.endRow, i = r.isVisibleInTrimmingContainer;
      if (n === null && o === null)
        return !i;
      var a = this.rowsRenderCalculator, l = a.startRow, s = a.endRow;
      return n < l || n === l && n > 0 ? !1 : !(o > s || o === s && o < this.wtSettings.getSetting("totalRows") - 1);
    }
    /**
     * Returns information whether proposedColumnsVisibleCalculator viewport
     * is contained inside column rendered in previous draw (cached in columnsRenderCalculator).
     *
     * @param {ViewportRowsCalculator} proposedColumnsVisibleCalculator The instance of the viewport calculator to compare with.
     * @returns {boolean} Returns `true` if all proposed visible columns are already rendered (meaning: redraw is not needed).
     *                    Returns `false` if at least one proposed visible column is not already rendered (meaning: redraw is needed).
     */
  }, {
    key: "areAllProposedVisibleColumnsAlreadyRendered",
    value: function(r) {
      if (!this.columnsVisibleCalculator)
        return !1;
      var n = r.startColumn, o = r.endColumn, i = r.isVisibleInTrimmingContainer;
      if (n === null && o === null)
        return !i;
      var a = this.columnsRenderCalculator, l = a.startColumn, s = a.endColumn;
      return n < l || n === l && n > 0 ? !1 : !(o > s || o === s && o < this.wtSettings.getSetting("totalColumns") - 1);
    }
    /**
     * Resets values in keys of the hasOversizedColumnHeadersMarked object after updateSettings.
     */
  }, {
    key: "resetHasOversizedColumnHeadersMarked",
    value: function() {
      Ye(this.hasOversizedColumnHeadersMarked, function(r, n, o) {
        o[n] = void 0;
      });
    }
  }]), e;
}();
const iye = oye;
function ks(e) {
  "@babel/helpers - typeof";
  return ks = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, ks(e);
}
function aye(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function P1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, sye(n.key), n);
  }
}
function lye(e, t, r) {
  return t && P1(e.prototype, t), r && P1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function sye(e) {
  var t = uye(e, "string");
  return ks(t) === "symbol" ? t : String(t);
}
function uye(e, t) {
  if (ks(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (ks(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function fye(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && b_(e, t);
}
function b_(e, t) {
  return b_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, b_(e, t);
}
function cye(e) {
  var t = dye();
  return function() {
    var n = wm(e), o;
    if (t) {
      var i = wm(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return hye(this, o);
  };
}
function hye(e, t) {
  if (t && (ks(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return w_(e);
}
function w_(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function dye() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function wm(e) {
  return wm = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, wm(e);
}
var vye = /* @__PURE__ */ function(e) {
  fye(r, e);
  var t = cye(r);
  function r(n, o) {
    var i;
    aye(this, r), i = t.call(this, n, new Wve(o));
    var a = i.wtSettings.getSetting("facade", w_(i));
    return i.wtTable = new Jve(i.getTableDao(), a, i.domBindings, i.wtSettings), i.wtViewport = new iye(i.getViewportDao(), i.domBindings, i.wtSettings, i.eventManager, i.wtTable), i.selections = i.wtSettings.getSetting("selections"), i.wtEvent = new fW(a, i.domBindings, i.wtSettings, i.eventManager, i.wtTable, i.selections), i.wtOverlays = new jve(
      // TODO create DAO and remove reference to the Walkontable instance.
      w_(i),
      a,
      i.domBindings,
      i.wtSettings,
      i.eventManager,
      i.wtTable
    ), i.exportSettingsAsClassNames(), i.findOriginalHeaders(), i;
  }
  return lye(r, [{
    key: "exportSettingsAsClassNames",
    value: function() {
      var o = this, i = {
        rowHeaders: "htRowHeaders",
        columnHeaders: "htColumnHeaders"
      }, a = [], l = [];
      Ye(i, function(s, u) {
        o.wtSettings.getSetting(u).length && l.push(s), a.push(s);
      }), Le(this.wtTable.wtRootElement.parentNode, a), ae(this.wtTable.wtRootElement.parentNode, l);
    }
    /**
     * @returns {ViewportDao}
     */
  }, {
    key: "getViewportDao",
    value: function() {
      var o = this;
      return {
        get wot() {
          return o;
        },
        get topOverlayTrimmingContainer() {
          return o.wtOverlays.topOverlay.trimmingContainer;
        },
        get inlineStartOverlayTrimmingContainer() {
          return o.wtOverlays.inlineStartOverlay.trimmingContainer;
        },
        get topScrollPosition() {
          return o.wtOverlays.topOverlay.getScrollPosition();
        },
        get topParentOffset() {
          return o.wtOverlays.topOverlay.getTableParentOffset();
        },
        get inlineStartScrollPosition() {
          return o.wtOverlays.inlineStartOverlay.getScrollPosition();
        },
        get inlineStartParentOffset() {
          return o.wtOverlays.inlineStartOverlay.getTableParentOffset();
        },
        get topOverlay() {
          return o.wtOverlays.topOverlay;
        },
        get inlineStartOverlay() {
          return o.wtOverlays.inlineStartOverlay;
        },
        get bottomOverlay() {
          return o.wtOverlays.bottomOverlay;
        }
      };
    }
  }]), r;
}(OT);
function dh(e) {
  "@babel/helpers - typeof";
  return dh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, dh(e);
}
function yye(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function k1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, mye(n.key), n);
  }
}
function pye(e, t, r) {
  return t && k1(e.prototype, t), r && k1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function mye(e) {
  var t = gye(e, "string");
  return dh(t) === "symbol" ? t : String(t);
}
function gye(e, t) {
  if (dh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (dh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var bye = /* @__PURE__ */ function() {
  function e(t) {
    yye(this, e), t instanceof OT ? this._wot = t : this._initFromSettings(t);
  }
  return pye(e, [{
    key: "_initFromSettings",
    value: function(r) {
      r.facade = function(n) {
        var o = new e(n);
        return function() {
          return o;
        };
      }, this._wot = new vye(r.table, r);
    }
  }, {
    key: "guid",
    get: function() {
      return this._wot.guid;
    }
  }, {
    key: "rootDocument",
    get: function() {
      return this._wot.domBindings.rootDocument;
    }
  }, {
    key: "rootWindow",
    get: function() {
      return this._wot.domBindings.rootWindow;
    }
  }, {
    key: "wtSettings",
    get: function() {
      return this._wot.wtSettings;
    }
  }, {
    key: "cloneSource",
    get: function() {
      return this._wot.cloneSource;
    }
  }, {
    key: "cloneOverlay",
    get: function() {
      return this._wot.cloneOverlay;
    }
  }, {
    key: "selections",
    get: function() {
      return this._wot.selections;
    }
  }, {
    key: "wtViewport",
    get: function() {
      return this._wot.wtViewport;
    }
  }, {
    key: "wtOverlays",
    get: function() {
      return this._wot.wtOverlays;
    }
  }, {
    key: "wtTable",
    get: function() {
      return this._wot.wtTable;
    }
  }, {
    key: "wtEvent",
    get: function() {
      return this._wot.wtEvent;
    }
  }, {
    key: "wtScroll",
    get: function() {
      return this._wot.wtScroll;
    }
  }, {
    key: "drawn",
    get: function() {
      return this._wot.drawn;
    },
    set: function(r) {
      this._wot.drawn = r;
    }
  }, {
    key: "drawInterrupted",
    get: function() {
      return this._wot.drawInterrupted;
    },
    set: function(r) {
      this._wot.drawInterrupted = r;
    }
  }, {
    key: "lastMouseOver",
    get: function() {
      return this._wot.lastMouseOver;
    },
    set: function(r) {
      this._wot.lastMouseOver = r;
    }
  }, {
    key: "momentumScrolling",
    get: function() {
      return this._wot.momentumScrolling;
    },
    set: function(r) {
      this._wot.momentumScrolling = r;
    }
  }, {
    key: "touchApplied",
    get: function() {
      return this._wot.touchApplied;
    },
    set: function(r) {
      this._wot.touchApplied = r;
    }
  }, {
    key: "domBindings",
    get: function() {
      return this._wot.domBindings;
    }
  }, {
    key: "eventListeners",
    get: function() {
      return this._wot.eventListeners;
    },
    set: function(r) {
      this._wot.eventListeners = r;
    }
  }, {
    key: "eventManager",
    get: function() {
      return this._wot.eventManager;
    }
  }, {
    key: "createCellCoords",
    value: function(r, n) {
      return this._wot.createCellCoords(r, n);
    }
  }, {
    key: "createCellRange",
    value: function(r, n, o) {
      return this._wot.createCellRange(r, n, o);
    }
  }, {
    key: "draw",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      return this._wot.draw(r), this;
    }
  }, {
    key: "getCell",
    value: function(r) {
      var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
      return this._wot.getCell(r, n);
    }
  }, {
    key: "scrollViewport",
    value: function(r, n, o, i, a) {
      return this._wot.scrollViewport(r, n, o, i, a);
    }
  }, {
    key: "scrollViewportHorizontally",
    value: function(r, n, o) {
      return this._wot.scrollViewportHorizontally(r, n, o);
    }
  }, {
    key: "scrollViewportVertically",
    value: function(r, n, o) {
      return this._wot.scrollViewportVertically(r, n, o);
    }
  }, {
    key: "getViewport",
    value: function() {
      return this._wot.getViewport();
    }
  }, {
    key: "getOverlayName",
    value: function() {
      return this._wot.cloneOverlay ? this._wot.cloneOverlay.type : "master";
    }
  }, {
    key: "exportSettingsAsClassNames",
    value: function() {
      return this._wot.exportSettingsAsClassNames();
    }
  }, {
    key: "update",
    value: function(r, n) {
      return this._wot.wtSettings.update(r, n), this;
    }
  }, {
    key: "getSetting",
    value: function(r, n, o, i, a) {
      return this._wot.wtSettings.getSetting(r, n, o, i, a);
    }
  }, {
    key: "hasSetting",
    value: function(r) {
      return this._wot.wtSettings.hasSetting(r);
    }
  }, {
    key: "destroy",
    value: function() {
      this._wot.destroy();
    }
  }]), e;
}(), wye = Bt, jW = Be, Sye = qd, Cye = Vr, _ye = jd.f, Oye = jW(_ye), Rye = jW([].push), $1 = function(e) {
  return function(t) {
    for (var r = Cye(t), n = Sye(r), o = n.length, i = 0, a = [], l; o > i; )
      l = n[i++], (!wye || Oye(r, l)) && Rye(a, e ? [l, r[l]] : r[l]);
    return a;
  };
}, Eye = {
  // `Object.entries` method
  // https://tc39.es/ecma262/#sec-object.entries
  entries: $1(!0),
  // `Object.values` method
  // https://tc39.es/ecma262/#sec-object.values
  values: $1(!1)
}, Tye = Ie, Pye = Eye.values;
Tye({ target: "Object", stat: !0 }, {
  values: function(t) {
    return Pye(t);
  }
});
function vh(e) {
  "@babel/helpers - typeof";
  return vh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, vh(e);
}
function Aw(e, t) {
  return Iye(e) || Aye(e, t) || $ye(e, t) || kye();
}
function kye() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function $ye(e, t) {
  if (e) {
    if (typeof e == "string")
      return A1(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return A1(e, t);
  }
}
function A1(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function Aye(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function Iye(e) {
  if (Array.isArray(e))
    return e;
}
function Mye(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function I1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Dye(n.key), n);
  }
}
function xye(e, t, r) {
  return t && I1(e.prototype, t), r && I1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Dye(e) {
  var t = Nye(e, "string");
  return vh(t) === "symbol" ? t : String(t);
}
function Nye(e, t) {
  if (vh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (vh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var Hye = /* @__PURE__ */ function() {
  function e(t, r) {
    Mye(this, e), r && (this.eventManager = t.eventManager, this.instance = t, this.wot = t, this.settings = r, this.mouseDown = !1, this.main = null, this.top = null, this.bottom = null, this.start = null, this.end = null, this.topStyle = null, this.bottomStyle = null, this.startStyle = null, this.endStyle = null, this.cornerDefaultStyle = {
      width: "6px",
      height: "6px",
      borderWidth: "1px",
      borderStyle: "solid",
      borderColor: "#FFF"
    }, this.cornerCenterPointOffset = -(parseInt(this.cornerDefaultStyle.width, 10) / 2), this.corner = null, this.cornerStyle = null, this.createBorders(r), this.registerListeners());
  }
  return xye(e, [{
    key: "registerListeners",
    value: function() {
      var r = this, n = this.wot.rootDocument.body;
      this.eventManager.addEventListener(n, "mousedown", function() {
        return r.onMouseDown();
      }), this.eventManager.addEventListener(n, "mouseup", function() {
        return r.onMouseUp();
      });
      for (var o = function(s) {
        var u = r.main.childNodes[s];
        r.eventManager.addEventListener(u, "mouseenter", function(f) {
          return r.onMouseEnter(f, r.main.childNodes[s]);
        });
      }, i = 0, a = this.main.childNodes.length; i < a; i++)
        o(i);
    }
    /**
     * Mouse down listener.
     *
     * @private
     */
  }, {
    key: "onMouseDown",
    value: function() {
      this.mouseDown = !0;
    }
    /**
     * Mouse up listener.
     *
     * @private
     */
  }, {
    key: "onMouseUp",
    value: function() {
      this.mouseDown = !1;
    }
    /**
     * Mouse enter listener for fragment selection functionality.
     *
     * @private
     * @param {Event} event Dom event.
     * @param {HTMLElement} parentElement Part of border element.
     */
  }, {
    key: "onMouseEnter",
    value: function(r, n) {
      if (!this.mouseDown || !this.wot.getSetting("hideBorderOnMouseDownOver"))
        return;
      r.preventDefault(), Fn(r);
      var o = this, i = this.wot.rootDocument.body, a = n.getBoundingClientRect();
      n.style.display = "none";
      function l(u) {
        if (u.clientY < Math.floor(a.top) || u.clientY > Math.ceil(a.top + a.height) || u.clientX < Math.floor(a.left) || u.clientX > Math.ceil(a.left + a.width))
          return !0;
      }
      function s(u) {
        l(u) && (o.eventManager.removeEventListener(i, "mousemove", s), n.style.display = "block");
      }
      this.eventManager.addEventListener(i, "mousemove", s);
    }
    /**
     * Create border elements.
     *
     * @param {object} settings The border settings.
     */
  }, {
    key: "createBorders",
    value: function(r) {
      var n = this.wot.rootDocument;
      this.main = n.createElement("div");
      var o = ["top", "start", "bottom", "end", "corner"], i = this.main.style;
      i.position = "absolute", i.top = 0, i.left = 0;
      for (var a = 0; a < 5; a++) {
        var l = o[a], s = n.createElement("div");
        s.className = "wtBorder ".concat(this.settings.className || ""), this.settings[l] && this.settings[l].hide && (s.className += " hidden"), i = s.style, i.backgroundColor = this.settings[l] && this.settings[l].color ? this.settings[l].color : r.border.color, i.height = this.settings[l] && this.settings[l].width ? "".concat(this.settings[l].width, "px") : "".concat(r.border.width, "px"), i.width = this.settings[l] && this.settings[l].width ? "".concat(this.settings[l].width, "px") : "".concat(r.border.width, "px"), this.main.appendChild(s);
      }
      this.top = this.main.childNodes[0], this.start = this.main.childNodes[1], this.bottom = this.main.childNodes[2], this.end = this.main.childNodes[3], this.topStyle = this.top.style, this.startStyle = this.start.style, this.bottomStyle = this.bottom.style, this.endStyle = this.end.style, this.corner = this.main.childNodes[4], this.corner.className += " corner", this.cornerStyle = this.corner.style, this.cornerStyle.width = this.cornerDefaultStyle.width, this.cornerStyle.height = this.cornerDefaultStyle.height, this.cornerStyle.border = [this.cornerDefaultStyle.borderWidth, this.cornerDefaultStyle.borderStyle, this.cornerDefaultStyle.borderColor].join(" "), Nn() && this.createMultipleSelectorHandles(), this.disappear();
      var u = this.wot.wtTable, f = u.bordersHolder;
      f || (f = n.createElement("div"), f.className = "htBorders", u.bordersHolder = f, u.spreader.appendChild(f)), f.appendChild(this.main);
    }
    /**
     * Create multiple selector handler for mobile devices.
     */
  }, {
    key: "createMultipleSelectorHandles",
    value: function() {
      var r = this, n = this.wot.rootDocument;
      this.selectionHandles = {
        top: n.createElement("DIV"),
        topHitArea: n.createElement("DIV"),
        bottom: n.createElement("DIV"),
        bottomHitArea: n.createElement("DIV")
      };
      var o = 10, i = 40;
      this.selectionHandles.top.className = "topSelectionHandle topLeftSelectionHandle", this.selectionHandles.topHitArea.className = "topSelectionHandle-HitArea topLeftSelectionHandle-HitArea", this.selectionHandles.bottom.className = "bottomSelectionHandle bottomRightSelectionHandle", this.selectionHandles.bottomHitArea.className = "bottomSelectionHandle-HitArea bottomRightSelectionHandle-HitArea", this.selectionHandles.styles = {
        top: this.selectionHandles.top.style,
        topHitArea: this.selectionHandles.topHitArea.style,
        bottom: this.selectionHandles.bottom.style,
        bottomHitArea: this.selectionHandles.bottomHitArea.style
      };
      var a = {
        position: "absolute",
        height: "".concat(i, "px"),
        width: "".concat(i, "px"),
        "border-radius": "".concat(parseInt(i / 1.5, 10), "px")
      };
      Ye(a, function(s, u) {
        r.selectionHandles.styles.bottomHitArea[u] = s, r.selectionHandles.styles.topHitArea[u] = s;
      });
      var l = {
        position: "absolute",
        height: "".concat(o, "px"),
        width: "".concat(o, "px"),
        "border-radius": "".concat(parseInt(o / 1.5, 10), "px"),
        background: "#F5F5FF",
        border: "1px solid #4285c8"
      };
      Ye(l, function(s, u) {
        r.selectionHandles.styles.bottom[u] = s, r.selectionHandles.styles.top[u] = s;
      }), this.main.appendChild(this.selectionHandles.top), this.main.appendChild(this.selectionHandles.bottom), this.main.appendChild(this.selectionHandles.topHitArea), this.main.appendChild(this.selectionHandles.bottomHitArea);
    }
    /**
     * @param {number} row The visual row index.
     * @param {number} col The visual column index.
     * @returns {boolean}
     */
  }, {
    key: "isPartRange",
    value: function(r, n) {
      var o = this.wot.selections.createOrGetArea();
      return !!(o.cellRange && (r !== o.cellRange.to.row || n !== o.cellRange.to.col));
    }
    /**
     * @param {number} row The visual row index.
     * @param {number} col The visual column index.
     * @param {number} top The top position of the handler.
     * @param {number} left The left position of the handler.
     * @param {number} width The width of the handler.
     * @param {number} height The height of the handler.
     */
  }, {
    key: "updateMultipleSelectionHandlesPosition",
    value: function(r, n, o, i, a, l) {
      var s = this.wot.wtSettings.getSetting("rtlMode"), u = s ? "right" : "left", f = this.selectionHandles.styles, c = f.top, h = f.topHitArea, d = f.bottom, y = f.bottomHitArea, p = parseInt(c.borderWidth, 10), g = parseInt(c.width, 10), w = parseInt(h.width, 10), C = this.wot.wtTable.getWidth(), _ = this.wot.wtTable.getHeight();
      c.top = "".concat(parseInt(o - g - 1, 10), "px"), c[u] = "".concat(parseInt(i - g - 1, 10), "px"), h.top = "".concat(parseInt(o - w / 4 * 3, 10), "px"), h[u] = "".concat(parseInt(i - w / 4 * 3, 10), "px");
      var k = Math.min(parseInt(i + a, 10), C - g - p * 2), E = Math.min(parseInt(i + a - w / 4, 10), C - w - p * 2);
      d[u] = "".concat(k, "px"), y[u] = "".concat(E, "px");
      var j = Math.min(parseInt(o + l, 10), _ - g - p * 2), Y = Math.min(parseInt(o + l - w / 4, 10), _ - w - p * 2);
      d.top = "".concat(j, "px"), y.top = "".concat(Y, "px"), this.settings.border.cornerVisible && this.settings.border.cornerVisible() ? (c.display = "block", h.display = "block", this.isPartRange(r, n) ? (d.display = "none", y.display = "none") : (d.display = "block", y.display = "block")) : (c.display = "none", d.display = "none", h.display = "none", y.display = "none"), r === this.wot.wtSettings.getSetting("fixedRowsTop") || n === this.wot.wtSettings.getSetting("fixedColumnsStart") ? (c.zIndex = "9999", h.zIndex = "9999") : (c.zIndex = "", h.zIndex = "");
    }
    /**
     * Show border around one or many cells.
     *
     * @param {Array} corners The corner coordinates.
     */
  }, {
    key: "appear",
    value: function(r) {
      if (!this.disabled) {
        for (var n = this.wot, o = n.wtTable, i = n.rootDocument, a = n.rootWindow, l, s, u, f, c, h, d = o.getRenderedRowsCount(), y = 0; y < d; y += 1) {
          var p = o.rowFilter.renderedToSource(y);
          if (p >= r[0] && p <= r[2]) {
            l = p, c = r[0];
            break;
          }
        }
        for (var g = d - 1; g >= 0; g -= 1) {
          var w = o.rowFilter.renderedToSource(g);
          if (w >= r[0] && w <= r[2]) {
            s = w;
            break;
          }
        }
        for (var C = o.getRenderedColumnsCount(), _ = 0; _ < C; _ += 1) {
          var k = o.columnFilter.renderedToSource(_);
          if (k >= r[1] && k <= r[3]) {
            u = k, h = r[1];
            break;
          }
        }
        for (var E = C - 1; E >= 0; E -= 1) {
          var j = o.columnFilter.renderedToSource(E);
          if (j >= r[1] && j <= r[3]) {
            f = j;
            break;
          }
        }
        if (l === void 0 || u === void 0) {
          this.disappear();
          return;
        }
        var Y = o.getCell(this.wot.createCellCoords(l, u)), Q = l !== s || u !== f, X = Q ? o.getCell(this.wot.createCellCoords(s, f)) : Y, q = Yt(Y), J = Q ? Yt(X) : q, le = Yt(o.TABLE), ee = yt(o.TABLE), U = q.top, Z = q.left, oe = this.wot.wtSettings.getSetting("rtlMode"), ie = 0, T = 0;
        if (oe) {
          var v = yt(Y), m = a.innerWidth - le.left - ee;
          T = Z + v - J.left, ie = a.innerWidth - Z - v - m - 1;
        } else
          T = J.left + yt(X) - Z, ie = Z - le.left - 1;
        if (this.isEntireColumnSelected(l, s)) {
          var b = this.getDimensionsFromHeader("columns", u, f, c, le), S = null;
          if (b) {
            var R = Aw(b, 3);
            S = R[0], ie = R[1], T = R[2];
          }
          S && (Y = S);
        }
        var $ = U - le.top - 1, H = J.top + $t(X) - U;
        if (this.isEntireRowSelected(u, f)) {
          var F = this.getDimensionsFromHeader("rows", l, s, h, le), K = null;
          if (F) {
            var te = Aw(F, 3);
            K = te[0], $ = te[1], H = te[2];
          }
          K && (Y = K);
        }
        var re = Da(Y, a);
        parseInt(re.borderTopWidth, 10) > 0 && ($ += 1, H = H > 0 ? H - 1 : 0), parseInt(re[oe ? "borderRightWidth" : "borderLeftWidth"], 10) > 0 && (ie += 1, T = T > 0 ? T - 1 : 0);
        var ce = oe ? "right" : "left";
        this.topStyle.top = "".concat($, "px"), this.topStyle[ce] = "".concat(ie, "px"), this.topStyle.width = "".concat(T, "px"), this.topStyle.display = "block", this.startStyle.top = "".concat($, "px"), this.startStyle[ce] = "".concat(ie, "px"), this.startStyle.height = "".concat(H, "px"), this.startStyle.display = "block";
        var Oe = Math.floor(this.settings.border.width / 2);
        this.bottomStyle.top = "".concat($ + H - Oe, "px"), this.bottomStyle[ce] = "".concat(ie, "px"), this.bottomStyle.width = "".concat(T, "px"), this.bottomStyle.display = "block", this.endStyle.top = "".concat($, "px"), this.endStyle[ce] = "".concat(ie + T - Oe, "px"), this.endStyle.height = "".concat(H + 1, "px"), this.endStyle.display = "block";
        var ve = this.settings.border.cornerVisible;
        ve = typeof ve == "function" ? ve(this.settings.layerLevel) : ve;
        var ye = this.wot.getSetting("onModifyGetCellCoords", s, f), x = s, ke = f;
        if (ye && Array.isArray(ye)) {
          var He = Aw(ye, 4);
          x = He[2], ke = He[3];
        }
        if (Nn() || !ve || this.isPartRange(x, ke))
          this.cornerStyle.display = "none";
        else {
          this.cornerStyle.top = "".concat($ + H + this.cornerCenterPointOffset - 1, "px"), this.cornerStyle[ce] = "".concat(ie + T + this.cornerCenterPointOffset - 1, "px"), this.cornerStyle.borderRightWidth = this.cornerDefaultStyle.borderWidth, this.cornerStyle.width = this.cornerDefaultStyle.width, this.cornerStyle.display = "none";
          var Ee = fs(o.TABLE), Ae = Ee === a;
          Ae && (Ee = i.documentElement);
          var $e = parseInt(this.cornerDefaultStyle.width, 10) / 2, O = parseInt(this.cornerDefaultStyle.height, 10) / 2;
          if (f === this.wot.getSetting("totalColumns") - 1) {
            var P = Ae ? X.getBoundingClientRect().left : X.offsetLeft, A = !1, B = 0;
            oe ? (B = P - parseInt(this.cornerDefaultStyle.width, 10) / 2, A = B < 0) : (B = P + yt(X) + parseInt(this.cornerDefaultStyle.width, 10) / 2, A = B >= Jy(Ee)), A && (this.cornerStyle[ce] = "".concat(Math.floor(ie + T + this.cornerCenterPointOffset - $e), "px"), this.cornerStyle[oe ? "borderLeftWidth" : "borderRightWidth"] = 0);
          }
          if (s === this.wot.getSetting("totalRows") - 1) {
            var M = Ae ? X.getBoundingClientRect().top : X.offsetTop, W = M + $t(X) + parseInt(this.cornerDefaultStyle.height, 10) / 2, D = W >= ci(Ee);
            D && (this.cornerStyle.top = "".concat(Math.floor($ + H + this.cornerCenterPointOffset - O), "px"), this.cornerStyle.borderBottomWidth = 0);
          }
          this.cornerStyle.display = "block";
        }
        Nn() && this.updateMultipleSelectionHandlesPosition(s, f, $, ie, T, H);
      }
    }
    /**
     * Check whether an entire column of cells is selected.
     *
     * @private
     * @param {number} startRowIndex Start row index.
     * @param {number} endRowIndex End row index.
     * @returns {boolean}
     */
  }, {
    key: "isEntireColumnSelected",
    value: function(r, n) {
      return r === this.wot.wtTable.getFirstRenderedRow() && n === this.wot.wtTable.getLastRenderedRow();
    }
    /**
     * Check whether an entire row of cells is selected.
     *
     * @private
     * @param {number} startColumnIndex Start column index.
     * @param {number} endColumnIndex End column index.
     * @returns {boolean}
     */
  }, {
    key: "isEntireRowSelected",
    value: function(r, n) {
      return r === this.wot.wtTable.getFirstRenderedColumn() && n === this.wot.wtTable.getLastRenderedColumn();
    }
    /**
     * Get left/top index and width/height depending on the `direction` provided.
     *
     * @private
     * @param {string} direction `rows` or `columns`, defines if an entire column or row is selected.
     * @param {number} fromIndex Start index of the selection.
     * @param {number} toIndex End index of the selection.
     * @param {number} headerIndex The header index as negative value.
     * @param {number} containerOffset Offset of the container.
     * @returns {Array|boolean} Returns an array of [headerElement, left, width] or [headerElement, top, height], depending on `direction` (`false` in case of an error getting the headers).
     */
  }, {
    key: "getDimensionsFromHeader",
    value: function(r, n, o, i, a) {
      var l = this.wot.wtTable, s = l.wtRootElement.parentNode, u = null, f = null, c = null, h = null, d = null, y = null, p = null, g = null;
      switch (r) {
        case "rows":
          u = function() {
            return l.getRowHeader.apply(l, arguments);
          }, f = function() {
            return $t.apply(void 0, arguments);
          }, c = "ht__selection--rows", y = "top";
          break;
        case "columns":
          u = function() {
            return l.getColumnHeader.apply(l, arguments);
          }, f = function() {
            return yt.apply(void 0, arguments);
          }, c = "ht__selection--columns", y = "left";
          break;
      }
      if (s.classList.contains(c)) {
        var w = this.wot.getSetting("columnHeaders").length;
        if (p = u(n, w - i), g = u(o, w - i), !p || !g)
          return !1;
        var C = Yt(p), _ = Yt(g);
        return p && g && (h = C[y] - a[y] - 1, d = _[y] + f(g) - C[y]), [p, h, d];
      }
      return !1;
    }
    /**
     * Change border style.
     *
     * @private
     * @param {string} borderElement Coordinate where add/remove border: top, bottom, start, end.
     * @param {object} border The border object descriptor.
     */
  }, {
    key: "changeBorderStyle",
    value: function(r, n) {
      var o = this[r].style, i = n[r];
      !i || i.hide ? ae(this[r], "hidden") : (Me(this[r], "hidden") && Le(this[r], "hidden"), o.backgroundColor = i.color, (r === "top" || r === "bottom") && (o.height = "".concat(i.width, "px")), (r === "start" || r === "end") && (o.width = "".concat(i.width, "px")));
    }
    /**
     * Change border style to default.
     *
     * @private
     * @param {string} position The position type ("top", "bottom", "start", "end") to change.
     */
  }, {
    key: "changeBorderToDefaultStyle",
    value: function(r) {
      var n = {
        width: 1,
        color: "#000"
      }, o = this[r].style;
      o.backgroundColor = n.color, o.width = "".concat(n.width, "px"), o.height = "".concat(n.width, "px");
    }
    /**
     * Toggle class 'hidden' to element.
     *
     * @private
     * @param {string} borderElement Coordinate where add/remove border: top, bottom, start, end.
     * @param {boolean} [remove] Defines type of the action to perform.
     */
  }, {
    key: "toggleHiddenClass",
    value: function(r, n) {
      this.changeBorderToDefaultStyle(r), n ? ae(this[r], "hidden") : Le(this[r], "hidden");
    }
    /**
     * Hide border.
     */
  }, {
    key: "disappear",
    value: function() {
      this.topStyle.display = "none", this.bottomStyle.display = "none", this.startStyle.display = "none", this.endStyle.display = "none", this.cornerStyle.display = "none", Nn() && (this.selectionHandles.styles.top.display = "none", this.selectionHandles.styles.topHitArea.display = "none", this.selectionHandles.styles.bottom.display = "none", this.selectionHandles.styles.bottomHitArea.display = "none");
    }
    /**
     * Cleans up all the DOM state related to a Border instance. Call this prior to deleting a Border instance.
     */
  }, {
    key: "destroy",
    value: function() {
      this.eventManager.destroyWithOwnEventsOnly(), this.main.parentNode.removeChild(this.main);
    }
  }]), e;
}();
const Lye = Hye;
function jye(e, t) {
  return Wye(e) || Vye(e, t) || Bye(e, t) || Fye();
}
function Fye() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Bye(e, t) {
  if (e) {
    if (typeof e == "string")
      return M1(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return M1(e, t);
  }
}
function M1(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function Vye(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function Wye(e) {
  if (Array.isArray(e))
    return e;
}
function $s(e) {
  "@babel/helpers - typeof";
  return $s = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, $s(e);
}
function Uye(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function x1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Yye(n.key), n);
  }
}
function zye(e, t, r) {
  return t && x1(e.prototype, t), r && x1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Yye(e) {
  var t = Gye(e, "string");
  return $s(t) === "symbol" ? t : String(t);
}
function Gye(e, t) {
  if ($s(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if ($s(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var Kye = /* @__PURE__ */ function() {
  function e(t, r) {
    Uye(this, e), this.settings = t, this.cellRange = r || null, this.instanceBorders = {}, this.classNames = [this.settings.className], this.classNameGenerator = this.linearClassNameGenerator(this.settings.className, this.settings.layerLevel);
  }
  return zye(e, [{
    key: "getBorder",
    value: function(r) {
      return this.instanceBorders[r.guid] || (this.instanceBorders[r.guid] = new Lye(r, this.settings)), this.instanceBorders[r.guid];
    }
    /**
     * Checks if selection is empty.
     *
     * @returns {boolean}
     */
  }, {
    key: "isEmpty",
    value: function() {
      return this.cellRange === null;
    }
    /**
     * Adds a cell coords to the selection.
     *
     * @param {CellCoords} coords The cell coordinates to add.
     * @returns {Selection}
     */
  }, {
    key: "add",
    value: function(r) {
      return this.isEmpty() ? this.cellRange = this.settings.createCellRange(r) : this.cellRange.expand(r), this;
    }
    /**
     * If selection range from or to property equals oldCoords, replace it with newCoords. Return boolean
     * information about success.
     *
     * @param {CellCoords} oldCoords An old cell coordinates to replace.
     * @param {CellCoords} newCoords The new cell coordinates.
     * @returns {boolean}
     */
  }, {
    key: "replace",
    value: function(r, n) {
      if (!this.isEmpty()) {
        if (this.cellRange.from.isEqual(r))
          return this.cellRange.from = n, !0;
        if (this.cellRange.to.isEqual(r))
          return this.cellRange.to = n, !0;
      }
      return !1;
    }
    /**
     * Clears selection.
     *
     * @returns {Selection}
     */
  }, {
    key: "clear",
    value: function() {
      return this.cellRange = null, this;
    }
    /**
     * Returns the top left (or top right in RTL) and bottom right (or bottom left in RTL) selection coordinates.
     *
     * @returns {Array} Returns array of coordinates for example `[1, 1, 5, 5]`.
     */
  }, {
    key: "getCorners",
    value: function() {
      var r = this.cellRange.getOuterTopStartCorner(), n = this.cellRange.getOuterBottomEndCorner();
      return [r.row, r.col, n.row, n.col];
    }
    /**
     * Adds class name to cell element at given coords.
     *
     * @param {WalkontableFacade} wotInstance Walkontable instance.
     * @param {number} sourceRow Cell row coord.
     * @param {number} sourceColumn Cell column coord.
     * @param {string} className Class name.
     * @param {boolean} [markIntersections=false] If `true`, linear className generator will be used to add CSS classes
     *                                            in a continuous way.
     * @returns {Selection}
     */
  }, {
    key: "addClassAtCoords",
    value: function(r, n, o, i) {
      var a = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !1, l = r.wtTable.getCell(this.settings.createCellCoords(n, o));
      if ($s(l) === "object") {
        var s = i;
        a && (s = this.classNameGenerator(l), this.classNames.includes(s) || this.classNames.push(s)), ae(l, s);
      }
      return this;
    }
    /**
     * Generate helper for calculating classNames based on previously added base className.
     * The generated className is always generated as a continuation of the previous className. For example, when
     * the currently checked element has 'area-2' className the generated new className will be 'area-3'. When
     * the element doesn't have any classNames than the base className will be returned ('area');.
     *
     * @param {string} baseClassName Base className to be used.
     * @param {number} layerLevelOwner Layer level which the instance of the Selection belongs to.
     * @returns {Function}
     */
  }, {
    key: "linearClassNameGenerator",
    value: function(r, n) {
      return function o(i) {
        var a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : -1;
        if (n === 0 || a === 0)
          return r;
        var l = a >= 0 ? a : n, s = r;
        l -= 1;
        var u = l === 0 ? r : "".concat(r, "-").concat(l);
        if (Me(i, u)) {
          var f = l + 1;
          s = "".concat(r, "-").concat(f);
        } else
          s = o(i, l);
        return s;
      };
    }
    /**
     * @param {WalkontableFacade} wotInstance The Walkontable instance.
     */
  }, {
    key: "draw",
    value: function(r) {
      if (this.isEmpty()) {
        this.settings.border && this.getBorder(r).disappear();
        return;
      }
      var n = r.wtTable.getRenderedRowsCount(), o = r.wtTable.getRenderedColumnsCount(), i = this.getCorners(), a = jye(i, 4), l = a[0], s = a[1], u = a[2], f = a[3], c = this.settings, h = c.highlightHeaderClassName, d = c.highlightColumnClassName, y = c.highlightRowClassName, p = c.highlightOnlyClosestHeader, g = c.selectionType, w = g === void 0 || ["active-header", "header"].includes(g);
      if (w && s !== null && f !== null)
        for (var C = 0, _ = 0; _ < o; _ += 1) {
          var k = r.wtTable.columnFilter.renderedToSource(_);
          if (k >= s && k <= f) {
            var E = r.wtTable.getColumnHeaders(k), j = E.length - 1;
            p && E.length > 1 && (E = [E[j]]);
            for (var Y = 0; Y < E.length; Y += 1) {
              var Q = [], X = E[Y];
              h && Q.push(h), d && Q.push(d), Y = p ? j : Y;
              var q = r.getSetting("onBeforeHighlightingColumnHeader", k, Y, {
                selectionType: g,
                columnCursor: C,
                selectionWidth: f - s + 1,
                classNames: Q
              });
              q !== k && (X = r.wtTable.getColumnHeader(q, Y)), ae(X, Q);
            }
            C += 1;
          }
        }
      if (l !== null && u !== null)
        for (var J = 0, le = 0; le < n; le += 1) {
          var ee = r.wtTable.rowFilter.renderedToSource(le);
          if (w && ee >= l && ee <= u) {
            var U = r.wtTable.getRowHeaders(ee), Z = U.length - 1;
            p && U.length > 1 && (U = [U[Z]]);
            for (var oe = 0; oe < U.length; oe += 1) {
              var ie = [], T = U[oe];
              h && ie.push(h), y && ie.push(y), oe = p ? Z : oe;
              var v = r.getSetting("onBeforeHighlightingRowHeader", ee, oe, {
                selectionType: g,
                rowCursor: J,
                selectionHeight: u - l + 1,
                classNames: ie
              });
              v !== ee && (T = r.wtTable.getRowHeader(v, oe)), ae(T, ie);
            }
            J += 1;
          }
          if (s !== null && f !== null)
            for (var m = 0; m < o; m += 1) {
              var b = r.wtTable.columnFilter.renderedToSource(m);
              ee >= l && ee <= u && b >= s && b <= f ? this.settings.className && this.addClassAtCoords(r, ee, b, this.settings.className, this.settings.markIntersections) : ee >= l && ee <= u ? y && this.addClassAtCoords(r, ee, b, y) : b >= s && b <= f && d && this.addClassAtCoords(r, ee, b, d);
              var S = r.getSetting("onAfterDrawSelection", ee, b, this.settings.layerLevel);
              typeof S == "string" && this.addClassAtCoords(r, ee, b, S);
            }
        }
      r.getSetting("onBeforeDrawBorders", i, this.settings.className), this.settings.border && this.getBorder(r).appear(i);
    }
    /**
     * Cleans up all the DOM state related to a Selection instance. Call this prior to deleting a Selection instance.
     */
  }, {
    key: "destroy",
    value: function() {
      Object.values(this.instanceBorders).forEach(function(r) {
        return r.destroy();
      });
    }
  }]), e;
}();
const qye = Kye;
function D1(e) {
  var t = e.isShiftKey, r = e.isLeftClick, n = e.isRightClick, o = e.coords, i = e.selection, a = e.controller, l = e.cellCoordsFactory, s = i.isSelected() ? i.getSelectedRange().current() : null, u = i.isSelectedByCorner(), f = i.isSelectedByRowHeader();
  if (t && s)
    o.row >= 0 && o.col >= 0 && !a.cell ? i.setRangeEnd(o) : (u || f) && o.row >= 0 && o.col >= 0 && !a.cell ? i.setRangeEnd(l(o.row, o.col)) : u && o.row < 0 && !a.column ? i.setRangeEnd(l(s.to.row, o.col)) : f && o.col < 0 && !a.row ? i.setRangeEnd(l(o.row, s.to.col)) : (!u && !f && o.col < 0 || u && o.col < 0) && !a.row ? i.selectRows(Math.max(s.from.row, 0), o.row, o.col) : (!u && !f && o.row < 0 || f && o.row < 0) && !a.column && i.selectColumns(Math.max(s.from.col, 0), o.col, o.row);
  else {
    var c = !i.inInSelection(o), h = r || n && c;
    o.row < 0 && o.col >= 0 && !a.column ? h && i.selectColumns(o.col, o.col, o.row) : o.col < 0 && o.row >= 0 && !a.row ? h && i.selectRows(o.row, o.row, o.col) : o.col >= 0 && o.row >= 0 && !a.cell ? h && i.setRangeStart(o) : o.col < 0 && o.row < 0 && i.selectAll(!0, !0);
  }
}
function Xye(e) {
  var t = e.isLeftClick, r = e.coords, n = e.selection, o = e.controller, i = e.cellCoordsFactory;
  if (t) {
    var a = n.isSelectedByRowHeader(), l = n.isSelectedByColumnHeader(), s = n.tableProps.countCols(), u = n.tableProps.countRows();
    l && !o.column ? n.setRangeEnd(i(u - 1, r.col)) : a && !o.row ? n.setRangeEnd(i(r.row, s - 1)) : o.cell || n.setRangeEnd(r);
  }
}
var Zye = /* @__PURE__ */ new Map([["mousedown", D1], ["mouseover", Xye], ["touchstart", D1]]);
function N1(e, t) {
  var r = t.coords, n = t.selection, o = t.controller, i = t.cellCoordsFactory;
  Zye.get(e.type)({
    coords: r,
    selection: n,
    controller: o,
    cellCoordsFactory: i,
    isShiftKey: e.shiftKey,
    isLeftClick: pT(e) || e.type === "touchstart",
    isRightClick: Na(e)
  });
}
var FW = /* @__PURE__ */ new WeakMap(), AT = Symbol("rootInstance");
function Qye(e) {
  FW.set(e, !0);
}
function Jye(e) {
  return e === AT;
}
function S_(e) {
  return FW.has(e);
}
function yh(e) {
  "@babel/helpers - typeof";
  return yh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, yh(e);
}
function Vf(e, t) {
  return rpe(e) || tpe(e, t) || BW(e, t) || epe();
}
function epe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function tpe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function rpe(e) {
  if (Array.isArray(e))
    return e;
}
function H1(e) {
  return ipe(e) || ope(e) || BW(e) || npe();
}
function npe() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function BW(e, t) {
  if (e) {
    if (typeof e == "string")
      return C_(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return C_(e, t);
  }
}
function ope(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function ipe(e) {
  if (Array.isArray(e))
    return C_(e);
}
function C_(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function ape(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function L1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, VW(n.key), n);
  }
}
function lpe(e, t, r) {
  return t && L1(e.prototype, t), r && L1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function j1(e, t, r) {
  spe(e, t), t.set(e, r);
}
function spe(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Ko(e, t, r) {
  return t = VW(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function VW(e) {
  var t = upe(e, "string");
  return yh(t) === "symbol" ? t : String(t);
}
function upe(e, t) {
  if (yh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (yh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function F1(e, t) {
  var r = WW(e, t, "get");
  return fpe(e, r);
}
function fpe(e, t) {
  return t.get ? t.get.call(e) : t.value;
}
function B1(e, t, r) {
  var n = WW(e, t, "set");
  return cpe(e, n, r), r;
}
function WW(e, t, r) {
  if (!t.has(e))
    throw new TypeError("attempted to " + r + " private field on non-instance");
  return t.get(e);
}
function cpe(e, t, r) {
  if (t.set)
    t.set.call(e, r);
  else {
    if (!t.writable)
      throw new TypeError("attempted to set read only private field");
    t.value = r;
  }
}
var Bi = /* @__PURE__ */ new WeakMap(), Iw = /* @__PURE__ */ new WeakMap(), Mw = /* @__PURE__ */ new WeakMap(), hpe = /* @__PURE__ */ function() {
  function e(t) {
    ape(this, e), Ko(this, "instance", void 0), Ko(this, "eventManager", void 0), Ko(this, "settings", void 0), Ko(this, "THEAD", void 0), Ko(this, "TBODY", void 0), Ko(this, "_wt", void 0), Ko(this, "activeWt", void 0), j1(this, Iw, {
      writable: !0,
      value: 0
    }), j1(this, Mw, {
      writable: !0,
      value: 0
    }), Ko(this, "postponedAdjustElementsSize", !1), this.instance = t, this.eventManager = new It(this.instance), this.settings = this.instance.getSettings(), Bi.set(this, {
      /**
       * Defines if the text should be selected during mousemove.
       *
       * @private
       * @type {boolean}
       */
      selectionMouseDown: !1,
      /**
       * @private
       * @type {boolean}
       */
      mouseDown: void 0,
      /**
       * Main <TABLE> element.
       *
       * @private
       * @type {HTMLTableElement}
       */
      table: void 0,
      /**
       * Cached width of the rootElement.
       *
       * @type {number}
       */
      lastWidth: 0,
      /**
       * Cached height of the rootElement.
       *
       * @type {number}
       */
      lastHeight: 0
    }), this.createElements(), this.registerEvents(), this.initializeWalkontable();
  }
  return lpe(e, [{
    key: "render",
    value: function() {
      this.instance.isRenderSuspended() || (this.instance.runHooks("beforeRender", this.instance.forceFullRender), this.postponedAdjustElementsSize && (this.postponedAdjustElementsSize = !1, this.adjustElementsSize(!0)), this._wt.draw(!this.instance.forceFullRender), this.instance.runHooks("afterRender", this.instance.forceFullRender), this.instance.forceFullRender = !1, this.instance.renderCall = !1);
    }
    /**
     * Adjust overlays elements size and master table size.
     *
     * @param {boolean} [force=false] When `true`, it adjust the DOM nodes sizes for all overlays.
     */
  }, {
    key: "adjustElementsSize",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      this.instance.isRenderSuspended() ? this.postponedAdjustElementsSize = !0 : this._wt.wtOverlays.adjustElementsSize(r);
    }
    /**
     * Returns td object given coordinates.
     *
     * @param {CellCoords} coords Renderable cell coordinates.
     * @param {boolean} topmost Indicates whether the cell should be calculated from the topmost.
     * @returns {HTMLTableCellElement|null}
     */
  }, {
    key: "getCellAtCoords",
    value: function(r, n) {
      var o = this._wt.getCell(r, n);
      return o < 0 ? null : o;
    }
    /**
     * Scroll viewport to a cell.
     *
     * @param {CellCoords} coords Renderable cell coordinates.
     * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
     * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right side of the table.
     * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom side of the table.
     * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left side of the table.
     * @returns {boolean}
     */
  }, {
    key: "scrollViewport",
    value: function(r, n, o, i, a) {
      return this._wt.scrollViewport(r, n, o, i, a);
    }
    /**
     * Scroll viewport to a column.
     *
     * @param {number} column Renderable column index.
     * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right side of the table.
     * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left side of the table.
     * @returns {boolean}
     */
  }, {
    key: "scrollViewportHorizontally",
    value: function(r, n, o) {
      return this._wt.scrollViewportHorizontally(r, n, o);
    }
    /**
     * Scroll viewport to a row.
     *
     * @param {number} row Renderable row index.
     * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.
     * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom side of the table.
     * @returns {boolean}
     */
  }, {
    key: "scrollViewportVertically",
    value: function(r, n, o) {
      return this._wt.scrollViewportVertically(r, n, o);
    }
    /**
     * Prepares DOMElements and adds correct className to the root element.
     *
     * @private
     */
  }, {
    key: "createElements",
    value: function() {
      var r = Bi.get(this), n = this.instance, o = n.rootElement, i = n.rootDocument, a = o.getAttribute("style");
      a && o.setAttribute("data-originalstyle", a), ae(o, "handsontable"), r.table = i.createElement("TABLE"), ae(r.table, "htCore"), this.instance.getSettings().tableClassName && ae(r.table, this.instance.getSettings().tableClassName), this.THEAD = i.createElement("THEAD"), r.table.appendChild(this.THEAD), this.TBODY = i.createElement("TBODY"), r.table.appendChild(this.TBODY), this.instance.table = r.table, this.instance.container.insertBefore(r.table, this.instance.container.firstChild);
    }
    /**
     * Attaches necessary listeners.
     *
     * @private
     */
  }, {
    key: "registerEvents",
    value: function() {
      var r = this, n = Bi.get(this), o = this.instance, i = o.rootElement, a = o.rootDocument, l = o.selection, s = a.documentElement;
      this.eventManager.addEventListener(i, "mousedown", function(u) {
        if (n.selectionMouseDown = !0, !r.isTextSelectionAllowed(u.target)) {
          var f = r.instance.rootWindow;
          rI(f), u.preventDefault(), f.focus();
        }
      }), this.eventManager.addEventListener(i, "mouseup", function() {
        n.selectionMouseDown = !1;
      }), this.eventManager.addEventListener(i, "mousemove", function(u) {
        n.selectionMouseDown && !r.isTextSelectionAllowed(u.target) && (r.settings.fragmentSelection && rI(r.instance.rootWindow), u.preventDefault());
      }), this.eventManager.addEventListener(s, "keyup", function(u) {
        l.isInProgress() && !u.shiftKey && l.finish();
      }), this.eventManager.addEventListener(s, "mouseup", function(u) {
        l.isInProgress() && pT(u) && l.finish(), n.mouseDown = !1, (vT(a.activeElement) || !l.isSelected() && !l.isSelectedByAnyHeader() && !i.contains(u.target) && !Na(u)) && r.instance.unlisten();
      }), this.eventManager.addEventListener(s, "contextmenu", function(u) {
        l.isInProgress() && Na(u) && (l.finish(), n.mouseDown = !1);
      }), this.eventManager.addEventListener(s, "touchend", function() {
        l.isInProgress() && l.finish(), n.mouseDown = !1;
      }), this.eventManager.addEventListener(s, "mousedown", function(u) {
        var f = u.target, c = u.x || u.clientX, h = u.y || u.clientY, d = u.target;
        if (!(n.mouseDown || !i || !r.instance.view)) {
          var y = r.instance.view._wt.wtTable.holder;
          if (d === y) {
            var p = tr(a);
            if (a.elementFromPoint(c + p, h) !== y || a.elementFromPoint(c, h + p) !== y)
              return;
          } else
            for (; d !== s; ) {
              if (d === null) {
                if (u.isTargetWebComponent)
                  break;
                return;
              }
              if (d === i)
                return;
              d = d.parentNode;
            }
          var g = typeof r.settings.outsideClickDeselects == "function" ? r.settings.outsideClickDeselects(f) : r.settings.outsideClickDeselects;
          g ? r.instance.deselectCell() : r.instance.destroyEditor(!1, !1);
        }
      }), this.eventManager.addEventListener(n.table, "selectstart", function(u) {
        r.settings.fragmentSelection || Gp(u.target) || u.preventDefault();
      });
    }
    /**
     * Translate renderable cell coordinates to visual coordinates.
     *
     * @param {CellCoords} coords The cell coordinates.
     * @returns {CellCoords}
     */
  }, {
    key: "translateFromRenderableToVisualCoords",
    value: function(r) {
      var n, o = r.row, i = r.col;
      return (n = this.instance)._createCellCoords.apply(n, H1(this.translateFromRenderableToVisualIndex(o, i)));
    }
    /**
     * Translate renderable row and column indexes to visual row and column indexes.
     *
     * @param {number} renderableRow Renderable row index.
     * @param {number} renderableColumn Renderable columnIndex.
     * @returns {number[]}
     */
  }, {
    key: "translateFromRenderableToVisualIndex",
    value: function(r, n) {
      var o = r >= 0 ? this.instance.rowIndexMapper.getVisualFromRenderableIndex(r) : r, i = n >= 0 ? this.instance.columnIndexMapper.getVisualFromRenderableIndex(n) : n;
      return o === null && (o = r), i === null && (i = n), [o, i];
    }
    /**
     * Returns the number of renderable indexes.
     *
     * @private
     * @param {IndexMapper} indexMapper The IndexMapper instance for specific axis.
     * @param {number} maxElements Maximum number of elements (rows or columns).
     *
     * @returns {number|*}
     */
  }, {
    key: "countRenderableIndexes",
    value: function(r, n) {
      var o = Math.min(r.getNotTrimmedIndexesLength(), n), i = r.getNearestNotHiddenIndex(o - 1, -1);
      return i === null ? 0 : r.getRenderableFromVisualIndex(i) + 1;
    }
    /**
     * Returns the number of renderable columns.
     *
     * @returns {number}
     */
  }, {
    key: "countRenderableColumns",
    value: function() {
      return this.countRenderableIndexes(this.instance.columnIndexMapper, this.settings.maxCols);
    }
    /**
     * Returns the number of renderable rows.
     *
     * @returns {number}
     */
  }, {
    key: "countRenderableRows",
    value: function() {
      return this.countRenderableIndexes(this.instance.rowIndexMapper, this.settings.maxRows);
    }
    /**
     * Returns number of not hidden row indexes counting from the passed starting index.
     * The counting direction can be controlled by `incrementBy` argument.
     *
     * @param {number} visualIndex The visual index from which the counting begins.
     * @param {number} incrementBy If `-1` then counting is backwards or forward when `1`.
     * @returns {number}
     */
  }, {
    key: "countNotHiddenRowIndexes",
    value: function(r, n) {
      return this.countNotHiddenIndexes(r, n, this.instance.rowIndexMapper, this.countRenderableRows());
    }
    /**
     * Returns number of not hidden column indexes counting from the passed starting index.
     * The counting direction can be controlled by `incrementBy` argument.
     *
     * @param {number} visualIndex The visual index from which the counting begins.
     * @param {number} incrementBy If `-1` then counting is backwards or forward when `1`.
     * @returns {number}
     */
  }, {
    key: "countNotHiddenColumnIndexes",
    value: function(r, n) {
      return this.countNotHiddenIndexes(r, n, this.instance.columnIndexMapper, this.countRenderableColumns());
    }
    /**
     * Returns number of not hidden indexes counting from the passed starting index.
     * The counting direction can be controlled by `incrementBy` argument.
     *
     * @param {number} visualIndex The visual index from which the counting begins.
     * @param {number} incrementBy If `-1` then counting is backwards or forward when `1`.
     * @param {IndexMapper} indexMapper The IndexMapper instance for specific axis.
     * @param {number} renderableIndexesCount Total count of renderable indexes for specific axis.
     * @returns {number}
     */
  }, {
    key: "countNotHiddenIndexes",
    value: function(r, n, o, i) {
      if (isNaN(r) || r < 0)
        return 0;
      var a = o.getNearestNotHiddenIndex(r, n), l = o.getRenderableFromVisualIndex(a);
      if (!Number.isInteger(l))
        return 0;
      var s = 0;
      return n < 0 ? s = l + 1 : n > 0 && (s = i - l), s;
    }
    /**
     * The function returns the number of not hidden column indexes that fit between the first and
     * last fixed column in the left (or right in RTL mode) overlay.
     *
     * @returns {number}
     */
  }, {
    key: "countNotHiddenFixedColumnsStart",
    value: function() {
      var r = this.instance.countCols(), n = Math.min(parseInt(this.settings.fixedColumnsStart, 10), r) - 1;
      return this.countNotHiddenColumnIndexes(n, -1);
    }
    /**
     * The function returns the number of not hidden row indexes that fit between the first and
     * last fixed row in the top overlay.
     *
     * @returns {number}
     */
  }, {
    key: "countNotHiddenFixedRowsTop",
    value: function() {
      var r = this.instance.countRows(), n = Math.min(parseInt(this.settings.fixedRowsTop, 10), r) - 1;
      return this.countNotHiddenRowIndexes(n, -1);
    }
    /**
     * The function returns the number of not hidden row indexes that fit between the first and
     * last fixed row in the bottom overlay.
     *
     * @returns {number}
     */
  }, {
    key: "countNotHiddenFixedRowsBottom",
    value: function() {
      var r = this.instance.countRows(), n = Math.max(r - parseInt(this.settings.fixedRowsBottom, 10), 0);
      return this.countNotHiddenRowIndexes(n, 1);
    }
    /**
     * Checks if at least one cell than belongs to the main table is not covered by the top, left or
     * bottom overlay.
     *
     * @returns {boolean}
     */
  }, {
    key: "isMainTableNotFullyCoveredByOverlays",
    value: function() {
      var r = this.countNotHiddenFixedRowsTop() + this.countNotHiddenFixedRowsBottom(), n = this.countNotHiddenFixedColumnsStart();
      return this.instance.countRenderedRows() > r && this.instance.countRenderedCols() > n;
    }
    /**
     * Defines default configuration and initializes WalkOnTable instance.
     *
     * @private
     */
  }, {
    key: "initializeWalkontable",
    value: function() {
      var r = this, n = Bi.get(this), o = {
        rtlMode: this.instance.isRtl(),
        externalRowCalculator: this.instance.getPlugin("autoRowSize") && this.instance.getPlugin("autoRowSize").isEnabled(),
        table: n.table,
        isDataViewInstance: function() {
          return S_(r.instance);
        },
        preventOverflow: function() {
          return r.settings.preventOverflow;
        },
        preventWheel: function() {
          return r.settings.preventWheel;
        },
        stretchH: function() {
          return r.settings.stretchH;
        },
        data: function(f, c) {
          var h;
          return (h = r.instance).getDataAtCell.apply(h, H1(r.translateFromRenderableToVisualIndex(f, c)));
        },
        totalRows: function() {
          return r.countRenderableRows();
        },
        totalColumns: function() {
          return r.countRenderableColumns();
        },
        // Number of renderable columns for the left overlay.
        fixedColumnsStart: function() {
          return r.countNotHiddenFixedColumnsStart();
        },
        // Number of renderable rows for the top overlay.
        fixedRowsTop: function() {
          return r.countNotHiddenFixedRowsTop();
        },
        // Number of renderable rows for the bottom overlay.
        fixedRowsBottom: function() {
          return r.countNotHiddenFixedRowsBottom();
        },
        // Enable the inline start overlay when conditions are met.
        shouldRenderInlineStartOverlay: function() {
          return r.settings.fixedColumnsStart > 0 || o.rowHeaders().length > 0;
        },
        // Enable the top overlay when conditions are met.
        shouldRenderTopOverlay: function() {
          return r.settings.fixedRowsTop > 0 || o.columnHeaders().length > 0;
        },
        // Enable the bottom overlay when conditions are met.
        shouldRenderBottomOverlay: function() {
          return r.settings.fixedRowsBottom > 0;
        },
        minSpareRows: function() {
          return r.settings.minSpareRows;
        },
        renderAllRows: this.settings.renderAllRows,
        rowHeaders: function() {
          var f = [];
          return r.instance.hasRowHeaders() && f.push(function(c, h) {
            var d = c >= 0 ? r.instance.rowIndexMapper.getVisualFromRenderableIndex(c) : c;
            r.appendRowHeader(d, h);
          }), r.instance.runHooks("afterGetRowHeaderRenderers", f), B1(r, Mw, f.length), f;
        },
        columnHeaders: function() {
          var f = [];
          return r.instance.hasColHeaders() && f.push(function(c, h) {
            var d = c >= 0 ? r.instance.columnIndexMapper.getVisualFromRenderableIndex(c) : c;
            r.appendColHeader(d, h);
          }), r.instance.runHooks("afterGetColumnHeaderRenderers", f), B1(r, Iw, f.length), f;
        },
        columnWidth: function(f) {
          var c = r.instance.columnIndexMapper.getVisualFromRenderableIndex(f);
          return r.instance.getColWidth(c === null ? f : c);
        },
        rowHeight: function(f) {
          var c = r.instance.rowIndexMapper.getVisualFromRenderableIndex(f);
          return r.instance.getRowHeight(c === null ? f : c);
        },
        cellRenderer: function(f, c, h) {
          var d = r.translateFromRenderableToVisualIndex(f, c), y = Vf(d, 2), p = y[0], g = y[1], w = r.instance.runHooks("modifyGetCellCoords", p, g), C = p, _ = g;
          if (Array.isArray(w)) {
            var k = Vf(w, 2);
            C = k[0], _ = k[1];
          }
          var E = r.instance.getCellMeta(C, _), j = r.instance.colToProp(_), Y = r.instance.getDataAtRowProp(C, j);
          r.instance.hasHook("beforeValueRender") && (Y = r.instance.runHooks("beforeValueRender", Y, E)), r.instance.runHooks("beforeRenderer", h, p, g, j, Y, E), r.instance.getCellRenderer(E)(r.instance, h, p, g, j, Y, E), r.instance.runHooks("afterRenderer", h, p, g, j, Y, E);
        },
        selections: this.instance.selection.highlight,
        hideBorderOnMouseDownOver: function() {
          return r.settings.fragmentSelection;
        },
        onWindowResize: function() {
          r.instance && !r.instance.isDestroyed && r.instance.refreshDimensions();
        },
        onContainerElementResize: function() {
          r.instance && !r.instance.isDestroyed && r.instance.refreshDimensions();
        },
        onCellMouseDown: function(f, c, h, d) {
          var y = r.translateFromRenderableToVisualCoords(c), p = {
            row: !1,
            column: !1,
            cell: !1
          };
          r.instance.listen(), r.activeWt = d, n.mouseDown = !0, r.instance.runHooks("beforeOnCellMouseDown", f, y, h, p), !jl(f) && (N1(f, {
            coords: y,
            selection: r.instance.selection,
            controller: p,
            cellCoordsFactory: function(w, C) {
              return r.instance._createCellCoords(w, C);
            }
          }), r.instance.runHooks("afterOnCellMouseDown", f, y, h), r.activeWt = r._wt);
        },
        onCellContextMenu: function(f, c, h, d) {
          var y = r.translateFromRenderableToVisualCoords(c);
          r.activeWt = d, n.mouseDown = !1, r.instance.selection.isInProgress() && r.instance.selection.finish(), r.instance.runHooks("beforeOnCellContextMenu", f, y, h), !jl(f) && (r.instance.runHooks("afterOnCellContextMenu", f, y, h), r.activeWt = r._wt);
        },
        onCellMouseOut: function(f, c, h, d) {
          var y = r.translateFromRenderableToVisualCoords(c);
          r.activeWt = d, r.instance.runHooks("beforeOnCellMouseOut", f, y, h), !jl(f) && (r.instance.runHooks("afterOnCellMouseOut", f, y, h), r.activeWt = r._wt);
        },
        onCellMouseOver: function(f, c, h, d) {
          var y = r.translateFromRenderableToVisualCoords(c), p = {
            row: !1,
            column: !1,
            cell: !1
          };
          r.activeWt = d, r.instance.runHooks("beforeOnCellMouseOver", f, y, h, p), !jl(f) && (n.mouseDown && N1(f, {
            coords: y,
            selection: r.instance.selection,
            controller: p,
            cellCoordsFactory: function(w, C) {
              return r.instance._createCellCoords(w, C);
            }
          }), r.instance.runHooks("afterOnCellMouseOver", f, y, h), r.activeWt = r._wt);
        },
        onCellMouseUp: function(f, c, h, d) {
          var y = r.translateFromRenderableToVisualCoords(c);
          r.activeWt = d, r.instance.runHooks("beforeOnCellMouseUp", f, y, h), !(jl(f) || r.instance.isDestroyed) && (r.instance.runHooks("afterOnCellMouseUp", f, y, h), r.activeWt = r._wt);
        },
        onCellCornerMouseDown: function(f) {
          f.preventDefault(), r.instance.runHooks("afterOnCellCornerMouseDown", f);
        },
        onCellCornerDblClick: function(f) {
          f.preventDefault(), r.instance.runHooks("afterOnCellCornerDblClick", f);
        },
        beforeDraw: function(f, c) {
          return r.beforeRender(f, c);
        },
        onDraw: function(f) {
          return r.afterRender(f);
        },
        onScrollVertically: function() {
          return r.instance.runHooks("afterScrollVertically");
        },
        onScrollHorizontally: function() {
          return r.instance.runHooks("afterScrollHorizontally");
        },
        onBeforeRemoveCellClassNames: function() {
          return r.instance.runHooks("beforeRemoveCellClassNames");
        },
        onBeforeHighlightingRowHeader: function(f, c, h) {
          var d = r.instance.rowIndexMapper, y = d.getVisualFromRenderableIndex(f), p = r.instance.runHooks("beforeHighlightingRowHeader", y, c, h);
          return d.getRenderableFromVisualIndex(d.getNearestNotHiddenIndex(p, 1));
        },
        onBeforeHighlightingColumnHeader: function(f, c, h) {
          var d = r.instance.columnIndexMapper, y = d.getVisualFromRenderableIndex(f), p = r.instance.runHooks("beforeHighlightingColumnHeader", y, c, h);
          return d.getRenderableFromVisualIndex(d.getNearestNotHiddenIndex(p, 1));
        },
        onAfterDrawSelection: function(f, c, h) {
          var d, y = r.translateFromRenderableToVisualIndex(f, c), p = Vf(y, 2), g = p[0], w = p[1], C = r.instance.selection.getSelectedRange(), _ = C.size();
          if (_ > 0) {
            var k = (h ?? 0) + 1 - _, E = C.peekByIndex(k);
            d = [E.from.row, E.from.col, E.to.row, E.to.col];
          }
          return r.instance.runHooks("afterDrawSelection", g, w, d, h);
        },
        onBeforeDrawBorders: function(f, c) {
          var h = Vf(f, 4), d = h[0], y = h[1], p = h[2], g = h[3], w = [r.instance.rowIndexMapper.getVisualFromRenderableIndex(d), r.instance.columnIndexMapper.getVisualFromRenderableIndex(y), r.instance.rowIndexMapper.getVisualFromRenderableIndex(p), r.instance.columnIndexMapper.getVisualFromRenderableIndex(g)];
          return r.instance.runHooks("beforeDrawBorders", w, c);
        },
        onBeforeTouchScroll: function() {
          return r.instance.runHooks("beforeTouchScroll");
        },
        onAfterMomentumScroll: function() {
          return r.instance.runHooks("afterMomentumScroll");
        },
        onBeforeStretchingColumnWidth: function(f, c) {
          var h = r.instance.columnIndexMapper.getVisualFromRenderableIndex(c);
          return r.instance.runHooks("beforeStretchingColumnWidth", f, h);
        },
        onModifyRowHeaderWidth: function(f) {
          return r.instance.runHooks("modifyRowHeaderWidth", f);
        },
        onModifyGetCellCoords: function(f, c, h) {
          var d = r.instance.rowIndexMapper, y = r.instance.columnIndexMapper, p = c >= 0 ? y.getVisualFromRenderableIndex(c) : c, g = f >= 0 ? d.getVisualFromRenderableIndex(f) : f, w = r.instance.runHooks("modifyGetCellCoords", g, p, h);
          if (Array.isArray(w)) {
            var C = Vf(w, 4), _ = C[0], k = C[1], E = C[2], j = C[3];
            return [_ >= 0 ? d.getRenderableFromVisualIndex(d.getNearestNotHiddenIndex(_, 1)) : _, k >= 0 ? y.getRenderableFromVisualIndex(y.getNearestNotHiddenIndex(k, 1)) : k, E >= 0 ? d.getRenderableFromVisualIndex(d.getNearestNotHiddenIndex(E, -1)) : E, j >= 0 ? y.getRenderableFromVisualIndex(y.getNearestNotHiddenIndex(j, -1)) : j];
          }
        },
        viewportRowCalculatorOverride: function(f) {
          var c = r.settings.viewportRowRenderingOffset;
          if (c === "auto" && r.settings.fixedRowsTop && (c = 10), c > 0 || c === "auto") {
            var h = r.countRenderableRows(), d = f.startRow, y = f.endRow;
            if (typeof c == "number")
              f.startRow = Math.max(d - c, 0), f.endRow = Math.min(y + c, h - 1);
            else if (c === "auto") {
              var p = Math.ceil(y / h * 12);
              f.startRow = Math.max(d - p, 0), f.endRow = Math.min(y + p, h - 1);
            }
          }
          r.instance.runHooks("afterViewportRowCalculatorOverride", f);
        },
        viewportColumnCalculatorOverride: function(f) {
          var c = r.settings.viewportColumnRenderingOffset;
          if (c === "auto" && r.settings.fixedColumnsStart && (c = 10), c > 0 || c === "auto") {
            var h = r.countRenderableColumns(), d = f.startColumn, y = f.endColumn;
            if (typeof c == "number" && (f.startColumn = Math.max(d - c, 0), f.endColumn = Math.min(y + c, h - 1)), c === "auto") {
              var p = Math.ceil(y / h * 6);
              f.startColumn = Math.max(d - p, 0), f.endColumn = Math.min(y + p, h - 1);
            }
          }
          r.instance.runHooks("afterViewportColumnCalculatorOverride", f);
        },
        rowHeaderWidth: function() {
          return r.settings.rowHeaderWidth;
        },
        columnHeaderHeight: function() {
          var f = r.instance.runHooks("modifyColumnHeaderHeight");
          return r.settings.columnHeaderHeight || f;
        }
      };
      this.instance.runHooks("beforeInitWalkontable", o), this._wt = new bye(o), this.activeWt = this._wt;
      var i = this._wt.wtTable.spreader, a = this.instance.rootElement.getBoundingClientRect(), l = a.width, s = a.height;
      this.setLastSize(l, s), this.eventManager.addEventListener(i, "mousedown", function(u) {
        u.target === i && u.which === 3 && u.stopPropagation();
      }), this.eventManager.addEventListener(i, "contextmenu", function(u) {
        u.target === i && u.which === 3 && u.stopPropagation();
      }), this.eventManager.addEventListener(this.instance.rootDocument.documentElement, "click", function() {
        r.settings.observeDOMVisibility && r._wt.drawInterrupted && (r.instance.forceFullRender = !0, r.render());
      });
    }
    /**
     * Checks if it's possible to create text selection in element.
     *
     * @private
     * @param {HTMLElement} el The element to check.
     * @returns {boolean}
     */
  }, {
    key: "isTextSelectionAllowed",
    value: function(r) {
      if (Gp(r))
        return !0;
      var n = Ia(r, this.instance.view._wt.wtTable.spreader);
      return !!(this.settings.fragmentSelection === !0 && n || this.settings.fragmentSelection === "cell" && this.isSelectedOnlyCell() && n || !this.settings.fragmentSelection && this.isCellEdited() && this.isSelectedOnlyCell());
    }
    /**
     * Checks if user's been called mousedown.
     *
     * @private
     * @returns {boolean}
     */
  }, {
    key: "isMouseDown",
    value: function() {
      return Bi.get(this).mouseDown;
    }
    /**
     * Check if selected only one cell.
     *
     * @private
     * @returns {boolean}
     */
  }, {
    key: "isSelectedOnlyCell",
    value: function() {
      var r, n;
      return (r = (n = this.instance.getSelectedRangeLast()) === null || n === void 0 ? void 0 : n.isSingle()) !== null && r !== void 0 ? r : !1;
    }
    /**
     * Checks if active cell is editing.
     *
     * @private
     * @returns {boolean}
     */
  }, {
    key: "isCellEdited",
    value: function() {
      var r = this.instance.getActiveEditor();
      return r && r.isOpened();
    }
    /**
     * `beforeDraw` callback.
     *
     * @private
     * @param {boolean} force If `true` rendering was triggered by a change of settings or data or `false` if
     *                        rendering was triggered by scrolling or moving selection.
     * @param {object} skipRender Object with `skipRender` property, if it is set to `true ` the next rendering
     *                            cycle will be skipped.
     */
  }, {
    key: "beforeRender",
    value: function(r, n) {
      r && this.instance.runHooks("beforeViewRender", this.instance.forceFullRender, n);
    }
    /**
     * `afterRender` callback.
     *
     * @private
     * @param {boolean} force If `true` rendering was triggered by a change of settings or data or `false` if
     *                        rendering was triggered by scrolling or moving selection.
     */
  }, {
    key: "afterRender",
    value: function(r) {
      r && this.instance.runHooks("afterViewRender", this.instance.forceFullRender);
    }
    /**
     * Append row header to a TH element.
     *
     * @private
     * @param {number} visualRowIndex The visual row index.
     * @param {HTMLTableHeaderCellElement} TH The table header element.
     */
  }, {
    key: "appendRowHeader",
    value: function(r, n) {
      if (n.firstChild) {
        var o = n.firstChild;
        if (!Me(o, "relative")) {
          jn(n), this.appendRowHeader(r, n);
          return;
        }
        this.updateCellHeader(o.querySelector(".rowHeader"), r, this.instance.getRowHeader);
      } else {
        var i = this.instance, a = i.rootDocument, l = i.getRowHeader, s = a.createElement("div"), u = a.createElement("span");
        s.className = "relative", u.className = "rowHeader", this.updateCellHeader(u, r, l), s.appendChild(u), n.appendChild(s);
      }
      this.instance.runHooks("afterGetRowHeader", r, n);
    }
    /**
     * Append column header to a TH element.
     *
     * @private
     * @param {number} visualColumnIndex Visual column index.
     * @param {HTMLTableCellElement} TH The table header element.
     * @param {Function} [label] The function that returns the header label.
     * @param {number} [headerLevel=0] The index of header level counting from the top (positive
     *                                 values counting from 0 to N).
     */
  }, {
    key: "appendColHeader",
    value: function(r, n) {
      var o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.instance.getColHeader, i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
      if (n.firstChild) {
        var a = n.firstChild;
        Me(a, "relative") ? this.updateCellHeader(a.querySelector(".colHeader"), r, o, i) : (jn(n), this.appendColHeader(r, n, o, i));
      } else {
        var l = this.instance.rootDocument, s = l.createElement("div"), u = l.createElement("span");
        s.className = "relative", u.className = "colHeader", this.updateCellHeader(u, r, o, i), s.appendChild(u), n.appendChild(s);
      }
      this.instance.runHooks("afterGetColHeader", r, n, i);
    }
    /**
     * Updates header cell content.
     *
     * @private
     * @param {HTMLElement} element Element to update.
     * @param {number} index Row index or column index.
     * @param {Function} content Function which should be returns content for this cell.
     * @param {number} [headerLevel=0] The index of header level counting from the top (positive
     *                                 values counting from 0 to N).
     */
  }, {
    key: "updateCellHeader",
    value: function(r, n, o) {
      var i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0, a = n, l = this._wt.wtOverlays.getParentOverlay(r) || this._wt;
      r.parentNode && (Me(r, "colHeader") ? a = l.wtTable.columnFilter.sourceToRendered(n) : Me(r, "rowHeader") && (a = l.wtTable.rowFilter.sourceToRendered(n))), a > -1 ? _f(r, o(n, i)) : (xa(r, String.fromCharCode(160)), ae(r, "cornerHeader"));
    }
    /**
     * Given a element's left (or right in RTL mode) position relative to the viewport, returns maximum
     * element width until the right (or left) edge of the viewport (before scrollbar).
     *
     * @private
     * @param {number} inlineOffset The left (or right in RTL mode) offset.
     * @returns {number}
     */
  }, {
    key: "maximumVisibleElementWidth",
    value: function(r) {
      var n = this._wt.wtViewport.getWorkspaceWidth(), o = n - r;
      return o > 0 ? o : 0;
    }
    /**
     * Given a element's top position relative to the viewport, returns maximum element height until the bottom
     * edge of the viewport (before scrollbar).
     *
     * @private
     * @param {number} topOffset The top offset.
     * @returns {number}
     */
  }, {
    key: "maximumVisibleElementHeight",
    value: function(r) {
      var n = this._wt.wtViewport.getWorkspaceHeight(), o = n - r;
      return o > 0 ? o : 0;
    }
    /**
     * Sets new dimensions of the container.
     *
     * @param {number} width The table width.
     * @param {number} height The table height.
     */
  }, {
    key: "setLastSize",
    value: function(r, n) {
      var o = Bi.get(this), i = [r, n];
      o.lastWidth = i[0], o.lastHeight = i[1];
    }
    /**
     * Returns cached dimensions.
     *
     * @returns {object}
     */
  }, {
    key: "getLastSize",
    value: function() {
      var r = Bi.get(this);
      return {
        width: r.lastWidth,
        height: r.lastHeight
      };
    }
    /**
     * Returns the first fully visible row in the table viewport.
     *
     * @returns {number}
     */
  }, {
    key: "getFirstFullyVisibleRow",
    value: function() {
      return this.instance.rowIndexMapper.getVisualFromRenderableIndex(this.instance.view._wt.wtScroll.getFirstVisibleRow());
    }
    /**
     * Returns the last fully visible row in the table viewport.
     *
     * @returns {number}
     */
  }, {
    key: "getLastFullyVisibleRow",
    value: function() {
      return this.instance.rowIndexMapper.getVisualFromRenderableIndex(this.instance.view._wt.wtScroll.getLastVisibleRow());
    }
    /**
     * Returns the first fully visible column in the table viewport.
     *
     * @returns {number}
     */
  }, {
    key: "getFirstFullyVisibleColumn",
    value: function() {
      return this.instance.columnIndexMapper.getVisualFromRenderableIndex(this.instance.view._wt.wtScroll.getFirstVisibleColumn());
    }
    /**
     * Returns the last fully visible column in the table viewport.
     *
     * @returns {number}
     */
  }, {
    key: "getLastFullyVisibleColumn",
    value: function() {
      return this.instance.columnIndexMapper.getVisualFromRenderableIndex(this.instance.view._wt.wtScroll.getLastVisibleColumn());
    }
    /**
     * Returns the total count of the rendered column headers.
     *
     * @returns {number}
     */
  }, {
    key: "getColumnHeadersCount",
    value: function() {
      return F1(this, Iw);
    }
    /**
     * Returns the total count of the rendered row headers.
     *
     * @returns {number}
     */
  }, {
    key: "getRowHeadersCount",
    value: function() {
      return F1(this, Mw);
    }
    /**
     * Destroys internal WalkOnTable's instance. Detaches all of the bonded listeners.
     *
     * @private
     */
  }, {
    key: "destroy",
    value: function() {
      this._wt.destroy(), this.eventManager.destroy();
    }
  }]), e;
}();
const dpe = hpe;
function __(e) {
  "@babel/helpers - typeof";
  return __ = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, __(e);
}
var vpe = "ABCDEFGHIJKLMNOPQRSTUVWXYZ", V1 = vpe.length;
function ype(e) {
  for (var t = e + 1, r = "", n; t > 0; )
    n = (t - 1) % V1, r = String.fromCharCode(65 + n) + r, t = parseInt((t - n) / V1, 10);
  return r;
}
function W1(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, r = e, n = [];
  return (!Array.isArray(e) || !Array.isArray(e[0])) && (r = [e]), r.forEach(function(o, i) {
    Array.isArray(o) ? o.forEach(function(a, l) {
      n.push([i + t, l, a]);
    }) : Object.keys(o).forEach(function(a) {
      n.push([i + t, a, o[a]]);
    });
  }), n;
}
function UW(e) {
  var t = 0;
  return Array.isArray(e) && (e[0] && Array.isArray(e[0]) ? t = e[0].length : e[0] && ze(e[0]) && (t = UE(e[0]))), t;
}
function ppe(e) {
  return !!(Array.isArray(e) && e.length && e.every(function(t) {
    return Array.isArray(t);
  }));
}
function mpe(e) {
  return !!(Array.isArray(e) && e.length && e.every(function(t) {
    return __(t) === "object" && !Array.isArray(t) && t !== null;
  }));
}
function ph(e) {
  "@babel/helpers - typeof";
  return ph = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, ph(e);
}
function gpe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function U1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, wpe(n.key), n);
  }
}
function bpe(e, t, r) {
  return t && U1(e.prototype, t), r && U1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function wpe(e) {
  var t = Spe(e, "string");
  return ph(t) === "symbol" ? t : String(t);
}
function Spe(e, t) {
  if (ph(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (ph(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var Cpe = /* @__PURE__ */ function() {
  function e(t) {
    var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    gpe(this, e), this.hot = t, this.data = r, this.dataType = "array", this.colToProp = function() {
    }, this.propToCol = function() {
    };
  }
  return bpe(e, [{
    key: "modifyRowData",
    value: function(r) {
      var n;
      return this.hot.hasHook("modifyRowData") && (n = this.hot.runHooks("modifyRowData", r)), n !== void 0 && !Number.isInteger(n) ? n : this.data[r];
    }
    /**
     * Get all data.
     *
     * @param {boolean} [toArray=false] If `true` return source data as an array of arrays even when source data was provided
     *                                  in another format.
     * @returns {Array}
     */
  }, {
    key: "getData",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      return !this.data || this.data.length === 0 ? this.data : this.getByRange(null, null, r);
    }
    /**
     * Set new data source.
     *
     * @param {Array} data The new data.
     */
  }, {
    key: "setData",
    value: function(r) {
      this.data = r;
    }
    /**
     * Returns array of column values from the data source. `column` is the index of the row in the data source.
     *
     * @param {number} column Visual column index.
     * @returns {Array}
     */
  }, {
    key: "getAtColumn",
    value: function(r) {
      var n = this, o = [];
      return I(this.data, function(i, a) {
        var l = n.getAtCell(a, r);
        o.push(l);
      }), o;
    }
    /**
     * Returns a single row of the data or a subset of its columns. If a column range or `toArray` arguments are provided, it
     * operates only on the columns declared by the `columns` setting or the data schema.
     *
     * @param {number} row Physical row index.
     * @param {number} [startColumn] Starting index for the column range (optional).
     * @param {number} [endColumn] Ending index for the column range (optional).
     * @param {boolean} [toArray=false] `true` if the returned value should be forced to be presented as an array.
     * @returns {Array|object}
     */
  }, {
    key: "getAtRow",
    value: function(r, n, o) {
      var i = this, a = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1, l = n === void 0 && o === void 0, s = null, u = null;
      if (s = this.modifyRowData(r), Array.isArray(s))
        u = [], l ? s.forEach(function(h, d) {
          u[d] = i.getAtPhysicalCell(r, d, s);
        }) : _e(n, o, function(h) {
          u[h - n] = i.getAtPhysicalCell(r, h, s);
        });
      else if (ze(s) || wt(s))
        if (a ? u = [] : u = {}, !l || a) {
          var f = 0, c = this.countFirstRowKeys() - 1;
          _e(f, c, function(h) {
            var d = i.colToProp(h);
            if (h >= (n || f) && h <= (o || c) && !Number.isInteger(d)) {
              var y = i.getAtPhysicalCell(r, d, s);
              a ? u.push(y) : aw(u, d, y);
            }
          });
        } else
          Ye(s, function(h, d) {
            aw(u, d, i.getAtPhysicalCell(r, d, s));
          });
      return u;
    }
    /**
     * Set the provided value in the source data set at the provided coordinates.
     *
     * @param {number} row Physical row index.
     * @param {number|string} column Property name / physical column index.
     * @param {*} value The value to be set at the provided coordinates.
     */
  }, {
    key: "setAtCell",
    value: function(r, n, o) {
      if (!(r >= this.countRows() || n >= this.countFirstRowKeys())) {
        if (this.hot.hasHook("modifySourceData")) {
          var i = ss(o);
          this.hot.runHooks("modifySourceData", r, n, i, "set"), i.isTouched() && (o = i.value);
        }
        Number.isInteger(n) ? this.data[r][n] = o : aw(this.data[r], n, o);
      }
    }
    /**
     * Get data from the source data set using the physical indexes.
     *
     * @private
     * @param {number} row Physical row index.
     * @param {string|number|Function} column Physical column index / property / function.
     * @param {Array|object} dataRow A representation of a data row.
     * @returns {*} Value at the provided coordinates.
     */
  }, {
    key: "getAtPhysicalCell",
    value: function(r, n, o) {
      var i = null;
      if (o && (typeof n == "string" ? i = Kee(o, n) : typeof n == "function" ? i = n(o) : i = o[n]), this.hot.hasHook("modifySourceData")) {
        var a = ss(i);
        this.hot.runHooks("modifySourceData", r, n, a, "get"), a.isTouched() && (i = a.value);
      }
      return i;
    }
    /**
     * Returns a single value from the data.
     *
     * @param {number} row Physical row index.
     * @param {number} columnOrProp Visual column index or property.
     * @returns {*}
     */
  }, {
    key: "getAtCell",
    value: function(r, n) {
      var o = this.modifyRowData(r);
      return this.getAtPhysicalCell(r, this.colToProp(n), o);
    }
    /**
     * Returns source data by passed range.
     *
     * @param {object} [start] Object with physical `row` and `col` keys (or visual column index, if data type is an array of objects).
     * @param {object} [end] Object with physical `row` and `col` keys (or visual column index, if data type is an array of objects).
     * @param {boolean} [toArray=false] If `true` return source data as an array of arrays even when source data was provided
     *                                  in another format.
     * @returns {Array}
     */
  }, {
    key: "getByRange",
    value: function() {
      var r = this, n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null, o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, a = !1, l = null, s = null, u = null, f = null;
      n === null || o === null ? (a = !0, l = 0, u = this.countRows() - 1) : (l = Math.min(n.row, o.row), s = Math.min(n.col, o.col), u = Math.max(n.row, o.row), f = Math.max(n.col, o.col));
      var c = [];
      return _e(l, u, function(h) {
        c.push(a ? r.getAtRow(h, void 0, void 0, i) : r.getAtRow(h, s, f, i));
      }), c;
    }
    /**
     * Count number of rows.
     *
     * @returns {number}
     */
  }, {
    key: "countRows",
    value: function() {
      if (this.hot.hasHook("modifySourceLength")) {
        var r = this.hot.runHooks("modifySourceLength");
        if (Number.isInteger(r))
          return r;
      }
      return this.data.length;
    }
    /**
     * Count number of columns.
     *
     * @returns {number}
     */
  }, {
    key: "countFirstRowKeys",
    value: function() {
      return UW(this.data);
    }
    /**
     * Destroy instance.
     */
  }, {
    key: "destroy",
    value: function() {
      this.data = null, this.hot = null;
    }
  }]), e;
}();
const _pe = Cpe;
var z1 = At, Ope = function(e) {
  return e !== void 0 && (z1(e, "value") || z1(e, "writable"));
}, Rpe = Ie, Epe = Kt, Tpe = Vt, Ppe = Nt, kpe = Ope, $pe = Bn, Ape = ag;
function zW(e, t) {
  var r = arguments.length < 3 ? e : arguments[2], n, o;
  if (Ppe(e) === r)
    return e[t];
  if (n = $pe.f(e, t), n)
    return kpe(n) ? n.value : n.get === void 0 ? void 0 : Epe(n.get, r);
  if (Tpe(o = Ape(e)))
    return zW(o, t, r);
}
Rpe({ target: "Reflect", stat: !0 }, {
  get: zW
});
var Ipe = Ie, Mpe = Fe, xpe = Vr, YW = Bn.f, GW = Bt, Dpe = !GW || Mpe(function() {
  YW(1);
});
Ipe({ target: "Object", stat: !0, forced: Dpe, sham: !GW }, {
  getOwnPropertyDescriptor: function(t, r) {
    return YW(xpe(t), r);
  }
});
var Npe = "localHooks", KW = {
  /**
   * Internal hooks storage.
   */
  _localHooks: /* @__PURE__ */ Object.create(null),
  /**
   * Add hook to the collection.
   *
   * @param {string} key The hook name.
   * @param {Function} callback The hook callback.
   * @returns {object}
   */
  addLocalHook: function(t, r) {
    return this._localHooks[t] || (this._localHooks[t] = []), this._localHooks[t].push(r), this;
  },
  /**
   * Run hooks.
   *
   * @param {string} key The name of the hook to run.
   * @param {*} [arg1] An additional parameter passed to the callback function.
   * @param {*} [arg2] An additional parameter passed to the callback function.
   * @param {*} [arg3] An additional parameter passed to the callback function.
   * @param {*} [arg4] An additional parameter passed to the callback function.
   * @param {*} [arg5] An additional parameter passed to the callback function.
   * @param {*} [arg6] An additional parameter passed to the callback function.
   */
  runLocalHooks: function(t, r, n, o, i, a, l) {
    if (this._localHooks[t])
      for (var s = this._localHooks[t].length, u = 0; u < s; u++)
        FC(this._localHooks[t][u], this, r, n, o, i, a, l);
  },
  /**
   * Clear all added hooks.
   *
   * @returns {object}
   */
  clearLocalHooks: function() {
    return this._localHooks = {}, this;
  }
};
Wo(KW, "MIXIN_NAME", Npe, {
  writable: !1,
  enumerable: !1
});
const $r = KW;
function mh(e) {
  "@babel/helpers - typeof";
  return mh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, mh(e);
}
function Hpe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function Y1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, jpe(n.key), n);
  }
}
function Lpe(e, t, r) {
  return t && Y1(e.prototype, t), r && Y1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function jpe(e) {
  var t = Fpe(e, "string");
  return mh(t) === "symbol" ? t : String(t);
}
function Fpe(e, t) {
  if (mh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (mh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var rl = /* @__PURE__ */ function() {
  function e() {
    var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    Hpe(this, e), this.indexedValues = [], this.initValueOrFn = t;
  }
  return Lpe(e, [{
    key: "getValues",
    value: function() {
      return this.indexedValues;
    }
    /**
     * Get value for the particular index.
     *
     * @param {number} index Index for which value is got.
     * @returns {*}
     */
  }, {
    key: "getValueAtIndex",
    value: function(r) {
      var n = this.indexedValues;
      if (r < n.length)
        return n[r];
    }
    /**
     * Set new values for particular indexes.
     *
     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
     *
     * @param {Array} values List of set values.
     */
  }, {
    key: "setValues",
    value: function(r) {
      this.indexedValues = r.slice(), this.runLocalHooks("change");
    }
    /**
     * Set new value for the particular index.
     *
     * @param {number} index The index.
     * @param {*} value The value to save.
     *
     * Note: Please keep in mind that it is not possible to set value beyond the map (not respecting already set
     * map's size). Please use the `setValues` method when you would like to extend the map.
     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
     *
     * @returns {boolean}
     */
  }, {
    key: "setValueAtIndex",
    value: function(r, n) {
      return r < this.indexedValues.length ? (this.indexedValues[r] = n, this.runLocalHooks("change"), !0) : !1;
    }
    /**
     * Clear all values to the defaults.
     */
  }, {
    key: "clear",
    value: function() {
      this.setDefaultValues();
    }
    /**
     * Get length of the index map.
     *
     * @returns {number}
     */
  }, {
    key: "getLength",
    value: function() {
      return this.getValues().length;
    }
    /**
     * Set default values for elements from `0` to `n`, where `n` is equal to the handled variable.
     *
     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
     *
     * @private
     * @param {number} [length] Length of list.
     */
  }, {
    key: "setDefaultValues",
    value: function() {
      var r = this, n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.indexedValues.length;
      this.indexedValues.length = 0, wt(this.initValueOrFn) ? _e(n - 1, function(o) {
        return r.indexedValues.push(r.initValueOrFn(o));
      }) : _e(n - 1, function() {
        return r.indexedValues.push(r.initValueOrFn);
      }), this.runLocalHooks("change");
    }
    /**
     * Initialize list with default values for particular indexes.
     *
     * @private
     * @param {number} length New length of indexed list.
     * @returns {IndexMap}
     */
  }, {
    key: "init",
    value: function(r) {
      return this.setDefaultValues(r), this.runLocalHooks("init"), this;
    }
    /**
     * Add values to the list.
     *
     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
     *
     * @private
     */
  }, {
    key: "insert",
    value: function() {
      this.runLocalHooks("change");
    }
    /**
     * Remove values from the list.
     *
     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
     *
     * @private
     */
  }, {
    key: "remove",
    value: function() {
      this.runLocalHooks("change");
    }
    /**
     * Destroys the Map instance.
     */
  }, {
    key: "destroy",
    value: function() {
      this.clearLocalHooks(), this.indexedValues = null, this.initValueOrFn = null;
    }
  }]), e;
}();
bt(rl, $r);
function xw(e) {
  return Upe(e) || Wpe(e) || Vpe(e) || Bpe();
}
function Bpe() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Vpe(e, t) {
  if (e) {
    if (typeof e == "string")
      return O_(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return O_(e, t);
  }
}
function Wpe(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function Upe(e) {
  if (Array.isArray(e))
    return O_(e);
}
function O_(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function IT(e, t, r, n) {
  var o = r.length ? r[0] : void 0;
  return [].concat(xw(e.slice(0, o)), xw(r.map(function(i, a) {
    return wt(n) ? n(i, a) : n;
  })), xw(o === void 0 ? [] : e.slice(o)));
}
function MT(e, t) {
  return Zr(e, function(r, n) {
    return t.includes(n) === !1;
  });
}
function As(e) {
  "@babel/helpers - typeof";
  return As = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, As(e);
}
function zpe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function G1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Gpe(n.key), n);
  }
}
function Ype(e, t, r) {
  return t && G1(e.prototype, t), r && G1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Gpe(e) {
  var t = Kpe(e, "string");
  return As(t) === "symbol" ? t : String(t);
}
function Kpe(e, t) {
  if (As(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (As(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function wc() {
  return typeof Reflect < "u" && Reflect.get ? wc = Reflect.get.bind() : wc = function(t, r, n) {
    var o = qpe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, wc.apply(this, arguments);
}
function qpe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Fa(e), e !== null); )
    ;
  return e;
}
function Xpe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && R_(e, t);
}
function R_(e, t) {
  return R_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, R_(e, t);
}
function Zpe(e) {
  var t = eme();
  return function() {
    var n = Fa(e), o;
    if (t) {
      var i = Fa(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return Qpe(this, o);
  };
}
function Qpe(e, t) {
  if (t && (As(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return Jpe(e);
}
function Jpe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function eme() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Fa(e) {
  return Fa = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Fa(e);
}
var Ai = /* @__PURE__ */ function(e) {
  Xpe(r, e);
  var t = Zpe(r);
  function r() {
    return zpe(this, r), t.apply(this, arguments);
  }
  return Ype(r, [{
    key: "insert",
    value: (
      /**
       * Add values to list and reorganize.
       *
       * @private
       * @param {number} insertionIndex Position inside the list.
       * @param {Array} insertedIndexes List of inserted indexes.
       */
      function(o, i) {
        this.indexedValues = IT(this.indexedValues, o, i, this.initValueOrFn), wc(Fa(r.prototype), "insert", this).call(this, o, i);
      }
    )
    /**
     * Remove values from the list and reorganize.
     *
     * @private
     * @param {Array} removedIndexes List of removed indexes.
     */
  }, {
    key: "remove",
    value: function(o) {
      this.indexedValues = MT(this.indexedValues, o), wc(Fa(r.prototype), "remove", this).call(this, o);
    }
  }]), r;
}(rl);
function Is(e) {
  "@babel/helpers - typeof";
  return Is = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Is(e);
}
function tme(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function K1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, nme(n.key), n);
  }
}
function rme(e, t, r) {
  return t && K1(e.prototype, t), r && K1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function nme(e) {
  var t = ome(e, "string");
  return Is(t) === "symbol" ? t : String(t);
}
function ome(e, t) {
  if (Is(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Is(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function ime(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && E_(e, t);
}
function E_(e, t) {
  return E_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, E_(e, t);
}
function ame(e) {
  var t = ume();
  return function() {
    var n = Sm(e), o;
    if (t) {
      var i = Sm(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return lme(this, o);
  };
}
function lme(e, t) {
  if (t && (Is(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return sme(e);
}
function sme(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function ume() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Sm(e) {
  return Sm = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Sm(e);
}
var Ig = /* @__PURE__ */ function(e) {
  ime(r, e);
  var t = ame(r);
  function r() {
    var n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    return tme(this, r), t.call(this, n);
  }
  return rme(r, [{
    key: "getHiddenIndexes",
    value: function() {
      return sr(this.getValues(), function(o, i, a) {
        return i && o.push(a), o;
      }, []);
    }
  }]), r;
}(Ai);
function Dw(e) {
  return dme(e) || hme(e) || cme(e) || fme();
}
function fme() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function cme(e, t) {
  if (e) {
    if (typeof e == "string")
      return T_(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return T_(e, t);
  }
}
function hme(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function dme(e) {
  if (Array.isArray(e))
    return T_(e);
}
function T_(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function xT(e, t, r) {
  return [].concat(Dw(e.slice(0, t)), Dw(r), Dw(e.slice(t)));
}
function gh(e, t) {
  return Zr(e, function(r) {
    return t.includes(r) === !1;
  });
}
function DT(e, t) {
  return Ue(e, function(r) {
    return r - t.filter(function(n) {
      return n < r;
    }).length;
  });
}
function NT(e, t) {
  var r = t[0], n = t.length;
  return Ue(e, function(o) {
    return o >= r ? o + n : o;
  });
}
function Ms(e) {
  "@babel/helpers - typeof";
  return Ms = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Ms(e);
}
function vme(e) {
  return gme(e) || mme(e) || pme(e) || yme();
}
function yme() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function pme(e, t) {
  if (e) {
    if (typeof e == "string")
      return P_(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return P_(e, t);
  }
}
function mme(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function gme(e) {
  if (Array.isArray(e))
    return P_(e);
}
function P_(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function bme(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function q1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, XW(n.key), n);
  }
}
function wme(e, t, r) {
  return t && q1(e.prototype, t), r && q1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function ao() {
  return typeof Reflect < "u" && Reflect.get ? ao = Reflect.get.bind() : ao = function(t, r, n) {
    var o = Sme(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, ao.apply(this, arguments);
}
function Sme(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = cn(e), e !== null); )
    ;
  return e;
}
function Cme(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && k_(e, t);
}
function k_(e, t) {
  return k_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, k_(e, t);
}
function _me(e) {
  var t = Rme();
  return function() {
    var n = cn(e), o;
    if (t) {
      var i = cn(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return Ome(this, o);
  };
}
function Ome(e, t) {
  if (t && (Ms(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return qW(e);
}
function qW(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function Rme() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function cn(e) {
  return cn = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, cn(e);
}
function Eme(e, t, r) {
  return t = XW(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function XW(e) {
  var t = Tme(e, "string");
  return Ms(t) === "symbol" ? t : String(t);
}
function Tme(e, t) {
  if (Ms(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Ms(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var Mg = /* @__PURE__ */ function(e) {
  Cme(r, e);
  var t = _me(r);
  function r() {
    var n;
    bme(this, r);
    for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
      i[a] = arguments[a];
    return n = t.call.apply(t, [this].concat(i)), Eme(qW(n), "orderOfIndexes", []), n;
  }
  return wme(r, [{
    key: "getValues",
    value: (
      /**
       * Get full list of ordered values for particular indexes.
       *
       * @returns {Array}
       */
      function() {
        var o = this;
        return this.orderOfIndexes.map(function(i) {
          return o.indexedValues[i];
        });
      }
    )
    /**
     * Set new values for particular indexes. Entries are linked and stored in a certain order.
     *
     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
     *
     * @param {Array} values List of set values.
     */
  }, {
    key: "setValues",
    value: function(o) {
      this.orderOfIndexes = vme(Array(o.length).keys()), ao(cn(r.prototype), "setValues", this).call(this, o);
    }
    /**
     * Set value at index and add it to the linked list of entries. Entries are stored in a certain order.
     *
     * Note: Value will be added at the end of the queue.
     *
     * @param {number} index The index.
     * @param {*} value The value to save.
     * @param {number} position Position to which entry will be added.
     *
     * @returns {boolean}
     */
  }, {
    key: "setValueAtIndex",
    value: function(o, i) {
      var a = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.orderOfIndexes.length;
      return o < this.indexedValues.length ? (this.indexedValues[o] = i, this.orderOfIndexes.includes(o) === !1 && this.orderOfIndexes.splice(a, 0, o), this.runLocalHooks("change"), !0) : !1;
    }
    /**
     * Clear value for particular index.
     *
     * @param {number} physicalIndex Physical index.
     */
  }, {
    key: "clearValue",
    value: function(o) {
      this.orderOfIndexes = gh(this.orderOfIndexes, [o]), wt(this.initValueOrFn) ? ao(cn(r.prototype), "setValueAtIndex", this).call(this, o, this.initValueOrFn(o)) : ao(cn(r.prototype), "setValueAtIndex", this).call(this, o, this.initValueOrFn);
    }
    /**
     * Get length of the index map.
     *
     * @returns {number}
     */
  }, {
    key: "getLength",
    value: function() {
      return this.orderOfIndexes.length;
    }
    /**
     * Set default values for elements from `0` to `n`, where `n` is equal to the handled variable.
     *
     * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.
     *
     * @private
     * @param {number} [length] Length of list.
     */
  }, {
    key: "setDefaultValues",
    value: function() {
      var o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.indexedValues.length;
      this.orderOfIndexes.length = 0, ao(cn(r.prototype), "setDefaultValues", this).call(this, o);
    }
    /**
     * Add values to list and reorganize. It updates list of indexes related to ordered values.
     *
     * @private
     * @param {number} insertionIndex Position inside the list.
     * @param {Array} insertedIndexes List of inserted indexes.
     */
  }, {
    key: "insert",
    value: function(o, i) {
      this.indexedValues = IT(this.indexedValues, o, i, this.initValueOrFn), this.orderOfIndexes = NT(this.orderOfIndexes, i), ao(cn(r.prototype), "insert", this).call(this, o, i);
    }
    /**
     * Remove values from the list and reorganize. It updates list of indexes related to ordered values.
     *
     * @private
     * @param {Array} removedIndexes List of removed indexes.
     */
  }, {
    key: "remove",
    value: function(o) {
      this.indexedValues = MT(this.indexedValues, o), this.orderOfIndexes = gh(this.orderOfIndexes, o), this.orderOfIndexes = DT(this.orderOfIndexes, o), ao(cn(r.prototype), "remove", this).call(this, o);
    }
    /**
     * Get every entry containing index and value, respecting order of indexes.
     *
     * @returns {Array}
     */
  }, {
    key: "getEntries",
    value: function() {
      var o = this;
      return this.orderOfIndexes.map(function(i) {
        return [i, o.getValueAtIndex(i)];
      });
    }
  }]), r;
}(rl);
function xs(e) {
  "@babel/helpers - typeof";
  return xs = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, xs(e);
}
function Pme(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function X1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, $me(n.key), n);
  }
}
function kme(e, t, r) {
  return t && X1(e.prototype, t), r && X1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function $me(e) {
  var t = Ame(e, "string");
  return xs(t) === "symbol" ? t : String(t);
}
function Ame(e, t) {
  if (xs(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (xs(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Ime(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && $_(e, t);
}
function $_(e, t) {
  return $_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, $_(e, t);
}
function Mme(e) {
  var t = Nme();
  return function() {
    var n = Cm(e), o;
    if (t) {
      var i = Cm(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return xme(this, o);
  };
}
function xme(e, t) {
  if (t && (xs(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return Dme(e);
}
function Dme(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function Nme() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Cm(e) {
  return Cm = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Cm(e);
}
var gv = /* @__PURE__ */ function(e) {
  Ime(r, e);
  var t = Mme(r);
  function r() {
    var n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
    return Pme(this, r), t.call(this, n);
  }
  return kme(r, [{
    key: "getTrimmedIndexes",
    value: function() {
      return sr(this.getValues(), function(o, i, a) {
        return i && o.push(a), o;
      }, []);
    }
  }]), r;
}(Ai), Z1 = /* @__PURE__ */ new Map([["indexesSequence", {
  getListWithInsertedItems: xT,
  getListWithRemovedItems: gh
}], ["physicallyIndexed", {
  getListWithInsertedItems: IT,
  getListWithRemovedItems: MT
}]]), ZW = function(t) {
  if (Z1.has(t) === !1)
    throw new Error("Alter strategy with ID '".concat(t, "' does not exist."));
  return Z1.get(t);
};
function Ds(e) {
  "@babel/helpers - typeof";
  return Ds = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Ds(e);
}
function Hme(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function Q1(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, jme(n.key), n);
  }
}
function Lme(e, t, r) {
  return t && Q1(e.prototype, t), r && Q1(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function jme(e) {
  var t = Fme(e, "string");
  return Ds(t) === "symbol" ? t : String(t);
}
function Fme(e, t) {
  if (Ds(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Ds(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Sc() {
  return typeof Reflect < "u" && Reflect.get ? Sc = Reflect.get.bind() : Sc = function(t, r, n) {
    var o = Bme(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, Sc.apply(this, arguments);
}
function Bme(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Ba(e), e !== null); )
    ;
  return e;
}
function Vme(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && A_(e, t);
}
function A_(e, t) {
  return A_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, A_(e, t);
}
function Wme(e) {
  var t = Yme();
  return function() {
    var n = Ba(e), o;
    if (t) {
      var i = Ba(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return Ume(this, o);
  };
}
function Ume(e, t) {
  if (t && (Ds(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return zme(e);
}
function zme(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function Yme() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Ba(e) {
  return Ba = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Ba(e);
}
var QW = /* @__PURE__ */ function(e) {
  Vme(r, e);
  var t = Wme(r);
  function r() {
    return Hme(this, r), t.call(this, function(n) {
      return n;
    });
  }
  return Lme(r, [{
    key: "insert",
    value: function(o, i) {
      var a = NT(this.indexedValues, i);
      this.indexedValues = xT(a, o, i), Sc(Ba(r.prototype), "insert", this).call(this, o, i);
    }
    /**
     * Remove values from the list and reorganize.
     *
     * @private
     * @param {Array} removedIndexes List of removed indexes.
     */
  }, {
    key: "remove",
    value: function(o) {
      var i = gh(this.indexedValues, o);
      this.indexedValues = DT(i, o), Sc(Ba(r.prototype), "remove", this).call(this, o);
    }
  }]), r;
}(rl), J1 = /* @__PURE__ */ new Map([["hiding", Ig], ["index", rl], ["linkedPhysicalIndexToValue", Mg], ["physicalIndexToValue", Ai], ["trimming", gv]]);
function Gme(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
  if (!J1.has(e))
    throw new Error('The provided map type ("'.concat(e, '") does not exist.'));
  return new (J1.get(e))(t);
}
function bh(e) {
  "@babel/helpers - typeof";
  return bh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, bh(e);
}
function Kme(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function eM(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Xme(n.key), n);
  }
}
function qme(e, t, r) {
  return t && eM(e.prototype, t), r && eM(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Xme(e) {
  var t = Zme(e, "string");
  return bh(t) === "symbol" ? t : String(t);
}
function Zme(e, t) {
  if (bh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (bh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var HT = /* @__PURE__ */ function() {
  function e() {
    Kme(this, e), this.collection = /* @__PURE__ */ new Map();
  }
  return qme(e, [{
    key: "register",
    value: function(r, n) {
      var o = this;
      this.collection.has(r) === !1 && (this.collection.set(r, n), n.addLocalHook("change", function() {
        return o.runLocalHooks("change", n);
      }));
    }
    /**
     * Unregister custom index map.
     *
     * @param {string} name Name of the index map.
     */
  }, {
    key: "unregister",
    value: function(r) {
      var n = this.collection.get(r);
      be(n) && (n.destroy(), this.collection.delete(r), this.runLocalHooks("change", n));
    }
    /**
     * Unregisters and destroys all collected index map instances.
     */
  }, {
    key: "unregisterAll",
    value: function() {
      var r = this;
      this.collection.forEach(function(n, o) {
        return r.unregister(o);
      }), this.collection.clear();
    }
    /**
     * Get index map for the provided name.
     *
     * @param {string} [name] Name of the index map.
     * @returns {Array|IndexMap}
     */
  }, {
    key: "get",
    value: function(r) {
      return gt(r) ? Array.from(this.collection.values()) : this.collection.get(r);
    }
    /**
     * Get collection size.
     *
     * @returns {number}
     */
  }, {
    key: "getLength",
    value: function() {
      return this.collection.size;
    }
    /**
     * Remove some indexes and corresponding mappings and update values of the others within all collection's index maps.
     *
     * @private
     * @param {Array} removedIndexes List of removed indexes.
     */
  }, {
    key: "removeFromEvery",
    value: function(r) {
      this.collection.forEach(function(n) {
        n.remove(r);
      });
    }
    /**
     * Insert new indexes and corresponding mapping and update values of the others all collection's index maps.
     *
     * @private
     * @param {number} insertionIndex Position inside the actual list.
     * @param {Array} insertedIndexes List of inserted indexes.
     */
  }, {
    key: "insertToEvery",
    value: function(r, n) {
      this.collection.forEach(function(o) {
        o.insert(r, n);
      });
    }
    /**
     * Set default values to index maps within collection.
     *
     * @param {number} length Destination length for all stored maps.
     */
  }, {
    key: "initEvery",
    value: function(r) {
      this.collection.forEach(function(n) {
        n.init(r);
      });
    }
  }]), e;
}();
bt(HT, $r);
function Ns(e) {
  "@babel/helpers - typeof";
  return Ns = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Ns(e);
}
function Qme(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function tM(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, ege(n.key), n);
  }
}
function Jme(e, t, r) {
  return t && tM(e.prototype, t), r && tM(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function ege(e) {
  var t = tge(e, "string");
  return Ns(t) === "symbol" ? t : String(t);
}
function tge(e, t) {
  if (Ns(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Ns(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function rge(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && I_(e, t);
}
function I_(e, t) {
  return I_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, I_(e, t);
}
function nge(e) {
  var t = age();
  return function() {
    var n = _m(e), o;
    if (t) {
      var i = _m(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return oge(this, o);
  };
}
function oge(e, t) {
  if (t && (Ns(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return ige(e);
}
function ige(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function age() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function _m(e) {
  return _m = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, _m(e);
}
var rM = /* @__PURE__ */ function(e) {
  rge(r, e);
  var t = nge(r);
  function r(n, o) {
    var i;
    return Qme(this, r), i = t.call(this), i.mergedValuesCache = [], i.aggregationFunction = n, i.fallbackValue = o, i;
  }
  return Jme(r, [{
    key: "getMergedValues",
    value: function() {
      var o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
      if (o === !0)
        return this.mergedValuesCache;
      if (this.getLength() === 0)
        return [];
      for (var i = Ue(this.get(), function(c) {
        return c.getValues();
      }), a = [], l = be(i[0]) && i[0].length || 0, s = 0; s < l; s += 1) {
        for (var u = [], f = 0; f < this.getLength(); f += 1)
          u.push(i[f][s]);
        a.push(u);
      }
      return Ue(a, this.aggregationFunction);
    }
    /**
     * Get merged value for particular index.
     *
     * @param {number} index Index for which we calculate single result.
     * @param {boolean} [readFromCache=true] Determine if read results from the cache.
     * @returns {*}
     */
  }, {
    key: "getMergedValueAtIndex",
    value: function(o, i) {
      var a = this.getMergedValues(i)[o];
      return be(a) ? a : this.fallbackValue;
    }
    /**
     * Rebuild cache for the collection.
     */
  }, {
    key: "updateCache",
    value: function() {
      this.mergedValuesCache = this.getMergedValues(!1);
    }
  }]), r;
}(HT);
function wh(e) {
  "@babel/helpers - typeof";
  return wh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, wh(e);
}
function lge(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function nM(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, uge(n.key), n);
  }
}
function sge(e, t, r) {
  return t && nM(e.prototype, t), r && nM(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function uge(e) {
  var t = fge(e, "string");
  return wh(t) === "symbol" ? t : String(t);
}
function fge(e, t) {
  if (wh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (wh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function cge(e, t, r) {
  hge(e, t), t.set(e, r);
}
function hge(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function dge(e, t, r) {
  var n = JW(e, t, "set");
  return vge(e, n, r), r;
}
function vge(e, t, r) {
  if (t.set)
    t.set.call(e, r);
  else {
    if (!t.writable)
      throw new TypeError("attempted to set read only private field");
    t.value = r;
  }
}
function yge(e, t) {
  var r = JW(e, t, "get");
  return pge(e, r);
}
function JW(e, t, r) {
  if (!t.has(e))
    throw new TypeError("attempted to " + r + " private field on non-instance");
  return t.get(e);
}
function pge(e, t) {
  return t.get ? t.get.call(e) : t.value;
}
var Nw = /* @__PURE__ */ new WeakMap(), e2 = /* @__PURE__ */ function() {
  function e() {
    lge(this, e), cge(this, Nw, {
      writable: !0,
      value: []
    });
  }
  return sge(e, [{
    key: "subscribe",
    value: (
      /**
       * Subscribes to the observer.
       *
       * @param {Function} callback A function that will be called when the new changes will appear.
       * @returns {ChangesObserver}
       */
      function(r) {
        return this.addLocalHook("change", r), this._write(yge(this, Nw)), this;
      }
    )
    /**
     * Unsubscribes all subscriptions. After the method call, the observer would not produce
     * any new events.
     *
     * @returns {ChangesObserver}
     */
  }, {
    key: "unsubscribe",
    value: function() {
      return this.runLocalHooks("unsubscribe"), this.clearLocalHooks(), this;
    }
    /**
     * The write method is executed by the ChangesObservable module. The module produces all
     * changes events that are distributed further by the observer.
     *
     * @private
     * @param {object} changes The chunk of changes produced by the ChangesObservable module.
     * @returns {ChangesObserver}
     */
  }, {
    key: "_write",
    value: function(r) {
      return r.length > 0 && this.runLocalHooks("change", r), this;
    }
    /**
     * The write method is executed by the ChangesObservable module. The module produces initial
     * changes that will be used to notify new subscribers.
     *
     * @private
     * @param {object} initialChanges The chunk of changes produced by the ChangesObservable module.
     */
  }, {
    key: "_writeInitialChanges",
    value: function(r) {
      dge(this, Nw, r);
    }
  }]), e;
}();
bt(e2, $r);
function oM(e, t) {
  for (var r = [], n = 0, o = 0; n < e.length && o < t.length; n++, o++)
    e[n] !== t[o] && r.push({
      op: "replace",
      index: o,
      oldValue: e[n],
      newValue: t[o]
    });
  for (; n < t.length; n++)
    r.push({
      op: "insert",
      index: n,
      oldValue: void 0,
      newValue: t[n]
    });
  for (; o < e.length; o++)
    r.push({
      op: "remove",
      index: o,
      oldValue: e[o],
      newValue: void 0
    });
  return r;
}
function Sh(e) {
  "@babel/helpers - typeof";
  return Sh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Sh(e);
}
function mge(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function iM(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, bge(n.key), n);
  }
}
function gge(e, t, r) {
  return t && iM(e.prototype, t), r && iM(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function bge(e) {
  var t = wge(e, "string");
  return Sh(t) === "symbol" ? t : String(t);
}
function wge(e, t) {
  if (Sh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Sh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Wf(e, t, r) {
  Sge(e, t), t.set(e, r);
}
function Sge(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Yr(e, t) {
  var r = t2(e, t, "get");
  return Cge(e, r);
}
function Cge(e, t) {
  return t.get ? t.get.call(e) : t.value;
}
function ty(e, t, r) {
  var n = t2(e, t, "set");
  return _ge(e, n, r), r;
}
function t2(e, t, r) {
  if (!t.has(e))
    throw new TypeError("attempted to " + r + " private field on non-instance");
  return t.get(e);
}
function _ge(e, t, r) {
  if (t.set)
    t.set.call(e, r);
  else {
    if (!t.writable)
      throw new TypeError("attempted to set read only private field");
    t.value = r;
  }
}
var ry = /* @__PURE__ */ new WeakMap(), Uf = /* @__PURE__ */ new WeakMap(), ny = /* @__PURE__ */ new WeakMap(), oy = /* @__PURE__ */ new WeakMap(), iy = /* @__PURE__ */ new WeakMap(), Oge = /* @__PURE__ */ function() {
  function e() {
    var t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, r = t.initialIndexValue;
    mge(this, e), Wf(this, ry, {
      writable: !0,
      value: /* @__PURE__ */ new Set()
    }), Wf(this, Uf, {
      writable: !0,
      value: []
    }), Wf(this, ny, {
      writable: !0,
      value: []
    }), Wf(this, oy, {
      writable: !0,
      value: !1
    }), Wf(this, iy, {
      writable: !0,
      value: !1
    }), ty(this, iy, r ?? !1);
  }
  return gge(e, [{
    key: "createObserver",
    value: function() {
      var r = this, n = new e2();
      return Yr(this, ry).add(n), n.addLocalHook("unsubscribe", function() {
        Yr(r, ry).delete(n);
      }), n._writeInitialChanges(oM(Yr(this, Uf), Yr(this, ny))), n;
    }
    /**
     * The method is an entry point for triggering new index map changes. Emitting the
     * changes triggers comparing algorithm which compares last saved state with a new
     * state. When there are some differences, the changes are sent to all subscribers.
     *
     * @param {Array} indexesState An array with index map state.
     */
  }, {
    key: "emit",
    value: function(r) {
      var n = Yr(this, ny);
      (!Yr(this, oy) || Yr(this, Uf).length !== r.length) && (r.length === 0 ? r = new Array(n.length).fill(Yr(this, iy)) : ty(this, Uf, new Array(r.length).fill(Yr(this, iy))), Yr(this, oy) || (ty(this, oy, !0), n = Yr(this, Uf)));
      var o = oM(n, r);
      Yr(this, ry).forEach(function(i) {
        return i._write(o);
      }), ty(this, ny, r);
    }
  }]), e;
}();
function Ch(e) {
  "@babel/helpers - typeof";
  return Ch = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Ch(e);
}
var aM;
function Hw(e) {
  return Pge(e) || Tge(e) || Ege(e) || Rge();
}
function Rge() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Ege(e, t) {
  if (e) {
    if (typeof e == "string")
      return M_(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return M_(e, t);
  }
}
function Tge(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function Pge(e) {
  if (Array.isArray(e))
    return M_(e);
}
function M_(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function kge(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } }));
}
function $ge(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function lM(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Ige(n.key), n);
  }
}
function Age(e, t, r) {
  return t && lM(e.prototype, t), r && lM(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Ige(e) {
  var t = Mge(e, "string");
  return Ch(t) === "symbol" ? t : String(t);
}
function Mge(e, t) {
  if (Ch(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Ch(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var sM = /* @__PURE__ */ new Set(["getFirstNotHiddenIndex"]), x_ = /* @__PURE__ */ function() {
  function e() {
    var t = this;
    $ge(this, e), this.indexesSequence = new QW(), this.trimmingMapsCollection = new rM(function(r) {
      return r.some(function(n) {
        return n === !0;
      });
    }, !1), this.hidingMapsCollection = new rM(function(r) {
      return r.some(function(n) {
        return n === !0;
      });
    }, !1), this.variousMapsCollection = new HT(), this.hidingChangesObservable = new Oge({
      initialIndexValue: !1
    }), this.notTrimmedIndexesCache = [], this.notHiddenIndexesCache = [], this.isBatched = !1, this.indexesSequenceChanged = !1, this.indexesChangeSource = void 0, this.trimmedIndexesChanged = !1, this.hiddenIndexesChanged = !1, this.renderablePhysicalIndexesCache = [], this.fromPhysicalToVisualIndexesCache = /* @__PURE__ */ new Map(), this.fromVisualToRenderableIndexesCache = /* @__PURE__ */ new Map(), this.indexesSequence.addLocalHook("change", function() {
      t.indexesSequenceChanged = !0, t.updateCache(), t.runLocalHooks("indexesSequenceChange", t.indexesChangeSource), t.runLocalHooks("change", t.indexesSequence, null);
    }), this.trimmingMapsCollection.addLocalHook("change", function(r) {
      t.trimmedIndexesChanged = !0, t.updateCache(), t.runLocalHooks("change", r, t.trimmingMapsCollection);
    }), this.hidingMapsCollection.addLocalHook("change", function(r) {
      t.hiddenIndexesChanged = !0, t.updateCache(), t.runLocalHooks("change", r, t.hidingMapsCollection);
    }), this.variousMapsCollection.addLocalHook("change", function(r) {
      t.runLocalHooks("change", r, t.variousMapsCollection);
    });
  }
  return Age(e, [{
    key: "suspendOperations",
    value: function() {
      this.isBatched = !0;
    }
    /**
     * Resumes the cache update for this map. It recalculates the cache and restores the
     * default behavior where each map modification updates the cache.
     */
  }, {
    key: "resumeOperations",
    value: function() {
      this.isBatched = !1, this.updateCache();
    }
    /**
     * It creates and returns the new instance of the ChangesObserver object. The object
     * allows listening to the index changes that happen while the Handsontable is running.
     *
     * @param {string} indexMapType The index map type which we want to observe.
     *                              Currently, only the 'hiding' index map types are observable.
     * @returns {ChangesObserver}
     */
  }, {
    key: "createChangesObserver",
    value: function(r) {
      if (r !== "hiding")
        throw new Error('Unsupported index map type "'.concat(r, '".'));
      return this.hidingChangesObservable.createObserver();
    }
    /**
     * Creates and registers a new `IndexMap` for a specified `IndexMapper` instance.
     *
     * @param {string} indexName A unique index name.
     * @param {string} mapType The index map type (e.g., "hiding", "trimming", "physicalIndexToValue").
     * @param {*} [initValueOrFn] The initial value for the index map.
     * @returns {IndexMap}
     */
  }, {
    key: "createAndRegisterIndexMap",
    value: function(r, n, o) {
      return this.registerMap(r, Gme(n, o));
    }
    /**
     * Register map which provide some index mappings. Type of map determining to which collection it will be added.
     *
     * @param {string} uniqueName Name of the index map. It should be unique.
     * @param {IndexMap} indexMap Registered index map updated on items removal and insertion.
     * @returns {IndexMap}
     */
  }, {
    key: "registerMap",
    value: function(r, n) {
      if (this.trimmingMapsCollection.get(r) || this.hidingMapsCollection.get(r) || this.variousMapsCollection.get(r))
        throw Error('Map with name "'.concat(r, '" has been already registered.'));
      n instanceof gv ? this.trimmingMapsCollection.register(r, n) : n instanceof Ig ? this.hidingMapsCollection.register(r, n) : this.variousMapsCollection.register(r, n);
      var o = this.getNumberOfIndexes();
      return o > 0 && n.init(o), n;
    }
    /**
     * Unregister a map with given name.
     *
     * @param {string} name Name of the index map.
     */
  }, {
    key: "unregisterMap",
    value: function(r) {
      this.trimmingMapsCollection.unregister(r), this.hidingMapsCollection.unregister(r), this.variousMapsCollection.unregister(r);
    }
    /**
     * Unregisters all collected index map instances from all map collection types.
     */
  }, {
    key: "unregisterAll",
    value: function() {
      this.trimmingMapsCollection.unregisterAll(), this.hidingMapsCollection.unregisterAll(), this.variousMapsCollection.unregisterAll();
    }
    /**
     * Get a physical index corresponding to the given visual index.
     *
     * @param {number} visualIndex Visual index.
     * @returns {number|null} Returns translated index mapped by passed visual index.
     */
  }, {
    key: "getPhysicalFromVisualIndex",
    value: function(r) {
      var n = this.notTrimmedIndexesCache[r];
      return be(n) ? n : null;
    }
    /**
     * Get a physical index corresponding to the given renderable index.
     *
     * @param {number} renderableIndex Renderable index.
     * @returns {null|number}
     */
  }, {
    key: "getPhysicalFromRenderableIndex",
    value: function(r) {
      var n = this.renderablePhysicalIndexesCache[r];
      return be(n) ? n : null;
    }
    /**
     * Get a visual index corresponding to the given physical index.
     *
     * @param {number} physicalIndex Physical index to search.
     * @returns {number|null} Returns a visual index of the index mapper.
     */
  }, {
    key: "getVisualFromPhysicalIndex",
    value: function(r) {
      var n = this.fromPhysicalToVisualIndexesCache.get(r);
      return be(n) ? n : null;
    }
    /**
     * Get a visual index corresponding to the given renderable index.
     *
     * @param {number} renderableIndex Renderable index.
     * @returns {null|number}
     */
  }, {
    key: "getVisualFromRenderableIndex",
    value: function(r) {
      return this.getVisualFromPhysicalIndex(this.getPhysicalFromRenderableIndex(r));
    }
    /**
     * Get a renderable index corresponding to the given visual index.
     *
     * @param {number} visualIndex Visual index.
     * @returns {null|number}
     */
  }, {
    key: "getRenderableFromVisualIndex",
    value: function(r) {
      var n = this.fromVisualToRenderableIndexesCache.get(r);
      return be(n) ? n : null;
    }
    /**
     * Search for the first visible, not hidden index (represented by a visual index).
     *
     * This method is deprecated and will be removed in a next major version of Handsontable.
     * Use the {@link IndexMapper#getNearestNotHiddenIndex} method instead.
     *
     * @deprecated
     * @param {number} fromVisualIndex Visual start index. Starting point for finding destination index. Start point may be destination
     * point when handled index is NOT hidden.
     * @param {number} incrementBy We are searching for a next visible indexes by increasing (to be precise, or decreasing) indexes.
     * This variable represent indexes shift. We are looking for an index:
     * - for rows: from the top to the bottom (increasing indexes, then variable should have value 1) or
     * other way around (decreasing indexes, then variable should have the value -1)
     * - for columns: from the left to the right (increasing indexes, then variable should have value 1)
     * or other way around (decreasing indexes, then variable should have the value -1).
     * @param {boolean} searchAlsoOtherWayAround The argument determine if an additional other way around search should be
     * performed, when the search in the first direction had no effect in finding visual index.
     * @param {number} indexForNextSearch Visual index for next search, when the flag is truthy.
     *
     * @returns {number|null} Visual column index or `null`.
     */
  }, {
    key: "getFirstNotHiddenIndex",
    value: function(r, n) {
      var o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : r - n;
      sM.has("getFirstNotHiddenIndex") && (sM.delete("getFirstNotHiddenIndex"), ht(ut(aM || (aM = kge([`The method "getFirstNotHiddenIndex" is deprecated and will be removed in the next 
                        major release. Please use "getNearestNotHiddenIndex" instead.`], [`The method "getFirstNotHiddenIndex" is deprecated and will be removed in the next\\x20
                        major release. Please use "getNearestNotHiddenIndex" instead.`])))));
      var a = this.getPhysicalFromVisualIndex(r);
      return a === null ? o === !0 && i !== r - n ? this.getFirstNotHiddenIndex(i, -n, !1, i) : null : this.isHidden(a) === !1 ? r : this.getFirstNotHiddenIndex(r + n, n, o, i);
    }
    /**
     * Search for the nearest not-hidden row or column.
     *
     * @param {number} fromVisualIndex The visual index of the row or column from which the search starts.<br><br>
     * If the row or column from which the search starts is not hidden, the method simply returns the `fromVisualIndex` number.
     * @param {number} searchDirection The search direction.<br><br>`1`: search from `fromVisualIndex` to the end of the dataset.<br><br>
     * `-1`: search from `fromVisualIndex` to the beginning of the dataset (i.e., to the row or column at visual index `0`).
     * @param {boolean} searchAlsoOtherWayAround `true`: if a search in a first direction failed, try the opposite direction.<br><br>
     * `false`: search in one direction only.
     *
     * @returns {number|null} A visual index of a row or column, or `null`.
     */
  }, {
    key: "getNearestNotHiddenIndex",
    value: function(r, n) {
      var o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, i = this.getPhysicalFromVisualIndex(r);
      if (i === null)
        return null;
      if (this.fromVisualToRenderableIndexesCache.has(r))
        return r;
      var a = Array.from(this.fromVisualToRenderableIndexesCache.keys()), l = -1;
      return n > 0 ? l = a.findIndex(function(s) {
        return s > r;
      }) : l = a.reverse().findIndex(function(s) {
        return s < r;
      }), l === -1 ? o ? this.getNearestNotHiddenIndex(r, -n, !1) : null : a[l];
    }
    /**
     * Set default values for all indexes in registered index maps.
     *
     * @param {number} [length] Destination length for all stored index maps.
     */
  }, {
    key: "initToLength",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getNumberOfIndexes();
      this.notTrimmedIndexesCache = Hw(new Array(r).keys()), this.notHiddenIndexesCache = Hw(new Array(r).keys()), this.suspendOperations(), this.indexesChangeSource = "init", this.indexesSequence.init(r), this.indexesChangeSource = void 0, this.trimmingMapsCollection.initEvery(r), this.resumeOperations(), this.suspendOperations(), this.hidingMapsCollection.initEvery(r), this.variousMapsCollection.initEvery(r), this.resumeOperations(), this.runLocalHooks("init");
    }
    /**
     * Trim/extend the mappers to fit the desired length.
     *
     * @param {number} length New mapper length.
     */
  }, {
    key: "fitToLength",
    value: function(r) {
      var n = this.getNumberOfIndexes();
      if (r < n) {
        var o = Hw(Array(this.getNumberOfIndexes() - r).keys()).map(function(i) {
          return i + r;
        });
        this.removeIndexes(o);
      } else
        this.insertIndexes(n, r - n);
    }
    /**
     * Get sequence of indexes.
     *
     * @returns {Array} Physical indexes.
     */
  }, {
    key: "getIndexesSequence",
    value: function() {
      return this.indexesSequence.getValues();
    }
    /**
     * Set completely new indexes sequence.
     *
     * @param {Array} indexes Physical indexes.
     */
  }, {
    key: "setIndexesSequence",
    value: function(r) {
      this.indexesChangeSource === void 0 && (this.indexesChangeSource = "update"), this.indexesSequence.setValues(r), this.indexesChangeSource === "update" && (this.indexesChangeSource = void 0);
    }
    /**
     * Get all NOT trimmed indexes.
     *
     * Note: Indexes marked as trimmed aren't included in a {@link DataMap} and aren't rendered.
     *
     * @param {boolean} [readFromCache=true] Determine if read indexes from cache.
     * @returns {Array} List of physical indexes. Index of this native array is a "visual index",
     * value of this native array is a "physical index".
     */
  }, {
    key: "getNotTrimmedIndexes",
    value: function() {
      var r = this, n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
      if (n === !0)
        return this.notTrimmedIndexesCache;
      var o = this.getIndexesSequence();
      return o.filter(function(i) {
        return r.isTrimmed(i) === !1;
      });
    }
    /**
     * Get length of all NOT trimmed indexes.
     *
     * Note: Indexes marked as trimmed aren't included in a {@link DataMap} and aren't rendered.
     *
     * @returns {number}
     */
  }, {
    key: "getNotTrimmedIndexesLength",
    value: function() {
      return this.getNotTrimmedIndexes().length;
    }
    /**
     * Get all NOT hidden indexes.
     *
     * Note: Indexes marked as hidden are included in a {@link DataMap}, but aren't rendered.
     *
     * @param {boolean} [readFromCache=true] Determine if read indexes from cache.
     * @returns {Array} List of physical indexes. Please keep in mind that index of this native array IS NOT a "visual index".
     */
  }, {
    key: "getNotHiddenIndexes",
    value: function() {
      var r = this, n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
      if (n === !0)
        return this.notHiddenIndexesCache;
      var o = this.getIndexesSequence();
      return o.filter(function(i) {
        return r.isHidden(i) === !1;
      });
    }
    /**
     * Get length of all NOT hidden indexes.
     *
     * Note: Indexes marked as hidden are included in a {@link DataMap}, but aren't rendered.
     *
     * @returns {number}
     */
  }, {
    key: "getNotHiddenIndexesLength",
    value: function() {
      return this.getNotHiddenIndexes().length;
    }
    /**
     * Get list of physical indexes (respecting the sequence of indexes) which may be rendered (when they are in a viewport).
     *
     * @param {boolean} [readFromCache=true] Determine if read indexes from cache.
     * @returns {Array} List of physical indexes. Index of this native array is a "renderable index",
     * value of this native array is a "physical index".
     */
  }, {
    key: "getRenderableIndexes",
    value: function() {
      var r = this, n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
      if (n === !0)
        return this.renderablePhysicalIndexesCache;
      var o = this.getNotTrimmedIndexes();
      return o.filter(function(i) {
        return r.isHidden(i) === !1;
      });
    }
    /**
     * Get length of all NOT trimmed and NOT hidden indexes.
     *
     * @returns {number}
     */
  }, {
    key: "getRenderableIndexesLength",
    value: function() {
      return this.getRenderableIndexes().length;
    }
    /**
     * Get number of all indexes.
     *
     * @returns {number}
     */
  }, {
    key: "getNumberOfIndexes",
    value: function() {
      return this.getIndexesSequence().length;
    }
    /**
     * Move indexes in the index mapper.
     *
     * @param {number|Array} movedIndexes Visual index(es) to move.
     * @param {number} finalIndex Visual index being a start index for the moved elements.
     */
  }, {
    key: "moveIndexes",
    value: function(r, n) {
      var o = this;
      typeof r == "number" && (r = [r]);
      var i = Ue(r, function(c) {
        return o.getPhysicalFromVisualIndex(c);
      }), a = this.getNotTrimmedIndexesLength(), l = r.length, s = gh(this.getIndexesSequence(), i), u = a - l;
      if (n + l < a) {
        var f = s.filter(function(c) {
          return o.isTrimmed(c) === !1;
        })[n];
        u = s.indexOf(f);
      }
      this.indexesChangeSource = "move", this.setIndexesSequence(xT(s, u, i)), this.indexesChangeSource = void 0;
    }
    /**
     * Get whether index is trimmed. Index marked as trimmed isn't included in a {@link DataMap} and isn't rendered.
     *
     * @param {number} physicalIndex Physical index.
     * @returns {boolean}
     */
  }, {
    key: "isTrimmed",
    value: function(r) {
      return this.trimmingMapsCollection.getMergedValueAtIndex(r);
    }
    /**
     * Get whether index is hidden. Index marked as hidden is included in a {@link DataMap}, but isn't rendered.
     *
     * @param {number} physicalIndex Physical index.
     * @returns {boolean}
     */
  }, {
    key: "isHidden",
    value: function(r) {
      return this.hidingMapsCollection.getMergedValueAtIndex(r);
    }
    /**
     * Insert new indexes and corresponding mapping and update values of the others, for all stored index maps.
     *
     * @private
     * @param {number} firstInsertedVisualIndex First inserted visual index.
     * @param {number} amountOfIndexes Amount of inserted indexes.
     */
  }, {
    key: "insertIndexes",
    value: function(r, n) {
      var o = this.getNotTrimmedIndexes()[r], i = be(o) ? o : this.getNumberOfIndexes(), a = this.getIndexesSequence().includes(o) ? this.getIndexesSequence().indexOf(o) : this.getNumberOfIndexes(), l = Ue(new Array(n).fill(i), function(s, u) {
        return s + u;
      });
      this.suspendOperations(), this.indexesChangeSource = "insert", this.indexesSequence.insert(a, l), this.indexesChangeSource = void 0, this.trimmingMapsCollection.insertToEvery(a, l), this.hidingMapsCollection.insertToEvery(a, l), this.variousMapsCollection.insertToEvery(a, l), this.resumeOperations();
    }
    /**
     * Remove some indexes and corresponding mappings and update values of the others, for all stored index maps.
     *
     * @private
     * @param {Array} removedIndexes List of removed indexes.
     */
  }, {
    key: "removeIndexes",
    value: function(r) {
      this.suspendOperations(), this.indexesChangeSource = "remove", this.indexesSequence.remove(r), this.indexesChangeSource = void 0, this.trimmingMapsCollection.removeFromEvery(r), this.hidingMapsCollection.removeFromEvery(r), this.variousMapsCollection.removeFromEvery(r), this.resumeOperations();
    }
    /**
     * Rebuild cache for some indexes. Every action on indexes sequence or indexes skipped in the process of rendering
     * by default reset cache, thus batching some index maps actions is recommended.
     *
     * @private
     * @param {boolean} [force=false] Determine if force cache update.
     */
  }, {
    key: "updateCache",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, n = this.indexesSequenceChanged || this.trimmedIndexesChanged || this.hiddenIndexesChanged;
      (r === !0 || this.isBatched === !1 && n === !0) && (this.trimmingMapsCollection.updateCache(), this.hidingMapsCollection.updateCache(), this.notTrimmedIndexesCache = this.getNotTrimmedIndexes(!1), this.notHiddenIndexesCache = this.getNotHiddenIndexes(!1), this.renderablePhysicalIndexesCache = this.getRenderableIndexes(!1), this.cacheFromPhysicalToVisualIndexes(), this.cacheFromVisualToRenderableIndexes(), this.hiddenIndexesChanged && this.hidingChangesObservable.emit(this.hidingMapsCollection.getMergedValues()), this.runLocalHooks("cacheUpdated", {
        indexesSequenceChanged: this.indexesSequenceChanged,
        trimmedIndexesChanged: this.trimmedIndexesChanged,
        hiddenIndexesChanged: this.hiddenIndexesChanged
      }), this.indexesSequenceChanged = !1, this.trimmedIndexesChanged = !1, this.hiddenIndexesChanged = !1);
    }
    /**
     * Update cache for translations from physical to visual indexes.
     *
     * @private
     */
  }, {
    key: "cacheFromPhysicalToVisualIndexes",
    value: function() {
      var r = this.getNotTrimmedIndexesLength();
      this.fromPhysicalToVisualIndexesCache.clear();
      for (var n = 0; n < r; n += 1) {
        var o = this.getPhysicalFromVisualIndex(n);
        this.fromPhysicalToVisualIndexesCache.set(o, n);
      }
    }
    /**
     * Update cache for translations from visual to renderable indexes.
     *
     * @private
     */
  }, {
    key: "cacheFromVisualToRenderableIndexes",
    value: function() {
      var r = this.getRenderableIndexesLength();
      this.fromVisualToRenderableIndexesCache.clear();
      for (var n = 0; n < r; n += 1) {
        var o = this.getPhysicalFromRenderableIndex(n), i = this.getVisualFromPhysicalIndex(o);
        this.fromVisualToRenderableIndexesCache.set(i, n);
      }
    }
  }]), e;
}();
bt(x_, $r);
var uM;
function xge(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } }));
}
function Dge(e, t) {
  return Ye(t, function(r, n) {
    gt(e[n]) && (e[n] = r);
  }), e;
}
function r2(e) {
  var t = /^([a-zA-Z]{2})-([a-zA-Z]{2})$/, r = t.exec(e);
  return r ? "".concat(r[1].toLowerCase(), "-").concat(r[2].toUpperCase()) : e;
}
function n2(e) {
  be(e) && yT(ut(uM || (uM = xge(['Language with code "', `" was not found. You should register particular language 
    before using it. Read more about this issue at: https://docs.handsontable.com/i18n/missing-language-code.`], ['Language with code "', `" was not found. You should register particular language\\x20
    before using it. Read more about this issue at: https://docs.handsontable.com/i18n/missing-language-code.`])), e));
}
function Nge(e, t) {
  var r = Array.isArray(e) && Number.isInteger(t);
  return r ? e[t] : e;
}
var o2 = nn("phraseFormatters"), Hge = o2.register, Lge = o2.getValues;
function jge(e, t) {
  Hge(e, t);
}
function Fge() {
  return Lge();
}
jge("pluralize", Nge);
var i2 = "ContextMenu:items", je = i2, LT = "".concat(je, ".noItems"), jT = "".concat(je, ".insertRowAbove"), FT = "".concat(je, ".insertRowBelow"), BT = "".concat(je, ".insertColumnOnTheLeft"), VT = "".concat(je, ".insertColumnOnTheRight"), WT = "".concat(je, ".removeRow"), UT = "".concat(je, ".removeColumn"), zT = "".concat(je, ".undo"), YT = "".concat(je, ".redo"), GT = "".concat(je, ".readOnly"), KT = "".concat(je, ".clearColumn"), qT = "".concat(je, ".copy"), XT = "".concat(je, ".copyWithHeaders"), ZT = "".concat(je, ".copyWithGroupHeaders"), QT = "".concat(je, ".copyHeadersOnly"), JT = "".concat(je, ".cut"), e0 = "".concat(je, ".freezeColumn"), t0 = "".concat(je, ".unfreezeColumn"), r0 = "".concat(je, ".mergeCells"), n0 = "".concat(je, ".unmergeCells"), o0 = "".concat(je, ".addComment"), i0 = "".concat(je, ".editComment"), a0 = "".concat(je, ".removeComment"), l0 = "".concat(je, ".readOnlyComment"), s0 = "".concat(je, ".align"), u0 = "".concat(je, ".align.left"), f0 = "".concat(je, ".align.center"), c0 = "".concat(je, ".align.right"), h0 = "".concat(je, ".align.justify"), d0 = "".concat(je, ".align.top"), v0 = "".concat(je, ".align.middle"), y0 = "".concat(je, ".align.bottom"), p0 = "".concat(je, ".borders"), m0 = "".concat(je, ".borders.top"), g0 = "".concat(je, ".borders.right"), b0 = "".concat(je, ".borders.bottom"), w0 = "".concat(je, ".borders.left"), S0 = "".concat(je, ".borders.remove"), C0 = "".concat(je, ".nestedHeaders.insertChildRow"), _0 = "".concat(je, ".nestedHeaders.detachFromParent"), O0 = "".concat(je, ".hideColumn"), R0 = "".concat(je, ".showColumn"), E0 = "".concat(je, ".hideRow"), T0 = "".concat(je, ".showRow"), wr = "Filters:", Mt = "".concat(wr, "conditions"), xg = "".concat(Mt, ".none"), P0 = "".concat(Mt, ".isEmpty"), k0 = "".concat(Mt, ".isNotEmpty"), $0 = "".concat(Mt, ".isEqualTo"), A0 = "".concat(Mt, ".isNotEqualTo"), I0 = "".concat(Mt, ".beginsWith"), M0 = "".concat(Mt, ".endsWith"), x0 = "".concat(Mt, ".contains"), D0 = "".concat(Mt, ".doesNotContain"), Bge = "".concat(Mt, ".byValue"), N0 = "".concat(Mt, ".greaterThan"), H0 = "".concat(Mt, ".greaterThanOrEqualTo"), L0 = "".concat(Mt, ".lessThan"), j0 = "".concat(Mt, ".lessThanOrEqualTo"), F0 = "".concat(Mt, ".isBetween"), B0 = "".concat(Mt, ".isNotBetween"), V0 = "".concat(Mt, ".after"), W0 = "".concat(Mt, ".before"), U0 = "".concat(Mt, ".today"), z0 = "".concat(Mt, ".tomorrow"), Y0 = "".concat(Mt, ".yesterday"), G0 = "".concat(wr, "labels.filterByCondition"), K0 = "".concat(wr, "labels.filterByValue"), q0 = "".concat(wr, "labels.conjunction"), Dg = "".concat(wr, "labels.disjunction"), Om = "".concat(wr, "values.blankCells"), X0 = "".concat(wr, "buttons.selectAll"), Z0 = "".concat(wr, "buttons.clear"), Q0 = "".concat(wr, "buttons.ok"), J0 = "".concat(wr, "buttons.cancel"), eP = "".concat(wr, "buttons.placeholder.search"), tP = "".concat(wr, "buttons.placeholder.value"), rP = "".concat(wr, "buttons.placeholder.secondValue");
const Vge = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  CONTEXTMENU_ITEMS_ADD_COMMENT: o0,
  CONTEXTMENU_ITEMS_ALIGNMENT: s0,
  CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM: y0,
  CONTEXTMENU_ITEMS_ALIGNMENT_CENTER: f0,
  CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY: h0,
  CONTEXTMENU_ITEMS_ALIGNMENT_LEFT: u0,
  CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE: v0,
  CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT: c0,
  CONTEXTMENU_ITEMS_ALIGNMENT_TOP: d0,
  CONTEXTMENU_ITEMS_BORDERS: p0,
  CONTEXTMENU_ITEMS_BORDERS_BOTTOM: b0,
  CONTEXTMENU_ITEMS_BORDERS_LEFT: w0,
  CONTEXTMENU_ITEMS_BORDERS_RIGHT: g0,
  CONTEXTMENU_ITEMS_BORDERS_TOP: m0,
  CONTEXTMENU_ITEMS_CLEAR_COLUMN: KT,
  CONTEXTMENU_ITEMS_COPY: qT,
  CONTEXTMENU_ITEMS_COPY_COLUMN_HEADERS_ONLY: QT,
  CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_GROUP_HEADERS: ZT,
  CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_HEADERS: XT,
  CONTEXTMENU_ITEMS_CUT: JT,
  CONTEXTMENU_ITEMS_EDIT_COMMENT: i0,
  CONTEXTMENU_ITEMS_FREEZE_COLUMN: e0,
  CONTEXTMENU_ITEMS_HIDE_COLUMN: O0,
  CONTEXTMENU_ITEMS_HIDE_ROW: E0,
  CONTEXTMENU_ITEMS_INSERT_LEFT: BT,
  CONTEXTMENU_ITEMS_INSERT_RIGHT: VT,
  CONTEXTMENU_ITEMS_MERGE_CELLS: r0,
  CONTEXTMENU_ITEMS_NESTED_ROWS_DETACH_CHILD: _0,
  CONTEXTMENU_ITEMS_NESTED_ROWS_INSERT_CHILD: C0,
  CONTEXTMENU_ITEMS_NO_ITEMS: LT,
  CONTEXTMENU_ITEMS_READ_ONLY: GT,
  CONTEXTMENU_ITEMS_READ_ONLY_COMMENT: l0,
  CONTEXTMENU_ITEMS_REDO: YT,
  CONTEXTMENU_ITEMS_REMOVE_BORDERS: S0,
  CONTEXTMENU_ITEMS_REMOVE_COLUMN: UT,
  CONTEXTMENU_ITEMS_REMOVE_COMMENT: a0,
  CONTEXTMENU_ITEMS_REMOVE_ROW: WT,
  CONTEXTMENU_ITEMS_ROW_ABOVE: jT,
  CONTEXTMENU_ITEMS_ROW_BELOW: FT,
  CONTEXTMENU_ITEMS_SHOW_COLUMN: R0,
  CONTEXTMENU_ITEMS_SHOW_ROW: T0,
  CONTEXTMENU_ITEMS_UNDO: zT,
  CONTEXTMENU_ITEMS_UNFREEZE_COLUMN: t0,
  CONTEXTMENU_ITEMS_UNMERGE_CELLS: n0,
  CONTEXT_MENU_ITEMS_NAMESPACE: i2,
  FILTERS_BUTTONS_CANCEL: J0,
  FILTERS_BUTTONS_CLEAR: Z0,
  FILTERS_BUTTONS_OK: Q0,
  FILTERS_BUTTONS_PLACEHOLDER_SEARCH: eP,
  FILTERS_BUTTONS_PLACEHOLDER_SECOND_VALUE: rP,
  FILTERS_BUTTONS_PLACEHOLDER_VALUE: tP,
  FILTERS_BUTTONS_SELECT_ALL: X0,
  FILTERS_CONDITIONS_AFTER: V0,
  FILTERS_CONDITIONS_BEFORE: W0,
  FILTERS_CONDITIONS_BEGINS_WITH: I0,
  FILTERS_CONDITIONS_BETWEEN: F0,
  FILTERS_CONDITIONS_BY_VALUE: Bge,
  FILTERS_CONDITIONS_CONTAINS: x0,
  FILTERS_CONDITIONS_EMPTY: P0,
  FILTERS_CONDITIONS_ENDS_WITH: M0,
  FILTERS_CONDITIONS_EQUAL: $0,
  FILTERS_CONDITIONS_GREATER_THAN: N0,
  FILTERS_CONDITIONS_GREATER_THAN_OR_EQUAL: H0,
  FILTERS_CONDITIONS_LESS_THAN: L0,
  FILTERS_CONDITIONS_LESS_THAN_OR_EQUAL: j0,
  FILTERS_CONDITIONS_NAMESPACE: Mt,
  FILTERS_CONDITIONS_NONE: xg,
  FILTERS_CONDITIONS_NOT_BETWEEN: B0,
  FILTERS_CONDITIONS_NOT_CONTAIN: D0,
  FILTERS_CONDITIONS_NOT_EMPTY: k0,
  FILTERS_CONDITIONS_NOT_EQUAL: A0,
  FILTERS_CONDITIONS_TODAY: U0,
  FILTERS_CONDITIONS_TOMORROW: z0,
  FILTERS_CONDITIONS_YESTERDAY: Y0,
  FILTERS_DIVS_FILTER_BY_CONDITION: G0,
  FILTERS_DIVS_FILTER_BY_VALUE: K0,
  FILTERS_LABELS_CONJUNCTION: q0,
  FILTERS_LABELS_DISJUNCTION: Dg,
  FILTERS_NAMESPACE: wr,
  FILTERS_VALUES_BLANK_CELLS: Om
}, Symbol.toStringTag, { value: "Module" }));
function _h(e) {
  "@babel/helpers - typeof";
  return _h = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, _h(e);
}
var he;
function de(e, t, r) {
  return t = Wge(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function Wge(e) {
  var t = Uge(e, "string");
  return _h(t) === "symbol" ? t : String(t);
}
function Uge(e, t) {
  if (_h(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (_h(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var zge = (he = {
  languageCode: "en-US"
}, de(he, LT, "No available options"), de(he, jT, "Insert row above"), de(he, FT, "Insert row below"), de(he, BT, "Insert column left"), de(he, VT, "Insert column right"), de(he, WT, ["Remove row", "Remove rows"]), de(he, UT, ["Remove column", "Remove columns"]), de(he, zT, "Undo"), de(he, YT, "Redo"), de(he, GT, "Read only"), de(he, KT, "Clear column"), de(he, s0, "Alignment"), de(he, u0, "Left"), de(he, f0, "Center"), de(he, c0, "Right"), de(he, h0, "Justify"), de(he, d0, "Top"), de(he, v0, "Middle"), de(he, y0, "Bottom"), de(he, e0, "Freeze column"), de(he, t0, "Unfreeze column"), de(he, p0, "Borders"), de(he, m0, "Top"), de(he, g0, "Right"), de(he, b0, "Bottom"), de(he, w0, "Left"), de(he, S0, "Remove border(s)"), de(he, o0, "Add comment"), de(he, i0, "Edit comment"), de(he, a0, "Delete comment"), de(he, l0, "Read-only comment"), de(he, r0, "Merge cells"), de(he, n0, "Unmerge cells"), de(he, qT, "Copy"), de(he, XT, ["Copy with header", "Copy with headers"]), de(he, ZT, ["Copy with group header", "Copy with group headers"]), de(he, QT, ["Copy header only", "Copy headers only"]), de(he, JT, "Cut"), de(he, C0, "Insert child row"), de(he, _0, "Detach from parent"), de(he, O0, ["Hide column", "Hide columns"]), de(he, R0, ["Show column", "Show columns"]), de(he, E0, ["Hide row", "Hide rows"]), de(he, T0, ["Show row", "Show rows"]), de(he, xg, "None"), de(he, P0, "Is empty"), de(he, k0, "Is not empty"), de(he, $0, "Is equal to"), de(he, A0, "Is not equal to"), de(he, I0, "Begins with"), de(he, M0, "Ends with"), de(he, x0, "Contains"), de(he, D0, "Does not contain"), de(he, N0, "Greater than"), de(he, H0, "Greater than or equal to"), de(he, L0, "Less than"), de(he, j0, "Less than or equal to"), de(he, F0, "Is between"), de(he, B0, "Is not between"), de(he, V0, "After"), de(he, W0, "Before"), de(he, U0, "Today"), de(he, z0, "Tomorrow"), de(he, Y0, "Yesterday"), de(he, Om, "Blank cells"), de(he, G0, "Filter by condition"), de(he, K0, "Filter by value"), de(he, q0, "And"), de(he, Dg, "Or"), de(he, X0, "Select all"), de(he, Z0, "Clear"), de(he, Q0, "OK"), de(he, J0, "Cancel"), de(he, eP, "Search"), de(he, tP, "Value"), de(he, rP, "Second value"), he);
const a2 = zge;
var D_ = a2.languageCode, Ng = nn("languagesDictionaries"), Yge = Ng.register, l2 = Ng.getItem, Gge = Ng.hasItem, Kge = Ng.getValues;
s2(a2);
function s2(e, t) {
  var r = e, n = t;
  return ze(e) && (n = e, r = n.languageCode), qge(r, n), Yge(r, mr(n)), mr(n);
}
function qge(e, t) {
  e !== D_ && Dge(t, l2(D_));
}
function u2(e) {
  return nP(e) ? mr(l2(e)) : null;
}
function nP(e) {
  return Gge(e);
}
function Xge() {
  return Kge();
}
function f2(e, t, r) {
  var n = u2(e);
  if (n === null)
    return null;
  var o = n[t];
  if (gt(o))
    return null;
  var i = Zge(o, r);
  return Array.isArray(i) ? i[0] : i;
}
function Zge(e, t) {
  var r = e;
  return I(Fge(), function(n) {
    r = n(e, t);
  }), r;
}
function Qge(e) {
  var t = r2(e);
  return nP(t) || (t = D_, n2(e)), t;
}
var Jge = Ie, ebe = Bt, tbe = Ej, rbe = Vr, nbe = Bn, obe = gf;
Jge({ target: "Object", stat: !0, sham: !ebe }, {
  getOwnPropertyDescriptors: function(t) {
    for (var r = rbe(t), n = nbe.f, o = tbe(r), i = {}, a = 0, l, s; o.length > a; )
      s = n(r, l = o[a++]), s !== void 0 && obe(i, l, s);
    return i;
  }
});
var Hg = "active-header", Lg = "area", Oh = "cell", oP = "fill", bv = "header", iP = "custom-selection";
function Hs(e) {
  "@babel/helpers - typeof";
  return Hs = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Hs(e);
}
function ibe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function fM(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, h2(n.key), n);
  }
}
function abe(e, t, r) {
  return t && fM(e.prototype, t), r && fM(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function sp() {
  return typeof Reflect < "u" && Reflect.get ? sp = Reflect.get.bind() : sp = function(t, r, n) {
    var o = lbe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, sp.apply(this, arguments);
}
function lbe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Ls(e), e !== null); )
    ;
  return e;
}
function sbe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && N_(e, t);
}
function N_(e, t) {
  return N_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, N_(e, t);
}
function ube(e) {
  var t = cbe();
  return function() {
    var n = Ls(e), o;
    if (t) {
      var i = Ls(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return fbe(this, o);
  };
}
function fbe(e, t) {
  if (t && (Hs(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return c2(e);
}
function c2(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function cbe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Ls(e) {
  return Ls = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Ls(e);
}
function hbe(e, t, r) {
  return t = h2(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function h2(e) {
  var t = dbe(e, "string");
  return Hs(t) === "symbol" ? t : String(t);
}
function dbe(e, t) {
  if (Hs(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Hs(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var vbe = /* @__PURE__ */ function(e) {
  sbe(r, e);
  var t = ube(r);
  function r(n, o) {
    var i;
    return ibe(this, r), i = t.call(this, n, null), hbe(c2(i), "visualCellRange", null), i.visualCellRange = o || null, i.commit(), i;
  }
  return abe(r, [{
    key: "add",
    value: function(o) {
      return this.visualCellRange === null ? this.visualCellRange = this.settings.createCellRange(o) : this.visualCellRange.expand(o), this;
    }
    /**
     * Clears visual and renderable selection.
     *
     * @returns {VisualSelection}
     */
  }, {
    key: "clear",
    value: function() {
      return this.visualCellRange = null, sp(Ls(r.prototype), "clear", this).call(this);
    }
    /**
     * Trims the passed cell range object by removing all coordinates that points to the hidden rows
     * or columns. The result is a new cell range object that points only to the visible indexes or `null`.
     *
     * @private
     * @param {CellRange} cellRange Cells range object to be trimmed.
     * @returns {CellRange} Visual non-hidden cells range coordinates.
     */
  }, {
    key: "trimToVisibleCellsRangeOnly",
    value: function(o) {
      var i = o.from, a = o.to, l = this.getNearestNotHiddenCoords(i, 1), s = this.getNearestNotHiddenCoords(a, -1);
      if (l === null || s === null)
        return null;
      if (l.row > s.row || l.col > s.col) {
        var u = this.settings.type === "header" || this.settings.type === "active-header";
        if (!u)
          return null;
        l = i, s = a;
      }
      return this.settings.createCellRange(l, l, s);
    }
    /**
     * Gets nearest coordinates that points to the visible row and column indexes. If there are no visible
     * rows and/or columns the `null` value is returned.
     *
     * @private
     * @param {CellCoords} coords The coords object as starting point for finding the nearest visible coordinates.
     * @param {1|-1} rowSearchDirection The search direction. For value 1, it means searching from top to bottom for
     *                                  rows and from left to right for columns. For -1, it is the other way around.
     * @param {1|-1} columnSearchDirection The same as above but for rows.
     * @returns {CellCoords|null} Visual cell coordinates.
     */
  }, {
    key: "getNearestNotHiddenCoords",
    value: function(o, i) {
      var a = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : i, l = this.getNearestNotHiddenIndex(this.settings.rowIndexMapper(), o.row, i);
      if (l === null)
        return null;
      var s = this.getNearestNotHiddenIndex(this.settings.columnIndexMapper(), o.col, a);
      return s === null ? null : this.settings.createCellCoords(l, s);
    }
    /**
     * Gets nearest visual index. If there are no visible rows or columns the `null` value is returned.
     *
     * @private
     * @param {IndexMapper} indexMapper The IndexMapper instance for specific axis.
     * @param {number} visualIndex The index as starting point for finding the nearest visible index.
     * @param {1|-1} searchDirection The search direction. For value 1, it means searching from top to bottom for
     *                               rows and from left to right for columns. For -1, it is the other way around.
     * @returns {number|null} Visual row/column index.
     */
  }, {
    key: "getNearestNotHiddenIndex",
    value: function(o, i, a) {
      if (i < 0)
        return i;
      var l = o.getNearestNotHiddenIndex(i, a), s = this.settings.type === "header" || this.settings.type === "active-header";
      return s && l === null ? -1 : l;
    }
    /**
     * Override internally stored visual indexes added by the Selection's `add` function. It should be executed
     * at the end of process of adding visual selection coordinates.
     *
     * @returns {VisualSelection}
     */
  }, {
    key: "commit",
    value: function() {
      if (this.visualCellRange === null)
        return this;
      var o = this.trimToVisibleCellsRangeOnly(this.visualCellRange);
      return o === null ? this.cellRange = null : this.cellRange = this.createRenderableCellRange(o.from, o.to), this;
    }
    /**
     * Some selection may be a part of broader cell range. This function sync coordinates of current selection
     * and the broader cell range when needed (current selection can't be presented visually).
     *
     * @param {CellRange} broaderCellRange Visual range. Actual cell range may be contained in the broader cell range.
     * When there is no way to represent some cell range visually we try to find range containing just the first visible cell.
     *
     * Warn: Please keep in mind that this function may change coordinates of the handled broader range.
     *
     * @returns {VisualSelection}
     */
  }, {
    key: "syncWith",
    value: function(o) {
      var i = o.getVerticalDirection() === "N-S" ? 1 : -1, a = o.getHorizontalDirection() === "W-E" ? 1 : -1, l = this.getNearestNotHiddenCoords(o.from.clone().normalize(), i, a);
      if (l !== null && o.overlaps(l)) {
        if (this.cellRange === null) {
          var s = this.settings.visualToRenderableCoords(l);
          this.cellRange = this.settings.createCellRange(s);
        }
        return o.setHighlight(l), this;
      }
      return o.setHighlight(o.from), this;
    }
    /**
     * Returns the top left (TL) and bottom right (BR) selection coordinates (renderable indexes).
     * The method overwrites the original method to support header selection for hidden cells.
     * To make the header selection working, the CellCoords and CellRange have to support not
     * complete coordinates (`null` values for example, `row: null`, `col: 2`).
     *
     * @returns {Array} Returns array of coordinates for example `[1, 1, 5, 5]`.
     */
  }, {
    key: "getCorners",
    value: function() {
      var o = this.cellRange, i = o.from, a = o.to, l = i.row === null || a.row === null, s = i.col === null || a.col === null, u = this.settings.createCellCoords(l ? null : Math.min(i.row, a.row), s ? null : Math.min(i.col, a.col)), f = this.settings.createCellCoords(l ? null : Math.max(i.row, a.row), s ? null : Math.max(i.col, a.col));
      return [u.row, u.col, f.row, f.col];
    }
    /**
     * Returns the top left (or top right in RTL) and bottom right (or bottom left in RTL) selection
     * coordinates (visual indexes).
     *
     * @returns {Array} Returns array of coordinates for example `[1, 1, 5, 5]`.
     */
  }, {
    key: "getVisualCorners",
    value: function() {
      var o = this.settings.renderableToVisualCoords(this.cellRange.getTopStartCorner()), i = this.settings.renderableToVisualCoords(this.cellRange.getBottomEndCorner());
      return [o.row, o.col, i.row, i.col];
    }
    /**
     * Creates a new CellRange object based on visual coordinates which before object creation are
     * translated to renderable indexes.
     *
     * @param {CellCoords} visualFromCoords The CellCoords object which contains coordinates that
     *                                      points to the beginning of the selection.
     * @param {CellCoords} visualToCoords The CellCoords object which contains coordinates that
     *                                    points to the end of the selection.
     * @returns {CellRange}
     */
  }, {
    key: "createRenderableCellRange",
    value: function(o, i) {
      var a = this.settings.visualToRenderableCoords(o), l = this.settings.visualToRenderableCoords(i);
      return this.settings.createCellRange(a, a, l);
    }
  }]), r;
}(qye);
const Rf = vbe;
function Rh(e) {
  "@babel/helpers - typeof";
  return Rh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Rh(e);
}
var ybe = ["activeHeaderClassName"];
function cM(e, t) {
  var r = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    t && (n = n.filter(function(o) {
      return Object.getOwnPropertyDescriptor(e, o).enumerable;
    })), r.push.apply(r, n);
  }
  return r;
}
function hM(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? cM(Object(r), !0).forEach(function(n) {
      pbe(e, n, r[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : cM(Object(r)).forEach(function(n) {
      Object.defineProperty(e, n, Object.getOwnPropertyDescriptor(r, n));
    });
  }
  return e;
}
function pbe(e, t, r) {
  return t = mbe(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function mbe(e) {
  var t = gbe(e, "string");
  return Rh(t) === "symbol" ? t : String(t);
}
function gbe(e, t) {
  if (Rh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Rh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function bbe(e, t) {
  if (e == null)
    return {};
  var r = wbe(e, t), n, o;
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(e);
    for (o = 0; o < i.length; o++)
      n = i[o], !(t.indexOf(n) >= 0) && Object.prototype.propertyIsEnumerable.call(e, n) && (r[n] = e[n]);
  }
  return r;
}
function wbe(e, t) {
  if (e == null)
    return {};
  var r = {}, n = Object.keys(e), o, i;
  for (i = 0; i < n.length; i++)
    o = n[i], !(t.indexOf(o) >= 0) && (r[o] = e[o]);
  return r;
}
function Sbe(e) {
  var t = e.activeHeaderClassName, r = bbe(e, ybe), n = new Rf(hM(hM({
    highlightHeaderClassName: t
  }, r), {}, {
    selectionType: Hg
  }));
  return n;
}
function Eh(e) {
  "@babel/helpers - typeof";
  return Eh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Eh(e);
}
var Cbe = ["layerLevel", "areaCornerVisible"];
function dM(e, t) {
  var r = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    t && (n = n.filter(function(o) {
      return Object.getOwnPropertyDescriptor(e, o).enumerable;
    })), r.push.apply(r, n);
  }
  return r;
}
function vM(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? dM(Object(r), !0).forEach(function(n) {
      _be(e, n, r[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : dM(Object(r)).forEach(function(n) {
      Object.defineProperty(e, n, Object.getOwnPropertyDescriptor(r, n));
    });
  }
  return e;
}
function _be(e, t, r) {
  return t = Obe(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function Obe(e) {
  var t = Rbe(e, "string");
  return Eh(t) === "symbol" ? t : String(t);
}
function Rbe(e, t) {
  if (Eh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Eh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Ebe(e, t) {
  if (e == null)
    return {};
  var r = Tbe(e, t), n, o;
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(e);
    for (o = 0; o < i.length; o++)
      n = i[o], !(t.indexOf(n) >= 0) && Object.prototype.propertyIsEnumerable.call(e, n) && (r[n] = e[n]);
  }
  return r;
}
function Tbe(e, t) {
  if (e == null)
    return {};
  var r = {}, n = Object.keys(e), o, i;
  for (i = 0; i < n.length; i++)
    o = n[i], !(t.indexOf(o) >= 0) && (r[o] = e[o]);
  return r;
}
function Pbe(e) {
  var t = e.layerLevel, r = e.areaCornerVisible, n = Ebe(e, Cbe), o = new Rf(vM(vM({
    className: "area",
    markIntersections: !0,
    layerLevel: Math.min(t, 7),
    border: {
      width: 1,
      color: "#4b89ff",
      cornerVisible: r
    }
  }, n), {}, {
    selectionType: Lg
  }));
  return o;
}
function Th(e) {
  "@babel/helpers - typeof";
  return Th = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Th(e);
}
var kbe = ["cellCornerVisible"];
function yM(e, t) {
  var r = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    t && (n = n.filter(function(o) {
      return Object.getOwnPropertyDescriptor(e, o).enumerable;
    })), r.push.apply(r, n);
  }
  return r;
}
function pM(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? yM(Object(r), !0).forEach(function(n) {
      $be(e, n, r[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : yM(Object(r)).forEach(function(n) {
      Object.defineProperty(e, n, Object.getOwnPropertyDescriptor(r, n));
    });
  }
  return e;
}
function $be(e, t, r) {
  return t = Abe(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function Abe(e) {
  var t = Ibe(e, "string");
  return Th(t) === "symbol" ? t : String(t);
}
function Ibe(e, t) {
  if (Th(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Th(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Mbe(e, t) {
  if (e == null)
    return {};
  var r = xbe(e, t), n, o;
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(e);
    for (o = 0; o < i.length; o++)
      n = i[o], !(t.indexOf(n) >= 0) && Object.prototype.propertyIsEnumerable.call(e, n) && (r[n] = e[n]);
  }
  return r;
}
function xbe(e, t) {
  if (e == null)
    return {};
  var r = {}, n = Object.keys(e), o, i;
  for (i = 0; i < n.length; i++)
    o = n[i], !(t.indexOf(o) >= 0) && (r[o] = e[o]);
  return r;
}
function Dbe(e) {
  var t = e.cellCornerVisible, r = Mbe(e, kbe), n = new Rf(pM(pM({
    className: "current",
    border: {
      width: 2,
      color: "#4b89ff",
      cornerVisible: t
    }
  }, r), {}, {
    selectionType: Oh
  }));
  return n;
}
function Ph(e) {
  "@babel/helpers - typeof";
  return Ph = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Ph(e);
}
var Nbe = ["border", "visualCellRange"];
function mM(e, t) {
  var r = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    t && (n = n.filter(function(o) {
      return Object.getOwnPropertyDescriptor(e, o).enumerable;
    })), r.push.apply(r, n);
  }
  return r;
}
function Lw(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? mM(Object(r), !0).forEach(function(n) {
      Hbe(e, n, r[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : mM(Object(r)).forEach(function(n) {
      Object.defineProperty(e, n, Object.getOwnPropertyDescriptor(r, n));
    });
  }
  return e;
}
function Hbe(e, t, r) {
  return t = Lbe(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function Lbe(e) {
  var t = jbe(e, "string");
  return Ph(t) === "symbol" ? t : String(t);
}
function jbe(e, t) {
  if (Ph(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Ph(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Fbe(e, t) {
  if (e == null)
    return {};
  var r = Bbe(e, t), n, o;
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(e);
    for (o = 0; o < i.length; o++)
      n = i[o], !(t.indexOf(n) >= 0) && Object.prototype.propertyIsEnumerable.call(e, n) && (r[n] = e[n]);
  }
  return r;
}
function Bbe(e, t) {
  if (e == null)
    return {};
  var r = {}, n = Object.keys(e), o, i;
  for (i = 0; i < n.length; i++)
    o = n[i], !(t.indexOf(o) >= 0) && (r[o] = e[o]);
  return r;
}
function Vbe(e) {
  var t = e.border, r = e.visualCellRange, n = Fbe(e, Nbe), o = new Rf(Lw(Lw(Lw({}, t), n), {}, {
    selectionType: iP
  }), r);
  return o;
}
var gM = Bt, Wbe = Be, Ube = Kt, zbe = Fe, jw = qd, Ybe = Gd, Gbe = jd, Kbe = kr, qbe = Bd, yl = Object.assign, bM = Object.defineProperty, Xbe = Wbe([].concat), Zbe = !yl || zbe(function() {
  if (gM && yl({ b: 1 }, yl(bM({}, "a", {
    enumerable: !0,
    get: function() {
      bM(this, "b", {
        value: 3,
        enumerable: !1
      });
    }
  }), { b: 2 })).b !== 1)
    return !0;
  var e = {}, t = {}, r = Symbol(), n = "abcdefghijklmnopqrst";
  return e[r] = 7, n.split("").forEach(function(o) {
    t[o] = o;
  }), yl({}, e)[r] != 7 || jw(yl({}, t)).join("") != n;
}) ? function(t, r) {
  for (var n = Kbe(t), o = arguments.length, i = 1, a = Ybe.f, l = Gbe.f; o > i; )
    for (var s = qbe(arguments[i++]), u = a ? Xbe(jw(s), a(s)) : jw(s), f = u.length, c = 0, h; f > c; )
      h = u[c++], (!gM || Ube(l, s, h)) && (n[h] = s[h]);
  return n;
} : yl, Qbe = Ie, wM = Zbe;
Qbe({ target: "Object", stat: !0, arity: 2, forced: Object.assign !== wM }, {
  assign: wM
});
function kh(e) {
  "@babel/helpers - typeof";
  return kh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, kh(e);
}
function SM(e, t) {
  var r = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    t && (n = n.filter(function(o) {
      return Object.getOwnPropertyDescriptor(e, o).enumerable;
    })), r.push.apply(r, n);
  }
  return r;
}
function CM(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? SM(Object(r), !0).forEach(function(n) {
      Jbe(e, n, r[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : SM(Object(r)).forEach(function(n) {
      Object.defineProperty(e, n, Object.getOwnPropertyDescriptor(r, n));
    });
  }
  return e;
}
function Jbe(e, t, r) {
  return t = ewe(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function ewe(e) {
  var t = twe(e, "string");
  return kh(t) === "symbol" ? t : String(t);
}
function twe(e, t) {
  if (kh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (kh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function rwe(e) {
  if (e == null)
    throw new TypeError("Cannot destructure " + e);
}
function nwe(e) {
  var t = Object.assign({}, (rwe(e), e)), r = new Rf(CM(CM({
    className: "fill",
    border: {
      width: 1,
      color: "#ff0000"
    }
  }, t), {}, {
    selectionType: oP
  }));
  return r;
}
function $h(e) {
  "@babel/helpers - typeof";
  return $h = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, $h(e);
}
var owe = ["headerClassName", "rowClassName", "columnClassName"];
function _M(e, t) {
  var r = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    t && (n = n.filter(function(o) {
      return Object.getOwnPropertyDescriptor(e, o).enumerable;
    })), r.push.apply(r, n);
  }
  return r;
}
function OM(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? _M(Object(r), !0).forEach(function(n) {
      iwe(e, n, r[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : _M(Object(r)).forEach(function(n) {
      Object.defineProperty(e, n, Object.getOwnPropertyDescriptor(r, n));
    });
  }
  return e;
}
function iwe(e, t, r) {
  return t = awe(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function awe(e) {
  var t = lwe(e, "string");
  return $h(t) === "symbol" ? t : String(t);
}
function lwe(e, t) {
  if ($h(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if ($h(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function swe(e, t) {
  if (e == null)
    return {};
  var r = uwe(e, t), n, o;
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(e);
    for (o = 0; o < i.length; o++)
      n = i[o], !(t.indexOf(n) >= 0) && Object.prototype.propertyIsEnumerable.call(e, n) && (r[n] = e[n]);
  }
  return r;
}
function uwe(e, t) {
  if (e == null)
    return {};
  var r = {}, n = Object.keys(e), o, i;
  for (i = 0; i < n.length; i++)
    o = n[i], !(t.indexOf(o) >= 0) && (r[o] = e[o]);
  return r;
}
function fwe(e) {
  var t = e.headerClassName, r = e.rowClassName, n = e.columnClassName, o = swe(e, owe), i = new Rf(OM(OM({
    className: "highlight",
    highlightHeaderClassName: t,
    highlightRowClassName: r,
    highlightColumnClassName: n
  }, o), {}, {
    highlightOnlyClosestHeader: !0,
    selectionType: bv
  }));
  return i;
}
function Ah(e) {
  "@babel/helpers - typeof";
  return Ah = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Ah(e);
}
function RM(e, t) {
  var r = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    t && (n = n.filter(function(o) {
      return Object.getOwnPropertyDescriptor(e, o).enumerable;
    })), r.push.apply(r, n);
  }
  return r;
}
function cwe(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? RM(Object(r), !0).forEach(function(n) {
      hwe(e, n, r[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : RM(Object(r)).forEach(function(n) {
      Object.defineProperty(e, n, Object.getOwnPropertyDescriptor(r, n));
    });
  }
  return e;
}
function hwe(e, t, r) {
  return t = dwe(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function dwe(e) {
  var t = vwe(e, "string");
  return Ah(t) === "symbol" ? t : String(t);
}
function vwe(e, t) {
  if (Ah(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Ah(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var d2 = nn("highlight/types"), Ef = d2.register, ywe = d2.getItem;
Ef(Hg, Sbe);
Ef(Lg, Pbe);
Ef(Oh, Dbe);
Ef(iP, Vbe);
Ef(oP, nwe);
Ef(bv, fwe);
function pl(e, t) {
  return ywe(e)(cwe({
    type: e
  }, t));
}
function Ih(e) {
  "@babel/helpers - typeof";
  return Ih = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Ih(e);
}
function qo(e) {
  return bwe(e) || gwe(e) || mwe(e) || pwe();
}
function pwe() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function mwe(e, t) {
  if (e) {
    if (typeof e == "string")
      return H_(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return H_(e, t);
  }
}
function gwe(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function bwe(e) {
  if (Array.isArray(e))
    return H_(e);
}
function H_(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function EM(e, t) {
  var r = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    t && (n = n.filter(function(o) {
      return Object.getOwnPropertyDescriptor(e, o).enumerable;
    })), r.push.apply(r, n);
  }
  return r;
}
function zf(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? EM(Object(r), !0).forEach(function(n) {
      wwe(e, n, r[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : EM(Object(r)).forEach(function(n) {
      Object.defineProperty(e, n, Object.getOwnPropertyDescriptor(r, n));
    });
  }
  return e;
}
function wwe(e, t, r) {
  return t = v2(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function Swe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function TM(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, v2(n.key), n);
  }
}
function Cwe(e, t, r) {
  return t && TM(e.prototype, t), r && TM(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function v2(e) {
  var t = _we(e, "string");
  return Ih(t) === "symbol" ? t : String(t);
}
function _we(e, t) {
  if (Ih(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Ih(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var Owe = /* @__PURE__ */ function(e) {
  function t(r) {
    Swe(this, t), this.options = r, this.layerLevel = 0, this.cell = pl(Oh, r), this.fill = pl(oP, r), this.areas = /* @__PURE__ */ new Map(), this.headers = /* @__PURE__ */ new Map(), this.activeHeaders = /* @__PURE__ */ new Map(), this.customSelections = [];
  }
  return Cwe(t, [{
    key: "isEnabledFor",
    value: function(n, o) {
      var i = n;
      n === Oh && (i = "current");
      var a = this.options.disabledCellSelection(o.row, o.col);
      return typeof a == "string" && (a = [a]), a === !1 || Array.isArray(a) && !a.includes(i);
    }
    /**
     * Set a new layer level to make access to the desire `area` and `header` highlights.
     *
     * @param {number} [level=0] Layer level to use.
     * @returns {Highlight}
     */
  }, {
    key: "useLayerLevel",
    value: function() {
      var n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
      return this.layerLevel = n, this;
    }
    /**
     * Get Walkontable Selection instance created for controlling highlight of the currently selected/edited cell.
     *
     * @returns {Selection}
     */
  }, {
    key: "getCell",
    value: function() {
      return this.cell;
    }
    /**
     * Get Walkontable Selection instance created for controlling highlight of the autofill functionality.
     *
     * @returns {Selection}
     */
  }, {
    key: "getFill",
    value: function() {
      return this.fill;
    }
    /**
     * Get or create (if not exist in the cache) Walkontable Selection instance created for controlling highlight
     * of the multiple selected cells.
     *
     * @returns {Selection}
     */
  }, {
    key: "createOrGetArea",
    value: function() {
      var n = this.layerLevel, o;
      return this.areas.has(n) ? o = this.areas.get(n) : (o = pl(Lg, zf({
        layerLevel: n
      }, this.options)), this.areas.set(n, o)), o;
    }
    /**
     * Get all Walkontable Selection instances which describes the state of the visual highlight of the cells.
     *
     * @returns {Selection[]}
     */
  }, {
    key: "getAreas",
    value: function() {
      return qo(this.areas.values());
    }
    /**
     * Get or create (if not exist in the cache) Walkontable Selection instance created for controlling highlight
     * of the multiple selected header cells.
     *
     * @returns {Selection}
     */
  }, {
    key: "createOrGetHeader",
    value: function() {
      var n = this.layerLevel, o;
      return this.headers.has(n) ? o = this.headers.get(n) : (o = pl(bv, zf({}, this.options)), this.headers.set(n, o)), o;
    }
    /**
     * Get all Walkontable Selection instances which describes the state of the visual highlight of the headers.
     *
     * @returns {Selection[]}
     */
  }, {
    key: "getHeaders",
    value: function() {
      return qo(this.headers.values());
    }
    /**
     * Get or create (if not exist in the cache) Walkontable Selection instance created for controlling highlight
     * of the multiple selected active header cells.
     *
     * @returns {Selection}
     */
  }, {
    key: "createOrGetActiveHeader",
    value: function() {
      var n = this.layerLevel, o;
      return this.activeHeaders.has(n) ? o = this.activeHeaders.get(n) : (o = pl(Hg, zf({}, this.options)), this.activeHeaders.set(n, o)), o;
    }
    /**
     * Get all Walkontable Selection instances which describes the state of the visual highlight of the active headers.
     *
     * @returns {Selection[]}
     */
  }, {
    key: "getActiveHeaders",
    value: function() {
      return qo(this.activeHeaders.values());
    }
    /**
     * Get Walkontable Selection instance created for controlling highlight of the custom selection functionality.
     *
     * @returns {Selection}
     */
  }, {
    key: "getCustomSelections",
    value: function() {
      return qo(this.customSelections.values());
    }
    /**
     * Add selection to the custom selection instance. The new selection are added to the end of the selection collection.
     *
     * @param {object} selectionInstance The selection instance.
     */
  }, {
    key: "addCustomSelection",
    value: function(n) {
      this.customSelections.push(pl(iP, zf(zf({}, this.options), n)));
    }
    /**
     * Perform cleaning visual highlights for the whole table.
     */
  }, {
    key: "clear",
    value: function() {
      this.cell.clear(), this.fill.clear(), I(this.areas.values(), function(n) {
        return void n.clear();
      }), I(this.headers.values(), function(n) {
        return void n.clear();
      }), I(this.activeHeaders.values(), function(n) {
        return void n.clear();
      });
    }
    /**
     * This object can be iterate over using `for of` syntax or using internal `arrayEach` helper.
     *
     * @returns {Selection[]}
     */
  }, {
    key: e,
    value: function() {
      return [this.cell, this.fill].concat(qo(this.areas.values()), qo(this.headers.values()), qo(this.activeHeaders.values()), qo(this.customSelections))[Symbol.iterator]();
    }
  }]), t;
}(Symbol.iterator);
const Rwe = Owe;
function Mh(e) {
  "@babel/helpers - typeof";
  return Mh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Mh(e);
}
function Ewe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function PM(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Pwe(n.key), n);
  }
}
function Twe(e, t, r) {
  return t && PM(e.prototype, t), r && PM(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Pwe(e) {
  var t = kwe(e, "string");
  return Mh(t) === "symbol" ? t : String(t);
}
function kwe(e, t) {
  if (Mh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Mh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var $we = /* @__PURE__ */ function(e) {
  function t(r) {
    Ewe(this, t), this.ranges = [], this.createCellRange = r;
  }
  return Twe(t, [{
    key: "isEmpty",
    value: function() {
      return this.size() === 0;
    }
    /**
     * Set coordinates to the class instance. It clears all previously added coordinates and push `coords`
     * to the collection.
     *
     * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
     * @returns {SelectionRange}
     */
  }, {
    key: "set",
    value: function(n) {
      return this.clear(), this.ranges.push(this.createCellRange(n)), this;
    }
    /**
     * Add coordinates to the class instance. The new coordinates are added to the end of the range collection.
     *
     * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
     * @returns {SelectionRange}
     */
  }, {
    key: "add",
    value: function(n) {
      return this.ranges.push(this.createCellRange(n)), this;
    }
    /**
     * Removes from the stack the last added coordinates.
     *
     * @returns {SelectionRange}
     */
  }, {
    key: "pop",
    value: function() {
      return this.ranges.pop(), this;
    }
    /**
     * Get last added coordinates from ranges, it returns a CellRange instance.
     *
     * @returns {CellRange|undefined}
     */
  }, {
    key: "current",
    value: function() {
      return this.peekByIndex(0);
    }
    /**
     * Get previously added coordinates from ranges, it returns a CellRange instance.
     *
     * @returns {CellRange|undefined}
     */
  }, {
    key: "previous",
    value: function() {
      return this.peekByIndex(-1);
    }
    /**
     * Returns `true` if coords is within selection coords. This method iterates through all selection layers to check if
     * the coords object is within selection range.
     *
     * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
     * @returns {boolean}
     */
  }, {
    key: "includes",
    value: function(n) {
      return this.ranges.some(function(o) {
        return o.includes(n);
      });
    }
    /**
     * Clear collection.
     *
     * @returns {SelectionRange}
     */
  }, {
    key: "clear",
    value: function() {
      return this.ranges.length = 0, this;
    }
    /**
     * Get count of added all coordinates added to the selection.
     *
     * @returns {number}
     */
  }, {
    key: "size",
    value: function() {
      return this.ranges.length;
    }
    /**
     * Peek the coordinates based on the offset where that coordinate resides in the collection.
     *
     * @param {number} [offset=0] An offset where the coordinate will be retrieved from.
     * @returns {CellRange|undefined}
     */
  }, {
    key: "peekByIndex",
    value: function() {
      var n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0, o = this.size() + n - 1, i;
      return o >= 0 && (i = this.ranges[o]), i;
    }
  }, {
    key: e,
    value: function() {
      return this.ranges[Symbol.iterator]();
    }
  }]), t;
}(Symbol.iterator);
const Awe = $we;
function xh(e) {
  "@babel/helpers - typeof";
  return xh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, xh(e);
}
function Iwe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function kM(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, xwe(n.key), n);
  }
}
function Mwe(e, t, r) {
  return t && kM(e.prototype, t), r && kM(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function xwe(e) {
  var t = Dwe(e, "string");
  return xh(t) === "symbol" ? t : String(t);
}
function Dwe(e, t) {
  if (xh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (xh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var y2 = /* @__PURE__ */ function() {
  function e(t, r) {
    Iwe(this, e), this.range = t, this.options = r;
  }
  return Mwe(e, [{
    key: "transformStart",
    value: function(r, n) {
      var o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, i = this.options.createCellCoords(r, n), a = this.range.current().highlight, l = this.options.visualToRenderableCoords(a), s = l.row, u = l.col, f = a, c = 0, h = 0;
      if (this.runLocalHooks("beforeTransformStart", i), s !== null && u !== null) {
        var d = this.options.countRows(), y = this.options.countCols(), p = this.options.fixedRowsBottom(), g = this.options.minSpareRows(), w = this.options.minSpareCols(), C = this.options.autoWrapRow(), _ = this.options.autoWrapCol();
        s + r > d - 1 ? o && g > 0 && !(p && s >= d - p - 1) ? (this.runLocalHooks("insertRowRequire", d), d = this.options.countRows()) : _ && (i.row = 1 - d, i.col = u + i.col === y - 1 ? 1 - y : 1) : _ && s + i.row < 0 && u + i.col >= 0 && (i.row = d - 1, i.col = u + i.col === 0 ? y - 1 : -1), u + i.col > y - 1 ? o && w > 0 ? (this.runLocalHooks("insertColRequire", y), y = this.options.countCols()) : C && (i.row = s + i.row === d - 1 ? 1 - d : 1, i.col = 1 - y) : C && u + i.col < 0 && s + i.row >= 0 && (i.row = s + i.row === 0 ? d - 1 : -1, i.col = y - 1);
        var k = this.options.createCellCoords(s + i.row, u + i.col);
        c = 0, h = 0, k.row < 0 ? (c = -1, k.row = 0) : k.row > 0 && k.row >= d && (c = 1, k.row = d - 1), k.col < 0 ? (h = -1, k.col = 0) : k.col > 0 && k.col >= y && (h = 1, k.col = y - 1), f = this.options.renderableToVisualCoords(k);
      }
      return this.runLocalHooks("afterTransformStart", f, c, h), f;
    }
    /**
     * Sets selection end cell relative to current selection end cell (if possible).
     *
     * @param {number} rowDelta Rows number to move, value can be passed as negative number.
     * @param {number} colDelta Columns number to move, value can be passed as negative number.
     * @returns {CellCoords} Visual coordinates after transformation.
     */
  }, {
    key: "transformEnd",
    value: function(r, n) {
      var o = this.options.createCellCoords(r, n), i = this.range.current(), a = i.to, l = 0, s = 0;
      this.runLocalHooks("beforeTransformEnd", o);
      var u = this.options.visualToRenderableCoords(i.highlight), f = u.row, c = u.col;
      if (f !== null && c !== null) {
        var h = this.options.countRows(), d = this.options.countCols(), y = this.options.visualToRenderableCoords(i.to), p = y.row, g = y.col, w = this.options.createCellCoords(p + o.row, g + o.col);
        l = 0, s = 0, w.row < 0 ? (l = -1, w.row = 0) : w.row > 0 && w.row >= h && (l = 1, w.row = h - 1), w.col < 0 ? (s = -1, w.col = 0) : w.col > 0 && w.col >= d && (s = 1, w.col = d - 1), a = this.options.renderableToVisualCoords(w);
      }
      return this.runLocalHooks("afterTransformEnd", a, l, s), a;
    }
  }]), e;
}();
bt(y2, $r);
const Nwe = y2;
function p2(e, t) {
  return Fwe(e) || jwe(e, t) || Lwe(e, t) || Hwe();
}
function Hwe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Lwe(e, t) {
  if (e) {
    if (typeof e == "string")
      return $M(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return $M(e, t);
  }
}
function $M(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function jwe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function Fwe(e) {
  if (Array.isArray(e))
    return e;
}
function L_(e) {
  "@babel/helpers - typeof";
  return L_ = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, L_(e);
}
var jg = 0, Fg = 1, m2 = 2, aP = 3, Bwe = [aP, m2], Vwe = [["number"], ["number", "string"], ["number", "undefined"], ["number", "string", "undefined"]], Fw = Symbol("root"), AM = Symbol("child");
function js(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Fw;
  if (t !== Fw && t !== AM)
    throw new Error("The second argument is used internally only and cannot be overwritten.");
  var r = Array.isArray(e), n = t === Fw, o = jg;
  if (r) {
    var i = e[0];
    if (e.length === 0)
      o = Fg;
    else if (n && i instanceof wT)
      o = aP;
    else if (n && Array.isArray(i))
      o = js(i, AM);
    else if (e.length >= 2 && e.length <= 4) {
      var a = !e.some(function(l, s) {
        return !Vwe[s].includes(L_(l));
      });
      a && (o = m2);
    }
  }
  return o;
}
function Dh(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, r = t.keepDirection, n = r === void 0 ? !1 : r, o = t.propToCol;
  if (!Bwe.includes(e))
    throw new Error("Unsupported selection ranges schema type was provided.");
  return function(i) {
    var a = e === aP, l = a ? i.from.row : i[0], s = a ? i.from.col : i[1], u = a ? i.to.row : i[2], f = a ? i.to.col : i[3];
    if (typeof o == "function" && (typeof s == "string" && (s = o(s)), typeof f == "string" && (f = o(f))), gt(u) && (u = l), gt(f) && (f = s), !n) {
      var c = l, h = s, d = u, y = f;
      l = Math.min(c, d), s = Math.min(h, y), u = Math.max(c, d), f = Math.max(h, y);
    }
    return [l, s, u, f];
  };
}
function Wwe(e) {
  var t = js(e);
  if (t === jg || t === Fg)
    return [];
  var r = Dh(t), n = /* @__PURE__ */ new Set();
  I(e, function(a) {
    var l = r(a), s = p2(l, 4), u = s[1], f = s[3], c = Math.max(u, 0), h = f - c + 1;
    I(Array.from(new Array(h), function(d, y) {
      return c + y;
    }), function(d) {
      n.has(d) || n.add(d);
    });
  });
  var o = Array.from(n).sort(function(a, l) {
    return a - l;
  }), i = sr(o, function(a, l, s, u) {
    return s !== 0 && l === u[s - 1] + 1 ? a[a.length - 1][1] += 1 : a.push([l, 1]), a;
  }, []);
  return i;
}
function Uwe(e) {
  var t = js(e);
  if (t === jg || t === Fg)
    return [];
  var r = Dh(t), n = /* @__PURE__ */ new Set();
  I(e, function(a) {
    var l = r(a), s = p2(l, 3), u = s[0], f = s[2], c = Math.max(u, 0), h = f - c + 1;
    I(Array.from(new Array(h), function(d, y) {
      return c + y;
    }), function(d) {
      n.has(d) || n.add(d);
    });
  });
  var o = Array.from(n).sort(function(a, l) {
    return a - l;
  }), i = sr(o, function(a, l, s, u) {
    return s !== 0 && l === u[s - 1] + 1 ? a[a.length - 1][1] += 1 : a.push([l, 1]), a;
  }, []);
  return i;
}
function Xo(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1 / 0;
  return typeof e == "number" && e >= 0 && e < t;
}
function Nh(e) {
  "@babel/helpers - typeof";
  return Nh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Nh(e);
}
var IM;
function MM(e, t) {
  return Kwe(e) || Gwe(e, t) || Ywe(e, t) || zwe();
}
function zwe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Ywe(e, t) {
  if (e) {
    if (typeof e == "string")
      return xM(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return xM(e, t);
  }
}
function xM(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function Gwe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function Kwe(e) {
  if (Array.isArray(e))
    return e;
}
function qwe(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } }));
}
function Xwe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function DM(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Qwe(n.key), n);
  }
}
function Zwe(e, t, r) {
  return t && DM(e.prototype, t), r && DM(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Qwe(e) {
  var t = Jwe(e, "string");
  return Nh(t) === "symbol" ? t : String(t);
}
function Jwe(e, t) {
  if (Nh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Nh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var g2 = /* @__PURE__ */ function() {
  function e(t, r) {
    var n = this;
    Xwe(this, e), this.settings = t, this.tableProps = r, this.inProgress = !1, this.selectedByCorner = !1, this.selectedByRowHeader = /* @__PURE__ */ new Set(), this.selectedByColumnHeader = /* @__PURE__ */ new Set(), this.selectedRange = new Awe(function(o, i, a) {
      return n.tableProps.createCellRange(o, i, a);
    }), this.highlight = new Rwe({
      headerClassName: t.currentHeaderClassName,
      activeHeaderClassName: t.activeHeaderClassName,
      rowClassName: t.currentRowClassName,
      columnClassName: t.currentColClassName,
      disabledCellSelection: function(i, a) {
        return n.tableProps.isDisabledCellSelection(i, a);
      },
      cellCornerVisible: function() {
        return n.isCellCornerVisible.apply(n, arguments);
      },
      areaCornerVisible: function() {
        return n.isAreaCornerVisible.apply(n, arguments);
      },
      visualToRenderableCoords: function(i) {
        return n.tableProps.visualToRenderableCoords(i);
      },
      renderableToVisualCoords: function(i) {
        return n.tableProps.renderableToVisualCoords(i);
      },
      createCellCoords: function(i, a) {
        return n.tableProps.createCellCoords(i, a);
      },
      createCellRange: function(i, a, l) {
        return n.tableProps.createCellRange(i, a, l);
      },
      rowIndexMapper: function() {
        return n.tableProps.rowIndexMapper();
      },
      columnIndexMapper: function() {
        return n.tableProps.columnIndexMapper();
      }
    }), this.transformation = new Nwe(this.selectedRange, {
      countRows: function() {
        return n.tableProps.countRowsTranslated();
      },
      countCols: function() {
        return n.tableProps.countColsTranslated();
      },
      visualToRenderableCoords: function(i) {
        return n.tableProps.visualToRenderableCoords(i);
      },
      renderableToVisualCoords: function(i) {
        return n.tableProps.renderableToVisualCoords(i);
      },
      createCellCoords: function(i, a) {
        return n.tableProps.createCellCoords(i, a);
      },
      fixedRowsBottom: function() {
        return t.fixedRowsBottom;
      },
      minSpareRows: function() {
        return t.minSpareRows;
      },
      minSpareCols: function() {
        return t.minSpareCols;
      },
      autoWrapRow: function() {
        return t.autoWrapRow;
      },
      autoWrapCol: function() {
        return t.autoWrapCol;
      }
    }), this.transformation.addLocalHook("beforeTransformStart", function() {
      for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
        i[a] = arguments[a];
      return n.runLocalHooks.apply(n, ["beforeModifyTransformStart"].concat(i));
    }), this.transformation.addLocalHook("afterTransformStart", function() {
      for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
        i[a] = arguments[a];
      return n.runLocalHooks.apply(n, ["afterModifyTransformStart"].concat(i));
    }), this.transformation.addLocalHook("beforeTransformEnd", function() {
      for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
        i[a] = arguments[a];
      return n.runLocalHooks.apply(n, ["beforeModifyTransformEnd"].concat(i));
    }), this.transformation.addLocalHook("afterTransformEnd", function() {
      for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
        i[a] = arguments[a];
      return n.runLocalHooks.apply(n, ["afterModifyTransformEnd"].concat(i));
    }), this.transformation.addLocalHook("insertRowRequire", function() {
      for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
        i[a] = arguments[a];
      return n.runLocalHooks.apply(n, ["insertRowRequire"].concat(i));
    }), this.transformation.addLocalHook("insertColRequire", function() {
      for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
        i[a] = arguments[a];
      return n.runLocalHooks.apply(n, ["insertColRequire"].concat(i));
    });
  }
  return Zwe(e, [{
    key: "getSelectedRange",
    value: function() {
      return this.selectedRange;
    }
    /**
     * Indicate that selection process began. It sets internaly `.inProgress` property to `true`.
     */
  }, {
    key: "begin",
    value: function() {
      this.inProgress = !0;
    }
    /**
     * Indicate that selection process finished. It sets internaly `.inProgress` property to `false`.
     */
  }, {
    key: "finish",
    value: function() {
      this.runLocalHooks("afterSelectionFinished", Array.from(this.selectedRange)), this.inProgress = !1;
    }
    /**
     * Check if the process of selecting the cell/cells is in progress.
     *
     * @returns {boolean}
     */
  }, {
    key: "isInProgress",
    value: function() {
      return this.inProgress;
    }
    /**
     * Starts selection range on given coordinate object.
     *
     * @param {CellCoords} coords Visual coords.
     * @param {boolean} [multipleSelection] If `true`, selection will be worked in 'multiple' mode. This option works
     *                                      only when 'selectionMode' is set as 'multiple'. If the argument is not defined
     *                                      the default trigger will be used.
     * @param {boolean} [fragment=false] If `true`, the selection will be treated as a partial selection where the
     *                                   `setRangeEnd` method won't be called on every `setRangeStart` call.
     */
  }, {
    key: "setRangeStart",
    value: function(r, n) {
      var o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, i = this.settings.selectionMode === "multiple", a = gt(n) ? this.tableProps.getShortcutManager().isCtrlPressed() : n, l = r.row < 0, s = r.col < 0, u = l && s, f = r.clone();
      this.selectedByCorner = u, this.runLocalHooks("beforeSetRangeStart".concat(o ? "Only" : ""), f), (!i || i && !a && gt(n)) && this.selectedRange.clear(), this.selectedRange.add(f), this.getLayerLevel() === 0 && (this.selectedByRowHeader.clear(), this.selectedByColumnHeader.clear()), !u && s && this.selectedByRowHeader.add(this.getLayerLevel()), !u && l && this.selectedByColumnHeader.add(this.getLayerLevel()), o || this.setRangeEnd(r);
    }
    /**
     * Starts selection range on given coordinate object.
     *
     * @param {CellCoords} coords Visual coords.
     * @param {boolean} [multipleSelection] If `true`, selection will be worked in 'multiple' mode. This option works
     *                                      only when 'selectionMode' is set as 'multiple'. If the argument is not defined
     *                                      the default trigger will be used.
     */
  }, {
    key: "setRangeStartOnly",
    value: function(r, n) {
      this.setRangeStart(r, n, !0);
    }
    /**
     * Ends selection range on given coordinate object.
     *
     * @param {CellCoords} coords Visual coords.
     */
  }, {
    key: "setRangeEnd",
    value: function(r) {
      if (!this.selectedRange.isEmpty()) {
        var n = r.clone();
        this.runLocalHooks("beforeSetRangeEnd", n), this.begin();
        var o = this.selectedRange.current();
        this.settings.selectionMode !== "single" && o.setTo(this.tableProps.createCellCoords(n.row, n.col)), this.highlight.getCell().clear(), this.highlight.isEnabledFor(Oh, o.highlight) && this.highlight.getCell().add(this.selectedRange.current().highlight).commit().syncWith(o);
        var i = this.getLayerLevel();
        i < this.highlight.layerLevel && (I(this.highlight.getAreas(), function(p) {
          return void p.clear();
        }), I(this.highlight.getHeaders(), function(p) {
          return void p.clear();
        }), I(this.highlight.getActiveHeaders(), function(p) {
          return void p.clear();
        })), this.highlight.useLayerLevel(i);
        var a = this.highlight.createOrGetArea(), l = this.highlight.createOrGetHeader(), s = this.highlight.createOrGetActiveHeader();
        if (a.clear(), l.clear(), s.clear(), this.highlight.isEnabledFor(Lg, o.highlight) && (this.isMultiple() || i >= 1) && (a.add(o.from).add(o.to).commit(), i === 1)) {
          var u = this.selectedRange.previous();
          this.highlight.useLayerLevel(i - 1).createOrGetArea().add(u.from).commit().syncWith(u), this.highlight.useLayerLevel(i);
        }
        if (this.highlight.isEnabledFor(bv, o.highlight)) {
          var f = this.tableProps.countRowsTranslated() === 0, c = this.tableProps.countColsTranslated() === 0, h = o;
          if ((f || c) && (h = o.clone()), f && (h.from.row = -1), c && (h.from.col = -1), this.settings.selectionMode === "single" ? (this.isSelectedByAnyHeader() && h.from.normalize(), l.add(h.from).commit()) : l.add(h.from).add(h.to).commit(), this.isEntireRowSelected()) {
            var d = this.tableProps.countCols() === o.getWidth();
            d && s.add(this.tableProps.createCellCoords(o.from.row, -1)).add(this.tableProps.createCellCoords(o.to.row, -1)).commit();
          }
          if (this.isEntireColumnSelected()) {
            var y = this.tableProps.countRows() === o.getHeight();
            y && s.add(this.tableProps.createCellCoords(-1, o.from.col)).add(this.tableProps.createCellCoords(-1, o.to.col)).commit();
          }
        }
        this.runLocalHooks("afterSetRangeEnd", r);
      }
    }
    /**
     * Returns information if we have a multiselection. This method check multiselection only on the latest layer of
     * the selection.
     *
     * @returns {boolean}
     */
  }, {
    key: "isMultiple",
    value: function() {
      var r = ss(!this.selectedRange.current().isSingle());
      return this.runLocalHooks("afterIsMultipleSelection", r), r.value;
    }
    /**
     * Selects cell relative to the current cell (if possible).
     *
     * @param {number} rowDelta Rows number to move, value can be passed as negative number.
     * @param {number} colDelta Columns number to move, value can be passed as negative number.
     * @param {boolean} [force=false] If `true` the new rows/columns will be created if necessary. Otherwise, row/column will
     *                        be created according to `minSpareRows/minSpareCols` settings of Handsontable.
     */
  }, {
    key: "transformStart",
    value: function(r, n) {
      var o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;
      this.setRangeStart(this.transformation.transformStart(r, n, o));
    }
    /**
     * Sets selection end cell relative to the current selection end cell (if possible).
     *
     * @param {number} rowDelta Rows number to move, value can be passed as negative number.
     * @param {number} colDelta Columns number to move, value can be passed as negative number.
     */
  }, {
    key: "transformEnd",
    value: function(r, n) {
      this.setRangeEnd(this.transformation.transformEnd(r, n));
    }
    /**
     * Returns currently used layer level.
     *
     * @returns {number} Returns layer level starting from 0. If no selection was added to the table -1 is returned.
     */
  }, {
    key: "getLayerLevel",
    value: function() {
      return this.selectedRange.size() - 1;
    }
    /**
     * Returns `true` if currently there is a selection on the screen, `false` otherwise.
     *
     * @returns {boolean}
     */
  }, {
    key: "isSelected",
    value: function() {
      return !this.selectedRange.isEmpty();
    }
    /**
     * Returns `true` if the selection was applied by clicking to the row header. If the `layerLevel`
     * argument is passed then only that layer will be checked. Otherwise, it checks if any row header
     * was clicked on any selection layer level.
     *
     * @param {number} [layerLevel=this.getLayerLevel()] Selection layer level to check.
     * @returns {boolean}
     */
  }, {
    key: "isSelectedByRowHeader",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getLayerLevel();
      return !this.isSelectedByCorner(r) && this.isEntireRowSelected(r);
    }
    /**
     * Returns `true` if the selection consists of entire rows (including their headers). If the `layerLevel`
     * argument is passed then only that layer will be checked. Otherwise, it checks the selection for all layers.
     *
     * @param {number} [layerLevel=this.getLayerLevel()] Selection layer level to check.
     * @returns {boolean}
     */
  }, {
    key: "isEntireRowSelected",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getLayerLevel();
      return r === -1 ? this.selectedByRowHeader.size > 0 : this.selectedByRowHeader.has(r);
    }
    /**
     * Returns `true` if the selection was applied by clicking to the column header. If the `layerLevel`
     * argument is passed then only that layer will be checked. Otherwise, it checks if any column header
     * was clicked on any selection layer level.
     *
     * @param {number} [layerLevel=this.getLayerLevel()] Selection layer level to check.
     * @returns {boolean}
     */
  }, {
    key: "isSelectedByColumnHeader",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getLayerLevel();
      return !this.isSelectedByCorner() && this.isEntireColumnSelected(r);
    }
    /**
     * Returns `true` if the selection consists of entire columns (including their headers). If the `layerLevel`
     * argument is passed then only that layer will be checked. Otherwise, it checks the selection for all layers.
     *
     * @param {number} [layerLevel=this.getLayerLevel()] Selection layer level to check.
     * @returns {boolean}
     */
  }, {
    key: "isEntireColumnSelected",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getLayerLevel();
      return r === -1 ? this.selectedByColumnHeader.size > 0 : this.selectedByColumnHeader.has(r);
    }
    /**
     * Returns `true` if the selection was applied by clicking on the row or column header on any layer level.
     *
     * @returns {boolean}
     */
  }, {
    key: "isSelectedByAnyHeader",
    value: function() {
      return this.isSelectedByRowHeader(-1) || this.isSelectedByColumnHeader(-1) || this.isSelectedByCorner();
    }
    /**
     * Returns `true` if the selection was applied by clicking on the left-top corner overlay.
     *
     * @returns {boolean}
     */
  }, {
    key: "isSelectedByCorner",
    value: function() {
      return this.selectedByCorner;
    }
    /**
     * Returns `true` if coords is within selection coords. This method iterates through all selection layers to check if
     * the coords object is within selection range.
     *
     * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.
     * @returns {boolean}
     */
  }, {
    key: "inInSelection",
    value: function(r) {
      return this.selectedRange.includes(r);
    }
    /**
     * Returns `true` if the cell corner should be visible.
     *
     * @private
     * @returns {boolean} `true` if the corner element has to be visible, `false` otherwise.
     */
  }, {
    key: "isCellCornerVisible",
    value: function() {
      return this.settings.fillHandle && !this.tableProps.isEditorOpened() && !this.isMultiple();
    }
    /**
     * Returns `true` if the area corner should be visible.
     *
     * @param {number} layerLevel The layer level.
     * @returns {boolean} `true` if the corner element has to be visible, `false` otherwise.
     */
  }, {
    key: "isAreaCornerVisible",
    value: function(r) {
      return Number.isInteger(r) && r !== this.getLayerLevel() ? !1 : this.settings.fillHandle && !this.tableProps.isEditorOpened() && this.isMultiple();
    }
    /**
     * Clear the selection by resetting the collected ranges and highlights.
     */
  }, {
    key: "clear",
    value: function() {
      this.selectedRange.clear(), this.highlight.clear();
    }
    /**
     * Deselects all selected cells.
     */
  }, {
    key: "deselect",
    value: function() {
      this.isSelected() && (this.inProgress = !1, this.clear(), this.runLocalHooks("afterDeselect"));
    }
    /**
     * Select all cells.
     *
     * @param {boolean} [includeRowHeaders=false] `true` If the selection should include the row headers, `false`
     * otherwise.
     * @param {boolean} [includeColumnHeaders=false] `true` If the selection should include the column headers, `false`
     * otherwise.
     */
  }, {
    key: "selectAll",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, o = this.tableProps.countRows(), i = this.tableProps.countCols();
      if (!(!r && !n && (o === 0 || i === 0))) {
        var a = this.tableProps.createCellCoords(n ? -1 : 0, r ? -1 : 0), l = this.tableProps.createCellCoords(o - 1, i - 1);
        this.clear(), this.setRangeStartOnly(a), this.selectedByRowHeader.add(this.getLayerLevel()), this.selectedByColumnHeader.add(this.getLayerLevel()), this.setRangeEnd(l), this.finish();
      }
    }
    /**
     * Make multiple, non-contiguous selection specified by `row` and `column` values or a range of cells
     * finishing at `endRow`, `endColumn`. The method supports two input formats, first as an array of arrays such
     * as `[[rowStart, columnStart, rowEnd, columnEnd]]` and second format as an array of CellRange objects.
     * If the passed ranges have another format the exception will be thrown.
     *
     * @param {Array[]|CellRange[]} selectionRanges The coordinates which define what the cells should be selected.
     * @returns {boolean} Returns `true` if selection was successful, `false` otherwise.
     */
  }, {
    key: "selectCells",
    value: function(r) {
      var n = this, o = js(r);
      if (o === Fg)
        return !1;
      if (o === jg)
        throw new Error(ut(IM || (IM = qwe([`Unsupported format of the selection ranges was passed. To select cells pass 
        the coordinates as an array of arrays ([[rowStart, columnStart/columnPropStart, rowEnd, 
        columnEnd/columnPropEnd]]) or as an array of CellRange objects.`], [`Unsupported format of the selection ranges was passed. To select cells pass\\x20
        the coordinates as an array of arrays ([[rowStart, columnStart/columnPropStart, rowEnd,\\x20
        columnEnd/columnPropEnd]]) or as an array of CellRange objects.`]))));
      var i = Dh(o, {
        propToCol: function(f) {
          return n.tableProps.propToCol(f);
        },
        keepDirection: !0
      }), a = this.tableProps.countRows(), l = this.tableProps.countCols(), s = !r.some(function(u) {
        var f = i(u), c = MM(f, 4), h = c[0], d = c[1], y = c[2], p = c[3], g = Xo(h, a) && Xo(d, l) && Xo(y, a) && Xo(p, l);
        return !g;
      });
      return s && (this.clear(), I(r, function(u) {
        var f = i(u), c = MM(f, 4), h = c[0], d = c[1], y = c[2], p = c[3];
        n.setRangeStartOnly(n.tableProps.createCellCoords(h, d), !1), n.setRangeEnd(n.tableProps.createCellCoords(y, p)), n.finish();
      })), s;
    }
    /**
     * Select column specified by `startColumn` visual index or column property or a range of columns finishing at
     * `endColumn`.
     *
     * @param {number|string} startColumn Visual column index or column property from which the selection starts.
     * @param {number|string} [endColumn] Visual column index or column property from to the selection finishes.
     * @param {number} [headerLevel=-1] A row header index that triggers the column selection. The value can
     *                                  take -1 to -N, where -1 means the header closest to the cells.
     *
     * @returns {boolean} Returns `true` if selection was successful, `false` otherwise.
     */
  }, {
    key: "selectColumns",
    value: function(r) {
      var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : r, o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : -1, i = typeof r == "string" ? this.tableProps.propToCol(r) : r, a = typeof n == "string" ? this.tableProps.propToCol(n) : n, l = this.tableProps.countCols(), s = this.tableProps.countRows(), u = Xo(i, l) && Xo(a, l);
      return u && (this.setRangeStartOnly(this.tableProps.createCellCoords(o, i)), this.setRangeEnd(this.tableProps.createCellCoords(s - 1, a)), this.finish()), u;
    }
    /**
     * Select row specified by `startRow` visual index or a range of rows finishing at `endRow`.
     *
     * @param {number} startRow Visual row index from which the selection starts.
     * @param {number} [endRow] Visual row index from to the selection finishes.
     * @param {number} [headerLevel=-1] A column header index that triggers the row selection.
     *                                  The value can take -1 to -N, where -1 means the header
     *                                  closest to the cells.
     * @returns {boolean} Returns `true` if selection was successful, `false` otherwise.
     */
  }, {
    key: "selectRows",
    value: function(r) {
      var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : r, o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : -1, i = this.tableProps.countRows(), a = this.tableProps.countCols(), l = Xo(r, i) && Xo(n, i);
      return l && (this.setRangeStartOnly(this.tableProps.createCellCoords(r, o)), this.setRangeEnd(this.tableProps.createCellCoords(n, a - 1)), this.finish()), l;
    }
    /**
     * Rewrite the rendered state of the selection as visual selection may have a new representation in the DOM.
     */
  }, {
    key: "refresh",
    value: function() {
      var r = this.highlight.getCustomSelections();
      if (r.forEach(function(u) {
        u.commit();
      }), !!this.isSelected()) {
        var n = this.highlight.getCell(), o = this.getLayerLevel();
        n.commit().syncWith(this.selectedRange.current());
        for (var i = 0; i < this.selectedRange.size(); i += 1) {
          this.highlight.useLayerLevel(i);
          var a = this.highlight.createOrGetArea(), l = this.highlight.createOrGetHeader(), s = this.highlight.createOrGetActiveHeader();
          a.commit(), l.commit(), s.commit();
        }
        this.highlight.useLayerLevel(o);
      }
    }
  }]), e;
}();
bt(g2, $r);
const eSe = g2;
var tSe = Ie, b2 = Zd, rSe = Bn.f, nSe = Qa, NM = Wt, oSe = HE, iSe = Pr, aSe = LE, HM = b2("".startsWith), lSe = b2("".slice), sSe = Math.min, w2 = aSe("startsWith"), uSe = !w2 && !!function() {
  var e = rSe(String.prototype, "startsWith");
  return e && !e.writable;
}();
tSe({ target: "String", proto: !0, forced: !uSe && !w2 }, {
  startsWith: function(t) {
    var r = NM(iSe(this));
    oSe(t);
    var n = nSe(sSe(arguments.length > 1 ? arguments[1] : void 0, r.length)), o = NM(t);
    return HM ? HM(r, o, n) : lSe(r, n, n + o.length) === o;
  }
});
var LM = /^(\r\n|\n\r|\r|\n)/, fSe = /^[^\t\r\n]+/, jM = /^\t/;
function cSe(e) {
  var t = [[""]];
  if (e.length === 0)
    return t;
  for (var r = 0, n = 0, o; e.length > 0 && o !== e.length; )
    if (o = e.length, e.match(jM))
      e = e.replace(jM, ""), r += 1, t[n][r] = "";
    else if (e.match(LM))
      e = e.replace(LM, ""), r = 0, n += 1, t[n] = [""];
    else {
      var i = "";
      if (e.startsWith('"')) {
        for (var a = 0, l = !0; l; ) {
          var s = e.slice(0, 1);
          s === '"' && (a += 1), i += s, e = e.slice(1), (e.length === 0 || e.match(/^[\t\r\n]/) && a % 2 === 0) && (l = !1);
        }
        i = i.replace(/^"/, "").replace(/"$/, "").replace(/["]*/g, function(f) {
          return new Array(Math.floor(f.length / 2)).fill('"').join("");
        });
      } else {
        var u = e.match(fSe);
        i = u ? u[0] : "", e = e.slice(i.length);
      }
      t[n][r] = i;
    }
  return t;
}
function Cc(e) {
  var t, r, n, o, i = "", a;
  for (t = 0, r = e.length; t < r; t += 1) {
    for (o = e[t].length, n = 0; n < o; n += 1)
      n > 0 && (i += "	"), a = e[t][n], typeof a == "string" ? a.indexOf(`
`) > -1 ? i += '"'.concat(a.replace(/"/g, '""'), '"') : i += a : a == null ? i += "" : i += a;
    t !== r - 1 && (i += `
`);
  }
  return i;
}
function Bw(e) {
  return ySe(e) || vSe(e) || dSe(e) || hSe();
}
function hSe() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function dSe(e, t) {
  if (e) {
    if (typeof e == "string")
      return j_(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return j_(e, t);
  }
}
function vSe(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function ySe(e) {
  if (Array.isArray(e))
    return j_(e);
}
function j_(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function Fs(e) {
  "@babel/helpers - typeof";
  return Fs = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Fs(e);
}
function pSe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function FM(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, gSe(n.key), n);
  }
}
function mSe(e, t, r) {
  return t && FM(e.prototype, t), r && FM(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function gSe(e) {
  var t = bSe(e, "string");
  return Fs(t) === "symbol" ? t : String(t);
}
function bSe(e, t) {
  if (Fs(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Fs(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var wSe = /* @__PURE__ */ function() {
  function e(t, r, n) {
    pSe(this, e), this.instance = t, this.metaManager = n, this.tableMeta = n.getTableMeta(), this.dataSource = r, this.duckSchema = this.createDuckSchema(), this.colToPropCache = void 0, this.propToColCache = void 0, this.createMap();
  }
  return mSe(e, [{
    key: "createMap",
    value: function() {
      var r = this.getSchema();
      if (typeof r > "u")
        throw new Error("trying to create `columns` definition but you didn't provide `schema` nor `data`");
      var n = this.tableMeta.columns, o;
      if (this.colToPropCache = [], this.propToColCache = /* @__PURE__ */ new Map(), n) {
        var i = 0, a = 0, l = !1;
        if (typeof n == "function") {
          var s = UE(r);
          i = s > 0 ? s : this.countFirstRowKeys(), l = !0;
        } else {
          var u = this.tableMeta.maxCols;
          i = Math.min(u, n.length);
        }
        for (o = 0; o < i; o++) {
          var f = l ? n(o) : n[o];
          if (ze(f)) {
            if (typeof f.data < "u") {
              var c = l ? a : o;
              this.colToPropCache[c] = f.data, this.propToColCache.set(f.data, c);
            }
            a += 1;
          }
        }
      } else
        this.recursiveDuckColumns(r);
    }
    /**
     * Get the amount of physical columns in the first data row.
     *
     * @returns {number} Amount of physical columns in the first data row.
     */
  }, {
    key: "countFirstRowKeys",
    value: function() {
      return UW(this.dataSource);
    }
    /**
     * Generates columns' translation cache.
     *
     * @param {object} schema An object to generate schema from.
     * @param {number} lastCol The column index.
     * @param {number} parent The property cache for recursive calls.
     * @returns {number}
     */
  }, {
    key: "recursiveDuckColumns",
    value: function(r, n, o) {
      var i = this, a = n, l = o, s;
      return typeof a > "u" && (a = 0, l = ""), Fs(r) === "object" && !Array.isArray(r) && Ye(r, function(u, f) {
        u === null ? (s = l + f, i.colToPropCache.push(s), i.propToColCache.set(s, a), a += 1) : a = i.recursiveDuckColumns(u, a, "".concat(f, "."));
      }), a;
    }
    /**
     * Returns property name that corresponds with the given column index.
     *
     * @param {string|number} column Visual column index or another passed argument.
     * @returns {string|number} Column property, physical column index or passed argument.
     */
  }, {
    key: "colToProp",
    value: function(r) {
      if (Number.isInteger(r) === !1)
        return r;
      var n = this.instance.toPhysicalColumn(r);
      return n === null ? r : this.colToPropCache && be(this.colToPropCache[n]) ? this.colToPropCache[n] : n;
    }
    /**
     * Translates property into visual column index.
     *
     * @param {string|number} prop Column property which may be also a physical column index.
     * @returns {string|number} Visual column index or passed argument.
     */
  }, {
    key: "propToCol",
    value: function(r) {
      var n = this.propToColCache.get(r);
      if (be(n))
        return this.instance.toVisualColumn(n);
      var o = this.instance.toVisualColumn(r);
      return o === null ? r : o;
    }
    /**
     * Returns data's schema.
     *
     * @returns {object}
     */
  }, {
    key: "getSchema",
    value: function() {
      var r = this.tableMeta.dataSchema;
      return r ? typeof r == "function" ? r() : r : this.duckSchema;
    }
    /**
     * Creates the duck schema based on the current dataset.
     *
     * @returns {Array|object}
     */
  }, {
    key: "createDuckSchema",
    value: function() {
      return this.dataSource && this.dataSource[0] ? Mc(this.dataSource[0]) : {};
    }
    /**
     * Refresh the data schema.
     */
  }, {
    key: "refreshDuckSchema",
    value: function() {
      this.duckSchema = this.createDuckSchema();
    }
    /**
     * Creates row at the bottom of the data array.
     *
     * @param {number} [index] Physical index of the row before which the new row will be inserted.
     * @param {number} [amount=1] An amount of rows to add.
     * @param {object} [options] Additional options for created rows.
     * @param {string} [options.source] Source of method call.
     * @param {'above'|'below'} [options.mode] Sets where the row is inserted: above or below the passed index.
     * @fires Hooks#afterCreateRow
     * @returns {number} Returns number of created rows.
     */
  }, {
    key: "createRow",
    value: function(r) {
      var n = this, o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, i = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, a = i.source, l = i.mode, s = l === void 0 ? "above" : l, u = this.instance.countSourceRows(), f = u, c = 0, h = r;
      (typeof h != "number" || h >= u) && (h = u), h < this.instance.countRows() && (f = this.instance.toPhysicalRow(h));
      var d = this.instance.runHooks("beforeCreateRow", h, o, a);
      if (d === !1 || f === null)
        return {
          delta: 0
        };
      for (var y = this.tableMeta.maxRows, p = this.getSchema().length, g = [], w = function() {
        var k = null;
        n.instance.dataType === "array" ? n.tableMeta.dataSchema ? k = mr(n.getSchema()) : (k = [], _e(p - 1, function() {
          return k.push(null);
        })) : n.instance.dataType === "function" ? k = n.tableMeta.dataSchema(h + c) : (k = {}, yg(k, n.getSchema())), g.push(k), c += 1;
      }; c < o && u + c < y; )
        w();
      this.instance.rowIndexMapper.insertIndexes(h, c), s === "below" && (f = Math.min(f + 1, u)), this.spliceData(f, 0, g);
      var C = this.instance.toVisualRow(f);
      return this.instance.countSourceRows() === g.length && this.instance.columnIndexMapper.initToLength(this.instance.getInitialColumnCount()), c > 0 && (r == null ? this.metaManager.createRow(null, c) : a !== "auto" && this.metaManager.createRow(f, o)), this.instance.runHooks("afterCreateRow", C, c, a), this.instance.forceFullRender = !0, {
        delta: c,
        startPhysicalIndex: f
      };
    }
    /**
     * Creates column at the right of the data array.
     *
     * @param {number} [index] Visual index of the column before which the new column will be inserted.
     * @param {number} [amount=1] An amount of columns to add.
     * @param {object} [options] Additional options for created columns.
     * @param {string} [options.source] Source of method call.
     * @param {'start'|'end'} [options.mode] Sets where the column is inserted: at the start (left in [LTR](@/api/options.md#layoutdirection), right in [RTL](@/api/options.md#layoutdirection)) or at the end (right in LTR, left in LTR)
     * the passed index.
     * @fires Hooks#afterCreateCol
     * @returns {number} Returns number of created columns.
     */
  }, {
    key: "createCol",
    value: function(r) {
      var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, i = o.source, a = o.mode, l = a === void 0 ? "start" : a;
      if (!this.instance.isColumnModificationAllowed())
        throw new Error("Cannot create new column. When data source in an object, you can only have as much columns as defined in first data row, data schema or in the 'columns' setting.If you want to be able to add new columns, you have to use array datasource.");
      var s = this.dataSource, u = this.tableMeta.maxCols, f = this.instance.countSourceCols(), c = r;
      (typeof c != "number" || c >= f) && (c = f);
      var h = this.instance.runHooks("beforeCreateCol", c, n, i);
      if (h === !1)
        return {
          delta: 0
        };
      var d = f;
      c < this.instance.countCols() && (d = this.instance.toPhysicalColumn(c));
      var y = this.instance.countSourceRows(), p = this.instance.countCols(), g = 0, w = d;
      l === "end" && (w = Math.min(w + 1, f));
      for (var C = w; g < n && p < u; ) {
        if (typeof c != "number" || c >= p)
          if (y > 0)
            for (var _ = 0; _ < y; _ += 1)
              typeof s[_] > "u" && (s[_] = []), s[_].push(null);
          else
            s.push([null]);
        else
          for (var k = 0; k < y; k++)
            s[k].splice(w, 0, null);
        g += 1, w += 1, p += 1;
      }
      this.instance.columnIndexMapper.insertIndexes(c, g), g > 0 && (r == null ? this.metaManager.createColumn(null, g) : i !== "auto" && this.metaManager.createColumn(C, n));
      var E = this.instance.toVisualColumn(C);
      return this.instance.runHooks("afterCreateCol", E, g, i), this.instance.forceFullRender = !0, this.refreshDuckSchema(), {
        delta: g,
        startPhysicalIndex: C
      };
    }
    /**
     * Removes row from the data array.
     *
     * @fires Hooks#beforeRemoveRow
     * @fires Hooks#afterRemoveRow
     * @param {number} [index] Visual index of the row to be removed. If not provided, the last row will be removed.
     * @param {number} [amount=1] Amount of the rows to be removed. If not provided, one row will be removed.
     * @param {string} [source] Source of method call.
     * @returns {boolean} Returns `false` when action was cancelled, otherwise `true`.
     */
  }, {
    key: "removeRow",
    value: function(r) {
      var n = this, o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, i = arguments.length > 2 ? arguments[2] : void 0, a = Number.isInteger(r) ? r : -o, l = this.visualRowsToPhysical(a, o), s = this.instance.countSourceRows();
      a = (s + a) % s;
      var u = this.instance.runHooks("beforeRemoveRow", a, l.length, l, i);
      if (u === !1)
        return !1;
      var f = l.length;
      if (this.filterData(a, f, l), a < this.instance.countRows()) {
        this.instance.rowIndexMapper.removeIndexes(l);
        var c = be(this.tableMeta.columns) || be(this.tableMeta.dataSchema);
        this.instance.rowIndexMapper.getNotTrimmedIndexesLength() === 0 && c === !1 && this.instance.columnIndexMapper.setIndexesSequence([]);
      }
      var h = l.slice(0).sort(function(d, y) {
        return y - d;
      });
      return h.forEach(function(d) {
        n.metaManager.removeRow(d, 1);
      }), this.instance.runHooks("afterRemoveRow", a, f, l, i), this.instance.forceFullRender = !0, !0;
    }
    /**
     * Removes column from the data array.
     *
     * @fires Hooks#beforeRemoveCol
     * @fires Hooks#afterRemoveCol
     * @param {number} [index] Visual index of the column to be removed. If not provided, the last column will be removed.
     * @param {number} [amount=1] Amount of the columns to be removed. If not provided, one column will be removed.
     * @param {string} [source] Source of method call.
     * @returns {boolean} Returns `false` when action was cancelled, otherwise `true`.
     */
  }, {
    key: "removeCol",
    value: function(r) {
      var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1, o = arguments.length > 2 ? arguments[2] : void 0;
      if (this.instance.dataType === "object" || this.tableMeta.columns)
        throw new Error("cannot remove column with object data source or columns option specified");
      var i = typeof r != "number" ? -n : r;
      i = (this.instance.countCols() + i) % this.instance.countCols();
      var a = this.visualColumnsToPhysical(i, n), l = a.slice(0).sort(function(C, _) {
        return _ - C;
      }), s = this.instance.runHooks("beforeRemoveCol", i, n, a, o);
      if (s === !1)
        return !1;
      for (var u = !0, f = l.length, c = this.dataSource, h = 0; h < f; h++)
        u && a[0] !== a[h] - h && (u = !1);
      if (u)
        for (var d = 0, y = this.instance.countSourceRows(); d < y; d++)
          c[d].splice(a[0], n), d === 0 && this.metaManager.removeColumn(a[0], n);
      else
        for (var p = 0, g = this.instance.countSourceRows(); p < g; p++)
          for (var w = 0; w < f; w++)
            c[p].splice(l[w], 1), p === 0 && this.metaManager.removeColumn(l[w], 1);
      return i < this.instance.countCols() && (this.instance.columnIndexMapper.removeIndexes(a), this.instance.columnIndexMapper.getNotTrimmedIndexesLength() === 0 && this.instance.rowIndexMapper.setIndexesSequence([])), this.instance.runHooks("afterRemoveCol", i, n, a, o), this.instance.forceFullRender = !0, this.refreshDuckSchema(), !0;
    }
    /**
     * Add/Removes data from the column.
     *
     * @param {number} col Physical index of column in which do you want to do splice.
     * @param {number} index Index at which to start changing the array. If negative, will begin that many elements from the end.
     * @param {number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.
     * @param {Array} [elements] The new columns to add.
     * @returns {Array} Returns removed portion of columns.
     */
  }, {
    key: "spliceCol",
    value: function(r, n, o) {
      for (var i = this.instance.getDataAtCol(r), a = i.slice(n, n + o), l = i.slice(n + o), s = arguments.length, u = new Array(s > 3 ? s - 3 : 0), f = 3; f < s; f++)
        u[f - 3] = arguments[f];
      OA(u, l);
      for (var c = 0; c < o; )
        u.push(null), c += 1;
      return zee(u), this.instance.populateFromArray(n, r, u, null, null, "spliceCol"), a;
    }
    /**
     * Add/Removes data from the row.
     *
     * @param {number} row Physical index of row in which do you want to do splice.
     * @param {number} index Index at which to start changing the array. If negative, will begin that many elements from the end.
     * @param {number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.
     * @param {Array} [elements] The new rows to add.
     * @returns {Array} Returns removed portion of rows.
     */
  }, {
    key: "spliceRow",
    value: function(r, n, o) {
      for (var i = this.instance.getSourceDataAtRow(r), a = i.slice(n, n + o), l = i.slice(n + o), s = arguments.length, u = new Array(s > 3 ? s - 3 : 0), f = 3; f < s; f++)
        u[f - 3] = arguments[f];
      OA(u, l);
      for (var c = 0; c < o; )
        u.push(null), c += 1;
      return this.instance.populateFromArray(r, n, [u], null, null, "spliceRow"), a;
    }
    /**
     * Add/remove row(s) to/from the data source.
     *
     * @param {number} index Physical index of the element to add/remove.
     * @param {number} deleteCount Number of rows to remove.
     * @param {Array<object>} elements Row elements to be added.
     */
  }, {
    key: "spliceData",
    value: function(r, n, o) {
      var i = this, a = this.instance.runHooks("beforeDataSplice", r, n, o);
      if (a !== !1) {
        var l = [].concat(Bw(this.dataSource.slice(0, r)), Bw(o), Bw(this.dataSource.slice(r)));
        this.dataSource.length = 0, l.forEach(function(s) {
          return i.dataSource.push(s);
        });
      }
    }
    /**
     * Filter unwanted data elements from the data source.
     *
     * @param {number} index Visual index of the element to remove.
     * @param {number} amount Number of rows to add/remove.
     * @param {number} physicalRows Physical row indexes.
     */
  }, {
    key: "filterData",
    value: function(r, n, o) {
      var i = this.instance.runHooks("filterData", r, n, o);
      Array.isArray(i) === !1 && (i = this.dataSource.filter(function(a, l) {
        return o.indexOf(l) === -1;
      })), this.dataSource.length = 0, Array.prototype.push.apply(this.dataSource, i);
    }
    /**
     * Returns single value from the data array.
     *
     * @param {number} row Visual row index.
     * @param {number} prop The column property.
     * @returns {*}
     */
  }, {
    key: "get",
    value: function(r, n) {
      var o = this.instance.toPhysicalRow(r), i = this.dataSource[o], a = this.instance.runHooks("modifyRowData", o);
      i = isNaN(a) ? a : i;
      var l = null;
      if (i && i.hasOwnProperty && Dt(i, n))
        l = i[n];
      else if (typeof n == "string" && n.indexOf(".") > -1) {
        var s = n.split("."), u = i;
        if (!u)
          return null;
        for (var f = 0, c = s.length; f < c; f++)
          if (u = u[s[f]], typeof u > "u")
            return null;
        l = u;
      } else
        typeof n == "function" && (l = n(this.dataSource.slice(o, o + 1)[0]));
      if (this.instance.hasHook("modifyData")) {
        var h = ss(l);
        this.instance.runHooks("modifyData", o, this.propToCol(n), h, "get"), h.isTouched() && (l = h.value);
      }
      return l;
    }
    /**
     * Returns single value from the data array (intended for clipboard copy to an external application).
     *
     * @param {number} row Physical row index.
     * @param {number} prop The column property.
     * @returns {string}
     */
  }, {
    key: "getCopyable",
    value: function(r, n) {
      return this.instance.getCellMeta(r, this.propToCol(n)).copyable ? this.get(r, n) : "";
    }
    /**
     * Saves single value to the data array.
     *
     * @param {number} row Visual row index.
     * @param {number} prop The column property.
     * @param {string} value The value to set.
     */
  }, {
    key: "set",
    value: function(r, n, o) {
      var i = this.instance.toPhysicalRow(r), a = o, l = this.dataSource[i], s = this.instance.runHooks("modifyRowData", i);
      if (l = isNaN(s) ? s : l, this.instance.hasHook("modifyData")) {
        var u = ss(a);
        this.instance.runHooks("modifyData", i, this.propToCol(n), u, "set"), u.isTouched() && (a = u.value);
      }
      if (l && l.hasOwnProperty && Dt(l, n))
        l[n] = a;
      else if (typeof n == "string" && n.indexOf(".") > -1) {
        var f = n.split("."), c = l, h = 0, d;
        for (h = 0, d = f.length - 1; h < d; h++)
          typeof c[f[h]] > "u" && (c[f[h]] = {}), c = c[f[h]];
        c[f[h]] = a;
      } else
        typeof n == "function" ? n(this.dataSource.slice(i, i + 1)[0], a) : l[n] = a;
    }
    /**
     * This ridiculous piece of code maps rows Id that are present in table data to those displayed for user.
     * The trick is, the physical row id (stored in settings.data) is not necessary the same
     * as the visual (displayed) row id (e.g. When sorting is applied).
     *
     * @param {number} index Visual row index.
     * @param {number} amount An amount of rows to translate.
     * @returns {number}
     */
  }, {
    key: "visualRowsToPhysical",
    value: function(r, n) {
      for (var o = this.instance.countSourceRows(), i = [], a = (o + r) % o, l = n, s; a < o && l; )
        s = this.instance.toPhysicalRow(a), i.push(s), l -= 1, a += 1;
      return i;
    }
    /**
     *
     * @param {number} index Visual column index.
     * @param {number} amount An amount of rows to translate.
     * @returns {Array}
     */
  }, {
    key: "visualColumnsToPhysical",
    value: function(r, n) {
      for (var o = this.instance.countCols(), i = [], a = (o + r) % o, l = n; a < o && l; ) {
        var s = this.instance.toPhysicalColumn(a);
        i.push(s), l -= 1, a += 1;
      }
      return i;
    }
    /**
     * Clears the data array.
     */
  }, {
    key: "clear",
    value: function() {
      for (var r = 0; r < this.instance.countSourceRows(); r++)
        for (var n = 0; n < this.instance.countCols(); n++)
          this.set(r, this.colToProp(n), "");
    }
    /**
     * Get data length.
     *
     * @returns {number}
     */
  }, {
    key: "getLength",
    value: function() {
      var r = this.tableMeta.maxRows, n;
      r < 0 || r === 0 ? n = 0 : n = r || 1 / 0;
      var o = this.instance.rowIndexMapper.getNotTrimmedIndexesLength();
      return Math.min(o, n);
    }
    /**
     * Returns the data array.
     *
     * @returns {Array}
     */
  }, {
    key: "getAll",
    value: function() {
      var r = {
        row: 0,
        col: 0
      }, n = {
        row: Math.max(this.instance.countRows() - 1, 0),
        col: Math.max(this.instance.countCols() - 1, 0)
      };
      return r.row - n.row === 0 && !this.instance.countSourceRows() ? [] : this.getRange(r, n, e.DESTINATION_RENDERER);
    }
    /**
     * Count the number of columns cached in the `colToProp` cache.
     *
     * @returns {number} Amount of cached columns.
     */
  }, {
    key: "countCachedColumns",
    value: function() {
      return this.colToPropCache.length;
    }
    /**
     * Returns data range as array.
     *
     * @param {object} [start] Start selection position. Visual indexes.
     * @param {object} [end] End selection position. Visual indexes.
     * @param {number} destination Destination of datamap.get.
     * @returns {Array}
     */
  }, {
    key: "getRange",
    value: function(r, n, o) {
      var i = [], a, l, s, u = this.tableMeta.maxRows, f = this.tableMeta.maxCols;
      if (u === 0 || f === 0)
        return [];
      var c = o === e.DESTINATION_CLIPBOARD_GENERATOR ? this.getCopyable : this.get, h = Math.min(Math.max(u - 1, 0), Math.max(r.row, n.row)), d = Math.min(Math.max(f - 1, 0), Math.max(r.col, n.col));
      for (a = Math.min(r.row, n.row); a <= h; a++) {
        s = [];
        var y = a >= 0 ? this.instance.toPhysicalRow(a) : a;
        for (l = Math.min(r.col, n.col); l <= d && y !== null; l++)
          s.push(c.call(this, a, this.colToProp(l)));
        y !== null && i.push(s);
      }
      return i;
    }
    /**
     * Return data as text (tab separated columns).
     *
     * @param {object} [start] Start selection position. Visual indexes.
     * @param {object} [end] End selection position. Visual indexes.
     * @returns {string}
     */
  }, {
    key: "getText",
    value: function(r, n) {
      return Cc(this.getRange(r, n, e.DESTINATION_RENDERER));
    }
    /**
     * Return data as copyable text (tab separated columns intended for clipboard copy to an external application).
     *
     * @param {object} [start] Start selection position. Visual indexes.
     * @param {object} [end] End selection position. Visual indexes.
     * @returns {string}
     */
  }, {
    key: "getCopyableText",
    value: function(r, n) {
      return Cc(this.getRange(r, n, e.DESTINATION_CLIPBOARD_GENERATOR));
    }
    /**
     * Destroy instance.
     */
  }, {
    key: "destroy",
    value: function() {
      this.instance = null, this.metaManager = null, this.dataSource = null, this.duckSchema = null, this.colToPropCache.length = 0, this.propToColCache.clear(), this.propToColCache = void 0;
    }
  }], [{
    key: "DESTINATION_RENDERER",
    get: (
      /**
       * @type {number}
       */
      function() {
        return 1;
      }
    )
    /**
     * @type {number}
     */
  }, {
    key: "DESTINATION_CLIPBOARD_GENERATOR",
    get: function() {
      return 2;
    }
  }]), e;
}();
const SSe = wSe;
var wv = nn("cellTypes"), CSe = wv.register, _Se = wv.getItem, S2 = wv.hasItem;
wv.getNames;
wv.getValues;
function OSe(e) {
  if (!S2(e))
    throw Error('You declared cell type "'.concat(e, `" as a string that is not mapped to a known object.
                 Cell type must be an object or a string mapped to an object registered by
                 "Handsontable.cellTypes.registerCellType" method`));
  return _Se(e);
}
function $n(e, t) {
  typeof e != "string" && (t = e, e = t.CELL_TYPE);
  var r = t, n = r.editor, o = r.renderer, i = r.validator;
  n && Nr(e, n), o && ro(e, o), i && fc(e, i), CSe(e, t);
}
function RSe(e, t) {
  var r;
  return e === "CELL_TYPE" ? !1 : ((r = t._automaticallyAssignedMetaProps) === null || r === void 0 ? void 0 : r.has(e)) || !Dt(t, e);
}
function Bg(e, t) {
  var r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : e, n = typeof t.type == "string" ? OSe(t.type) : t.type;
  if (e._automaticallyAssignedMetaProps && Ye(t, function(i, a) {
    return void e._automaticallyAssignedMetaProps.delete(a);
  }), !!ze(n)) {
    r === e && !e._automaticallyAssignedMetaProps && (e._automaticallyAssignedMetaProps = /* @__PURE__ */ new Set());
    var o = {};
    Ye(n, function(i, a) {
      if (RSe(a, r)) {
        var l;
        o[a] = i, (l = e._automaticallyAssignedMetaProps) === null || l === void 0 || l.add(a);
      }
    }), Gt(e, o);
  }
}
function ESe(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  function r() {
  }
  $i(r, e);
  for (var n = 0; n < t.length; n++)
    r.prototype[t[n]] = void 0;
  return r;
}
function up(e) {
  return Number.isInteger(e) && e >= 0;
}
function fp(e, t) {
  if (!e())
    throw new Error("Assertion failed: ".concat(t));
}
function ay(e) {
  return e == null;
}
function F_(e) {
  "@babel/helpers - typeof";
  return F_ = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, F_(e);
}
const C2 = function() {
  return {
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * Information on which of the meta properties were added automatically.
     * For example: setting the `renderer` property directly won't extend the `_automaticallyAssignedMetaProps`
     * entry, but setting a `type` will modify it to `Set(3) {'renderer', 'editor', 'validator', ...}`.
     *
     * @private
     * @type {Set}
     * @default undefined
     */
    _automaticallyAssignedMetaProps: void 0,
    /**
     * The `activeHeaderClassName` option lets you add a CSS class name
     * to every currently-active, currently-selected header (when a whole column or row is selected).
     *
     * Read more:
     * - [`currentRowClassName`](#currentRowClassName)
     * - [`currentColClassName`](#currentColClassName)
     * - [`currentHeaderClassName`](#currentHeaderClassName)
     * - [`invalidCellClassName`](#invalidCellClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`commentedCellClassName`](#commentedCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`TableClassName`](#TableClassName)
     * - [`className`](#className)
     *
     * @memberof Options#
     * @type {string}
     * @since 0.38.2
     * @default 'ht__active_highlight'
     * @category Core
     *
     * @example
     * ```js
     * // add an `ht__active_highlight` CSS class name
     * // to every currently-active, currently-selected header
     * activeHeaderClassName: 'ht__active_highlight',
     * ```
     */
    activeHeaderClassName: "ht__active_highlight",
    /**
     * The `allowEmpty` option determines whether Handsontable accepts the following values:
     * - `null`
     * - `undefined`
     * - `''`
     *
     * You can set the `allowEmpty` option to one of the following:
     *
     * | Setting          | Description                                                                                                                          |
     * | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------ |
     * | `true` (default) | - Accept `null`, `undefined` and `''` values<br>- Mark cells that contain `null`, `undefined` or `''` values as `valid`              |
     * | `false`          | - Don't accept `null`, `undefined` and `''` values<br>- Mark cells that contain `null`, `undefined` or `''` values with as `invalid` |
     *
     * ::: tip
     * To use the [`allowEmpty`](#allowempty) option, you need to set the [`validator`](#validator) option (or the [`type`](#type) option).
     * :::
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // allow empty values in each cell of the entire grid
     * allowEmpty: true,
     *
     * // or
     * columns: [
     *   {
     *     type: 'date',
     *     dateFormat: 'DD/MM/YYYY',
     *     // allow empty values in each cell of the 'date' column
     *     allowEmpty: true
     *   }
     * ],
     * ```
     */
    allowEmpty: !0,
    /**
     * The `allowHtml` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)
     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) cells' [`source`](#source) data
     * is treated as HTML.
     *
     * You can set the `allowHtml` option to one of the following:
     *
     * | Setting           | Description                                         |
     * | ----------------- | --------------------------------------------------- |
     * | `false` (default) | The [`source`](#source) data is not treated as HTML |
     * | `true`            | The [`source`](#source) data is treated as HTML     |
     *
     * __Warning:__ Setting the `allowHtml` option to `true` can cause serious XSS vulnerabilities.
     *
     * Read more:
     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
     * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type.md)
     * - [`source`](#source)
     *
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *   // set the `type` of each cell in this column to `autocomplete`
     *   type: 'autocomplete',
     *   // set options available in every `autocomplete` cell of this column
     *   source: ['<strong>foo</strong>', '<strong>bar</strong>']
     *   // use HTML in the `source` list
     *   allowHtml: true,
     *   },
     * ],
     * ```
     */
    allowHtml: !1,
    /**
     * If set to `true`, the `allowInsertColumn` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):
     * - **Insert column left**
     * - **Insert column right**
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // hide the 'Insert column left' and 'Insert column right' menu items from the context menu
     * allowInsertColumn: false,
     * ```
     */
    allowInsertColumn: !0,
    /**
     * If set to `true`, the `allowInsertRow` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):
     * - **Insert row above**
     * - **Insert row below**
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // hide the 'Insert row above' and 'Insert row below' menu items from the context menu
     * allowInsertRow: false,
     * ```
     */
    allowInsertRow: !0,
    /**
     * The `allowInvalid` option determines whether Handsontable accepts values
     * that were marked as `invalid` by the [cell validator](@/guides/cell-functions/cell-validator.md).
     *
     * You can set the `allowInvalid` option to one of the following:
     *
     * | Setting          | Description                                                                                                                                                                        |
     * | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `true` (default) | - Accept `invalid` values<br>- Allow the user to close the [cell editor](@/guides/cell-functions/cell-editor.md) with `invalid` values<br>- Save `invalid` values into the data source                   |
     * | `false`          | - Don't accept `invalid` values<br>- Don't allow the user to close the [cell editor](@/guides/cell-functions/cell-editor.md) with `invalid` values<br>- Don't save `invalid` values into the data source |
     *
     * Setting the `allowInvalid` option to `false` can be useful when used with the [Autocomplete strict mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-strict-mode).
     *
     * Read more:
     * - [Cell validator](@/guides/cell-functions/cell-validator.md)
     * - [Cell editor](@/guides/cell-functions/cell-editor.md)
     * - [Autocomplete strict mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-strict-mode)
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // don't accept `invalid` values
     * // don't allow the user to close the cell editor
     * // don't save `invalid` values into the data source
     * allowInvalid: false,
     * ```
     */
    allowInvalid: !0,
    /**
     * If set to `true`, the `allowRemoveColumn` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):
     * - **Remove column**
     *
     * Read more:
     * - [Context menu](@/guides/accessories-and-menus/context-menu.md)
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // hide the 'Remove column' menu item from the context menu
     * allowRemoveColumn: false,
     * ```
     */
    allowRemoveColumn: !0,
    /**
     * If set to `true`, the `allowRemoveRow` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):
     * - **Remove row**
     *
     * Read more:
     * - [Context menu](@/guides/accessories-and-menus/context-menu.md)
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // hide the 'Remove row' menu item from the context menu
     * allowRemoveRow: false,
     * ```
     */
    allowRemoveRow: !0,
    /**
     * The `autoColumnSize` option configures the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin.
     *
     * You can set the `autoColumnSize` option to one of the following:
     *
     * | Setting   | Description                                                                                  |
     * | --------- | -------------------------------------------------------------------------------------------- |
     * | `false`   | Disable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin                               |
     * | `true`    | Enable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin with the default configuration |
     * | An object | Enable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin and modify the plugin options  |
     *
     * If you set the `autoColumnSize` option to an object, you can set the following [`AutoColumnSize`](@/api/autoColumnSize.md) plugin options:
     *
     * | Property                | Possible values                 | Description                                                                                                    |
     * | ----------------------- | ------------------------------- | -------------------------------------------------------------------------------------------------------------- |
     * | `syncLimit`             | A number \| A percentage string | The number/percentage of columns to keep in sync<br>(default: `50`)                                            |
     * | `useHeaders`            | `true` \| `false`               | When calculating column widths:<br>`true`: use column headers<br>`false`: don't use column headers          |
     * | `samplingRatio`         | A number                        | The number of samples of the same length to be used in column width calculations                               |
     * | `allowSampleDuplicates` | `true` \| `false`               | When calculating column widths:<br>`true`: Allow duplicate samples<br>`false`: Don't allow duplicate samples |
     *
     * By default, the `autoColumnSize` option is set to `undefined`,
     * but the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin acts as enabled.
     * To disable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin completely,
     * set the `autoColumnSize` option to `false`.
     *
     * Using the [`colWidths`](#colWidths) option forcibly disables the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin.
     *
     * Read more:
     * - [Plugins: `AutoColumnSize`](@/api/autoColumnSize.md)
     *
     * @memberof Options#
     * @type {object|boolean}
     * @default undefined
     * @category AutoColumnSize
     *
     * @example
     * ```js
     * autoColumnSize: {
     *   // keep 40% of columns in sync (the rest of columns: async)
     *   syncLimit: '40%',
     *   // when calculating column widths, use column headers
     *   useHeaders: true,
     *   // when calculating column widths, use 10 samples of the same length
     *   samplingRatio: 10,
     *   // when calculating column widths, allow duplicate samples
     *   allowSampleDuplicates: true
     * },
     * ```
     */
    autoColumnSize: void 0,
    /**
     * The `autoRowSize` option configures the [`AutoRowSize`](@/api/autoRowSize.md) plugin.
     *
     * You can set the `autoRowSize` option to one of the following:
     *
     * | Setting   | Description                                                                            |
     * | --------- | -------------------------------------------------------------------------------------- |
     * | `false`   | Disable the [`AutoRowSize`](@/api/autoRowSize.md) plugin                               |
     * | `true`    | Enable the [`AutoRowSize`](@/api/autoRowSize.md) plugin with the default configuration |
     * | An object | Enable the [`AutoRowSize`](@/api/autoRowSize.md) plugin and modify the plugin options  |
     *
     * To give Handsontable's [scrollbar](https://handsontable.com/docs/8.0.0/demo-scrolling.html)
     * a proper size, set the `autoRowSize` option to `true`.
     *
     * If you set the `autoRowSize` option to an object, you can set the following [`AutoRowSize`](@/api/autoRowSize.md) plugin options:
     *
     * | Property    | Possible values                 | Description                                                       |
     * | ----------- | ------------------------------- | ----------------------------------------------------------------- |
     * | `syncLimit` | A number \| A percentage string | The number/percentage of rows to keep in sync<br>(default: `500`) |
     *
     * Using the [`rowHeights`](#rowHeights) option forcibly disables the [`AutoRowSize`](@/api/autoRowSize.md) plugin.
     *
     * Read more:
     * - [Plugins: `AutoRowSize`](@/api/autoRowSize.md)
     *
     * @memberof Options#
     * @type {object|boolean}
     * @default undefined
     * @category AutoRowSize
     *
     * @example
     * ```js
     * autoRowSize: {
     *   // keep 40% of rows in sync (the rest of rows: async)
     *   syncLimit: '40%'
     * },
     * ```
     */
    autoRowSize: void 0,
    /**
     * With [`autoWrapCol`](#autowrapcol) enabled:
     * - When you select a bottom-most cell, pressing <kbd>**â**</kbd> takes you to the top-most cell of the next column.
     * - When you select a top-most cell, pressing <kbd>**â**</kbd> takes you to the bottom-most cell of the previous column.
     *
     * You can set the [`autoWrapCol`](#autowrapcol) option to one of the following:
     *
     * | Setting           | Description                                                                                                                                                                                                                                  |
     * | ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `true`            | When you select a bottom-most cell, pressing <kbd>**â**</kbd> takes you to the top-most cell of the next column.<br><br>When you select a top-most cell, pressing <kbd>**â**</kbd> takes you to the bottom-most cell of the previous column. |
     * | `false` (default) | When you select a bottom-most cell, pressing <kbd>**â**</kbd> doesn't do anything.<br><br>When you select a top-most cell, pressing <kbd>**â**</kbd> doesn't do anything.                                                                    |
     *
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * // when you select a bottom-most cell, pressing â¬ doesn't do anything
     * // when you select a top-most cell, pressing â¬ doesn't do anything
     * autoWrapCol: false, // default setting
     *
     * // when you select a bottom-most cell, pressing â¬ takes you to the top-most cell of the next column
     * // when you select a top-most cell, pressing â¬ takes you to the bottom-most cell of the previous column
     * autoWrapCol: true,
     * ```
     */
    autoWrapCol: !1,
    /**
     * With [`autoWrapRow`](#autoWrapRow) enabled:
     * - When you select the first cell of a row, pressing <kbd>**â**</kbd>* takes you to the last cell of the row above.
     * - When you select the last cell of a row, pressing <kbd>**â**</kbd>* takes you to the first cell of the row below.
     *
     * You can set the [`autoWrapRow`](#autoWrapRow) option to one of the following:
     *
     * | Setting           | Description                                                                                                                                                                                                                              |
     * | ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `true`            | When you select the first cell of a row, pressing <kbd>**â**</kbd>* takes you to the last cell of the row above.<br><br>When you select the last cell of a row, pressing <kbd>**â**</kbd>* takes you to the first cell of the row below. |
     * | `false` (default) | When you select the first cell of a row, pressing <kbd>**â**</kbd>* doesn't do anything.<br><br>When you select the last cell of a row, pressing <kbd>**â**</kbd>* doesn't do anything.                                                  |
     *
     * \* The exact key depends on your [`layoutDirection`](#layoutdirection) configuration.
     *
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * // when you select the first cell of a row, pressing â¬ doesn't do anything
     * // when you select the last cell of a row, pressing â¡ï¸ doesn't do anything
     * autoWrapRow: false, // default setting
     *
     * // when you select the first cell of a row, pressing â¬ takes you to the last cell of the row above
     * // when you select the last cell of a row, pressing â¡ï¸ takes you to the first cell of the row below
     * autoWrapRow: true,
     * ```
     */
    autoWrapRow: !1,
    /**
     * @description
     * The `bindRowsWithHeaders` option configures the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin.
     *
     * You can set the `bindRowsWithHeaders` option to one of the following:
     *
     * | Setting | Description                                                                  |
     * | ------- | ---------------------------------------------------------------------------- |
     * | `false` | Disable the the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin |
     * | `true`  | Enable the the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin  |
     *
     * Read more:
     * - [Plugins: `BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md)
     *
     * @memberof Options#
     * @type {boolean|string}
     * @default undefined
     * @category BindRowsWithHeaders
     *
     * @example
     * ```js
     * // enable the `BindRowsWithHeaders` plugin
     * bindRowsWithHeaders: true
     * ```
     */
    bindRowsWithHeaders: void 0,
    /**
     * The `cell` option lets you apply [configuration options](@/guides/getting-started/configuration-options.md) to individual cells.
     *
     * The `cell` option overwrites the [top-level grid options](@/guides/getting-started/configuration-options.md#set-grid-options),
     * and the [`columns`](#columns) options.
     *
     * Read more:
     * - [Configuration options: Setting cell options](@/guides/getting-started/configuration-options.md#set-cell-options)
     * - [`columns`](#columns)
     *
     * @memberof Options#
     * @type {Array[]}
     * @default []
     * @category Core
     *
     * @example
     * ```js
     * // set the `cell` option to an array of objects
     * cell: [
     *   // make the cell with coordinates (0, 0) read-only
     *   {
     *     row: 0,
     *     col: 0,
     *     readOnly: true
     *   }
     * ],
     * ```
     */
    cell: [],
    /**
     * @description
     * The `cells` option lets you apply any other [configuration options](@/guides/getting-started/configuration-options.md) to
     * individual grid elements (columns, rows, cells), based on any logic you implement.
     *
     * The `cells` option overwrites all other options (including options set by [`columns`](#columns) and [`cell`](#cell)).
     * It takes the following parameters:
     *
     * | Parameter | Required | Type             | Description                                                                                                                                                                                                                                                                                                                             |
     * | --------- | -------- | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `row`     | Yes      | Number           | A physical row index                                                                                                                                                                                                                                                                                                                    |
     * | `column`  | Yes      | Number           | A physical column index                                                                                                                                                                                                                                                                                                                 |
     * | `prop`    | No       | String \| Number | If [`data`](#data) is set to an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), `prop` is the same number as `column`.<br><br>If [`data`](#data) is set to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), `prop` is a property name for the column's data object. |
     *
     * Read more:
     * - [Configuration options: Implementing custom logic](@/guides/getting-started/configuration-options.md#implement-custom-logic)
     * - [Configuration options: Setting row options](@/guides/getting-started/configuration-options.md#set-row-options)
     * - [`columns`](#columns)
     * - [`cell`](#cell)
     *
     * @memberof Options#
     * @type {Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // set the `cells` option to your custom function
     * cells(row, column, prop) {
     *   const cellProperties = { readOnly: false };
     *   const visualRowIndex = this.instance.toVisualRow(row);
     *   const visualColIndex = this.instance.toVisualColumn(column);
     *
     *   if (visualRowIndex === 0 && visualColIndex === 0) {
     *     cellProperties.readOnly = true;
     *   }
     *
     *   return cellProperties;
     * },
     * ```
     */
    cells: void 0,
    /**
     * The `checkedTemplate` option lets you configure what value
     * a checked [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell has.
     *
     * You can set the `checkedTemplate` option to one of the following:
     *
     * | Setting          | Description                                                                                                                                                                              |
     * | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `true` (default) | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is checked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns `true`                  |
     * | A string         | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is checked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns a string of your choice |
     *
     * Read more:
     * - [Checkbox cell type: Checkbox template](@/guides/cell-types/checkbox-cell-type.md#checkbox-template)
     * - [`getDataAtCell()`](@/api/core.md#getDataAtCell)
     * - [`uncheckedTemplate`](#uncheckedTemplate)
     *
     * @memberof Options#
     * @type {boolean|string|number}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     // set the `type` of each cell in this column to `checkbox`
     *     // when checked, the cell's value is `true`
     *     // when unchecked, the cell's value is `false`
     *     type: 'checkbox',
     *   },
     *   {
     *     // set the `type` of each cell in this column to `checkbox`
     *     type: 'checkbox',
     *     // when checked, the cell's value is `'Yes'`
     *     checkedTemplate: 'Yes',
     *     // when unchecked, the cell's value is `'No'`
     *     uncheckedTemplate: 'No'
     *  }
     * ],
     * ```
     */
    checkedTemplate: void 0,
    /**
     * The `className` option lets you add CSS class names to every currently-selected element.
     *
     * You can set the `className` option to one of the following:
     *
     * | Setting             | Description                                                      |
     * | ------------------- | ---------------------------------------------------------------- |
     * | A string            | Add a single CSS class name to every currently-selected element  |
     * | An array of strings | Add multiple CSS class names to every currently-selected element |
     *
     * ::: tip
     * Don't change the `className` metadata of the [column summary](@/guides/columns/column-summary.md) row.
     * To style the summary row, use the class name assigned automatically by the [`ColumnSummary`](@/api/columnSummary.md) plugin: `columnSummaryResult`.
     * :::
     *
     * To apply different CSS class names on different levels, use Handsontable's [cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration).
     *
     * Read more:
     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)
     * - [`currentRowClassName`](#currentRowClassName)
     * - [`currentColClassName`](#currentColClassName)
     * - [`currentHeaderClassName`](#currentHeaderClassName)
     * - [`activeHeaderClassName`](#activeHeaderClassName)
     * - [`invalidCellClassName`](#invalidCellClassName)
     * - [`placeholderCellClassName`](#placeholderCellClassName)
     * - [`commentedCellClassName`](#commentedCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`TableClassName`](#TableClassName)
     *
     * @memberof Options#
     * @type {string|string[]}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // add a `your-class-name` CSS class name
     * // to every currently-selected element
     * className: 'your-class-name',
     *
     * // add `first-class-name` and `second-class-name` CSS class names
     * // to every currently-selected element
     * className: ['first-class-name', 'second-class-name'],
     * ```
     */
    className: void 0,
    /**
     * The `colHeaders` option configures your grid's column headers.
     *
     * You can set the `colHeaders` option to one of the following:
     *
     * | Setting  | Description                                                          |
     * | -------- | -------------------------------------------------------------------- |
     * | `true`   | Enable the default column headers ('A', 'B', 'C', ...)               |
     * | `false`  | Disable column headers                                               |
     * | An array | Define your own column headers (e.g. `['One', 'Two', 'Three', ...]`) |
     * | A function | Define your own column headers, using a function                     |
     *
     * Read more:
     * - [Column header](@/guides/columns/column-header.md)
     *
     * @memberof Options#
     * @type {boolean|string[]|Function}
     * @default null
     * @category Core
     *
     * @example
     * ```js
     * // enable the default column headers
     * colHeaders: true,
     *
     * // set your own column headers
     * colHeaders: ['One', 'Two', 'Three'],
     *
     * // set your own column headers, using a function
     * colHeaders: function(visualColumnIndex) {
     *   return `${visualColumnIndex} + : AB`;
     * },
     * ```
     */
    colHeaders: null,
    /**
     * @description
     * The `collapsibleColumns` option configures the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin.
     *
     * You can set the `collapsibleColumns` option to one of the following:
     *
     * | Setting              | Description                                                                                       |
     * | -------------------- | ------------------------------------------------------------------------------------------------- |
     * | `false`              | Disable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin                            |
     * | `true`               | Enable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin                             |
     * | An array of objects  | Enable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin for selected column headers |
     *
     * Read more:
     * - [Plugins: `CollapsibleColumns`](@/api/collapsibleColumns.md)
     *
     * @memberof Options#
     * @type {boolean|object[]}
     * @default undefined
     * @category CollapsibleColumns
     *
     * @example
     * ```js
     * // enable column collapsing for all headers
     * collapsibleColumns: true,
     *
     * // enable column collapsing for selected headers
     * collapsibleColumns: [
     *   {row: -4, col: 1, collapsible: true},
     *   {row: -3, col: 5, collapsible: true}
     * ],
     * ```
     */
    collapsibleColumns: void 0,
    /**
     * @description
     * The `columnHeaderHeight` option configures the height of column headers.
     *
     * You can set the `columnHeaderHeight` option to one of the following:
     *
     * | Setting  | Description                                         |
     * | -------- | --------------------------------------------------- |
     * | A number | Set the same height for every column header         |
     * | An array | Set different heights for individual column headers |
     *
     * @memberof Options#
     * @type {number|number[]}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // set the same height for every column header
     * columnHeaderHeight: 25,
     *
     * // set different heights for individual column headers
     * columnHeaderHeight: [25, 30, 55],
     * ```
     */
    columnHeaderHeight: void 0,
    /**
     * @description
     * The `columns` option lets you apply any other [configuration options](@/guides/getting-started/configuration-options.md) to individual columns (or ranges of columns).
     *
     * You can set the `columns` option to one of the following:
     * - An array of objects (each object represents one column)
     * - A function that returns an array of objects
     *
     * The `columns` option overwrites the [top-level grid options](@/guides/getting-started/configuration-options.md#set-grid-options).
     *
     * When you use `columns`, the [`startCols`](#startCols), [`minCols`](#minCols), and [`maxCols`](#maxCols) options are ignored.
     *
     * Read more:
     * - [Configuration options: Setting column options](@/guides/getting-started/configuration-options.md#set-column-options)
     * - [`startCols`](#startCols)
     * - [`minCols`](#minCols)
     * - [`maxCols`](#maxCols)
     * - [`data`](#data)
     *
     * @memberof Options#
     * @type {object[]|Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // set the `columns` option to an array of objects
     * // each object represents one column
     * columns: [
     *   {
     *     // column options for the first (by physical index) column
     *     type: 'numeric',
     *     numericFormat: {
     *       pattern: '0,0.00 $'
     *     }
     *   },
     *   {
     *     // column options for the second (by physical index) column
     *     type: 'text',
     *     readOnly: true
     *   }
     * ],
     *
     * // or set the `columns` option to a function, based on physical indexes
     * columns(index) {
     *   return {
     *     type: index > 0 ? 'numeric' : 'text',
     *     readOnly: index < 1
     *   }
     * }
     * ```
     */
    columns: void 0,
    /**
     * @description
     * The `columnSorting` option configures the [`ColumnSorting`](@/api/columnSorting.md) plugin.
     *
     * You can set the `columnSorting` option to one of the following:
     *
     * | Setting    | Description                                                                                                                            |
     * | ---------- | -------------------------------------------------------------------------------------------------------------------------------------- |
     * | `true`     | Enable the [`ColumnSorting`](@/api/columnSorting.md) plugin with the default configuration                                             |
     * | `false`    | Disable the [`ColumnSorting`](@/api/columnSorting.md) plugin                                                                           |
     * | An object  | - Enable the [`ColumnSorting`](@/api/columnSorting.md) plugin<br>- Modify the [`ColumnSorting`](@/api/columnSorting.md) plugin options |
     *
     * If you set the `columnSorting` option to an object,
     * you can set the following [`ColumnSorting`](@/api/columnSorting.md) plugin options:
     *
     * | Option                   | Possible settings                                                                                                                                |
     * | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------ |
     * | `indicator`              | `true`: Display the arrow icon in the column header, to indicate a sortable column<br>`false`: Don't display the arrow icon in the column header  |
     * | `headerAction`           | `true`: Enable clicking on the column header to sort the column<br>`false`: Disable clicking on the column header to sort the column             |
     * | `sortEmptyCells`         | `true`: Sort empty cells as well<br>`false`: Place empty cells at the end                                                                        |
     * | `compareFunctionFactory` | A [custom compare function](@/guides/rows/rows-sorting.md#add-a-custom-comparator)                                                                |
     *
     * If you set the `columnSorting` option to an object,
     * you can also sort individual columns at Handsontable's initialization.
     * In the `columnSorting` object, add an object named `initialConfig`,
     * with the following properties:
     *
     * | Option      | Possible settings   | Description                                                      |
     * | ----------- | ------------------- | ---------------------------------------------------------------- |
     * | `column`    | A number            | The index of the column that you want to sort at initialization  |
     * | `sortOrder` | `'asc'` \| `'desc'` | The sorting order:<br>`'asc'`: ascending<br>`'desc'`: descending |
     *
     * Read more:
     * - [Rows sorting](@/guides/rows/rows-sorting.md)
     * - [Rows sorting: Custom compare functions](@/guides/rows/rows-sorting.md#add-a-custom-comparator)
     * - [`multiColumnSorting`](#multiColumnSorting)
     *
     * @memberof Options#
     * @type {boolean|object}
     * @default undefined
     * @category ColumnSorting
     *
     * @example
     * ```js
     * // enable the `ColumnSorting` plugin
     * columnSorting: true
     *
     * // enable the `ColumnSorting` plugin with custom configuration
     * columnSorting: {
     *   // sort empty cells as well
     *   sortEmptyCells: true,
     *   // display the arrow icon in the column header
     *   indicator: true,
     *   // disable clicking on the column header to sort the column
     *   headerAction: false,
     *   // add a custom compare function
     *   compareFunctionFactory(sortOrder, columnMeta) {
     *     return function(value, nextValue) {
     *       // some value comparisons which will return -1, 0 or 1...
     *     }
     *   }
     * }
     *
     * // enable the `ColumnSorting` plugin
     * columnSorting: {
     *   // at initialization, sort column 1 in ascending order
     *   initialConfig: {
     *     column: 1,
     *     sortOrder: 'asc'
     *   },
     *   // at initialization, sort column 2 in descending order
     *   initialConfig: {
     *     column: 2,
     *     sortOrder: 'desc'
     *   }
     * }
     * ```
     */
    columnSorting: void 0,
    /**
     * @description
     * The `columnSummary` option configures the [`ColumnSummary`](@/api/columnSummary.md) plugin.
     *
     * You can set the `columnSummary` option to an array of objects.
     * Each object configures a single column summary, using the following properties:
     *
     * | Property                 | Possible values                                                         | Description                                                                                                                  |
     * | ------------------------ | ----------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- |
     * | `sourceColumn`           | A number                                                                | [Column to summarize](@/guides/columns/column-summary.md#step-2-select-cells-that-you-want-to-summarize)                     |
     * | `ranges`                 | An array                                                                | [Ranges of rows to summarize](@/guides/columns/column-summary.md#step-2-select-cells-that-you-want-to-summarize)             |
     * | `type`                   | `'sum'` \| `'min'` \| `'max'` \| `'count'` \| `'average'` \| `'custom'` | [Summary function](@/guides/columns/column-summary.md#step-3-calculate-your-summary)                                         |
     * | `destinationRow`         | A number                                                                | [Destination cell's row coordinate](@/guides/columns/column-summary.md#step-4-provide-the-destination-cell-s-coordinates)    |
     * | `destinationColumn`      | A number                                                                | [Destination cell's column coordinate](@/guides/columns/column-summary.md#step-4-provide-the-destination-cell-s-coordinates) |
     * | `forceNumeric`           | `true`  \| `false`                                                      | [Treat non-numerics as numerics](@/guides/columns/column-summary.md#force-numeric-values)                                  |
     * | `reversedRowCoords`      | `true`  \| `false`                                                      | [Reverse row coordinates](@/guides/columns/column-summary.md#step-5-make-room-for-the-destination-cell)                      |
     * | `suppressDataTypeErrors` | `true`  \| `false`                                                      | [Suppress data type errors](@/guides/columns/column-summary.md#throw-data-type-errors)                                    |
     * | `readOnly`               | `true`  \| `false`                                                      | Make summary cell read-only                                                                                                  |
     * | `roundFloat`             | `true`  \| `false`                                                      | [Round summary result](@/guides/columns/column-summary.md#round-a-column-summary-result)                                  |
     * | `customFunction`         | A function                                                              | [Custom summary function](@/guides/columns/column-summary.md#implement-a-custom-summary-function)                         |
     *
     * Read more:
     * - [Column summary](@/guides/columns/column-summary.md)
     * - [Plugins: `ColumnSummary`](@/api/columnSummary.md)
     *
     * @memberof Options#
     * @type {object[]|Function}
     * @default undefined
     * @category ColumnSummary
     *
     * @example
     * ```js
     * columnSummary: [
     *   {
     *     sourceColumn: 0,
     *     ranges: [
     *       [0, 2], [4], [6, 8]
     *     ],
     *     type: 'custom',
     *     destinationRow: 4,
     *     destinationColumn: 1,
     *     forceNumeric: true,
     *     reversedRowCoords: true,
     *     suppressDataTypeErrors: false,
     *     readOnly: true,
     *     roundFloat: false,
     *     customFunction(endpoint) {
     *        return 100;
     *     }
     *   }
     * ],
     * ```
     */
    columnSummary: void 0,
    /**
     * The `colWidths` option sets columns' widths, in pixels.
     *
     * The default column width is 50px. To change it, set the `colWidths` option to one of the following:
     *
     * | Setting     | Description                                                                                          | Example                                                           |
     * | ----------- | ---------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------- |
     * | A number    | Set the same width for every column                                                                  | `colWidths: 100`                                                  |
     * | A string    | Set the same width for every column                                                                  | `colWidths: '100px'`                                              |
     * | An array    | Set widths separately for each column                                                                | `colWidths: [100, 120, undefined]`                                |
     * | A function  | Set column widths dynamically,<br>on each render                                                     | `colWidths(visualColumnIndex) { return visualColumnIndex * 10; }` |
     * | `undefined` | Used by the [modifyColWidth](@/api/hooks.md#modifyColWidth) hook,<br>to detect column width changes. | `colWidths: undefined`                                            |
     *
     * Setting `colWidths` even for a single column disables the {@link AutoColumnSize} plugin
     * for all columns. For this reason, if you use `colWidths`, we recommend you set a width for each one
     * of your columns. Otherwise, every column with an undefined width defaults back to 50px,
     * which may cut longer columns names.
     *
     * Read more:
     * - [Column width](@/guides/columns/column-width.md)
     * - [Hooks: `modifyColWidth`](@/api/hooks.md#modifyColWidth)
     * - [`autoColumnSize`](#autoColumnSize)
     *
     * @memberof Options#
     * @type {number|number[]|string|string[]|Array<undefined>|Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // set every column's width to 100px
     * colWidths: 100,
     *
     * // set every column's width to 100px
     * colWidths: '100px',
     *
     * // set the first (by visual index) column's width to 100
     * // set the second (by visual index) column's width to 120
     * // set the third (by visual index) column's width to `undefined`, so that it defaults to 50px
     * // set any other column's width to the default 50px (note that longer cell values and column names can get cut)
     * colWidths: [100, 120, undefined],
     *
     * // set each column's width individually, using a function
     * colWidths(visualColumnIndex) {
     *   return visualColumnIndex * 10;
     * },
     * ```
     */
    colWidths: void 0,
    /**
     * The `commentedCellClassName` option lets you add a CSS class name to cells
     * that have comments.
     *
     * Read more:
     * - [Comments](@/guides/cell-features/comments.md)
     * - [`comments`](#comments)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`currentRowClassName`](#currentRowClassName)
     * - [`currentHeaderClassName`](#currentHeaderClassName)
     * - [`activeHeaderClassName`](#activeHeaderClassName)
     * - [`invalidCellClassName`](#invalidCellClassName)
     * - [`placeholderCellClassName`](#placeholderCellClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`TableClassName`](#TableClassName)
     * - [`className`](#className)
     *
     * @memberof Options#
     * @type {string}
     * @default 'htCommentCell'
     * @category Core
     *
     * @example
     * ```js
     * // add a `has-comment` CSS class name
     * // to each cell that has a comment
     * commentedCellClassName: 'has-comment',
     * ```
     */
    commentedCellClassName: "htCommentCell",
    /**
     * @description
     * The `comments` option configures the [`Comments`](@/api/comments.md) plugin.
     *
     * You can set the `comments` option to one of the following:
     *
     * | Setting   | Description                                                                                                                                                                           |
     * | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `true`    | - Enable the [`Comments`](@/api/comments.md) plugin<br>- Add comment menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md)                                 |
     * | `false`   | Disable the [`Comments`](@/api/comments.md) plugin                                                                                                                                    |
     * | An object | - Enable the [`Comments`](@/api/comments.md) plugin<br>- Add comment menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md)<br>- Configure comment settings |
     *
     * If you set the `comments` option to an object, you can configure the following comment options:
     *
     * | Option         | Possible settings           | Description                                         |
     * | -------------- | --------------------------- | --------------------------------------------------- |
     * | `displayDelay` | A number (default: `250`)   | Display comments after a delay (in milliseconds)    |
     * | `readOnly`     | `true` \| `false` (default) | `true`: Make comments read-only                     |
     * | `style`        | An object                   | Set comment boxes' `width` and `height` (in pixels) |
     *
     * Read more:
     * - [Comments](@/guides/cell-features/comments.md)
     * - [Context menu](@/guides/accessories-and-menus/context-menu.md)
     * - [`width`](#width)
     * - [`height`](#height)
     * - [`readOnly`](#readOnly)
     * - [`commentedCellClassName`](#commentedCellClassName)
     *
     * @memberof Options#
     * @type {boolean|object[]}
     * @default false
     * @category Comments
     *
     * @example
     * ```js
     * // enable the `Comments` plugin
     * comments: true,
     *
     * // enable the `Comments` plugin
     * // and configure its settings
     * comments: {
     *   // display all comments with a 1-second delay
     *   displayDelay: 1000,
     *   // make all comments read-only
     *   readOnly: true,
     *   // set the default size of all comment boxes
     *   style: {
     *     width: 300,
     *     height: 100
     *   }
     * }
     * ```
     */
    comments: !1,
    /**
     * @description
     * The `contextMenu` option configures the [`ContextMenu`](@/api/contextMenu.md) plugin.
     *
     * You can set the `contextMenu` option to one of the following:
     *
     * | Setting   | Description                                                                                                                                                                                             |
     * | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `false`   | Disable the [`ContextMenu`](@/api/contextMenu.md) plugin                                                                                                                                                |
     * | `true`    | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Use the [default context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-default-options)                 |
     * | An array  | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Modify [individual context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options)              |
     * | An object | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Apply a [custom context menu configuration](@/guides/accessories-and-menus/context-menu.md#context-menu-with-a-fully-custom-configuration) |
     *
     * Read more:
     * - [Context menu](@/guides/accessories-and-menus/context-menu.md)
     * - [Context menu: Context menu with default options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-default-options)
     * - [Context menu: Context menu with specific options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options)
     * - [Context menu: Context menu with fully custom configuration options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-a-fully-custom-configuration)
     * - [Plugins: `ContextMenu`](@/api/contextMenu.md)
     *
     * @memberof Options#
     * @type {boolean|string[]|object}
     * @default undefined
     * @category ContextMenu
     *
     * @example
     * ```js
     * // enable the `ContextMenu` plugin
     * // use the default context menu options
     * contextMenu: true,
     *
     * // enable the `ContextMenu` plugin
     * // and modify individual context menu options
     * contextMenu: ['row_above', 'row_below', '---------', 'undo', 'redo'],
     *
     * // enable the `ContextMenu` plugin
     * // and apply a custom context menu configuration
     * contextMenu: {
     *   items: {
     *     'option1': {
     *       name: 'option1'
     *     },
     *     'option2': {
     *       name: 'option2',
     *       submenu: {
     *         items: [
     *           {
     *             key: 'option2:suboption1',
     *             name: 'option2:suboption1',
     *             callback: function(key, options) {
     *               ...
     *             }
     *           },
     *           ...
     *         ]
     *       }
     *     }
     *   }
     * },
     * ```
     */
    contextMenu: void 0,
    /**
     * @description
     * The `copyable` option determines whether a cell's value can be copied to the clipboard or not.
     *
     * You can set the `copyable` option to one of the following:
     *
     * | Setting                                                                                                        | Description                                                                                                            |
     * | -------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------- |
     * | `true` (default)                                                                                               | - On pressing <kbd>**Ctrl**</kbd>/<kbd>**Cmd**</kbd> + <kbd>**C**</kbd>, add the cell's value to the clipboard         |
     * | `false`<br>(default for the [`password`](@/guides/cell-types/password-cell-type.md) [cell type](#type))        | - On pressing <kbd>**Ctrl**</kbd>/<kbd>**Cmd**</kbd> + <kbd>**C**</kbd>, add an empty string (`""`) to the clipboard   |
     *
     * Read more:
     * - [Clipboard](@/guides/cell-features/clipboard.md)
     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)
     * - [Password cell type](@/guides/cell-types/password-cell-type.md)
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // enable copying for each cell of the entire grid
     * copyable: true,
     *
     * // enable copying for individual columns
     * columns: [
     *   {
     *     // enable copying for each cell of this column
     *     copyable: true
     *   },
     *   {
     *     // disable copying for each cell of this column
     *     copyable: false
     *   }
     * ]
     *
     * // enable copying for specific cells
     * cells: [
     *   {
     *     cell: 0,
     *     row: 0,
     *     // disable copying for cell (0, 0)
     *     copyable: false,
     *   }
     * ],
     * ```
     */
    copyable: !0,
    /**
     * The `copyPaste` option configures the [`CopyPaste`](@/api/copyPaste.md) plugin.
     *
     * You can set the `copyPaste` option to one of the following:
     *
     * | Setting           | Description                                                                                                            |
     * | ----------------- | ---------------------------------------------------------------------------------------------------------------------- |
     * | `true` (default)  | Enable the [`CopyPaste`](@/api/copyPaste.md) plugin with the default configuration                                     |
     * | `false`           | Disable the [`CopyPaste`](@/api/copyPaste.md) plugin                                                                   |
     * | An object         | - Enable the [`CopyPaste`](@/api/copyPaste.md) plugin<br>- Modify the [`CopyPaste`](@/api/copyPaste.md) plugin options |
     *
     * ##### copyPaste: Additional options
     *
     * If you set the `copyPaste` option to an object, you can set the following `CopyPaste` plugin options:
     *
     * | Option                   | Possible settings                                  | Description                                                                                                                                                                                         |
     * | ------------------------ | -------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `columnsLimit`           | A number (default: `Infinity`)                     | The maximum number of columns that can be copied                                                                                                                                                    |
     * | `rowsLimit`              | A number (default: `Infinity`)                     | The maximum number of columns that can be copied                                                                                                                                                    |
     * | `pasteMode`              | `'overwrite'` \| `'shift_down'` \| `'shift_right'` | When pasting:<br>`'overwrite'`: overwrite the currently-selected cells<br>`'shift_down'`: move the currently-selected cells down<br>`'shift_right'`: move the currently-selected cells to the right |
     * | `copyColumnHeaders`      | Boolean (default: `false`)                         | `true`: add a context menu option for copying cells along with their nearest column headers                                                                                                         |
     * | `copyColumnGroupHeaders` | Boolean (default: `false`)                         | `true`: add a context menu option for copying cells along with all their related columns headers                                                                                                    |
     * | `copyColumnHeadersOnly`  | Boolean (default: `false`)                         | `true`: add a context menu option for copying column headers nearest to the selected cells (without copying cells)                                                                    |
     * | `uiContainer`            | An HTML element                                    | The UI container for the secondary focusable element                                                                                                                                                |
     *
     * Read more:
     * - [Plugins: `CopyPaste`](@/api/copyPaste.md)
     * - [Guides: Clipboard](@/guides/cell-features/clipboard.md)
     *
     * @memberof Options#
     * @type {object|boolean}
     * @default true
     * @category CopyPaste
     *
     * @example
     * ```js
     * // enable the plugin with the default configuration
     * copyPaste: true // set by default
     *
     * // disable the plugin
     * copyPaste: false,
     *
     * // enable the plugin with a custom configuration
     * copyPaste: {
     *   // set a maximum number of columns that can be copied
     *   columnsLimit: 25,
     *
     *   // set a maximum number of rows that can be copied
     *   rowsLimit: 50,
     *
     *   // set the paste behavior
     *   pasteMode: 'shift_down',
     *
     *   // add the option to copy cells along with their nearest column headers
     *   copyColumnHeaders: true,
     *
     *   // add the option to copy cells along with all their related columns headers
     *   copyColumnGroupHeaders: true,
     *
     *   // add the option to copy just column headers (without copying cells)
     *   copyColumnHeadersOnly: true,
     *
     *   // set a UI container
     *   uiContainer: document.body,
     * },
     * ```
     */
    copyPaste: !0,
    /**
     * The `correctFormat` option configures whether incorrectly-formatted times and dates are amended or not.
     *
     * When the user enters dates and times, Handsontable can automatically adjust their format
     * to match the [`dateFormat`](#dateFormat) and [`timeFormat`](@/guides/cell-types/time-cell-type.md) settings.
     *
     * You can set the `correctFormat` option to one of the following:
     *
     * | Setting           | Description                                                                                                                                               |
     * | ----------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `false` (default) | Don't correct the format of the entered date or time (treat the entered date or time as invalid)                                                          |
     * | `true`            | Correct the format of the entered date or time to match the [`dateFormat`](#dateFormat) or [`timeFormat`](@/guides/cell-types/time-cell-type.md) settings |
     *
     * Read more:
     * - [Date cell type](@/guides/cell-types/date-cell-type.md)
     * - [Time cell type](@/guides/cell-types/time-cell-type.md)
     * - [`dateFormat`](#dateFormat)
     *
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *   // set the `type` of each cell in this column to `date`
     *   type: 'date',
     *   // for every `date` cell of this column, set the date format to `YYYY-MM-DD`
     *   dateFormat: 'YYYY-MM-DD',
     *   // enforce the `YYYY-MM-DD` date format
     *   correctFormat: true
     *   },
     *
     *   {
     *   // set the `type` of each cell in this column to `time`
     *   type: 'time',
     *   // for every `time` cell of this column, set the time format to `h:mm:ss a`
     *   timeFormat: 'h:mm:ss a',
     *   // enforce the `h:mm:ss a` time format
     *   correctFormat: true
     *   },
     * ],
     * ```
     */
    correctFormat: !1,
    /**
     * The `currentColClassName` option lets you add a CSS class name
     * to each cell of the currently-visible, currently-selected columns.
     *
     * Read more:
     * - [`currentRowClassName`](#currentRowClassName)
     * - [`currentHeaderClassName`](#currentHeaderClassName)
     * - [`activeHeaderClassName`](#activeHeaderClassName)
     * - [`invalidCellClassName`](#invalidCellClassName)
     * - [`placeholderCellClassName`](#placeholderCellClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`commentedCellClassName`](#commentedCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`TableClassName`](#TableClassName)
     * - [`className`](#className)
     *
     * @memberof Options#
     * @type {string}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // add a `your-class-name` CSS class name
     * // to each cell of the currently-visible, currently-selected columns
     * currentColClassName: 'your-class-name',
     * ```
     */
    currentColClassName: void 0,
    /**
     * The `currentHeaderClassName` option lets you add a CSS class name
     * to every currently-visible, currently-selected header.
     *
     * Read more:
     * - [`currentRowClassName`](#currentRowClassName)
     * - [`currentColClassName`](#currentColClassName)
     * - [`activeHeaderClassName`](#activeHeaderClassName)
     * - [`invalidCellClassName`](#invalidCellClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`commentedCellClassName`](#commentedCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`TableClassName`](#TableClassName)
     * - [`className`](#className)
     *
     * @memberof Options#
     * @type {string}
     * @default 'ht__highlight'
     * @category Core
     *
     * @example
     * ```js
     * // add an `ht__highlight` CSS class name
     * // to every currently-visible, currently-selected header
     * currentHeaderClassName: 'ht__highlight',
     * ```
     */
    currentHeaderClassName: "ht__highlight",
    /**
     * The `currentRowClassName` option lets you add a CSS class name
     * to each cell of the currently-visible, currently-selected rows.
     *
     * Read more:
     * - [`currentColClassName`](#currentColClassName)
     * - [`currentHeaderClassName`](#currentHeaderClassName)
     * - [`activeHeaderClassName`](#activeHeaderClassName)
     * - [`invalidCellClassName`](#invalidCellClassName)
     * - [`placeholderCellClassName`](#placeholderCellClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`commentedCellClassName`](#commentedCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`TableClassName`](#TableClassName)
     * - [`className`](#className)
     *
     * @memberof Options#
     * @type {string}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // add a `your-class-name` CSS class name
     * // to each cell of the currently-visible, currently-selected rows
     * currentRowClassName: 'your-class-name',
     * ```
     */
    currentRowClassName: void 0,
    /**
     * @description
     * The `customBorders` option configures the [`CustomBorders`](@/api/customBorders.md) plugin.
     *
     * To enable the [`CustomBorders`](@/api/customBorders.md) plugin
     * (and add its menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md)),
     * set the `customBorders` option to `true`.
     *
     * To enable the [`CustomBorders`](@/api/customBorders.md) plugin
     * and add a predefined border around a particular cell,
     * set the `customBorders` option to an array of objects.
     * Each object represents a border configuration for one cell, and has the following properties:
     *
     * | Property | Sub-properties     | Types                              | Description                                                       |
     * | -------- | ------------------ | ---------------------------------- | ----------------------------------------------------------------- |
     * | `row`    | -                  | `row`: Number                      | The cell's row coordinate.                                        |
     * | `col`    | -                  | `col`: Number                      | The cell's column coordinate.                                     |
     * | `start`  | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default): `start` sets the width (`width`) and color (`color`) of the left-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: `start` sets the width (`width`) and color (`color`) of the right-hand border. |
     * | `end`    | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default): `end` sets the width (`width`) and color (`color`) of the right-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: `end` sets the width (`width`) and color (`color`) of the left-hand border. |
     * | `top`    | `width`<br>`color` | `width`: Number<br>`color`: String | Sets the width (`width`) and color (`color`) of the top border. |
     * | `bottom` | `width`<br>`color` | `width`: Number<br>`color`: String | Sets the width (`width`) and color (`color`) of the bottom border. |
     *
     * To enable the [`CustomBorders`](@/api/customBorders.md) plugin
     * and add a predefined border around a range of cells,
     * set the `customBorders` option to an array of objects.
     * Each object represents a border configuration for a single range of cells, and has the following properties:
     *
     * | Property | Sub-properties                               | Types                                                            | Description                                                                                  |
     * | -------- | -------------------------------------------- | ---------------------------------------------------------------- | -------------------------------------------------------------------------------------------- |
     * | `range`  | `from` {`row`, `col`}<br>`to` {`row`, `col`} | `from`: Object<br>`to`: Object<br>`row`: Number<br>`col`: Number | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default):<br>- `from` selects the range's top-left corner.<br>- `to` selects the range's bottom-right corner.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: <br>- `from` selects the range's top-right corner.<br>- `to` selects the range's bottom-left corner. |
     * | `start`  | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default): `start` sets the width (`width`) and color (`color`) of the left-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: `start` sets the width (`width`) and color (`color`) of the right-hand border. |
     * | `end`    | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default): `end` sets the width (`width`) and color (`color`) of the right-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: `end` sets the width (`width`) and color (`color`) of the left-hand border. |
     * | `top`    | `width`<br>`color`                           | `width`: Number<br>`color`: String                               | Sets the width (`width`) and color (`color`) of the top border. |
     * | `bottom` | `width`<br>`color`                           | `width`: Number<br>`color`: String                               | Sets the width (`width`) and color (`color`) of the bottom border. |
     *
     * Read more:
     * - [Formatting cells: Custom cell borders](@/guides/cell-features/formatting-cells.md#custom-cell-borders)
     * - [Context menu](@/guides/accessories-and-menus/context-menu.md)
     * - [Plugins: `CustomBorders`](@/api/customBorders.md)
     * - [Layout direction](@/guides/internationalization/layout-direction.md)
     * - [`layoutDirection`](#layoutDirection)
     *
     * @memberof Options#
     * @type {boolean|object[]}
     * @default false
     * @category CustomBorders
     *
     * @example
     * ```js
     * // enable the `CustomBorders` plugin
     * customBorders: true,
     *
     * // enable the `CustomBorders` plugin
     * // and add a predefined border for a particular cell
     * customBorders: [
     *   // add an object with a border configuration for one cell
     *   {
     *     // set the cell's row coordinate
     *     row: 2,
     *     // set the cell's column coordinate
     *     col: 2,
     *     // set the left/right border's width and color
     *     start: {
     *       width: 2,
     *       color: 'red'
     *     },
     *     // set the right/left border's width and color
     *     end: {
     *       width: 1,
     *       color: 'green'
     *     },
     *     // set the top border's width and color
     *     top: '',
     *     // set the bottom border's width and color
     *     bottom: ''
     *   }
     * ],
     *
     * // enable the `CustomBorders` plugin
     * // and add a predefined border for a range of cells
     * customBorders: [
     *   // add an object with a border configuration for one range of cells
     *   {
     *     // select a range of cells
     *     range: {
     *       // set the range's top-left corner
     *       from: {
     *         row: 1,
     *         col: 1
     *       },
     *       // set the range's bottom-right corner
     *       to: {
     *         row: 3,
     *         col: 4
     *       }
     *     },
     *     // set the left/right border's width and color
     *     start: {
     *       width: 2,
     *       color: 'red'
     *     },
     *     // set the right/left border's width and color
     *     end: {},
     *     // set the top border's width and color
     *     top: {},
     *     // set the bottom border's width and color
     *     bottom: {}
     *   }
     * ],
     * ```
     */
    customBorders: !1,
    /**
     * @description
     * The `data` option sets the initial [data](@/guides/getting-started/binding-to-data.md) of your Handsontable instance.
     *
     * Handsontable's data is bound to your source data by reference (i.e. when you edit Handsontable's data, your source data alters as well).
     *
     * You can set the `data` option:
     * - Either to an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).
     * - Or to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects).
     *
     * If you don't set the `data` option (or set it to `null`), Handsontable renders as an empty 5x5 grid by default.
     *
     * Read more:
     * - [Binding to data](@/guides/getting-started/binding-to-data.md)
     * - [`dataSchema`](#dataSchema)
     * - [`startRows`](#startRows)
     * - [`startCols`](#startCols)
     *
     * @memberof Options#
     * @type {Array[]|object[]}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // as an array of arrays
     * data: [
     *   ['A', 'B', 'C'],
     *   ['D', 'E', 'F'],
     *   ['G', 'H', 'J']
     * ]
     *
     * // as an array of objects
     * data: [
     *   {id: 1, name: 'Ted Right'},
     *   {id: 2, name: 'Frank Honest'},
     *   {id: 3, name: 'Joan Well'},
     *   {id: 4, name: 'Gail Polite'},
     *   {id: 5, name: 'Michael Fair'},
     * ]
     * ```
     */
    data: void 0,
    /**
     * @description
     * When the [`data`](#data) option is set to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects)
     * (or is empty), the `dataSchema` option defines the structure of new rows.
     *
     * Using the `dataSchema` option, you can start out with an empty grid.
     *
     * You can set the `dataSchema` option to one of the following:
     * - An object
     * - A function
     *
     * Read more:
     * - [Binding to data: Array of objects with custom data schema](@/guides/getting-started/binding-to-data.md#array-of-objects-with-custom-data-schema)
     * - [Binding to data: Function data source and schema](@/guides/getting-started/binding-to-data.md#function-data-source-and-schema)
     * - [`data`](#data)
     *
     * @memberof Options#
     * @type {object|Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // with `dataSchema`, you can start with an empty grid
     * data: null,
     * dataSchema: {id: null, name: {first: null, last: null}, address: null},
     * colHeaders: ['ID', 'First Name', 'Last Name', 'Address'],
     * columns: [
     *   {data: 'id'},
     *   {data: 'name.first'},
     *   {data: 'name.last'},
     *   {data: 'address'}
     * ],
     * startRows: 5,
     * minSpareRows: 1
     * ```
     */
    dataSchema: void 0,
    /**
     * The `dateFormat` option configures the date format accepted by [`date`](@/guides/cell-types/date-cell-type.md) cells.
     *
     * You can set the `dateFormat` option to a string with a proper date format. The default value is: `'DD/MM/YYYY'`.
     *
     * To automatically correct dates whose format doesn't match the `dateFormat` setting, use the [`correctFormat`](#correctFormat) option.
     *
     * Read more:
     * - [Date cell type](@/guides/cell-types/date-cell-type.md)
     * - [`correctFormat`](#correctFormat)
     * - [`defaultDate`](#defaultDate)
     *
     * @memberof Options#
     * @type {string}
     * @default 'DD/MM/YYYY'
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *   // set the `type` of each cell in this column to `date`
     *   type: 'date',
     *   // for every `date` cell of this column, set the date format to `YYYY-MM-DD`
     *   dateFormat: 'YYYY-MM-DD',
     *   },
     * ],
     * ```
     */
    dateFormat: "DD/MM/YYYY",
    /**
     * The `datePickerConfig` option configures the `date` [cell editor](@/guides/cell-functions/cell-editor.md)'s date picker, which uses an external dependency: [Pikaday](https://github.com/Pikaday/Pikaday/tree/1.8.2).
     *
     * You can set the `datePickerConfig` option to an object with any of the available [Pikaday options](https://github.com/Pikaday/Pikaday/tree/1.8.2#configuration),
     * except for the following, which are always overwritten by the `date` [cell editor](@/guides/cell-functions/cell-editor.md):
     * - `bound`
     * - `container`
     * - `field`
     * - `trigger`
     *
     * If the `datePickerConfig` option is not defined, the `date` [cell editor](@/guides/cell-functions/cell-editor.md) overwrites the following [Pikaday options](https://github.com/Pikaday/Pikaday/tree/1.8.2#configuration) as well:
     *
     * | Pikaday option       | Handsontable's setting |
     * | -------------------- | ---------------------- |
     * | `format`             | `'DD/MM/YYYY'`         |
     * | `reposition`         | `false`                |
     *
     * Read more:
     * - [`editor`](#editor)
     * - [`dateFormat`](#dateFormat)
     * - [Cell editor](@/guides/cell-functions/cell-editor.md)
     * - [All Pikaday options &#8594;](https://github.com/Pikaday/Pikaday/tree/1.8.2#configuration)
     *
     * @memberof Options#
     * @type {object}
     * @default undefined
     * @category Core
     */
    datePickerConfig: void 0,
    /**
     * The `defaultDate` option configures the date displayed
     * in empty [`date`](@/guides/cell-types/date-cell-type.md) cells.
     *
     * You can set the `defaultDate` option to a string.
     *
     * Read more:
     * - [Date cell type](@/guides/cell-types/date-cell-type.md)
     * - [`dateFormat`](#dateFormat)
     *
     * @memberof Options#
     * @type {string}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     // set the `type` of each cell in this column to `date`
     *     type: 'date',
     *     // in every empty `date` cell of this column, display `2015-02-02`
     *     defaultDate: '2015-02-02'
     *   }
     * ],
     * ```
     */
    defaultDate: void 0,
    /**
     * @description
     * The `disableVisualSelection` option configures how
     * [selection](@/guides/cell-features/selection.md) is shown.
     *
     * You can set the `disableVisualSelection` option to one of the following:
     *
     * | Setting           | Description                                                                                         |
     * | ----------------- | --------------------------------------------------------------------------------------------------- |
     * | `false` (default) | - Show single-cell selection<br>- Show range selection<br>- Show header selection                   |
     * | `true`            | - Don't show single-cell selection<br>- Don't show range selection<br>- Don't show header selection |
     * | `'current'`       | - Don't show single-cell selection<br>- Show range selection<br>- Show header selection             |
     * | `'area'`          | - Show single-cell selection<br>- Don't show range selection<br>- Show header selection             |
     * | `'header'`        | - Show single-cell selection<br>- Show range selection<br>- Don't show header selection             |
     * | An array          | A combination of `'current'`, `'area'`, and/or `'header'`                                           |
     *
     * Read more:
     * - [Selection](@/guides/cell-features/selection.md)
     *
     * @memberof Options#
     * @type {boolean|string|string[]}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * // don't show single-cell selection
     * // don't show range selection
     * // don't show header selection
     * disableVisualSelection: true,
     *
     * // don't show single-cell selection
     * // show range selection
     * // show header selection
     * disableVisualSelection: 'current',
     *
     * // don't show single-cell selection
     * // don't show range selection
     * // show header selection
     * disableVisualSelection: ['current', 'area'],
     * ```
     */
    disableVisualSelection: !1,
    /**
     * @description
     * The `dragToScroll` option configures the [`DragToScroll`](@/api/dragToScroll.md) plugin.
     *
     * You can set the `dragToScroll` option to one of the following:
     *
     * | Setting          | Description                                                                 |
     * | ---------------- | --------------------------------------------------------------------------- |
     * | `true` (default) | When selection reaches the edge of the grid's viewport, scroll the viewport |
     * | `false`          | Don't scroll the viewport                                                   |
     *
     * Read more:
     * - [Plugins: `DragToScroll`](@/api/dragToScroll.md)
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category DragToScroll
     *
     * @example
     * ```js
     * // when selection reaches the edge of the grid's viewport, scroll the viewport
     * dragToScroll: true,
     * ```
     */
    dragToScroll: !0,
    /**
     * The `dropdownMenu` option configures the [`DropdownMenu`](@/api/dropdownMenu.md) plugin.
     *
     * You can set the `dropdownMenu` option to one of the following:
     *
     * | Setting   | Description                                                                                                                                                                                  |
     * | --------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `false`   | Disable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin                                                                                                                                   |
     * | `true`    | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Use the [default context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-default-options)    |
     * | An array  | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Modify [individual context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options) |
     * | An object | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Apply a custom dropdown menu configuration                                                                                  |
     *
     * Read more:
     * - [Context menu](@/guides/accessories-and-menus/context-menu.md)
     * - [Plugins: `DropdownMenu`](@/api/dropdownMenu.md)
     *
     * @memberof Options#
     * @type {boolean|object|string[]}
     * @default undefined
     * @category DropdownMenu
     *
     * @example
     * ```js
     * // enable the `DropdownMenu` plugin
     * // use the default context menu options
     * dropdownMenu: true,
     *
     * // enable the `DropdownMenu` plugin
     * // and modify individual context menu options
     * dropdownMenu: ['row_above', 'row_below', '---------', 'undo', 'redo'],
     *
     * // enable the `DropdownMenu` plugin
     * // and apply a custom dropdown menu configuration
     * dropdownMenu: {
     *   items: {
     *     'option1': {
     *       name: 'option1'
     *     },
     *     'option2': {
     *       name: 'option2',
     *       submenu: {
     *         items: [
     *           {
     *             key: 'option2:suboption1',
     *             name: 'option2:suboption1',
     *             callback(key, options) {
     *               ...
     *             }
     *           },
     *           ...
     *         ]
     *       }
     *     }
     *   }
     * },
     * ```
     */
    dropdownMenu: void 0,
    /**
     * The `editor` option sets a [cell editor](@/guides/cell-functions/cell-editor.md) for a cell.
     *
     * You can set the `editor` option to one of the following [cell editor aliases](@/guides/cell-functions/cell-editor.md):
     *
     * | Alias               | Cell editor function                                                       |
     * | ------------------- | -------------------------------------------------------------------------- |
     * | A custom alias      | Your [custom cell editor](@/guides/cell-functions/cell-editor.md) function |
     * | `'autocomplete'`    | `AutocompleteEditor`                                                       |
     * | `'base'`            | `BaseEditor`                                                               |
     * | `'checkbox'`        | `CheckboxEditor`                                                           |
     * | `'date'`            | `DateEditor`                                                               |
     * | `'dropdown'`        | `DropdownEditor`                                                           |
     * | `'handsontable'`    | `HandsontableEditor`                                                       |
     * | `'numeric'`         | `NumericEditor`                                                            |
     * | `'password'`        | `PasswordEditor`                                                           |
     * | `'select'`          | `SelectEditor`                                                             |
     * | `'text'`            | `TextEditor`                                                               |
     * | `'time'`            | `TimeEditor`                                                               |
     *
     * To disable editing cells through cell editors,
     * set the `editor` option to `false`.
     * You'll still be able to change cells' content through Handsontable's API
     * or through plugins (e.g. [`CopyPaste`](@/api/copyPaste.md)), though.
     *
     * To set the [`editor`](#editor), [`renderer`](#renderer), and [`validator`](#validator)
     * options all at once, use the [`type`](#type) option.
     *
     * Read more:
     * - [Cell editor](@/guides/cell-functions/cell-editor.md)
     * - [Cell type](@/guides/cell-types/cell-type.md)
     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)
     * - [`type`](#type)
     *
     * @memberof Options#
     * @type {string|Function|boolean}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // use the `numeric` editor for each cell of the entire grid
     * editor: 'numeric',
     *
     * // apply the `editor` option to individual columns
     * columns: [
     *   {
     *     // use the `autocomplete` editor for each cell of this column
     *     editor: 'autocomplete'
     *   },
     *   {
     *     // disable editing cells through cell editors for each cell of this column
     *     editor: false
     *   }
     * ]
     * ```
     */
    editor: void 0,
    /**
     * The `enterBeginsEditing` option configures the action of the <kbd>**Enter**</kbd> key.
     *
     * You can set the `enterBeginsEditing` option to one of the following:
     *
     * | Setting          | Description                                                                                                                                                                                               |
     * | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `true` (default) | - On pressing <kbd>**Enter**</kbd> once, enter the editing mode of the active cell<br>- On pressing <kbd>**Enter**</kbd> twice, move to another cell,<br>as configured by the [`enterMoves`](#enterMoves) setting |
     * | `false`          | - On pressing <kbd>**Enter**</kbd> once, move to another cell,<br>as configured by the [`enterMoves`](#enterMoves) setting                                                                                    |
     *
     * Read more:
     * - [`enterMoves`](#enterMoves)
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // press Enter once to start editing
     * // press Enter twice to move to another cell
     * enterBeginsEditing: true,
     *
     * // press Enter once to move to another cell
     * enterBeginsEditing: false,
     * ```
     */
    enterBeginsEditing: !0,
    /**
     * The `enterMoves` option configures the action of the <kbd>**Enter**</kbd> key.
     *
     * If the [`enterBeginsEditing`](#enterBeginsEditing) option is set to `true`,
     * the `enterMoves` setting applies to the **second** pressing of the <kbd>**Enter**</kbd> key.
     *
     * If the [`enterBeginsEditing`](#enterBeginsEditing) option is set to `false`,
     * the `enterMoves` setting applies to the **first** pressing of the <kbd>**Enter**</kbd> key.
     *
     * You can set the `enterMoves` option to an object with the following properties
     * (or to a function that returns such an object):
     *
     * | Property | Type   | Description                                                                                                                                              |
     * | -------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `col`    | Number | - On pressing <kbd>**Enter**</kbd>, move selection `col` columns right<br>- On pressing <kbd>**Shift**</kbd> + <kbd>**Enter**</kbd>, move selection `col` columns left |
     * | `row`    | Number | - On pressing <kbd>**Enter**</kbd>, move selection `row` rows down<br>- On pressing <kbd>**Shift**</kbd> + <kbd>**Enter**</kbd>, move selection `row` rows up          |
     *
     * Read more:
     * - [`enterBeginsEditing`](#enterBeginsEditing)
     *
     * @memberof Options#
     * @type {object|Function}
     * @default {col: 0, row: 1}
     * @category Core
     *
     * @example
     * ```js
     * // on pressing Enter, move selection 1 column right and 1 row down
     * // on pressing Shift+Enter, move selection 1 column left and 1 row up
     * enterMoves: {col: 1, row: 1},
     *
     * // the same setting, as a function
     * // `event` is a DOM Event object received on pressing Enter
     * // you can use it to check whether the user pressed Enter or Shift+Enter
     * enterMoves(event) {
     *   return {col: 1, row: 1};
     * },
     * ```
     */
    enterMoves: {
      col: 0,
      row: 1
    },
    /**
     * The `fillHandle` option configures the [Autofill](@/api/autofill.md) plugin.
     *
     * You can set the `fillHandle` option to one the following:
     *
     * | Setting        | Description                                                                |
     * | -------------- | -------------------------------------------------------------------------- |
     * | `true`         | - Enable autofill in all directions<br>- Add the fill handle               |
     * | `false`        | Disable autofill                                                           |
     * | `'vertical'`   | - Enable vertical autofill<br>- Add the fill handle                        |
     * | `'horizontal'` | - Enable horizontal autofill<br>- Add the fill handle                      |
     * | An object      | - Enable autofill<br>- Add the fill handle<br>- Configure autofill options |
     *
     * If you set the `fillHandle` option to an object, you can configure the following autofill options:
     *
     * | Option          | Possible settings              | Description                                                                                               |
     * | --------------- | ------------------------------ | --------------------------------------------------------------------------------------------------------- |
     * | `autoInsertRow` | `true` (default) \| `false`    | `true`: When you reach the grid's bottom, add new rows<br>`false`: When you reach the grid's bottom, stop |
     * | `direction`     | `'vertical'` \| `'horizontal'` | `'vertical'`: Enable vertical autofill<br>`'horizontal'`: Enable horizontal autofill                      |
     *
     * Read more:
     * - [AutoFill values](@/guides/cell-features/autofill-values.md)
     *
     * @memberof Options#
     * @type {boolean|string|object}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // enable autofill in all directions
     * // with `autoInsertRow` enabled
     * fillHandle: true,
     *
     * // enable vertical autofill
     * // with `autoInsertRow` enabled
     * fillHandle: 'vertical',
     *
     * // enable horizontal autofill
     * // with `autoInsertRow` enabled
     * fillHandle: 'horizontal',
     *
     * // enable autofill in all directions
     * // with `autoInsertRow` disabled
     * fillHandle: {
     *   autoInsertRow: false,
     * },
     *
     * // enable vertical autofill
     * // with `autoInsertRow` disabled
     * fillHandle: {
     *   autoInsertRow: false,
     *   direction: 'vertical'
     * },
     * ```
     */
    fillHandle: {
      autoInsertRow: !1
    },
    /**
     * The `filter` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells'
     * lists are updated by the end user's input.
     *
     * You can set the `filter` option to one of the following:
     *
     * | Setting          | Description                                                                                                           |
     * | ---------------- | --------------------------------------------------------------------------------------------------------------------- |
     * | `true` (default) | When the end user types into the input area, only options matching the input are displayed                            |
     * | `false`          | When the end user types into the input area, all options are displayed<br>(options matching the input are put in bold |
     *
     * Read more:
     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
     * - [`source`](#source)
     * - [`filteringCaseSensitive`](#filteringCaseSensitive)
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * columns: [{
     *   // set the `type` of each cell in this column to `autocomplete`
     *   type: 'autocomplete',
     *   // set options available in every `autocomplete` cell of this column
     *   source: ['A', 'B', 'C'],
     *   // when the end user types in `A`, display only the A option
     *   // when the end user types in `B`, display only the B option
     *   // when the end user types in `C`, display only the C option
     *   filter: true
     * }],
     * ```
     */
    filter: !0,
    /**
     * The `filteringCaseSensitive` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells'
     * input is case-sensitive.
     *
     * You can set the `filteringCaseSensitive` option to one of the following:
     *
     * | Setting           | Description                                                                                        |
     * | ----------------- | -------------------------------------------------------------------------------------------------- |
     * | `false` (default) | [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells' input is not case-sensitive |
     * | `true`            | [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells' input is case-sensitive     |
     *
     * Read more:
     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
     * - [`source`](#source)
     * - [`filter`](#filter)
     *
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     type: 'autocomplete',
     *     source: [ ... ],
     *     // match case while searching autocomplete options
     *     filteringCaseSensitive: true
     *   }
     * ],
     * ```
     */
    filteringCaseSensitive: !1,
    /**
     * The `filters` option configures the [`Filters`](@/api/filters.md) plugin.
     *
     * You can set the `filters` option to one of the following:
     *
     * | Setting | Description                                      |
     * | ------- | ------------------------------------------------ |
     * | `false` | Disable the [`Filters`](@/api/filters.md) plugin |
     * | `true`  | Enable the [`Filters`](@/api/filters.md) plugin  |
     *
     * Read more:
     * - [Column filter](@/guides/columns/column-filter.md)
     * - [Plugins: `Filters`](@/api/filters.md)
     * - [`dropdownMenu`](#dropdownMenu)
     *
     * @memberof Options#
     * @type {boolean}
     * @default undefined
     * @category Filters
     *
     * @example
     * ```js
     * // enable the `Filters` plugin
     * filters: true,
     * ```
     */
    filters: void 0,
    /**
     * `fixedColumnsLeft` is a legacy option.
     *
     * If your grid's [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default), `fixedColumnsLeft` acts like the [`fixedColumnsStart`](#fixedColumnsStart) option.
     *
     * If your grid's [layout direction](@/guides/internationalization/layout-direction.md) is RTL, using `fixedColumnsLeft` throws an error.
     *
     * Use [`fixedColumnsStart`](#fixedColumnsStart), which works in any layout direction.
     *
     * Read more:
     * - [`fixedColumnsStart`](#fixedcolumnsstart)
     *
     * @memberof Options#
     * @type {number}
     * @default 0
     * @category Core
     *
     * @example
     * ```js
     * // freeze the first 3 columns from the left
     * fixedColumnsLeft: 3,
     * ```
     */
    fixedColumnsLeft: 0,
    /**
     * If your grid's [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default), the `fixedColumnsStart` option sets the number of [frozen columns](@/guides/columns/column-freezing.md) at the left-hand edge of the grid.
     *
     * If your grid's [layout direction](@/guides/internationalization/layout-direction.md) is RTL, the `fixedColumnsStart` option sets the number of [frozen columns](@/guides/columns/column-freezing.md) at the right-hand edge of the grid.
     *
     * Read more:
     * - [Column freezing](@/guides/columns/column-freezing.md)
     * - [Layout direction](@/guides/internationalization/layout-direction.md)
     * - [`fixedColumnsLeft`](#fixedcolumnsleft)
     * - [`layoutDirection`](#layoutDirection)
     *
     * @memberof Options#
     * @type {number}
     * @default 0
     * @category Core
     *
     * @example
     * ```js
     * // when `layoutDirection` is set to `inherit` (default)
     * // freeze the first 3 columns from the left or from the right
     * // depending on your HTML document's `dir` attribute
     * layoutDirection: 'inherit',
     * fixedColumnsStart: 3,
     *
     * // when `layoutDirection` is set to `rtl`
     * // freeze the first 3 columns from the right
     * // regardless of your HTML document's `dir` attribute
     * layoutDirection: 'rtl',
     * fixedColumnsStart: 3,
     *
     * // when `layoutDirection` is set to `ltr`
     * // freeze the first 3 columns from the left
     * // regardless of your HTML document's `dir` attribute
     * layoutDirection: 'ltr',
     * fixedColumnsStart: 3,
     * ```
     */
    fixedColumnsStart: 0,
    /**
     * The `fixedRowsBottom` option sets the number of [frozen rows](@/guides/rows/row-freezing.md)
     * at the bottom of the grid.
     *
     * Read more:
     * - [Row freezing](@/guides/rows/row-freezing.md)
     *
     * @memberof Options#
     * @type {number}
     * @default 0
     * @category Core
     *
     * @example
     * ```js
     * // freeze the bottom 3 rows
     * fixedRowsBottom: 3,
     * ```
     */
    fixedRowsBottom: 0,
    /**
     * The `fixedRowsTop` option sets the number of [frozen rows](@/guides/rows/row-freezing.md) at the top of the grid.
     *
     * Read more:
     * - [Row freezing](@/guides/rows/row-freezing.md)
     *
     * @memberof Options#
     * @type {number}
     * @default 0
     * @category Core
     *
     * @example
     * ```js
     * // freeze the top 3 rows
     * fixedRowsTop: 3,
     * ```
     */
    fixedRowsTop: 0,
    /**
     * The `formulas` option configures the [`Formulas`](@/api/formulas.md) plugin.
     *
     * The [`Formulas`](@/api/formulas.md) plugin uses the [HyperFormula](https://handsontable.github.io/hyperformula/) calculation engine.
     * To install [HyperFormula](https://handsontable.github.io/hyperformula/), read the following:
     * - [Formula calculation: Initialization methods](@/guides/formulas/formula-calculation.md#initialization-methods)
     *
     * You can set the `formulas` option to an object with the following properties:
     *
     * | Property    | Possible values                                                                                                                                                                                                        |
     * | ----------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `engine`    | `HyperFormula` \|<br>A [HyperFormula](https://handsontable.github.io/hyperformula/) instance \|<br>A [HyperFormula configuration](https://handsontable.github.io/hyperformula/api/interfaces/configparams.html) object |
     * | `sheetId`   | A number                                                                                                                                                                                                               |
     * | `sheetName` | A string                                                                                                                                                                                                               |
     *
     * Read more:
     * - [Plugins: `Formulas`](@/api/formulas.md)
     * - [Formula calculation](@/guides/formulas/formula-calculation.md)
     * - [HyperFormula documentation: Client-side installation](https://handsontable.github.io/hyperformula/guide/client-side-installation)
     * - [HyperFormula documentation: Configuration options](https://handsontable.github.io/hyperformula/api/interfaces/configparams.html)
     *
     * @memberof Options#
     * @type {object}
     * @default undefined
     * @category Formulas
     *
     * @example
     * ```js
     * // either add the `HyperFormula` class
     * formulas: {
     *   // set `engine` to `HyperFormula`
     *   engine: HyperFormula,
     *   sheetId: 1,
     *   sheetName: 'Sheet 1'
     * }
     *
     * // or, add a HyperFormula instance
     * // initialized with the `'internal-use-in-handsontable'` license key
     * const hyperformulaInstance = HyperFormula.buildEmpty({
     *   licenseKey: 'internal-use-in-handsontable',
     * });
     *
     * formulas: {
     *   // set `engine` to a HyperFormula instance
     *   engine: hyperFormulaInstance,
     *   sheetId: 1,
     *   sheetName: 'Sheet 1'
     * }
     *
     * // or, add a HyperFormula configuration object
     * formulas: {
     *   // set `engine` to a HyperFormula configuration object
     *   engine: {
     *     hyperformula: HyperFormula // or `engine: hyperFormulaInstance`
     *     leapYear1900: false,       // this option comes from HyperFormula
     *     // add more HyperFormula configuration options
     *   },
     *   sheetId: 1,
     *   sheetName: 'Sheet 1'
     * }
     *
     * // use the same HyperFormula instance in multiple Handsontable instances
     *
     * // a Handsontable instance `hot1`
     * formulas: {
     *   engine: HyperFormula,
     *   sheetId: 1,
     *   sheetName: 'Sheet 1'
     * }
     *
     * // a Handsontable instance `hot2`
     * formulas: {
     *   engine: hot1.getPlugin('formulas').engine,
     *   sheetId: 1,
     *   sheetName: 'Sheet 1'
     * }
     * ```
     */
    formulas: void 0,
    /**
     * The `fragmentSelection` option configures text selection settings.
     *
     * You can set the `fragmentSelection` option to one of the following:
     *
     * | Setting           | Decription                                        |
     * | ----------------- | ------------------------------------------------- |
     * | `false` (default) | Disable text selection                            |
     * | `true`            | Enable text selection in multiple cells at a time |
     * | `'cell'`          | Enable text selection in one cell at a time       |
     *
     * @memberof Options#
     * @type {boolean|string}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * // enable text selection in multiple cells at a time
     * fragmentSelection: true,
     *
     * // enable text selection in one cell a time
     * fragmentSelection: 'cell',
     * ```
     */
    fragmentSelection: !1,
    /**
     * The `height` option configures the height of your grid.
     *
     * You can set `height` option to one of the following:
     *
     * | Setting                                                                    | Example                    |
     * | -------------------------------------------------------------------------- | -------------------------- |
     * | A number of pixels                                                         | `height: 500`              |
     * | A string with a [CSS unit](https://www.w3schools.com/cssref/css_units.asp) | `height: '75vw'`           |
     * | A function that returns a valid number or string                           | `height() { return 500; }` |
     *
     * Read more:
     * - [Grid size](@/guides/getting-started/grid-size.md)
     *
     * @memberof Options#
     * @type {number|string|Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // set the grid's height to 500px
     * height: 500,
     *
     * // set the grid's height to 75vh
     * height: '75vh',
     *
     * // set the grid's height to 500px, using a function
     * height() {
     *   return 500;
     * },
     * ```
     */
    height: void 0,
    /**
     * The `hiddenColumns` option configures the [`HiddenColumns`](@/api/hiddenColumns.md) plugin.
     *
     * You can set the `hiddenColumns` option to one of the following:
     *
     * | Setting   | Description                                                                                  |
     * | --------- | -------------------------------------------------------------------------------------------- |
     * | `false`   | Disable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin                                 |
     * | `true`    | Enable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin with the default plugin options  |
     * | An object | - Enable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin<br>- Modify the plugin options |
     *
     * If you set the `hiddenColumns` to an object, you can set the following [`HiddenColumns`](@/api/hiddenColumns.md) plugin options:
     *
     * | Property           | Possible values     | Description                                                                                                                                             |
     * | ------------------ | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `columns`          | An array of indexes | An array of indexes of columns that are hidden at initialization                                                                                        |
     * | `copyPasteEnabled` | `true` \| `false`   | `true`: when copying or pasting data, take hidden columns into account<br>`false`: when copying or pasting data, don't take hidden columns into account |
     * | `indicators`       | `true` \| `false`   | `true`: display UI markers to indicate the presence of hidden columns<br>`false`: display UI markers                                                    |
     *
     * Read more:
     * - [Plugins: `HiddenColumns`](@/api/hiddenColumns.md)
     * - [Column hiding](@/guides/columns/column-hiding.md)
     *
     * @memberof Options#
     * @type {boolean|object}
     * @default undefined
     * @category HiddenColumns
     *
     * @example
     * ```js
     * // enable the `HiddenColumns` plugin
     * hiddenColumns: true,
     *
     * // enable `HiddenColumns` plugin, and modify the plugin options
     * hiddenColumns: {
     *   // set columns that are hidden by default
     *   columns: [5, 10, 15],
     *   // when copying or pasting data, take hidden columns into account
     *   copyPasteEnabled: true,
     *   // show where hidden columns are
     *   indicators: true
     * }
     * ```
     */
    hiddenColumns: void 0,
    /**
     * The `hiddenRows` option configures the [`HiddenRows`](@/api/hiddenRows.md) plugin.
     *
     * You can set the `hiddenRows` option to one of the following:
     *
     * | Setting   | Description                                                                            |
     * | --------- | -------------------------------------------------------------------------------------- |
     * | `false`   | Disable the [`HiddenRows`](@/api/hiddenRows.md) plugin                                 |
     * | `true`    | Enable the [`HiddenRows`](@/api/hiddenRows.md) plugin with the default plugin options  |
     * | An object | - Enable the [`HiddenRows`](@/api/hiddenRows.md) plugin<br>- Modify the plugin options |
     *
     * If you set the `hiddenRows` to an object, you can set the following [`HiddenRows`](@/api/hiddenRows.md) plugin options:
     *
     * | Property           | Possible values     | Description                                                                                                                                       |
     * | ------------------ | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `rows   `          | An array of indexes | An array of indexes of rows that are hidden at initialization                                                                                     |
     * | `copyPasteEnabled` | `true` \| `false`   | `true`: when copying or pasting data, take hidden rows into account<br>`false`: when copying or pasting data, don't take hidden rows into account |
     * | `indicators`       | `true` \| `false`   | `true`: display UI markers to indicate the presence of hidden rows<br>`false`: display UI markers                                                 |
     *
     * Read more:
     * - [Plugins: `HiddenRows`](@/api/hiddenRows.md)
     * - [Row hiding](@/guides/rows/row-hiding.md)
     *
     * @memberof Options#
     * @type {boolean|object}
     * @default undefined
     * @category HiddenRows
     *
     * @example
     * ```js
     * // enable the `HiddenRows` plugin
     * hiddenRows: true,
     *
     * // enable `HiddenRows` plugin, and modify the plugin options
     * hiddenRows: {
     *   // set rows that are hidden by default
     *   rows: [5, 10, 15],
     *   // when copying or pasting data, take hidden rows into account
     *   copyPasteEnabled: true,
     *   // show where hidden rows are
     *   indicators: true
     * }
     * ```
     */
    hiddenRows: void 0,
    /**
     * The `invalidCellClassName` option lets you add a CSS class name to cells
     * that were marked as `invalid` by the [cell validator](@/guides/cell-functions/cell-validator.md).
     *
     * Read more:
     * - [Cell validator](@/guides/cell-functions/cell-validator.md)
     * - [`currentRowClassName`](#currentRowClassName)
     * - [`currentHeaderClassName`](#currentHeaderClassName)
     * - [`activeHeaderClassName`](#activeHeaderClassName)
     * - [`currentColClassName`](#currentColClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`commentedCellClassName`](#commentedCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`TableClassName`](#TableClassName)
     * - [`className`](#className)
     *
     * @memberof Options#
     * @type {string}
     * @default 'htInvalid'
     * @category Core
     *
     * @example
     * ```js
     * // add a `highlight-error` CSS class name
     * // to every `invalid` cell`
     * invalidCellClassName: 'highlight-error',
     * ```
     */
    invalidCellClassName: "htInvalid",
    /**
     * The `isEmptyCol` option lets you define your own custom method
     * for checking if a column at a given visual index is empty.
     *
     * The `isEmptyCol` setting overwrites the built-in [`isEmptyCol`](@/api/core.md#isEmptyCol) method.
     *
     * @memberof Options#
     * @type {Function}
     * @param {number} col Visual column index.
     * @returns {boolean}
     * @category Core
     *
     * @example
     * ```js
     * // overwrite the built-in `isEmptyCol` method
     * isEmptyCol(visualColumnIndex) {
     *    // your custom method
     *    ...
     * },
     * ```
     */
    isEmptyCol: function(t) {
      var r, n, o;
      for (r = 0, n = this.countRows(); r < n; r++)
        if (o = this.getDataAtCell(r, t), Xt(o) === !1)
          return !1;
      return !0;
    },
    /**
     * The `isEmptyRow` option lets you define your own custom method
     * for checking if a row at a given visual index is empty.
     *
     * The `isEmptyRow` setting overwrites the built-in [`isEmptyRow`](@/api/core.md#isEmptyRow) method.
     *
     * @memberof Options#
     * @type {Function}
     * @param {number} row Visual row index.
     * @returns {boolean}
     * @category Core
     *
     * @example
     * ```js
     * // overwrite the built-in `isEmptyRow` method
     * isEmptyRow(visualRowIndex) {
     *    // your custom method
     *    ...
     * },
     * ```
     */
    isEmptyRow: function(t) {
      var r, n, o, i;
      for (r = 0, n = this.countCols(); r < n; r++)
        if (o = this.getDataAtCell(t, r), Xt(o) === !1)
          return F_(o) === "object" ? (i = this.getCellMeta(t, r), WE(this.getSchema()[i.prop], o)) : !1;
      return !0;
    },
    /**
     * @description
     * The `label` option configures [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cells` labels.
     *
     * You can set the `label` option to an object with the following properties:
     *
     * | Property    | Possible values                   | Description                                                                                                                                                                                                             |
     * | ----------- | --------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `position`  | `'after'` (default) \| `'before'` | `'after'`: place the label to the right of the checkbox<br>`'before'`: place the label to the left of the checkbox                                                                                                      |
     * | `value`     | A string \| A function            | The label's text                                                                                                                                                                                                        |
     * | `separated` | `false` (default) \| `true`       | `false`: don't separate the label from the checkbox<br>`true`: separate the label from the checkbox                                                                                                                     |
     * | `property`  | A string                          | - A [`data`](#data) object property name that's used as the label's text <br>- Works only when the [`data`](#data) option is set to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects) |
     *
     * Read more:
     * - [Checkbox cell type: Checkbox labels](@/guides/cell-types/checkbox-cell-type.md#checkbox-labels)
     *
     * @memberof Options#
     * @type {object}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * columns: [{
     *   type: 'checkbox',
     *   // add 'My label:' after the checkbox
     *   label: { position: 'after', value: 'My label: ', separated: true }
     * }],
     * ```
     */
    label: void 0,
    /**
     * The `language` option configures Handsontable's [language](@/guides/internationalization/language.md) settings.
     *
     * You can set the `language` option to one of the following:
     *
     * | Setting             | Description                 |
     * | ------------------- | --------------------------- |
     * | `'en-US'` (default) | English - United States     |
     * | `'ar-AR'`           | Arabic - Global.<br><br>To properly render this language, set the [layout direction](@/guides/internationalization/layout-direction.md) to RTL. |
     * | `'cs-CZ'`           | Czech - Czech Republic      |
     * | `'de-CH'`           | German - Switzerland        |
     * | `'de-DE'`           | German - Germany            |
     * | `'es-MX'`           | Spanish - Mexico            |
     * | `'fr-FR'`           | French - France             |
     * | `'it-IT'`           | Italian - Italy             |
     * | `'ja-JP'`           | Japanese - Japan            |
     * | `'ko-KR'`           | Korean - Korea              |
     * | `'lv-LV'`           | Latvian - Latvia            |
     * | `'nb-NO'`           | Norwegian (BokmÃ¥l) - Norway |
     * | `'nl-NL'`           | Dutch - Netherlands         |
     * | `'pl-PL'`           | Polish - Poland             |
     * | `'pt-BR'`           | Portuguese - Brazil         |
     * | `'ru-RU'`           | Russian - Russia            |
     * | `'sr-SP'`           | Serbian (Latin) - Serbia    |
     * | `'zh-CN'`           | Chinese - China             |
     * | `'zh-TW'`           | Chinese - Taiwan            |
     *
     * Read more:
     * - [Language](@/guides/internationalization/language.md)
     * - [`locale`](#locale)
     * - [`layoutDirection`](#layoutdirection)
     *
     * @memberof Options#
     * @type {string}
     * @default 'en-US'
     * @category Core
     *
     * @example
     * ```js
     * // set Handsontable's language to Polish
     * language: 'pl-PL',
     * ```
     */
    language: "en-US",
    /**
     * The `layoutDirection` option configures whether Handsontable renders from the left to the right, or from the right to the left.
     *
     * You can set the layout direction only at Handsontable's [initialization](@/guides/getting-started/installation.md#initialize-handsontable). Any change of the `layoutDirection` option after the initialization (e.g. using the [`updateSettings()`](@/api/core.md#updatesettings) method) is ignored.
     *
     * You can set the `layoutDirection` option only [for the entire grid](@/guides/getting-started/configuration-options.md#set-grid-options).
     * You can't set it for individual columns, rows, or cells.
     *
     * You can set the `layoutDirection` option to one of the following strings:
     *
     * | Setting             | Description                                                                                                                                                                                  |
     * | ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `inherit` (default) | Set Handsontable's layout direction automatically,<br>based on the value of your HTML document's [`dir`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir) attribute  |
     * | `rtl`               | Render Handsontable from the right to the left,<br>even when your HTML document's [`dir`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir) attribute is set to `ltr` |
     * | `ltr`               | Render Handsontable from the left to the right,<br>even when your HTML document's [`dir`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir) attribute is set to `rtl` |
     *
     * Read more:
     * - [Layout direction](@/guides/internationalization/layout-direction.md)
     * - [Language](@/guides/internationalization/language.md)
     * - [`language`](#language)
     * - [`locale`](#locale)
     * - [`fixedColumnsStart`](#fixedcolumnsstart)
     * - [`customBorders`](#customBorders)
     *
     * @memberof Options#
     * @type {string}
     * @default 'inherit'
     * @category Core
     *
     * @example
     * ```js
     * // inherit Handsontable's layout direction
     * // from the value of your HTML document's `dir` attribute
     * layoutDirection: 'inherit',
     *
     * // render Handsontable from the right to the left
     * // regardless of your HTML document's `dir`
     * layoutDirection: 'rtl',
     *
     * // render Handsontable from the left to the right
     * // regardless of your HTML document's `dir`
     * layoutDirection: 'ltr',
     * ```
     */
    layoutDirection: "inherit",
    /**
     * The `licenseKey` option sets your Handsontable license key.
     *
     * You can set the `licenseKey` option to one of the following:
     *
     * | Setting                                                                                                 | Description                                                                                       |
     * | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- |
     * | A string with your [commercial license key](@/guides/getting-started/license-key.md#commercial-license) | For [commercial use](@/guides/technical-specification/software-license.md#commercial-use)         |
     * | `'non-commercial-and-evaluation'`                                                                       | For [non-commercial use](@/guides/technical-specification/software-license.md#non-commercial-use) |
     *
     * Read more:
     * - [License key](@/guides/getting-started/license-key.md)
     *
     * @memberof Options#
     * @type {string}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // for commercial use
     * licenseKey: 'xxxxx-xxxxx-xxxxx-xxxxx-xxxxx', // your commercial license key
     *
     * // for non-commercial use
     * licenseKey: 'non-commercial-and-evaluation',
     * ```
     */
    licenseKey: void 0,
    /**
     * The `locale` option configures Handsontable's [locale](@/guides/internationalization/locale.md) settings.
     *
     * You can set the `locale` option to any valid and canonicalized Unicode BCP 47 locale tag,
     * both for the [entire grid](@/guides/internationalization/locale.md#set-the-grid-s-locale),
     * and for [individual columns](@/guides/internationalization/locale.md#set-a-column-s-locale).
     *
     * Read more:
     * - [Locale](@/guides/internationalization/locale.md)
     * - [`language`](#language)
     * - [`layoutDirection`](#layoutdirection)
     *
     * @memberof Options#
     * @type {string}
     * @default 'en-US'
     * @category Core
     *
     * @example
     * ```js
     * // set the entire grid's locale to Polish
     * locale: 'pl-PL',
     *
     * // set individual columns' locales
     * columns: [
     *   {
     *     // set the first column's locale to Polish
     *     locale: 'pl-PL',
     *   },
     *   {
     *     // set the second column's locale to German
     *     locale: 'de-DE',
     *   },
     * ],
     * ```
     */
    locale: "en-US",
    /**
     * The `manualColumnFreeze` option configures the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin.
     *
     * You can set the `manualColumnFreeze` option to one of the following:
     *
     * | Setting  | Description                                                            |
     * | -------- | ---------------------------------------------------------------------- |
     * | `true`   | Enable the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin  |
     * | `false`  | Disable the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin |
     *
     * Read more:
     * - [Column freezing](@/guides/columns/column-freezing.md#user-triggered-freeze)
     *
     * @memberof Options#
     * @type {boolean}
     * @default undefined
     * @category ManualColumnFreeze
     *
     * @example
     * ```js
     * // enable the `ManualColumnFreeze` plugin
     * manualColumnFreeze: true,
     * ```
     */
    manualColumnFreeze: void 0,
    /**
     * The `manualColumnMove` option configures the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin.
     *
     * You can set the `manualColumnMove` option to one of the following:
     *
     * | Setting  | Description                                                                                                        |
     * | -------- | ------------------------------------------------------------------------------------------------------------------ |
     * | `true`   | Enable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin                                                  |
     * | `false`  | Disable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin                                                 |
     * | An array | - Enable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin<br>- Move individual columns at initialization |
     *
     * Read more:
     * - [Column moving](@/guides/columns/column-moving.md)
     *
     * @memberof Options#
     * @type {boolean|number[]}
     * @default undefined
     * @category ManualColumnMove
     *
     * @example
     * ```js
     * // enable the `ManualColumnMove` plugin
     * manualColumnMove: true,
     *
     * // enable the `ManualColumnMove` plugin
     * // at initialization, move column 0 to 1
     * // at initialization, move column 1 to 4
     * // at initialization, move column 2 to 6
     * manualColumnMove: [1, 4, 6],
     * ```
     */
    manualColumnMove: void 0,
    /**
     * @description
     * The `manualColumnResize` option configures the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin.
     *
     * You can set the `manualColumnResize` option to one of the following:
     *
     * | Setting  | Description                                                                                                           |
     * | -------- | --------------------------------------------------------------------------------------------------------------------- |
     * | `true`   | Enable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin                                                 |
     * | `false`  | Disable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin                                                |
     * | An array | - Enable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin<br>- Set initial widths of individual columns |
     *
     * Read more:
     * - [Column width: Column stretching](@/guides/columns/column-width.md#column-stretching)
     *
     * @memberof Options#
     * @type {boolean|number[]}
     * @default undefined
     * @category ManualColumnResize
     *
     * @example
     * ```js
     * // enable the `manualColumnResize` plugin
     * manualColumnResize: true,
     *
     * // enable the `manualColumnResize` plugin
     * // set the initial width of column 0 to 40 pixels
     * // set the initial width of column 1 to 50 pixels
     * // set the initial width of column 2 to 60 pixels
     * manualColumnResize: [40, 50, 60],
     * ```
     */
    manualColumnResize: void 0,
    /**
     * @description
     * The `manualRowMove` option configures the [`ManualRowMove`](@/api/manualRowMove.md) plugin.
     *
     * You can set the `manualRowMove` option to one of the following:
     *
     * | Setting  | Description                                                                                               |
     * | -------- | --------------------------------------------------------------------------------------------------------- |
     * | `true`   | Enable the [`ManualRowMove`](@/api/manualRowMove.md) plugin                                               |
     * | `false`  | Disable the [`ManualRowMove`](@/api/manualRowMove.md) plugin                                              |
     * | An array | - Enable the [`ManualRowMove`](@/api/manualRowMove.md) plugin<br>- Move individual rows at initialization |
     *
     * Read more:
     * - [Row moving](@/guides/rows/row-moving.md)
     *
     * @memberof Options#
     * @type {boolean|number[]}
     * @default undefined
     * @category ManualRowMove
     *
     * @example
     * ```js
     * // enable the `ManualRowMove` plugin
     * manualRowMove: true,
     *
     * // enable the `ManualRowMove` plugin
     * // at initialization, move row 0 to 1
     * // at initialization, move row 1 to 4
     * // at initialization, move row 2 to 6
     * manualColumnMove: [1, 4, 6],
     * ```
     */
    manualRowMove: void 0,
    /**
     * @description
     * The `manualRowResize` option configures the [`ManualRowResize`](@/api/manualRowResize.md) plugin.
     *
     * You can set the `manualRowResize` option to one of the following:
     *
     * | Setting  | Description                                                                                                   |
     * | -------- | ------------------------------------------------------------------------------------------------------------- |
     * | `true`   | Enable the [`ManualRowResize`](@/api/manualRowResize.md) plugin                                               |
     * | `false`  | Disable the [`ManualRowResize`](@/api/manualRowResize.md) plugin                                              |
     * | An array | - Enable the [`ManualRowResize`](@/api/manualRowResize.md) plugin<br>- Set initial heights of individual rows |
     *
     * Read more:
     * - [Row height: Adjust the row height manually](@/guides/rows/row-height.md#adjust-the-row-height-manually)
     *
     * @memberof Options#
     * @type {boolean|number[]}
     * @default undefined
     * @category ManualRowResize
     *
     * @example
     * ```js
     * // enable the `ManualRowResize` plugin
     * manualRowResize: true,
     *
     * // enable the `ManualRowResize` plugin
     * // set the initial height of row 0 to 40 pixels
     * // set the initial height of row 1 to 50 pixels
     * // set the initial height of row 2 to 60 pixels
     * manualRowResize: [40, 50, 60],
     * ```
     */
    manualRowResize: void 0,
    /**
     * The `maxCols` option sets a maximum number of columns.
     *
     * The `maxCols` option is used:
     * - At initialization: if the `maxCols` value is lower than the initial number of columns,
     * Handsontable trims columns from the right.
     * - At runtime: for example, when inserting columns.
     *
     * @memberof Options#
     * @type {number}
     * @default Infinity
     * @category Core
     *
     * @example
     * ```js
     * // set the maximum number of columns to 300
     * maxCols: 300,
     * ```
     */
    maxCols: 1 / 0,
    /**
     * The `maxRows` option sets a maximum number of rows.
     *
     * The `maxRows` option is used:
     * - At initialization: if the `maxRows` value is lower than the initial number of rows,
     * Handsontable trims rows from the bottom.
     * - At runtime: for example, when inserting rows.
     *
     * @memberof Options#
     * @type {number}
     * @default Infinity
     * @category Core
     *
     * @example
     * ```js
     * // set the maximum number of rows to 300
     * maxRows: 300,
     * ```
     */
    maxRows: 1 / 0,
    /**
     * @description
     * The `mergeCells` option configures the [`MergeCells`](@/api/mergeCells.md) plugin.
     *
     * You can set the `mergeCells` option to one of the following:
     *
     * | Setting             | Description                                                                                         |
     * | ------------------- | --------------------------------------------------------------------------------------------------- |
     * | `true`              | Enable the [`MergeCells`](@/api/mergeCells.md) plugin                                               |
     * | `false`             | Disable the [`MergeCells`](@/api/mergeCells.md) plugin                                              |
     * | An array of objects | - Enable the [`MergeCells`](@/api/mergeCells.md) plugin<br>- Merge specific cells at initialization |
     *
     * To merge specific cells at Handsontable's initialization,
     * set the `mergeCells` option to an array of objects, with the following properties:
     *
     * | Property  | Description                                                |
     * | --------- | ---------------------------------------------------------- |
     * | `row`     | The row index of the merged section's beginning            |
     * | `col`     | The column index of the merged section's beginning         |
     * | `rowspan` | The width (as a number of rows) of the merged section      |
     * | `colspan` | The height (as a number of columns ) of the merged section |
     *
     * Read more:
     * - [Merge cells](@/guides/cell-features/merge-cells.md)
     *
     * @memberof Options#
     * @type {boolean|object[]}
     * @default false
     * @category MergeCells
     *
     * @example
     * ```js
     * // enable the `MergeCells` plugin
     * mergeCells: true,
     *
     * // enable the `MergeCells` plugin
     * // and merge specific cells at initialization
     * mergeCells: [
     *   // merge cells from cell (1,1) to cell (3,3)
     *   {row: 1, col: 1, rowspan: 3, colspan: 3},
     *   // merge cells from cell (3,4) to cell (2,2)
     *   {row: 3, col: 4, rowspan: 2, colspan: 2},
     *   // merge cells from cell (5,6) to cell (3,3)
     *   {row: 5, col: 6, rowspan: 3, colspan: 3}
     * ],
     * ```
     */
    mergeCells: !1,
    /**
     * The `minCols` option sets a minimum number of columns.
     *
     * The `minCols` option is used:
     * - At initialization: if the `minCols` value is higher than the initial number of columns,
     * Handsontable adds empty columns to the right.
     * - At runtime: for example, when removing columns.
     *
     * The `minCols` option works only when your [`data`](#data) is an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).
     * When your [`data`](#data) is an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects),
     * you can only have as many columns as defined in:
     * - The first data row
     * - The [`dataSchema`](#dataSchema) option
     * - The [`columns`](#columns) option
     *
     * @memberof Options#
     * @type {number}
     * @default 0
     * @category Core
     *
     * @example
     * ```js
     * // set the minimum number of columns to 10
     * minCols: 10,
     * ```
     */
    minCols: 0,
    /**
     * The `minRows` option sets a minimum number of rows.
     *
     * The `minRows` option is used:
     * - At initialization: if the `minRows` value is higher than the initial number of rows,
     * Handsontable adds empty rows at the bottom.
     * - At runtime: for example, when removing rows.
     *
     * @memberof Options#
     * @type {number}
     * @default 0
     * @category Core
     *
     * @example
     * ```js
     * // set the minimum number of rows to 10
     * minRows: 10,
     * ```
     */
    minRows: 0,
    /**
     * The `minSpareCols` option sets a minimum number of empty columns
     * at the grid's right-hand end.
     *
     * If there already are other empty columns at the grid's right-hand end,
     * they are counted into the `minSpareCols` value.
     *
     * The total number of columns can't exceed the [`maxCols`](#maxCols) value.
     *
     * The `minSpareCols` option works only when your [`data`](#data) is an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).
     * When your [`data`](#data) is an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects),
     * you can only have as many columns as defined in:
     * - The first data row
     * - The [`dataSchema`](#dataSchema) option
     * - The [`columns`](#columns) option
     *
     * @memberof Options#
     * @type {number}
     * @default 0
     * @category Core
     *
     * @example
     * ```js
     * // at Handsontable's initialization, add at least 3 empty columns on the right
     * minSpareCols: 3,
     * ```
     */
    minSpareCols: 0,
    /**
     * The `minSpareRows` option sets a minimum number of empty rows
     * at the bottom of the grid.
     *
     * If there already are other empty rows at the bottom,
     * they are counted into the `minSpareRows` value.
     *
     * The total number of rows can't exceed the [`maxRows`](#maxRows) value.
     *
     * @memberof Options#
     * @type {number}
     * @default 0
     * @category Core
     *
     * @example
     * ```js
     * // at Handsontable's initialization, add at least 3 empty rows at the bottom
     * minSpareRows: 3,
     * ```
     */
    minSpareRows: 0,
    /**
     * @description
     * The `multiColumnSorting` option configures the [`MultiColumnSorting`](@/api/columnSorting.md) plugin.
     *
     * You can set the `multiColumnSorting` option to one of the following:
     *
     * | Setting    | Description                                                                                                                                                |
     * | ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `true`     | Enable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin with the default configuration                                                       |
     * | `false`    | Disable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin                                                                                     |
     * | An object  | - Enable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin<br>- Modify the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin options |
     *
     * If you set the `multiColumnSorting` option to an object,
     * you can set the following [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin options:
     *
     * | Option                   | Possible settings                                                                                                                                |
     * | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------ |
     * | `indicator`              | `true`: Display the arrow icon in the column header, to indicate a sortable column<br>`false`: Don't display the arrow icon in the column header |
     * | `headerAction`           | `true`: Enable clicking on the column header to sort the column<br>`false`: Disable clicking on the column header to sort the column             |
     * | `sortEmptyCells`         | `true`: Sort empty cells as well<br>`false`: Place empty cells at the end                                                                        |
     * | `compareFunctionFactory` | A [custom compare function](@/guides/rows/rows-sorting.md#add-a-custom-comparator)                                                               |
     *
     * If you set the `multiColumnSorting` option to an object,
     * you can also sort individual columns at Handsontable's initialization.
     * In the `multiColumnSorting` object, add an object named `initialConfig`,
     * with the following properties:
     *
     * | Option      | Possible settings   | Description                                                      |
     * | ----------- | ------------------- | ---------------------------------------------------------------- |
     * | `column`    | A number            | The index of the column that you want to sort at initialization  |
     * | `sortOrder` | `'asc'` \| `'desc'` | The sorting order:<br>`'asc'`: ascending<br>`'desc'`: descending |
     *
     * Read more:
     * - [Rows sorting](@/guides/rows/rows-sorting.md)
     * - [`columnSorting`](#columnSorting)
     *
     * @memberof Options#
     * @type {boolean|object}
     * @default undefined
     * @category MultiColumnSorting
     *
     * @example
     * ```js
     * // enable the `MultiColumnSorting` plugin
     * multiColumnSorting: true
     *
     * // enable the `MultiColumnSorting` plugin with custom configuration
     * multiColumnSorting: {
     *   // sort empty cells as well
     *   sortEmptyCells: true,
     *   // display the arrow icon in the column header
     *   indicator: true,
     *   // disable clicking on the column header to sort the column
     *   headerAction: false,
     *   // add a custom compare function
     *   compareFunctionFactory(sortOrder, columnMeta) {
     *     return function(value, nextValue) {
     *       // some value comparisons which will return -1, 0 or 1...
     *     }
     *   }
     * }
     *
     * // enable the `MultiColumnSorting` plugin
     * multiColumnSorting: {
     *   // at initialization, sort column 1 in ascending order
     *   initialConfig: {
     *     column: 1,
     *     sortOrder: 'asc'
     *   },
     *   // at initialization, sort column 2 in descending order
     *   initialConfig: {
     *     column: 2,
     *     sortOrder: 'desc'
     *   }
     * }
     * ```
     */
    multiColumnSorting: void 0,
    /**
     * @description
     * The `nestedHeaders` option configures the [`NestedHeaders`](@/api/nestedHeaders.md) plugin.
     *
     * You can set the `nestedHeaders` option to one of the following:
     *
     * | Setting           | Description                                                                                                                           |
     * | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------- |
     * | `false` (default) | Disable the [`NestedHeaders`](@/api/nestedHeaders.md) plugin                                                                          |
     * | `true`            | - Enable the [`NestedHeaders`](@/api/nestedHeaders.md) plugin<br>- Don't configure any nested headers                                 |
     * | Array of arrays   | - Enable the [`NestedHeaders`](@/api/nestedHeaders.md) plugin<br>- Configure headers that are nested on Handsontable's initialization |
     *
     * If you set the `nestedHeaders` option to an array of arrays, each array configures one set of nested headers.
     *
     * Each array element configures one header, and can be one of the following:
     *
     * | Array element | Description                                                                                  |
     * | ------------- | -------------------------------------------------------------------------------------------- |
     * | A string      | The header's label                                                                           |
     * | An object     | Properties:<br>`label` (string): the header's label<br>`colspan` (integer): the column width |
     *
     * Read more:
     * - [Plugins: `NestedHeaders`](@/api/nestedHeaders.md)
     * - [Column groups: Nested headers](@/guides/columns/column-groups.md#nested-headers)
     *
     * @memberof Options#
     * @type {boolean|Array[]}
     * @default undefined
     * @category NestedHeaders
     *
     * @example
     * ```js
     * nestedHeaders: [
     *   ['A', {label: 'B', colspan: 8}, 'C'],
     *   ['D', {label: 'E', colspan: 4}, {label: 'F', colspan: 4}, 'G'],
     *   ['H', 'I', 'J', 'K', 'L', 'M', 'N', 'R', 'S', 'T']
     * ],
     * ```
     */
    nestedHeaders: void 0,
    /**
     * @description
     * The `nestedRows` option configures the [`NestedRows`](@/api/nestedRows.md) plugin.
     *
     * You can set the `nestedRows` option to one of the following:
     *
     * | Setting           | Description                                            |
     * | ----------------- | ------------------------------------------------------ |
     * | `false` (default) | Disable the [`NestedRows`](@/api/nestedRows.md) plugin |
     * | `true`            | Enable the [`NestedRows`](@/api/nestedRows.md) plugin  |
     *
     * Read more:
     * - [Plugins: `NestedRows`](@/api/nestedRows.md)
     *
     * @example
     * ```js
     * // enable the `NestedRows` plugin
     * nestedRows: true,
     * ```
     *
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category NestedRows
     */
    nestedRows: void 0,
    /**
     * The `noWordWrapClassName` option lets you add a CSS class name
     * to each cell that has the [`wordWrap`](#wordWrap) option set to `false`.
     *
     * Read more:
     * - [`wordWrap`](#wordWrap)
     * - [`currentRowClassName`](#currentRowClassName)
     * - [`currentColClassName`](#currentColClassName)
     * - [`currentHeaderClassName`](#currentHeaderClassName)
     * - [`invalidCellClassName`](#invalidCellClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`commentedCellClassName`](#commentedCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`TableClassName`](#TableClassName)
     * - [`className`](#className)
     *
     * @memberof Options#
     * @type {string}
     * @default 'htNoWrap'
     * @category Core
     *
     * @example
     * ```js
     * // add an `is-noWrapCell` CSS class name
     * // to each cell that doesn't wrap content
     * noWordWrapClassName: 'is-noWrapCell',
     * ```
     */
    noWordWrapClassName: "htNoWrap",
    /**
     * The `numericFormat` option configures the number format and the currency format
     * of [`numeric`](@/guides/cell-types/numeric-cell-type.md) cells` displayed output
     * in the numeric cell renderer.
     *
     * You can set the `numericFormat` option to an object with the following properties:
     *
     * | Property    | Possible values                                                               | Description     |
     * | ----------- | ----------------------------------------------------------------------------- | --------------- |
     * | `pattern`   | All [`numbro.js` number formats](https://numbrojs.com/format.html#numbers)    | Number format   |
     * | `culture`   | All [`numbro.js` currency formats](https://numbrojs.com/format.html#currency) | Currency format |
     *
     * The `numericFormat` option as no effect on the numeric cell editor.
     *
     * In the source data, numeric data is stored as JavaScript numbers.
     *
     * Read more:
     * - [Numeric cell type](@/guides/cell-types/numeric-cell-type.md)
     * - [Third-party licenses](@/guides/technical-specification/third-party-licenses.md)
     *
     * @memberof Options#
     * @since 0.35.0
     * @type {object}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     // set the `type` of each cell in this column to `numeric`
     *     type: 'numeric',
     *     // set the `numericFormat` option for every `numeric` cell of this column
     *     numericFormat: {
     *       // set the number format
     *       pattern: '0,00',
     *       // set the currency format
     *       culture: 'en-US'
     *     }
     *   }
     * ],
     * ```
     */
    numericFormat: void 0,
    /**
     * If the `observeDOMVisibility` option is set to `true`,
     * Handsontable rerenders every time it detects that the grid was made visible in the DOM.
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // don't rerender the grid on visibility changes
     * observeDOMVisibility: false,
     * ```
     */
    observeDOMVisibility: !0,
    /**
     * The `outsideClickDeselects` option determines what happens to the current [selection](@/guides/cell-features/selection.md)
     * when you click outside of the grid.
     *
     * You can set the `outsideClickDeselects` option to one of the following:
     *
     * | Setting          | Description                                                                                              |
     * | ---------------- | -------------------------------------------------------------------------------------------------------- |
     * | `true` (default) | On a mouse click outside of the grid, clear the current [selection](@/guides/cell-features/selection.md) |
     * | `false`          | On a mouse click outside of the grid, keep the current [selection](@/guides/cell-features/selection.md)  |
     * | A function       | A function that takes the click event target and returns a boolean                                       |
     *
     * @memberof Options#
     * @type {boolean|Function}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // on a mouse click outside of the grid, clear the current selection
     * outsideClickDeselects: true,
     *
     * // on a mouse click outside of the grid, keep the current selection
     * outsideClickDeselects: false,
     *
     * // take the click event target and return `false`
     * outsideClickDeselects(event) {
     *   return false;
     * }
     *
     * // take the click event target and return `true`
     * outsideClickDeselects(event) {
     *   return false;
     * }
     * ```
     */
    outsideClickDeselects: !0,
    /**
     * @description
     * The `persistentState` option configures the [`PersistentState`](@/api/persistentState.md) plugin.
     *
     * You can set the `persistentState` to one of the following:
     *
     * | Setting           | Description                                                      |
     * | ----------------- | ---------------------------------------------------------------- |
     * | `false` (default) | Disable the [`PersistentState`](@/api/persistentState.md) plugin |
     * | `true`            | Enable the [`PersistentState`](@/api/persistentState.md) plugin  |
     *
     * Read more:
     * - [Saving data: Saving data locally](@/guides/getting-started/saving-data.md#save-data-locally)
     * - [Plugins: `PersistentState`](@/api/persistentState.md)
     *
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category PersistentState
     *
     * @example
     * ```js
     * // enable the `PersistentState` plugin
     * persistentState: true,
     * ```
     */
    persistentState: void 0,
    /**
     * The `placeholder` option lets you display placeholder text in every empty cell.
     *
     * You can set the `placeholder` option to one of the following:
     *
     * | Setting            | Example        | Description                                                           |
     * | ------------------ | -------------- | --------------------------------------------------------------------- |
     * | A non-empty string | `'Empty cell'` | Display `Empty cell` text in empty cells                              |
     * | A non-string value | `000`          | Display `000` text in empty cells (non-string values get stringified) |
     *
     * Read more:
     * - [`placeholderCellClassName`](#placeholderCellClassName)
     *
     * @memberof Options#
     * @type {string}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // display 'Empty cell' text
     * // in every empty cell of the entire grid
     * placeholder: 'Empty cell',
     *
     * // or
     * columns: [
     *   {
     *     data: 'date',
     *     dateFormat: 'DD/MM/YYYY',
     *     // display 'Empty date cell' text
     *     // in every empty cell of the `date` column
     *     placeholder: 'Empty date cell'
     *   }
     * ],
     * ```
     */
    placeholder: void 0,
    /**
     * The `placeholderCellClassName` option lets you add a CSS class name to cells
     * that contain [`placeholder`](#placeholder) text.
     *
     * Read more:
     * - [Cell validator](@/guides/cell-functions/cell-validator.md)
     * - [`placeholder`](#placeholder)
     * - [`currentRowClassName`](#currentRowClassName)
     * - [`currentHeaderClassName`](#currentHeaderClassName)
     * - [`activeHeaderClassName`](#activeHeaderClassName)
     * - [`currentColClassName`](#currentColClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`commentedCellClassName`](#commentedCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`TableClassName`](#TableClassName)
     * - [`className`](#className)
     *
     * @memberof Options#
     * @type {string}
     * @default 'htPlaceholder'
     * @category Core
     *
     * @example
     * ```js
     * // add a `has-placeholder` CSS class name
     * // to each cell that contains `placeholder` text
     * placeholderCellClassName: 'has-placeholder',
     * ```
     */
    placeholderCellClassName: "htPlaceholder",
    /**
     * The `preventOverflow` option configures preventing Handsontable
     * from overflowing outside of its parent element.
     *
     * You can set the `preventOverflow` option to one of the following:
     *
     * | Setting           | Description                      |
     * | ----------------- | -------------------------------- |
     * | `false` (default) | Don't prevent overflowing        |
     * | `'horizontal'`      | Prevent horizontal overflowing |
     * | `'vertical'`        | Prevent vertical overflowing   |
     *
     * @memberof Options#
     * @type {string|boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * // prevent horizontal overflowing
     * preventOverflow: 'horizontal',
     * ```
     */
    preventOverflow: !1,
    /**
     * The `preventWheel` option configures preventing the `wheel` event's default action
     * on overlays.
     *
     * You can set the `preventWheel` option to one of the following:
     *
     * | Setting           | Description                                      |
     * | ----------------- | ------------------------------------------------ |
     * | `false` (default) | Don't prevent the `wheel` event's default action |
     * | `true`            | Prevent the `wheel` event's default action       |
     *
     * @memberof Options#
     * @private
     * @type {boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * // don't prevent the `wheel` event's default action
     * preventWheel: false,
     * ```
     */
    preventWheel: !1,
    /**
     * @description
     * The `readOnly` option determines whether a cell, column or comment is editable or not.
     *
     * You can set the `readOnly` option to one of the following:
     *
     * | Setting           | Decription                                                                                                                |
     * | ----------------- | ------------------------------------------------------------------------------------------------------------------------- |
     * | `false` (default) | Set as editable                                                                                                           |
     * | `true`            | - Set as read-only<br>- Add the [`readOnlyCellClassName`](#readOnlyCellClassName) CSS class name (by default: `htDimmed`) |
     *
     * `readOnly` cells can't be changed by the [`populateFromArray()`](@/api/core.md#populatefromarray) method.
     *
     * Read more:
     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)
     *
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * // set as read-only
     * readOnly: true,
     * ```
     */
    readOnly: !1,
    /**
     * The `readOnlyCellClassName` option lets you add a CSS class name to [read-only](#readOnly) cells.
     *
     * Read more:
     * - [`currentRowClassName`](#currentRowClassName)
     * - [`currentColClassName`](#currentColClassName)
     * - [`currentHeaderClassName`](#currentHeaderClassName)
     * - [`activeHeaderClassName`](#activeHeaderClassName)
     * - [`invalidCellClassName`](#invalidCellClassName)
     * - [`placeholderCellClassName`](#placeholderCellClassName)
     * - [`commentedCellClassName`](#commentedCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`TableClassName`](#TableClassName)
     *
     * @memberof Options#
     * @type {string}
     * @default 'htDimmed'
     * @category Core
     *
     * @example
     * ```js
     * // add a `is-readOnly` CSS class name
     * // to every read-only cell
     * readOnlyCellClassName: 'is-readOnly',
     * ```
     */
    readOnlyCellClassName: "htDimmed",
    /**
     * The `renderAllRows` option configures Handsontable's [row virtualization](@/guides/rows/row-virtualization.md).
     *
     * You can set the `renderAllRows` option to one of the following:
     *
     * | Setting           | Description                                                                                        |
     * | ----------------- | -------------------------------------------------------------------------------------------------- |
     * | `false` (default) | Enable [row virtualization](@/guides/rows/row-virtualization.md)                                   |
     * | `true`            | Disable [row virtualization](@/guides/rows/row-virtualization.md)<br>(render all rows of the grid) |
     *
     * Read more:
     * - [Row virtualization](@/guides/rows/row-virtualization.md)
     *
     * @memberof Options#
     * @type {boolean}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // disable row virtualization
     * renderAllRows: true,
     * ```
     */
    renderAllRows: void 0,
    /**
     * @description
     * The `renderer` option sets a [cell renderer](@/guides/cell-functions/cell-renderer.md) for a cell.
     *
     * You can set the `renderer` option to one of the following:
     * - A custom renderer function
     * - One of the following [cell renderer aliases](@/guides/cell-functions/cell-renderer.md):
     *
     * | Alias               | Cell renderer function                                                         |
     * | ------------------- | ------------------------------------------------------------------------------ |
     * | A custom alias      | Your [custom cell renderer](@/guides/cell-functions/cell-renderer.md) function |
     * | `'autocomplete'`    | `AutocompleteRenderer`                                                         |
     * | `'base'`            | `BaseRenderer`                                                                 |
     * | `'checkbox'`        | `CheckboxRenderer`                                                             |
     * | `'date'`            | `DateRenderer`                                                                 |
     * | `'dropdown'`        | `DropdownRenderer`                                                             |
     * | `'html'`            | `HtmlRenderer`                                                                 |
     * | `'numeric'`         | `NumericRenderer`                                                              |
     * | `'password'`        | `PasswordRenderer`                                                             |
     * | `'text'`            | `TextRenderer`                                                                 |
     * | `'time'`            | `TimeRenderer`                                                                 |
     *
     * To set the [`renderer`](#renderer), [`editor`](#editor), and [`validator`](#validator)
     * options all at once, use the [`type`](#type) option.
     *
     * Read more:
     * - [Cell renderer](@/guides/cell-functions/cell-renderer.md)
     * - [Cell type](@/guides/cell-types/cell-type.md)
     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)
     * - [`type`](#type)
     *
     * @memberof Options#
     * @type {string|Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // use the `numeric` renderer for each cell of the entire grid
     * renderer: `'numeric'`,
     *
     * // add a custom renderer function
     * renderer(hotInstance, td, row, column, prop, value, cellProperties) {
     *   // your custom renderer's logic
     *   ...
     * }
     *
     * // apply the `renderer` option to individual columns
     * columns: [
     *   {
     *     // use the `autocomplete` renderer for each cell of this column
     *     renderer: 'autocomplete'
     *   },
     *   {
     *     // use the `myCustomRenderer` renderer for each cell of this column
     *     renderer: 'myCustomRenderer'
     *   }
     * ]
     * ```
     */
    renderer: void 0,
    /**
     * The `rowHeaders` option configures your grid's row headers.
     *
     * You can set the `rowHeaders` option to one of the following:
     *
     * | Setting    | Description                                                       |
     * | ---------- | ----------------------------------------------------------------- |
     * | `true`     | Enable the default row headers ('1', '2', '3', ...)               |
     * | `false`    | Disable row headers                                               |
     * | An array   | Define your own row headers (e.g. `['One', 'Two', 'Three', ...]`) |
     * | A function | Define your own row headers, using a function                     |
     *
     * Read more:
     * - [Row header](@/guides/rows/row-header.md)
     *
     * @memberof Options#
     * @type {boolean|string[]|Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // enable the default row headers
     * rowHeaders: true,
     *
     * // set your own row headers
     * rowHeaders: ['One', 'Two', 'Three'],
     *
     * // set your own row headers, using a function
     * rowHeaders: function(visualRowIndex) {
     *   return `${visualRowIndex}: AB`;
     * },
     * ```
     */
    rowHeaders: void 0,
    /**
     * @description
     * The `rowHeaderWidth` option configures the width of row headers.
     *
     * You can set the `rowHeaderWidth` option to one of the following:
     *
     * | Setting  | Description                                     |
     * | -------- | ----------------------------------------------- |
     * | A number | Set the same width for every row header         |
     * | An array | Set different widths for individual row headers |
     *
     * @memberof Options#
     * @type {number|number[]}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // set the same width for every row header
     * rowHeaderWidth: 25,
     *
     * // set different widths for individual row headers
     * rowHeaderWidth: [25, 30, 55],
     * ```
     */
    rowHeaderWidth: void 0,
    /**
     * The `rowHeights` option sets rows' heights, in pixels.
     *
     * In the rendering process, the default row height is 23 px (22 px + 1 px of the row's bottom border).
     * You can change it to equal or greater than 23px, by setting the `rowHeights` option to one of the following:
     *
     * | Setting     | Description                                                                                         | Example                                                      |
     * | ----------- | --------------------------------------------------------------------------------------------------- | ------------------------------------------------------------ |
     * | A number    | Set the same height for every row                                                                   | `rowHeights: 100`                                            |
     * | A string    | Set the same height for every row                                                                   | `rowHeights: '100px'`                                        |
     * | An array    | Set heights separately for each row                                                                 | `rowHeights: [100, 120, undefined]`                          |
     * | A function  | Set row heights dynamically,<br>on each render                                                      | `rowHeights(visualRowIndex) { return visualRowIndex * 10; }` |
     * | `undefined` | Used by the [modifyRowHeight](@/api/hooks.md#modifyRowHeight) hook,<br>to detect row height changes | `rowHeights: undefined`                                      |
     *
     * The `rowHeights` option also sets the minimum row height that can be set
     * via the {@link ManualRowResize} and {@link AutoRowSize} plugins (if they are enabled).
     *
     * Read more:
     * - [Row height](@/guides/rows/row-height.md)
     *
     * @memberof Options#
     * @type {number|number[]|string|string[]|Array<undefined>|Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // set every row's height to 100px
     * rowHeights: 100,
     *
     * // set every row's height to 100px
     * rowHeights: '100px',
     *
     * // set the first (by visual index) row's height to 100
     * // set the second (by visual index) row's height to 120
     * // set the third (by visual index) row's height to `undefined`
     * // set any other row's height to the default 23px
     * rowHeights: [100, 120, undefined],
     *
     * // set each row's height individually, using a function
     * rowHeights(visualRowIndex) {
     *   return visualRowIndex * 10;
     * },
     * ```
     */
    rowHeights: void 0,
    /**
     * @description
     * The `search` option configures the [`Search`](@/api/search.md) plugin.
     *
     * You can set the `search` option to one of the following:
     *
     * | Setting           | Description                                                                          |
     * | ----------------- | ------------------------------------------------------------------------------------ |
     * | `false` (default) | Disable the [`Search`](@/api/search.md) plugin                                       |
     * | `true`            | Enable the [`Search`](@/api/search.md) plugin with the default configuration         |
     * | An object         | - Enable the [`Search`](@/api/search.md) plugin<br>- Apply your custom configuration |
     *
     * If you set the `search` option to an object, you can configure the following search options:
     *
     * | Option              | Possible settings | Description                                                                                          |
     * | ------------------- | ----------------- | ---------------------------------------------------------------------------------------------------- |
     * | `searchResultClass` | A string          | Add a custom CSS class name to search results                                                        |
     * | `queryMethod`       | A function        | Add a [custom query method](@/guides/accessories-and-menus/searching-values.md#custom-query-method)  |
     * | `callback`          | A function        | Add a [custom callback function](@/guides/accessories-and-menus/searching-values.md#custom-callback) |
     *
     * Read more:
     * - [Searching values](@/guides/accessories-and-menus/searching-values.md)
     * - [Searching values: Custom query method](@/guides/accessories-and-menus/searching-values.md#custom-query-method)
     * - [Searching values: Custom callback](@/guides/accessories-and-menus/searching-values.md#custom-callback)
     *
     * @memberof Options#
     * @type {boolean|object}
     * @default false
     * @category Search
     *
     * @example
     * ```js
     * // enable the `Search` plugin with the default configuration
     * search: true,
     *
     * // enable the `Search` plugin with a custom configuration
     * search: {
     *   // add a `customClass` CSS class name to search results
     *   searchResultClass: 'customClass',
     *   // add a custom query method
     *   queryMethod(queryStr, value) {
     *     ...
     *   },
     *   // add a custom callback function
     *   callback(instance, row, column, value, result) {
     *     ...
     *   }
     * }
     * ```
     */
    search: !1,
    /**
     * @description
     * The `selectionMode` option configures how [selection](@/guides/cell-features/selection.md) works.
     *
     * You can set the `selectionMode` option to one of the following:
     *
     * | Setting      | Description                                                  |
     * | ------------ | ------------------------------------------------------------ |
     * | `'single'`   | Allow the user to select only one cell at a time.            |
     * | `'range'`    | Allow the user to select one range of cells at a time.       |
     * | `'multiple'` | Allow the user to select multiple ranges of cells at a time. |
     *
     * Read more:
     * - [Selection: Selecting ranges](@/guides/cell-features/selection.md#select-ranges)
     *
     * @memberof Options#
     * @type {string}
     * @default 'multiple'
     * @category Core
     *
     * @example
     * ```js
     * // you can only select one cell at at a time
     * selectionMode: 'single',
     *
     * // you can select one range of cells at a time
     * selectionMode: 'range',
     *
     * // you can select multiple ranges of cells at a time
     * selectionMode: 'multiple',
     * ```
     */
    selectionMode: "multiple",
    /**
     * The `selectOptions` option configures options that the end user can choose from in [`select`](@/guides/cell-types/select-cell-type.md) cells.
     *
     * You can set the `selectOptions` option to one of the following:
     *
     * | Setting                         | Description                                                                   |
     * | ------------------------------- | ----------------------------------------------------------------------------- |
     * | An array of strings             | Each string is one option's value and label                                   |
     * | An object with key-string pairs | - Each key is one option's value<br>- The key's string is that option's label |
     * | A function                      | A function that returns an object with key-string pairs                       |
     *
     * Read more:
     * - [Select cell type](@/guides/cell-types/select-cell-type.md)
     *
     * @memberof Options#
     * @type {string[]|object|Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     // set the `type` of each cell in this column to `select`
     *     type: 'select',
     *     // set the first option's value and label to `A`
     *     // set the second option's value and label to `B`
     *     // set the third option's value and label to `C`
     *     selectOptions: ['A', 'B', 'C'],
     *   },
     *   {
     *     // set the `type` of each cell in this column to `select`
     *     type: 'select',
     *     selectOptions: {
     *       // set the first option's value to `value1` and label to `Label 1`
     *       value1: 'Label 1',
     *       // set the second option's value to `value2` and label to `Label 2`
     *       value2: 'Label 2',
     *       // set the third option's value to `value3` and label to `Label 3`
     *       value3: 'Label 3',
     *     },
     *   },
     *   {
     *     // set the `type` of each cell in this column to `select`
     *     type: 'select',
     *     // set `selectOption` to a function that returns available options as an object
     *     selectOptions(visualRow, visualColumn, prop) {
     *       return {
     *         value1: 'Label 1',
     *         value2: 'Label 2',
     *         value3: 'Label 3',
     *       };
     *   },
     * ],
     * ```
     */
    selectOptions: void 0,
    /**
     * @description
     * The `skipColumnOnPaste` option determines whether you can paste data into a given column.
     *
     * You can only apply the `skipColumnOnPaste` option to an entire column, using the [`columns`](#columns) option.
     *
     * You can set the `skipColumnOnPaste` option to one of the following:
     *
     * | Setting           | Description                                                                                           |
     * | ----------------- | ----------------------------------------------------------------------------------------------------- |
     * | `false` (default) | Enable pasting data into this column                                                                  |
     * | `true`            | - Disable pasting data into this column<br>- On pasting, paste data into the next column to the right |
     *
     * Read more:
     * - [Configuration options: Setting column options](@/guides/getting-started/configuration-options.md#set-column-options)
     *
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     // disable pasting data into this column
     *     skipColumnOnPaste: true
     *   }
     * ],
     * ```
     */
    skipColumnOnPaste: !1,
    /**
     * @description
     *
     * The `skipRowOnPaste` option determines whether you can paste data into a given row.
     *
     * You can only apply the `skipRowOnPaste` option to an entire row, using the [`cells`](#cells) option.
     *
     * You can set the `skipRowOnPaste` option to one of the following:
     *
     * | Setting           | Description                                                                         |
     * | ----------------- | ----------------------------------------------------------------------------------- |
     * | `false` (default) | Enable pasting data into this row                                                   |
     * | `true`            | - Disable pasting data into this row<br>- On pasting, paste data into the row below |
     *
     * Read more:
     * - [Configuration options: Setting row options](@/guides/getting-started/configuration-options.md#set-row-options)
     *
     * @memberof Options#
     * @type {boolean}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * cells(row, column) {
     *  const cellProperties = {};
     *
     *  // disable pasting data into row 1
     *  if (row === 1) {
     *    cellProperties.skipRowOnPaste = true;
     *  }
     *
     *  return cellProperties;
     * }
     * ```
     */
    skipRowOnPaste: !1,
    /**
     * The `sortByRelevance` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells'
     * lists are sorted in the same order as provided in the [`source`](#source) option.
     *
     * You can set the `sortByRelevance` option to one of the following:
     *
     * | Setting          | Description                                                                  |
     * | ---------------- | ---------------------------------------------------------------------------- |
     * | `true` (default) | Sort options in the same order as provided in the [`source`](#source) option |
     * | `false`          | Sort options alphabetically                                                  |
     *
     * Read more:
     * - [`source`](#source)
     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * columns: [{
     *   // set the `type` of each cell in this column to `autocomplete`
     *   type: 'autocomplete',
     *   // set options available in every `autocomplete` cell of this column
     *   source: ['D', 'C', 'B', 'A'],
     *   // sort the `autocomplete` option in this order: D, C, B, A
     *   sortByRelevance: true
     * }],
     * ```
     */
    sortByRelevance: !0,
    /**
     * The `source` option sets options available in [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)
     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) cells.
     *
     * You can set the `source` option to one of the following:
     *
     * - An array
     * - A function
     *
     * Read more:
     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
     * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type.md)
     * - [`strict`](#strict)
     * - [`allowHtml`](#allowHtml)
     * - [`filter`](#filter)
     * - [`sortByRelevance`](#sortByRelevance)
     *
     * @memberof Options#
     * @type {Array|Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // set `source` to an array
     * columns: [{
     *   // set the `type` of each cell in this column to `autocomplete`
     *   type: 'autocomplete',
     *   // set options available in every `autocomplete` cell of this column
     *   source: ['A', 'B', 'C', 'D']
     * }],
     *
     * // set `source` to a function
     * columns: [{
     *   // set the `type` of each cell in this column to `autocomplete`
     *   type: 'autocomplete',
     *   // for every `autocomplete` cell in this column, fetch data from an external source
     *   source(query, callback) {
     *     fetch('https://example.com/query?q=' + query, function(response) {
     *       callback(response.items);
     *     })
     *   }
     * }],
     * ```
     */
    source: void 0,
    /**
     * @description
     * If the [`data`](#data) option is not set, the `startCols` option sets the initial number of empty columns.
     *
     * The `startCols` option works only in Handsontable's constructor.
     *
     * @memberof Options#
     * @type {number}
     * @default 5
     * @category Core
     *
     * @example
     * ```js
     * // start with 15 empty columns
     * startCols: 15,
     * ```
     */
    startCols: 5,
    /**
     * @description
     * If the [`data`](#data) option is not set, the `startRows` option sets the initial number of empty rows.
     *
     * The `startRows` option works only in Handsontable's constructor.
     *
     * @memberof Options#
     * @type {number}
     * @default 5
     * @category Core
     *
     * @example
     * ```js
     * // start with 15 empty rows
     * startRows: 15,
     * ```
     */
    startRows: 5,
    /**
     * @description
     * The `stretchH` option determines what happens when the declared grid width
     * is different from the calculated sum of all column widths.
     *
     * You can set the `stretchH` option to one of the following:
     *
     * | Setting            | Description                                                       |
     * | ------------------ | ----------------------------------------------------------------- |
     * | `'none'` (default) | Don't fit the grid to the container (disable column stretching)   |
     * | `'last'`           | Fit the grid to the container, by stretching only the last column |
     * | `'all'`            | Fit the grid to the container, by stretching all columns evenly   |
     *
     * Read more:
     * - [Column width: Column stretching](@/guides/columns/column-width.md#column-stretching)
     *
     * @memberof Options#
     * @type {string}
     * @default 'none'
     * @category Core
     *
     * @example
     * ```js
     * // fit the grid to the container
     * // by stretching all columns evenly
     * stretchH: 'all',
     * ```
     */
    stretchH: "none",
    /**
     * The `strict` option configures the behavior of [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells.
     *
     * You can set the `strict` option to one of the following:
     *
     * | Setting | Mode                                                                                          | Description                                                                                |
     * | ------- | --------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------ |
     * | `true`  | [Strict mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-strict-mode)         | The end user:<br>- Can only choose one of suggested values<br>- Can't enter a custom value |
     * | `false` | [Flexible mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-flexible-mode)     | The end user:<br>- Can choose one of suggested values<br>- Can enter a custom value        |
     *
     * Read more:
     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
     * - [`source`](#source)
     *
     * @memberof Options#
     * @type {boolean}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *   // set the `type` of each cell in this column to `autocomplete`
     *   type: 'autocomplete',
     *   // set options available in every `autocomplete` cell of this column
     *   source: ['A', 'B', 'C'],
     *   // values entered must match `A`, `B`, or `C`
     *   strict: true
     *   },
     * ],
     * ```
     */
    strict: void 0,
    /**
     * The `tableClassName` option lets you add CSS class names
     * to every Handsontable instance inside the `container` element.
     *
     * You can set the `tableClassName` option to one of the following:
     *
     * | Setting             | Description                                                                                |
     * | ------------------- | ------------------------------------------------------------------------------------------ |
     * | A string            | Add a single CSS class name to every Handsontable instance inside the `container` element  |
     * | An array of strings | Add multiple CSS class names to every Handsontable instance inside the `container` element |
     *
     * Read more:
     * - [`currentRowClassName`](#currentRowClassName)
     * - [`currentColClassName`](#currentColClassName)
     * - [`currentHeaderClassName`](#currentHeaderClassName)
     * - [`activeHeaderClassName`](#activeHeaderClassName)
     * - [`invalidCellClassName`](#invalidCellClassName)
     * - [`placeholderCellClassName`](#placeholderCellClassName)
     * - [`readOnlyCellClassName`](#readOnlyCellClassName)
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     * - [`commentedCellClassName`](#commentedCellClassName)
     * - [`className`](#className)
     *
     * @memberof Options#
     * @type {string|string[]}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // add a `your-class-name` CSS class name
     * // to every Handsontable instance inside the `container` element
     * tableClassName: 'your-class-name',
     *
     * // add `first-class-name` and `second-class-name` CSS class names
     * // to every Handsontable instance inside the `container` element
     * tableClassName: ['first-class-name', 'second-class-name'],
     * ```
     */
    tableClassName: void 0,
    /**
     * The `tabMoves` option configures the action of the <kbd>**Tab**</kbd> key.
     *
     * You can set the `tabMoves` option to an object with the following properties
     * (or to a function that returns such an object):
     *
     * | Property | Type   | Description                                                                                                                                              |
     * | -------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `row`    | Number | - On pressing <kbd>**Tab**</kbd>, move selection `row` rows down<br>- On pressing <kbd>**Shift**</kbd> + <kbd>**Tab**</kbd>, move selection `row` rows up              |
     * | `col`    | Number | - On pressing <kbd>**Tab**</kbd>, move selection `col` columns right<br>- On pressing <kbd>**Shift**</kbd> + <kbd>**Tab**</kbd>, move selection `col` columns left     |
     *
     * @memberof Options#
     * @type {object|Function}
     * @default {row: 0, col: 1}
     * @category Core
     *
     * @example
     * ```js
     * // on pressing Tab, move selection 2 rows down and 2 columns right
     * // on pressing Shift+Tab, move selection 2 rows up and 2 columns left
     * tabMoves: {row: 2, col: 2},
     *
     * // the same setting, as a function
     * // `event` is a DOM Event object received on pressing Tab
     * // you can use it to check whether the user pressed Tab or Shift+Tab
     * tabMoves(event) {
     *   return {row: 2, col: 2};
     * },
     * ```
     */
    tabMoves: {
      row: 0,
      col: 1
    },
    /**
     * @description
     * The `title` option configures [column header](@/guides/columns/column-header.md) names.
     *
     * You can set the `title` option to a string.
     *
     * Read more:
     * - [Column header](@/guides/columns/column-header.md)
     * - [`columns`](#columns)
     *
     * @memberof Options#
     * @type {string}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     // set the first column header name to `First name`
     *     title: 'First name',
     *     type: 'text',
     *   },
     *   {
     *     // set the second column header name to `Last name`
     *     title: 'Last name',
     *     type: 'text',
     *   }
     * ],
     * ```
     */
    title: void 0,
    /**
     * The `trimDropdown` option configures the width of the [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)
     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) lists.
     *
     * You can set the `trimDropdown` option to one of the following:
     *
     * | Setting          | Description                                                                     |
     * | ---------------- | ------------------------------------------------------------------------------- |
     * | `true` (default) | Make the dropdown/autocomplete list's width the same as the edited cell's width |
     * | `false`          | Scale the dropdown/autocomplete list's width to the list's content              |
     *
     * Read more:
     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
     * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type.md)
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     type: 'autocomplete',
     *     // for each cell of this column
     *     // make the `autocomplete` list's width the same as the edited cell's width
     *     trimDropdown: true,
     *   },
     *   {
     *     type: 'dropdown',
     *     // for each cell of this column
     *     // scale the `dropdown` list's width to the list's content
     *     trimDropdown: false,
     *   }
     * ],
     * ```
     */
    trimDropdown: !0,
    /**
     * @description
     * The `trimRows` option configures the [`TrimRows`](@/api/trimRows.md) plugin.
     *
     * You can set the `trimRows` option to one of the following:
     *
     * | Setting                          | Description                                                                                   |
     * | -------------------------------- | --------------------------------------------------------------------------------------------- |
     * | `false`                          | Disable the [`TrimRows`](@/api/trimRows.md) plugin                                            |
     * | `true`                           | Enable the [`TrimRows`](@/api/trimRows.md) plugin                                             |
     * | An array of physical row indexes | - Enable the [`TrimRows`](@/api/trimRows.md) plugin<br>- Trim selected rows at initialization |
     *
     * Read more:
     * - [Plugins: `TrimRows`](@/api/trimRows.md)
     * - [Row trimming](@/guides/rows/row-trimming.md)
     *
     * @memberof Options#
     * @type {boolean|number[]}
     * @default undefined
     * @category TrimRows
     *
     * @example
     * ```js
     * // enable the `TrimRows` plugin
     * trimRows: true,
     *
     * // enable the `TrimRows` plugin
     * // at Handsontable's initialization, trim rows 5, 10, and 15
     * trimRows: [5, 10, 15],
     * ```
     */
    trimRows: void 0,
    /**
     * The `trimWhitespace` option configures automatic whitespace removal. This option
     * affects the cell renderer and the cell editor.
     *
     * You can set the `trimWhitespace` option to one of the following:
     *
     * | Setting          | Description                                                     |
     * | ---------------- | --------------------------------------------------------------- |
     * | `true` (default) | Remove whitespace at the beginning and at the end of each cell |
     * | `false`          | Don't remove whitespace                                         |
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     // don't remove whitespace
     *     // from any cell of this column
     *     trimWhitespace: false
     *   }
     * ]
     * ```
     */
    trimWhitespace: !0,
    /**
     * @description
     * The `type` option lets you set the [`renderer`](#renderer), [`editor`](#editor), and [`validator`](#validator)
     * options all at once, by selecting a [cell type](@/guides/cell-types/cell-type.md).
     *
     * You can set the `type` option to one of the following:
     *
     * | Cell type                                                         | Renderer, editor & validator                                                                                                                                                                                                                       |
     * | ----------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | A [custom cell type](@/guides/cell-types/cell-type.md)            | Renderer: your [custom cell renderer](@/guides/cell-functions/cell-renderer.md)<br>Editor: your [custom cell editor](@/guides/cell-functions/cell-editor.md)<br>Validator: your [custom cell validator](@/guides/cell-functions/cell-validator.md) |
     * | [`'autocomplete'`](@/guides/cell-types/autocomplete-cell-type.md) | Renderer: `AutocompleteRenderer`<br>Editor: `AutocompleteEditor`<br>Validator: `AutocompleteValidator`                                                                         |
     * | [`'checkbox'`](@/guides/cell-types/checkbox-cell-type.md)         | Renderer: `CheckboxRenderer`<br>Editor: `CheckboxEditor`<br>Validator: -                                                                                                                               |
     * | [`'date'`](@/guides/cell-types/date-cell-type.md)                 | Renderer: `DateRenderer`<br>Editor: `DateEditor`<br>Validator: `DateValidator`                                                                                                 |
     * | [`'dropdown'`](@/guides/cell-types/dropdown-cell-type.md)         | Renderer: `DropdownRenderer`<br>Editor: `DropdownEditor`<br>Validator: `DropdownValidator`                                                                                     |
     * | [`'handsontable'`](@/guides/cell-types/handsontable-cell-type.md) | Renderer: `AutocompleteRenderer`<br>Editor: `HandsontableEditor`<br>Validator: -                                                                                                                       |
     * | [`'numeric'`](@/guides/cell-types/numeric-cell-type.md)           | Renderer: `NumericRenderer`<br>Editor: `NumericEditor`<br>Validator: `NumericValidator`                                                                                        |
     * | [`'password'`](@/guides/cell-types/password-cell-type.md)         | Renderer: `PasswordRenderer`<br>Editor: `PasswordEditor`<br>Validator: -                                                                                                                               |
     * | `'text'`                                                          | Renderer: `TextRenderer`<br>Editor: `TextEditor`<br>Validator: -                                                                                                                                       |
     * | [`'time`'](@/guides/cell-types/time-cell-type.md)                 | Renderer: `TimeRenderer`<br>Editor: `TimeEditor`<br>Validator: `TimeValidator`                                                                                                 |
     *
     * Read more:
     * - [Cell type](@/guides/cell-types/cell-type.md)
     * - [Cell renderer](@/guides/cell-functions/cell-renderer.md)
     * - [Cell editor](@/guides/cell-functions/cell-editor.md)
     * - [Cell validator](@/guides/cell-functions/cell-validator.md)
     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)
     * - [`renderer`](#renderer)
     * - [`editor`](#editor)
     * - [`validator`](#validator)
     *
     * @memberof Options#
     * @type {string}
     * @default 'text'
     * @category Core
     *
     * @example
     * ```js
     * // set the `numeric` cell type for each cell of the entire grid
     * type: `'numeric'`,
     *
     * // apply the `type` option to individual columns
     * columns: [
     *   {
     *     // set the `autocomplete` cell type for each cell of this column
     *     type: 'autocomplete'
     *   },
     *   {
     *     // set the `myCustomCellType` cell type for each cell of this column
     *     type: 'myCustomCellType'
     *   }
     * ]
     * ```
     */
    type: "text",
    /**
     * The `uncheckedTemplate` option lets you configure what value
     * an unchecked [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell has.
     *
     * You can set the `uncheckedTemplate` option to one of the following:
     *
     * | Setting           | Description                                                                                                                                                                                |
     * | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
     * | `false` (default) | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is unchecked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns `false`                 |
     * | A string          | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is unchecked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns a string of your choice |
     *
     * Read more:
     * - [Checkbox cell type: Checkbox template](@/guides/cell-types/checkbox-cell-type.md#checkbox-template)
     * - [`getDataAtCell()`](@/api/core.md#getDataAtCell)
     * - [`checkedTemplate`](#checkedTemplate)
     *
     * @memberof Options#
     * @type {boolean|string|number}
     * @default false
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     // set the `type` of each cell in this column to `checkbox`
     *     // when unchecked, the cell's value is `false`
     *     // when checked, the cell's value is `true`
     *     type: 'checkbox',
     *   },
     *   {
     *     // set the `type` of each cell in this column to `checkbox`
     *     // when unchecked, the cell's value is `'No'`
     *     // when checked, the cell's value is `'Yes'`
     *     type: 'checkbox',
     *     uncheckedTemplate: 'No'
     *     checkedTemplate: 'Yes',
     *  }
     * ],
     * ```
     */
    uncheckedTemplate: void 0,
    /**
     * The `undo` option configures the [`UndoRedo`](@/api/undoRedo.md) plugin.
     *
     * You can set the `undo` option to one of the following:
     *
     * | Setting | Description                                        |
     * | ------- | -------------------------------------------------- |
     * | `true`  | Enable the [`UndoRedo`](@/api/undoRedo.md) plugin  |
     * | `false` | Disable the [`UndoRedo`](@/api/undoRedo.md) plugin |
     *
     * By default, the `undo` option is set to `undefined`,
     * but the [`UndoRedo`](@/api/undoRedo.md) plugin acts as enabled.
     * To disable the [`UndoRedo`](@/api/undoRedo.md) plugin completely,
     * set the `undo` option to `false`.
     *
     * Read more:
     * - [Undo and redo](@/guides/accessories-and-menus/undo-redo.md)
     *
     * @memberof Options#
     * @type {boolean}
     * @default undefined
     * @category UndoRedo
     *
     * @example
     * ```js
     * // enable the `UndoRedo` plugin
     * undo: true,
     * ```
     */
    undo: void 0,
    /**
     * @description
     * The `validator` option sets a [cell validator](@/guides/cell-functions/cell-validator.md) for a cell.
     *
     * You can set the `validator` option to one of the following:
     *
     * | Setting              | Description                                                                      |
     * | -------------------- | -------------------------------------------------------------------------------- |
     * | A string             | A [cell validator alias](@/guides/cell-functions/cell-validator.md)              |
     * | A function           | Your [custom cell validator function](@/guides/cell-functions/cell-validator.md) |
     * | A regular expression | A regular expression used for cell validation                                    |
     *
     * By setting the `validator` option to a string,
     * you can use one of the following [cell validator aliases](@/guides/cell-functions/cell-validator.md):
     *
     * | Alias               | Cell validator function                                                 |
     * | ------------------- | ----------------------------------------------------------------------- |
     * | A custom alias      | Your [custom cell validator](@/guides/cell-functions/cell-validator.md) |
     * | `'autocomplete'`    | `AutocompleteValidator`                                                 |
     * | `'date'`            | `DateValidator`                                                         |
     * | `'dropdown'`        | `DropdownValidator`                                                     |
     * | `'numeric'`         | `NumericValidator`                                                      |
     * | `'time'`            | `TimeValidator`                                                         |
     *
     * To set the [`editor`](#editor), [`renderer`](#renderer), and [`validator`](#validator)
     * options all at once, use the [`type`](#type) option.
     *
     * Read more:
     * - [Cell validator](@/guides/cell-functions/cell-validator.md)
     * - [Cell type](@/guides/cell-types/cell-type.md)
     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)
     * - [`type`](#type)
     *
     * @memberof Options#
     * @type {Function|RegExp|string}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *    {
     *      // use a built-in `numeric` cell validator
     *      validator: 'numeric'
     *    },
     *    {
     *      // validate against a regular expression
     *      validator: /^[0-9]$/
     *    },
     *    {
     *      // add a custom cell validator function
     *      validator(value, callback) {
     *          ...
     *      }
     *    },
     * ],
     * ```
     */
    validator: void 0,
    /**
     * @description
     * The `viewportColumnRenderingOffset` option configures the number of columns
     * to be rendered outside of the grid's viewport.
     *
     * You can set the `viewportColumnRenderingOffset` option to one of the following:
     *
     * | Setting            | Description                                             |
     * | ------------------ | ------------------------------------------------------- |
     * | `auto` (default)   | Use the offset calculated automatically by Handsontable |
     * | A number           | Set the offset manually                                 |
     *
     * Read more:
     * - [Performance: Define the number of pre-rendered rows and columns](@/guides/optimization/performance.md#define-the-number-of-pre-rendered-rows-and-columns)
     *
     * @memberof Options#
     * @type {number|string}
     * @default 'auto'
     * @category Core
     *
     * @example
     * ```js
     * // render 70 columns outside of the grid's viewport
     * viewportColumnRenderingOffset: 70,
     * ```
     */
    viewportColumnRenderingOffset: "auto",
    /**
     * @description
     * The `viewportRowRenderingOffset` option configures the number of rows
     * to be rendered outside of the grid's viewport.
     *
     * You can set the `viewportRowRenderingOffset` option to one of the following:
     *
     * | Setting            | Description                                             |
     * | ------------------ | ------------------------------------------------------- |
     * | `auto` (default)   | Use the offset calculated automatically by Handsontable |
     * | A number           | Set the offset manually                                 |
     *
     * Read more:
     * - [Performance: Define the number of pre-rendered rows and columns](@/guides/optimization/performance.md#define-the-number-of-pre-rendered-rows-and-columns)
     * - [Column virtualization](@/guides/columns/column-virtualization.md)
     *
     * @memberof Options#
     * @type {number|string}
     * @default 'auto'
     * @category Core
     *
     * @example
     * ```js
     * // render 70 rows outside of the grid's viewport
     * viewportRowRenderingOffset: 70,
     * ```
     */
    viewportRowRenderingOffset: "auto",
    /**
     * The `visibleRows` option sets the height of the [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)
     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) lists.
     *
     * When the number of list options exceeds the `visibleRows` number, a scrollbar appears.
     *
     * Read more:
     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)
     * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type.md)
     *
     * @memberof Options#
     * @type {number}
     * @default 10
     * @category Core
     *
     * @example
     * ```js
     * columns: [
     *   {
     *     type: 'autocomplete',
     *     // set the `autocomplete` list's height to 15 options
     *     // for each cell of this column
     *     visibleRows: 15,
     *   },
     *   {
     *     type: 'dropdown',
     *     // set the `dropdown` list's height to 5 options
     *     // for each cell of this column
     *     visibleRows: 5,
     *   }
     * ],
     * ```
     */
    visibleRows: 10,
    /**
     * The `width` option configures the width of your grid.
     *
     * You can set the `width` option to one of the following:
     *
     * | Setting                                                                    | Example                   |
     * | -------------------------------------------------------------------------- | ------------------------- |
     * | A number of pixels                                                         | `width: 500`              |
     * | A string with a [CSS unit](https://www.w3schools.com/cssref/css_units.asp) | `width: '75vw'`           |
     * | A function that returns a valid number or string                           | `width() { return 500; }` |
     *
     * Read more:
     * - [Grid size](@/guides/getting-started/grid-size.md)
     *
     * @memberof Options#
     * @type {number|string|Function}
     * @default undefined
     * @category Core
     *
     * @example
     * ```js
     * // set the grid's width to 500px
     * width: 500,
     *
     * // set the grid's width to 75vw
     * width: '75vw',
     *
     * // set the grid's width to 500px, using a function
     * width() {
     *   return 500;
     * },
     * ```
     */
    width: void 0,
    /**
     * The `wordWrap` option configures whether content that exceeds a column's width is wrapped or not.
     *
     * You can set the `wordWrap` option to one of the following:
     *
     * | Setting          | Description                                             |
     * | ---------------- | ------------------------------------------------------- |
     * | `true` (default) | If content exceeds the column's width, wrap the content |
     * | `false`          | Don't wrap content                                      |
     *
     * To style cells that don't wrap content, use the [`noWordWrapClassName`](#noWordWrapClassName) option.
     *
     * Read more:
     * - [`noWordWrapClassName`](#noWordWrapClassName)
     *
     * @memberof Options#
     * @type {boolean}
     * @default true
     * @category Core
     *
     * @example
     * ```js
     * // set column width for every column of the entire grid
     * colWidths: 100,
     *
     * columns: [
     *   {
     *     // don't wrap content in this column
     *     wordWrap: false,
     *   },
     *   {
     *     // if content exceeds this column's width, wrap the content
     *     wordWrap: true,
     *   }
     * ],
     * ```
     */
    wordWrap: !0
    /* eslint-enable jsdoc/require-description-complete-sentence */
  };
};
function Hh(e) {
  "@babel/helpers - typeof";
  return Hh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Hh(e);
}
function BM(e, t) {
  var r = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    t && (n = n.filter(function(o) {
      return Object.getOwnPropertyDescriptor(e, o).enumerable;
    })), r.push.apply(r, n);
  }
  return r;
}
function VM(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? BM(Object(r), !0).forEach(function(n) {
      TSe(e, n, r[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : BM(Object(r)).forEach(function(n) {
      Object.defineProperty(e, n, Object.getOwnPropertyDescriptor(r, n));
    });
  }
  return e;
}
function TSe(e, t, r) {
  return t = O2(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function WM(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, O2(n.key), n);
  }
}
function _2(e, t, r) {
  return t && WM(e.prototype, t), r && WM(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function O2(e) {
  var t = PSe(e, "string");
  return Hh(t) === "symbol" ? t : String(t);
}
function PSe(e, t) {
  if (Hh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Hh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function R2(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function kSe() {
  return /* @__PURE__ */ _2(function e() {
    R2(this, e);
  });
}
var $Se = /* @__PURE__ */ function() {
  function e(t) {
    R2(this, e), this.metaCtor = kSe(), this.meta = this.metaCtor.prototype, Gt(this.meta, C2()), this.meta.instance = t;
  }
  return _2(e, [{
    key: "getMetaConstructor",
    value: function() {
      return this.metaCtor;
    }
    /**
     * Gets settings object for this layer.
     *
     * @returns {object}
     */
  }, {
    key: "getMeta",
    value: function() {
      return this.meta;
    }
    /**
     * Updates global settings object by merging settings with the current state.
     *
     * @param {object} settings An object to merge with.
     */
  }, {
    key: "updateMeta",
    value: function(r) {
      var n;
      Gt(this.meta, r), Bg(this.meta, VM(VM({}, r), {}, {
        type: (n = r.type) !== null && n !== void 0 ? n : this.meta.type
      }), r);
    }
  }]), e;
}();
function Lh(e) {
  "@babel/helpers - typeof";
  return Lh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Lh(e);
}
function ASe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function UM(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, MSe(n.key), n);
  }
}
function ISe(e, t, r) {
  return t && UM(e.prototype, t), r && UM(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function MSe(e) {
  var t = xSe(e, "string");
  return Lh(t) === "symbol" ? t : String(t);
}
function xSe(e, t) {
  if (Lh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Lh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var DSe = /* @__PURE__ */ function() {
  function e(t) {
    ASe(this, e);
    var r = t.getMetaConstructor();
    this.meta = new r();
  }
  return ISe(e, [{
    key: "getMeta",
    value: function() {
      return this.meta;
    }
    /**
     * Updates table settings object by merging settings with the current state.
     *
     * @param {object} settings An object to merge with.
     */
  }, {
    key: "updateMeta",
    value: function(r) {
      Gt(this.meta, r), Bg(this.meta, r, r);
    }
  }]), e;
}();
function jh(e) {
  "@babel/helpers - typeof";
  return jh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, jh(e);
}
function zM(e) {
  return jSe(e) || LSe(e) || HSe(e) || NSe();
}
function NSe() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function HSe(e, t) {
  if (e) {
    if (typeof e == "string")
      return B_(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return B_(e, t);
  }
}
function LSe(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function jSe(e) {
  if (Array.isArray(e))
    return B_(e);
}
function B_(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function FSe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function YM(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, VSe(n.key), n);
  }
}
function BSe(e, t, r) {
  return t && YM(e.prototype, t), r && YM(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function VSe(e) {
  var t = WSe(e, "string");
  return jh(t) === "symbol" ? t : String(t);
}
function WSe(e, t) {
  if (jh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (jh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var V_ = /* @__PURE__ */ function(e) {
  function t(r) {
    FSe(this, t), this.valueFactory = r, this.data = [], this.index = [], this.holes = /* @__PURE__ */ new Set();
  }
  return BSe(t, [{
    key: "obtain",
    value: function(n) {
      fp(function() {
        return up(n);
      }, "Expecting an unsigned number.");
      var o = this._getStorageIndexByKey(n), i;
      if (o >= 0)
        i = this.data[o], i === void 0 && (i = this.valueFactory(n), this.data[o] = i);
      else if (i = this.valueFactory(n), this.holes.size > 0) {
        var a = this.holes.values().next().value;
        this.holes.delete(a), this.data[a] = i, this.index[n] = a;
      } else
        this.data.push(i), this.index[n] = this.data.length - 1;
      return i;
    }
    /**
     * Inserts an empty data to the map. This method creates an empty space for obtaining
     * new data.
     *
     * @param {number} key The key as volatile zero-based index at which to begin inserting space for new data.
     * @param {number} [amount=1] Ammount of data to insert.
     */
  }, {
    key: "insert",
    value: function(n) {
      var o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      fp(function() {
        return up(n) || ay(n);
      }, "Expecting an unsigned number or null/undefined argument.");
      for (var i = [], a = this.data.length, l = 0; l < o; l++)
        i.push(a + l), this.data.push(void 0);
      var s = ay(n) ? this.index.length : n;
      this.index = [].concat(zM(this.index.slice(0, s)), i, zM(this.index.slice(s)));
    }
    /**
     * Removes (soft remove) data from "index" and according to the amount of data.
     *
     * @param {number} key The key as volatile zero-based index at which to begin removing the data.
     * @param {number} [amount=1] Ammount data to remove.
     */
  }, {
    key: "remove",
    value: function(n) {
      var o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      fp(function() {
        return up(n) || ay(n);
      }, "Expecting an unsigned number or null/undefined argument.");
      for (var i = this.index.splice(ay(n) ? this.index.length - o : n, o), a = 0; a < i.length; a++) {
        var l = i[a];
        typeof l == "number" && this.holes.add(l);
      }
    }
    /**
     * Returns the size of the data which this map holds.
     *
     * @returns {number}
     */
  }, {
    key: "size",
    value: function() {
      return this.data.length - this.holes.size;
    }
    /**
     * Returns a new Iterator object that contains the values for each item in the LazyMap object.
     *
     * @returns {Iterator}
     */
  }, {
    key: "values",
    value: function() {
      var n = this;
      return Zr(this.data, function(o, i) {
        return !n.holes.has(i);
      })[Symbol.iterator]();
    }
    /**
     * Returns a new Iterator object that contains an array of `[index, value]` for each item in the LazyMap object.
     *
     * @returns {Iterator}
     */
  }, {
    key: "entries",
    value: function() {
      for (var n = [], o = 0; o < this.data.length; o++) {
        var i = this._getKeyByStorageIndex(o);
        i !== -1 && n.push([i, this.data[o]]);
      }
      var a = 0;
      return {
        next: function() {
          if (a < n.length) {
            var s = n[a];
            return a += 1, {
              value: s,
              done: !1
            };
          }
          return {
            done: !0
          };
        }
      };
    }
    /**
     * Clears the map.
     */
  }, {
    key: "clear",
    value: function() {
      this.data = [], this.index = [], this.holes.clear();
    }
    /**
     * Gets storage index calculated from the key associated with the specified value.
     *
     * @param {number} key Volatile zero-based index.
     * @returns {number} Returns index 0-N or -1 if no storage index found.
     */
  }, {
    key: "_getStorageIndexByKey",
    value: function(n) {
      return this.index.length > n ? this.index[n] : -1;
    }
    /**
     * Gets the key associated with the specified value calculated from storage index.
     *
     * @param {number} dataIndex Zero-based storage index.
     * @returns {number} Returns index 0-N or -1 if no key found.
     */
  }, {
    key: "_getKeyByStorageIndex",
    value: function(n) {
      return this.index.indexOf(n);
    }
    /**
     * Makes this object iterable.
     *
     * @returns {Iterator}
     */
  }, {
    key: e,
    value: function() {
      return this.entries();
    }
  }]), t;
}(Symbol.iterator);
function Fh(e) {
  "@babel/helpers - typeof";
  return Fh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Fh(e);
}
function USe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function GM(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, YSe(n.key), n);
  }
}
function zSe(e, t, r) {
  return t && GM(e.prototype, t), r && GM(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function YSe(e) {
  var t = GSe(e, "string");
  return Fh(t) === "symbol" ? t : String(t);
}
function GSe(e, t) {
  if (Fh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Fh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var KSe = ["data", "width"], qSe = /* @__PURE__ */ function() {
  function e(t) {
    var r = this;
    USe(this, e), this.globalMeta = t, this.metas = new V_(function() {
      return r._createMeta();
    });
  }
  return zSe(e, [{
    key: "updateMeta",
    value: function(r, n) {
      var o = this.getMeta(r);
      Gt(o, n), Bg(o, n);
    }
    /**
     * Creates one or more columns at specific position.
     *
     * @param {number} physicalColumn The physical column index which points from what position the column is added.
     * @param {number} amount An amount of columns to add.
     */
  }, {
    key: "createColumn",
    value: function(r, n) {
      this.metas.insert(r, n);
    }
    /**
     * Removes one or more columns from the collection.
     *
     * @param {number} physicalColumn The physical column index which points from what position the column is removed.
     * @param {number} amount An amount columns to remove.
     */
  }, {
    key: "removeColumn",
    value: function(r, n) {
      this.metas.remove(r, n);
    }
    /**
     * Gets settings object for this layer.
     *
     * @param {number} physicalColumn The physical column index.
     * @returns {object}
     */
  }, {
    key: "getMeta",
    value: function(r) {
      return this.metas.obtain(r);
    }
    /**
     * Gets constructor of the column meta object. Necessary for inheritance - creating the next meta layers.
     *
     * @param {number} physicalColumn The physical column index.
     * @returns {Function}
     */
  }, {
    key: "getMetaConstructor",
    value: function(r) {
      return this.metas.obtain(r).constructor;
    }
    /**
     * Clears all saved column meta objects.
     */
  }, {
    key: "clearCache",
    value: function() {
      this.metas.clear();
    }
    /**
     * Creates and returns new column meta object with properties inherited from the global meta layer.
     *
     * @private
     * @returns {object}
     */
  }, {
    key: "_createMeta",
    value: function() {
      return ESe(this.globalMeta.getMetaConstructor(), KSe).prototype;
    }
  }]), e;
}();
function Bh(e) {
  "@babel/helpers - typeof";
  return Bh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Bh(e);
}
function XSe(e) {
  return eCe(e) || JSe(e) || QSe(e) || ZSe();
}
function ZSe() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function QSe(e, t) {
  if (e) {
    if (typeof e == "string")
      return W_(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return W_(e, t);
  }
}
function JSe(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function eCe(e) {
  if (Array.isArray(e))
    return W_(e);
}
function W_(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function tCe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function KM(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, nCe(n.key), n);
  }
}
function rCe(e, t, r) {
  return t && KM(e.prototype, t), r && KM(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function nCe(e) {
  var t = oCe(e, "string");
  return Bh(t) === "symbol" ? t : String(t);
}
function oCe(e, t) {
  if (Bh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Bh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var iCe = /* @__PURE__ */ function() {
  function e(t) {
    var r = this;
    tCe(this, e), this.columnMeta = t, this.metas = new V_(function() {
      return r._createRow();
    });
  }
  return rCe(e, [{
    key: "updateMeta",
    value: function(r, n, o) {
      var i = this.getMeta(r, n);
      Gt(i, o), Bg(i, o);
    }
    /**
     * Creates one or more rows at specific position.
     *
     * @param {number} physicalRow The physical row index which points from what position the row is added.
     * @param {number} amount An amount of rows to add.
     */
  }, {
    key: "createRow",
    value: function(r, n) {
      this.metas.insert(r, n);
    }
    /**
     * Creates one or more columns at specific position.
     *
     * @param {number} physicalColumn The physical column index which points from what position the column is added.
     * @param {number} amount An amount of columns to add.
     */
  }, {
    key: "createColumn",
    value: function(r, n) {
      for (var o = 0; o < this.metas.size(); o++)
        this.metas.obtain(o).insert(r, n);
    }
    /**
     * Removes one or more rows from the collection.
     *
     * @param {number} physicalRow The physical row index which points from what position the row is removed.
     * @param {number} amount An amount of rows to remove.
     */
  }, {
    key: "removeRow",
    value: function(r, n) {
      this.metas.remove(r, n);
    }
    /**
     * Removes one or more columns from the collection.
     *
     * @param {number} physicalColumn The physical column index which points from what position the column is removed.
     * @param {number} amount An amount of columns to remove.
     */
  }, {
    key: "removeColumn",
    value: function(r, n) {
      for (var o = 0; o < this.metas.size(); o++)
        this.metas.obtain(o).remove(r, n);
    }
    /**
     * Gets settings object for this layer.
     *
     * @param {number} physicalRow The physical row index.
     * @param {number} physicalColumn The physical column index.
     * @param {string} [key] If the key exists its value will be returned, otherwise the whole cell meta object.
     * @returns {object}
     */
  }, {
    key: "getMeta",
    value: function(r, n, o) {
      var i = this.metas.obtain(r).obtain(n);
      return o === void 0 ? i : i[o];
    }
    /**
     * Sets settings object for this layer defined by "key" property.
     *
     * @param {number} physicalRow The physical row index.
     * @param {number} physicalColumn The physical column index.
     * @param {string} key The property name to set.
     * @param {*} value Value to save.
     */
  }, {
    key: "setMeta",
    value: function(r, n, o, i) {
      var a, l = this.metas.obtain(r).obtain(n);
      (a = l._automaticallyAssignedMetaProps) === null || a === void 0 || a.delete(o), l[o] = i;
    }
    /**
     * Removes a property defined by the "key" argument from the cell meta object.
     *
     * @param {number} physicalRow The physical row index.
     * @param {number} physicalColumn The physical column index.
     * @param {string} key The property name to remove.
     */
  }, {
    key: "removeMeta",
    value: function(r, n, o) {
      var i = this.metas.obtain(r).obtain(n);
      delete i[o];
    }
    /**
     * Returns all cell meta objects that were created during the Handsontable operation. As cell meta
     * objects are created lazy, the length of the returned collection depends on how and when the
     * table has asked for access to that meta objects.
     *
     * @returns {object[]}
     */
  }, {
    key: "getMetas",
    value: function() {
      for (var r = [], n = Array.from(this.metas.values()), o = 0; o < n.length; o++)
        r.push.apply(r, XSe(n[o].values()));
      return r;
    }
    /**
     * Returns all cell meta objects that were created during the Handsontable operation but for
     * specific row index.
     *
     * @param {number} physicalRow The physical row index.
     * @returns {object[]}
     */
  }, {
    key: "getMetasAtRow",
    value: function(r) {
      fp(function() {
        return up(r);
      }, "Expecting an unsigned number.");
      var n = new Map(this.metas);
      return n.has(r) ? Array.from(n.get(r).values()) : [];
    }
    /**
     * Clears all saved cell meta objects.
     */
  }, {
    key: "clearCache",
    value: function() {
      this.metas.clear();
    }
    /**
     * Creates and returns new structure for cell meta objects stored in columnar axis.
     *
     * @private
     * @returns {object}
     */
  }, {
    key: "_createRow",
    value: function() {
      var r = this;
      return new V_(function(n) {
        return r._createMeta(n);
      });
    }
    /**
     * Creates and returns new cell meta object with properties inherited from the column meta layer.
     *
     * @private
     * @param {number} physicalColumn The physical column index.
     * @returns {object}
     */
  }, {
    key: "_createMeta",
    value: function(r) {
      var n = this.columnMeta.getMetaConstructor(r);
      return new n();
    }
  }]), e;
}();
function Vh(e) {
  "@babel/helpers - typeof";
  return Vh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Vh(e);
}
function aCe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function qM(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, sCe(n.key), n);
  }
}
function lCe(e, t, r) {
  return t && qM(e.prototype, t), r && qM(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function sCe(e) {
  var t = uCe(e, "string");
  return Vh(t) === "symbol" ? t : String(t);
}
function uCe(e, t) {
  if (Vh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Vh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var E2 = /* @__PURE__ */ function() {
  function e(t) {
    var r = this, n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
    aCe(this, e), this.hot = t, this.globalMeta = new $Se(t), this.tableMeta = new DSe(this.globalMeta), this.columnMeta = new qSe(this.globalMeta), this.cellMeta = new iCe(this.columnMeta), o.forEach(function(i) {
      return new i(r);
    }), this.globalMeta.updateMeta(n);
  }
  return lCe(e, [{
    key: "getGlobalMeta",
    value: function() {
      return this.globalMeta.getMeta();
    }
    /**
     * Updates global settings object by merging settings with the current state.
     *
     * @param {object} settings An object to merge with.
     */
  }, {
    key: "updateGlobalMeta",
    value: function(r) {
      this.globalMeta.updateMeta(r);
    }
    /**
     * Gets settings object that was passed in the Handsontable constructor. That layer contains all
     * default settings inherited from the GlobalMeta layer merged with settings passed by the developer.
     * Adding, removing, or changing property in that object has no direct reflection on any other layers.
     *
     * @returns {TableMeta}
     */
  }, {
    key: "getTableMeta",
    value: function() {
      return this.tableMeta.getMeta();
    }
    /**
     * Updates table settings object by merging settings with the current state.
     *
     * @param {object} settings An object to merge with.
     */
  }, {
    key: "updateTableMeta",
    value: function(r) {
      this.tableMeta.updateMeta(r);
    }
    /**
     * Gets column meta object that is a root of all settings defined in the column property of the Handsontable
     * settings. Each column in the Handsontable is associated with a unique meta object which identified by
     * the physical column index. Adding, removing, or changing property in that object has a direct reflection
     * only for the CellMeta layer. The reflection will be visible only if the property doesn't exist in the lower
     * layers (prototype lookup).
     *
     * @param {number} physicalColumn The physical column index.
     * @returns {object}
     */
  }, {
    key: "getColumnMeta",
    value: function(r) {
      return this.columnMeta.getMeta(r);
    }
    /**
     * Updates column meta object by merging settings with the current state.
     *
     * @param {number} physicalColumn The physical column index which points what column meta object is updated.
     * @param {object} settings An object to merge with.
     */
  }, {
    key: "updateColumnMeta",
    value: function(r, n) {
      this.columnMeta.updateMeta(r, n);
    }
    /**
     * Gets the cell meta object that is a root of all settings defined for the specific cell rendered by
     * the Handsontable. Each cell meta inherits settings from higher layers. When a property doesn't
     * exist in that layer, it is looked up through a prototype to the highest layer. Starting
     * from CellMeta -> ColumnMeta and ending to GlobalMeta, which stores default settings. Adding,
     * removing, or changing property in that object has no direct reflection on any other layers.
     *
     * @param {number} physicalRow The physical row index.
     * @param {number} physicalColumn The physical column index.
     * @param {object} options Additional options that are used to extend the cell meta object.
     * @param {number} options.visualRow The visual row index of the currently requested cell meta object.
     * @param {number} options.visualColumn The visual column index of the currently requested cell meta object.
     * @returns {object}
     */
  }, {
    key: "getCellMeta",
    value: function(r, n, o) {
      var i = o.visualRow, a = o.visualColumn, l = this.cellMeta.getMeta(r, n);
      return l.visualRow = i, l.visualCol = a, l.row = r, l.col = n, this.runLocalHooks("afterGetCellMeta", l), l;
    }
    /**
     * Gets a value (defined by the `key` property) from the cell meta object.
     *
     * @param {number} physicalRow The physical row index.
     * @param {number} physicalColumn The physical column index.
     * @param {string} key Defines the value that will be returned from the cell meta object.
     * @returns {*}
     */
  }, {
    key: "getCellMetaKeyValue",
    value: function(r, n, o) {
      if (typeof o != "string")
        throw new Error("The passed cell meta object key is not a string");
      return this.cellMeta.getMeta(r, n, o);
    }
    /**
     * Sets settings object for cell meta object defined by "key" property.
     *
     * @param {number} physicalRow The physical row index.
     * @param {number} physicalColumn The physical column index.
     * @param {string} key The property name to set.
     * @param {*} value Value to save.
     */
  }, {
    key: "setCellMeta",
    value: function(r, n, o, i) {
      this.cellMeta.setMeta(r, n, o, i);
    }
    /**
     * Updates cell meta object by merging settings with the current state.
     *
     * @param {number} physicalRow The physical row index which points what cell meta object is updated.
     * @param {number} physicalColumn The physical column index which points what cell meta object is updated.
     * @param {object} settings An object to merge with.
     */
  }, {
    key: "updateCellMeta",
    value: function(r, n, o) {
      this.cellMeta.updateMeta(r, n, o);
    }
    /**
     * Removes a property defined by the "key" argument from the cell meta object.
     *
     * @param {number} physicalRow The physical row index.
     * @param {number} physicalColumn The physical column index.
     * @param {string} key The property name to remove.
     */
  }, {
    key: "removeCellMeta",
    value: function(r, n, o) {
      this.cellMeta.removeMeta(r, n, o);
    }
    /**
     * Returns all cell meta objects that were created during the Handsontable operation. As cell meta
     * objects are created lazy, the length of the returned collection depends on how and when the
     * table has asked for access to that meta objects.
     *
     * @returns {object[]}
     */
  }, {
    key: "getCellsMeta",
    value: function() {
      return this.cellMeta.getMetas();
    }
    /**
     * Returns all cell meta objects that were created during the Handsontable operation but for
     * specyfic row index.
     *
     * @param {number} physicalRow The physical row index.
     * @returns {object[]}
     */
  }, {
    key: "getCellsMetaAtRow",
    value: function(r) {
      return this.cellMeta.getMetasAtRow(r);
    }
    /**
     * Creates one or more rows at specific position.
     *
     * @param {number} physicalRow The physical row index which points from what position the row is added.
     * @param {number} [amount=1] An amount of rows to add.
     */
  }, {
    key: "createRow",
    value: function(r) {
      var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      this.cellMeta.createRow(r, n);
    }
    /**
     * Removes one or more rows from the collection.
     *
     * @param {number} physicalRow The physical row index which points from what position the row is removed.
     * @param {number} [amount=1] An amount rows to remove.
     */
  }, {
    key: "removeRow",
    value: function(r) {
      var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      this.cellMeta.removeRow(r, n);
    }
    /**
     * Creates one or more columns at specific position.
     *
     * @param {number} physicalColumn The physical column index which points from what position the column is added.
     * @param {number} [amount=1] An amount of columns to add.
     */
  }, {
    key: "createColumn",
    value: function(r) {
      var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      this.cellMeta.createColumn(r, n), this.columnMeta.createColumn(r, n);
    }
    /**
     * Removes one or more columns from the collection.
     *
     * @param {number} physicalColumn The physical column index which points from what position the column is removed.
     * @param {number} [amount=1] An amount of columns to remove.
     */
  }, {
    key: "removeColumn",
    value: function(r) {
      var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      this.cellMeta.removeColumn(r, n), this.columnMeta.removeColumn(r, n);
    }
    /**
     * Clears all saved cell meta objects. It keeps column meta, table meta, and global meta intact.
     */
  }, {
    key: "clearCellsCache",
    value: function() {
      this.cellMeta.clearCache();
    }
    /**
     * Clears all saved cell and columns meta objects.
     */
  }, {
    key: "clearCache",
    value: function() {
      this.cellMeta.clearCache(), this.columnMeta.clearCache();
    }
  }]), e;
}();
bt(E2, $r);
function Rm(e) {
  "@babel/helpers - typeof";
  return Rm = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Rm(e);
}
function XM(e, t, r, n) {
  var o = n.hotInstance, i = n.dataMap, a = n.dataSource, l = n.internalSource, s = n.source, u = n.metaManager, f = n.firstRun, c = vn(l), h = o.getSettings();
  Array.isArray(h.dataSchema) ? o.dataType = "array" : wt(h.dataSchema) ? o.dataType = "function" : o.dataType = "object", i && i.destroy(), e = o.runHooks("before".concat(c), e, f, s);
  var d = new SSe(o, e, u);
  if (t(d), Rm(e) === "object" && e !== null)
    e.push && e.splice || (e = [e]);
  else if (e === null) {
    var y = d.getSchema();
    e = [];
    var p, g = 0, w = 0;
    for (g = 0, w = h.startRows; g < w; g++)
      if ((o.dataType === "object" || o.dataType === "function") && h.dataSchema)
        p = mr(y), e.push(p);
      else if (o.dataType === "array")
        p = mr(y[0]), e.push(p);
      else {
        p = [];
        for (var C = 0, _ = h.startCols; C < _; C++)
          p.push(null);
        e.push(p);
      }
  } else
    throw new Error("".concat(l, " only accepts array of objects or array of arrays (").concat(Rm(e), " given)"));
  Array.isArray(e[0]) && (o.dataType = "array"), h.data = e, d.dataSource = e, a.data = e, a.dataType = o.dataType, a.colToProp = d.colToProp.bind(d), a.propToCol = d.propToCol.bind(d), a.countCachedColumns = d.countCachedColumns.bind(d), r(d), o.runHooks("after".concat(c), e, f, s), f || (o.runHooks("afterChange", null, l), o.render());
}
function Wh(e) {
  "@babel/helpers - typeof";
  return Wh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Wh(e);
}
function fCe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function ZM(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, hCe(n.key), n);
  }
}
function cCe(e, t, r) {
  return t && ZM(e.prototype, t), r && ZM(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function hCe(e) {
  var t = dCe(e, "string");
  return Wh(t) === "symbol" ? t : String(t);
}
function dCe(e, t) {
  if (Wh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Wh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var vCe = /* @__PURE__ */ function() {
  function e(t) {
    var r = this;
    fCe(this, e), this.metaManager = t, this.metaSyncMemo = /* @__PURE__ */ new Map(), t.addLocalHook("afterGetCellMeta", function(n) {
      return r.extendCellMeta(n);
    }), we.getSingleton().add("beforeRender", function(n) {
      n && r.metaSyncMemo.clear();
    }, this.metaManager.hot);
  }
  return cCe(e, [{
    key: "extendCellMeta",
    value: function(r) {
      var n, o = r.row, i = r.col;
      if (!((n = this.metaSyncMemo.get(o)) !== null && n !== void 0 && n.has(i))) {
        var a = r.visualRow, l = r.visualCol, s = this.metaManager.hot, u = s.colToProp(l);
        r.prop = u, s.runHooks("beforeGetCellMeta", a, l, r);
        var f = Dt(r, "type") ? r.type : null, c = wt(r.cells) ? r.cells(o, i, u) : null;
        if (f)
          if (c) {
            var h;
            c.type = (h = c.type) !== null && h !== void 0 ? h : f;
          } else
            c = {
              type: f
            };
        c && this.metaManager.updateCellMeta(o, i, c), s.runHooks("afterGetCellMeta", a, l, r), this.metaSyncMemo.has(o) || this.metaSyncMemo.set(o, /* @__PURE__ */ new Set()), this.metaSyncMemo.get(o).add(i);
      }
    }
  }]), e;
}();
function Uh(e) {
  "@babel/helpers - typeof";
  return Uh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Uh(e);
}
function yCe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function QM(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, mCe(n.key), n);
  }
}
function pCe(e, t, r) {
  return t && QM(e.prototype, t), r && QM(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function mCe(e) {
  var t = gCe(e, "string");
  return Uh(t) === "symbol" ? t : String(t);
}
function gCe(e, t) {
  if (Uh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Uh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var bCe = /* @__PURE__ */ function() {
  function e(t) {
    yCe(this, e), this.metaManager = t, this.usageTracker = /* @__PURE__ */ new Set(), this.propDescriptors = /* @__PURE__ */ new Map([["fixedColumnsLeft", {
      target: "fixedColumnsStart",
      onChange: function(n) {
        var o = this.metaManager.hot.isRtl();
        if (o && n === "fixedColumnsLeft")
          throw new Error("The `fixedColumnsLeft` is not supported for RTL. Please use option `fixedColumnsStart`.");
        if (this.usageTracker.has("fixedColumnsLeft") && this.usageTracker.has("fixedColumnsStart"))
          throw new Error("The `fixedColumnsLeft` and `fixedColumnsStart` should not be used together. Please use only the option `fixedColumnsStart`.");
      }
    }], ["layoutDirection", {
      onChange: function(n, o, i) {
        if (!i)
          throw new Error("The `".concat(n, "` option can not be updated after the Handsontable is initialized."));
      }
    }]]), this.extendMetaProps();
  }
  return pCe(e, [{
    key: "extendMetaProps",
    value: function() {
      var r = this;
      this.propDescriptors.forEach(function(n, o) {
        var i = n.target, a = n.onChange, l = a === void 0 ? function() {
        } : a, s = typeof i == "string", u = s ? i : o, f = "_".concat(u);
        r.metaManager.globalMeta.meta[f] = r.metaManager.globalMeta.meta[u], r.installPropWatcher(o, f, l), s && r.installPropWatcher(i, f, l);
      });
    }
    /**
     * Installs the property watcher to the `propName` option and forwards getter and setter to
     * the new one.
     *
     * @param {string} propName The property to watch.
     * @param {string} origProp The property from/to the value is forwarded.
     * @param {Function} onChange The callback.
     */
  }, {
    key: "installPropWatcher",
    value: function(r, n, o) {
      var i = this;
      Object.defineProperty(this.metaManager.globalMeta.meta, r, {
        get: function() {
          return this[n];
        },
        set: function(l) {
          var s = !i.usageTracker.has(r);
          i.usageTracker.add(r), o.call(i, r, l, s), this[n] = l;
        },
        enumerable: !0,
        configurable: !0
      });
    }
  }]), e;
}(), JM = /* @__PURE__ */ new Map([
  [" ", "space"],
  // custom mapping
  ["spacebar", "space"],
  ["scroll", "scrolllock"],
  ["del", "delete"],
  ["esc", "escape"],
  ["medianexttrack", "mediatracknext"],
  ["mediaprevioustrack", "mediatrackprevious"],
  ["volumeup", "audiovolumeup"],
  ["volumedown", "audiovolumedown"],
  ["volumemute", "audiovolumemute"],
  ["multiply", "*"],
  ["add", "+"],
  ["divide", "/"],
  ["subtract", "-"],
  ["left", "arrowleft"],
  ["right", "arrowright"],
  ["up", "arrowup"],
  ["down", "arrowdown"]
]), ly = function(t) {
  return t.map(function(r) {
    var n = r.toLowerCase();
    return JM.has(n) ? JM.get(n) : n;
  }).sort().join("+");
}, wCe = function(t) {
  return t.split("+");
}, ex = function(t) {
  return t.toLowerCase();
}, tx;
function SCe(e) {
  return OCe(e) || _Ce(e) || T2(e) || CCe();
}
function CCe() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function _Ce(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function OCe(e) {
  if (Array.isArray(e))
    return U_(e);
}
function RCe(e, t) {
  return PCe(e) || TCe(e, t) || T2(e, t) || ECe();
}
function ECe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function T2(e, t) {
  if (e) {
    if (typeof e == "string")
      return U_(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return U_(e, t);
  }
}
function U_(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function TCe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function PCe(e) {
  if (Array.isArray(e))
    return e;
}
function kCe(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } }));
}
var $Ce = function(t) {
  var r = Ag({
    errorIdExists: function(f) {
      return 'The "'.concat(f, '" shortcut is already registered in the "').concat(t, '" context.');
    }
  }), n = function() {
    var f = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, c = f.keys, h = f.callback, d = f.group, y = f.runOnlyIf, p = y === void 0 ? function() {
      return !0;
    } : y, g = f.captureCtrl, w = g === void 0 ? !1 : g, C = f.preventDefault, _ = C === void 0 ? !0 : C, k = f.stopPropagation, E = k === void 0 ? !1 : k, j = f.relativeToGroup, Y = f.position;
    if (gt(d))
      throw new Error("You need to define the shortcut's group.");
    if (wt(h) === !1)
      throw new Error("The shortcut's callback needs to be a function.");
    if (Array.isArray(c) === !1)
      throw new Error(ut(tx || (tx = kCe([`Pass the shortcut's keys as an array of arrays, 
      using the KeyboardEvent.key properties: 
      https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.`], [`Pass the shortcut\\'s keys as an array of arrays,\\x20
      using the KeyboardEvent.key properties:\\x20
      https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.`]))));
    var Q = {
      callback: h,
      group: d,
      runOnlyIf: p,
      captureCtrl: w,
      preventDefault: _,
      stopPropagation: E
    };
    if (be(j)) {
      var X = [j, Y];
      Q.relativeToGroup = X[0], Q.position = X[1];
    }
    c.forEach(function(q) {
      var J = ly(q), le = r.hasItem(J);
      if (le) {
        var ee = r.getItem(J), U = ee.findIndex(function(Z) {
          return Z.group === j;
        });
        U !== -1 ? Y === "before" ? U -= 1 : U += 1 : U = ee.length, ee.splice(U, 0, Q);
      } else
        r.addItem(J, [Q]);
    });
  }, o = function(f) {
    var c = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    f.forEach(function(h) {
      Ye(c, function(d, y) {
        Object.prototype.hasOwnProperty.call(h, y) === !1 && (h[y] = c[y]);
      }), n(h);
    });
  }, i = function(f) {
    var c = ly(f);
    r.removeItem(c);
  }, a = function(f) {
    var c = r.getItems();
    c.forEach(function(h) {
      var d = RCe(h, 2), y = d[0], p = d[1], g = p.filter(function(w) {
        return w.group !== f;
      });
      g.length === 0 ? i(wCe(y)) : (p.length = 0, p.push.apply(p, SCe(g)));
    });
  }, l = function(f) {
    var c = ly(f), h = r.getItem(c);
    return be(h) ? h.slice() : [];
  }, s = function(f) {
    var c = ly(f);
    return r.hasItem(c);
  };
  return {
    addShortcut: n,
    addShortcuts: o,
    getShortcuts: l,
    hasShortcut: s,
    removeShortcutsByKeys: i,
    removeShortcutsByGroup: a
  };
};
function ACe() {
  var e = /* @__PURE__ */ new Set();
  return {
    /**
     * Press a key.
     *
     * @param {string} key Names of the shortcut's keys,
     * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),
     * in lowercase or uppercase, unified across browsers
     */
    press: function(r) {
      e.add(r);
    },
    /**
     * Release a pressed key.
     *
     * @param {string} key Names of the shortcut's keys,
     * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),
     * in lowercase or uppercase, unified across browsers
     */
    release: function(r) {
      e.delete(r);
    },
    /**
     * Release all pressed keys.
     */
    releaseAll: function() {
      e.clear();
    },
    /**
     * Check if a key is pressed.
     *
     * @param {string} key Names of the shortcut's keys,
     * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),
     * in lowercase or uppercase, unified across browsers
     * @returns {boolean}
     */
    isPressed: function(r) {
      return e.has(r);
    }
  };
}
var ICe = ["meta", "alt", "shift", "control"], Yf = ACe();
function MCe(e, t, r, n, o) {
  var i = function(d) {
    return ICe.includes(d);
  }, a = function(d) {
    var y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, p = [];
    return d.altKey && p.push("alt"), y && (d.ctrlKey || d.metaKey) ? p.push("control/meta") : (d.ctrlKey && p.push("control"), d.metaKey && p.push("meta")), d.shiftKey && p.push("shift"), p;
  }, l = function(d) {
    if (t(d) !== !1) {
      var y = r(d);
      if (!(d.keyCode === 229 || y === !1 || jl(d))) {
        var p = ex(d.key), g = [];
        i(p) ? Yf.press(p) : g = a(d);
        var w = [p].concat(g), C = o(d, w);
        !C && (kA() && g.includes("meta") || !kA() && g.includes("control")) && o(d, [p].concat(a(d, !0))), n(d);
      }
    }
  }, s = function(d) {
    if (t(d) !== !1) {
      var y = ex(d.key);
      i(y) !== !1 && Yf.release(y);
    }
  }, u = function() {
    Yf.releaseAll();
  }, f = function() {
    for (var d = e; d; )
      d.document.documentElement.addEventListener("keydown", l), d.document.documentElement.addEventListener("keyup", s), d.document.documentElement.addEventListener("blur", u), d = Up(d);
  }, c = function() {
    for (var d = e; d; )
      d.document.documentElement.removeEventListener("keydown", l), d.document.documentElement.removeEventListener("keyup", s), d.document.documentElement.removeEventListener("blur", u), d = Up(d);
  };
  return {
    mount: f,
    unmount: c,
    isPressed: function(d) {
      return Yf.isPressed(d);
    },
    releasePressedKeys: function() {
      return Yf.releaseAll();
    }
  };
}
var xCe = function(t) {
  var r = t.ownerWindow, n = t.handleEvent, o = t.beforeKeyDown, i = t.afterKeyDown, a = Ag({
    errorIdExists: function(p) {
      return 'The "'.concat(p, '" context name is already registered.');
    }
  }), l = "grid", s = function(p) {
    var g = $Ce(p);
    return a.addItem(p, g), g;
  }, u = function() {
    return l;
  }, f = function(p) {
    return a.getItem(p);
  }, c = function(p) {
    l = p;
  }, h = !1, d = MCe(r, n, o, i, function(y, p) {
    var g = f(u()), w = !1;
    if (!g.hasShortcut(p))
      return w;
    for (var C = g.getShortcuts(p), _ = 0; _ < C.length; _++) {
      var k = C[_], E = k.callback, j = k.runOnlyIf, Y = k.preventDefault, Q = k.stopPropagation, X = k.captureCtrl;
      if (j(y) !== !1 && (h = X, w = E(y, p) === !1, h = !1, Y && y.preventDefault(), Q && y.stopPropagation(), w))
        break;
    }
    return w;
  });
  return d.mount(), {
    addContext: s,
    getActiveContextName: u,
    getContext: f,
    setActiveContextName: c,
    /**
     * Returns whether `control` or `meta` keys are pressed.
     *
     * @memberof ShortcutManager#
     * @type {Function}
     * @returns {boolean}
     */
    isCtrlPressed: function() {
      return !h && (d.isPressed("control") || d.isPressed("meta"));
    },
    /**
     * Release every previously pressed key.
     *
     * @type {Function}
     * @memberof ShortcutManager#
     */
    releasePressedKeys: function() {
      return d.releasePressedKeys();
    },
    /**
     * Destroy a context manager instance.
     *
     * @type {Function}
     * @memberof ShortcutManager#
     */
    destroy: function() {
      return d.unmount();
    }
  };
}, rx, nx;
function Cr(e) {
  "@babel/helpers - typeof";
  return Cr = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Cr(e);
}
function ox(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } }));
}
function _n(e, t) {
  return HCe(e) || NCe(e, t) || P2(e, t) || DCe();
}
function DCe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function NCe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function HCe(e) {
  if (Array.isArray(e))
    return e;
}
function ml(e) {
  return FCe(e) || jCe(e) || P2(e) || LCe();
}
function LCe() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function P2(e, t) {
  if (e) {
    if (typeof e == "string")
      return z_(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return z_(e, t);
  }
}
function jCe(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function FCe(e) {
  if (Array.isArray(e))
    return z_(e);
}
function z_(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
var BCe = "gridDefault", Vw = null, sy = /* @__PURE__ */ new Set();
function lP(e, t) {
  var r, n = this, o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, i = !1, a = this, l = new It(a), s, u, f, c, h = !0;
  Jye(o) && Qye(this), this.rootElement = e, this.rootDocument = e.ownerDocument, this.rootWindow = this.rootDocument.defaultView, this.isDestroyed = !1, this.renderSuspendedCounter = 0, this.executionSuspendedCounter = 0;
  var d = (r = t == null ? void 0 : t.layoutDirection) !== null && r !== void 0 ? r : "inherit", y = ["rtl", "ltr"].includes(d) ? d : this.rootWindow.getComputedStyle(this.rootElement).direction;
  this.rootElement.setAttribute("dir", y), this.isRtl = function() {
    return y === "rtl";
  }, this.isLtr = function() {
    return !a.isRtl();
  }, this.getDirectionFactor = function() {
    return a.isLtr() ? 1 : -1;
  }, t.language = Qge(t.language);
  var p = new E2(a, t, [vCe, bCe]), g = p.getTableMeta(), w = p.getGlobalMeta(), C = Ag();
  this.container = this.rootDocument.createElement("div"), this.renderCall = !1, e.insertBefore(this.container, e.firstChild), S_(this) && eae(t.licenseKey, e), this.guid = "ht_".concat(gV()), this.columnIndexMapper = new x_(), this.rowIndexMapper = new x_(), this.columnIndexMapper.addLocalHook("indexesSequenceChange", function(v) {
    a.runHooks("afterColumnSequenceChange", v);
  }), this.rowIndexMapper.addLocalHook("indexesSequenceChange", function(v) {
    a.runHooks("afterRowSequenceChange", v);
  }), u = new _pe(a), (!this.rootElement.id || this.rootElement.id.substring(0, 3) === "ht_") && (this.rootElement.id = this.guid);
  var _ = function(m) {
    var b = m.row, S = m.col;
    return a._createCellCoords(
      // We just store indexes for rows and columns without headers.
      b >= 0 ? a.rowIndexMapper.getRenderableFromVisualIndex(b) : b,
      S >= 0 ? a.columnIndexMapper.getRenderableFromVisualIndex(S) : S
    );
  }, k = function(m) {
    var b = m.row, S = m.col;
    return a._createCellCoords(
      // We just store indexes for rows and columns without headers.
      b >= 0 ? a.rowIndexMapper.getVisualFromRenderableIndex(b) : b,
      S >= 0 ? a.columnIndexMapper.getVisualFromRenderableIndex(S) : S
      // eslint-disable-line max-len
    );
  }, E = new eSe(g, {
    rowIndexMapper: function() {
      return a.rowIndexMapper;
    },
    columnIndexMapper: function() {
      return a.columnIndexMapper;
    },
    countCols: function() {
      return a.countCols();
    },
    countRows: function() {
      return a.countRows();
    },
    propToCol: function(m) {
      return s.propToCol(m);
    },
    isEditorOpened: function() {
      return a.getActiveEditor() ? a.getActiveEditor().isOpened() : !1;
    },
    countColsTranslated: function() {
      return n.view.countRenderableColumns();
    },
    countRowsTranslated: function() {
      return n.view.countRenderableRows();
    },
    getShortcutManager: function() {
      return a.getShortcutManager();
    },
    createCellCoords: function(m, b) {
      return a._createCellCoords(m, b);
    },
    createCellRange: function(m, b, S) {
      return a._createCellRange(m, b, S);
    },
    visualToRenderableCoords: _,
    renderableToVisualCoords: k,
    isDisabledCellSelection: function(m, b) {
      return a.getCellMeta(m, b).disableVisualSelection;
    }
  });
  this.selection = E;
  var j = function(m) {
    var b = m.hiddenIndexesChanged;
    b && n.selection.refresh();
  };
  this.columnIndexMapper.addLocalHook("cacheUpdated", j), this.rowIndexMapper.addLocalHook("cacheUpdated", j), this.selection.addLocalHook("beforeSetRangeStart", function(v) {
    n.runHooks("beforeSetRangeStart", v);
  }), this.selection.addLocalHook("beforeSetRangeStartOnly", function(v) {
    n.runHooks("beforeSetRangeStartOnly", v);
  }), this.selection.addLocalHook("beforeSetRangeEnd", function(v) {
    n.runHooks("beforeSetRangeEnd", v), v.row < 0 && (v.row = n.view._wt.wtTable.getFirstVisibleRow()), v.col < 0 && (v.col = n.view._wt.wtTable.getFirstVisibleColumn());
  }), this.selection.addLocalHook("afterSetRangeEnd", function(v) {
    var m = ss(!1), b = n.selection.getSelectedRange(), S = b.current(), R = S.from, $ = S.to, H = b.size() - 1;
    n.runHooks("afterSelection", R.row, R.col, $.row, $.col, m, H), n.runHooks("afterSelectionByProp", R.row, a.colToProp(R.col), $.row, a.colToProp($.col), m, H);
    var F = n.selection.isSelectedByAnyHeader(), K = n.selection.selectedRange.current(), te = !0;
    i && (te = !1), m.isTouched() && (te = !m.value);
    var re = n.selection.isSelectedByRowHeader(), ce = n.selection.isSelectedByColumnHeader();
    te !== !1 && (F ? re ? n.view.scrollViewportVertically(a.rowIndexMapper.getRenderableFromVisualIndex(v.row)) : ce && n.view.scrollViewportHorizontally(a.columnIndexMapper.getRenderableFromVisualIndex(v.col)) : K && !n.selection.isMultiple() ? n.view.scrollViewport(_(K.from)) : n.view.scrollViewport(_(v))), re && ce ? ae(n.rootElement, ["ht__selection--rows", "ht__selection--columns"]) : re ? (Le(n.rootElement, "ht__selection--columns"), ae(n.rootElement, "ht__selection--rows")) : ce ? (Le(n.rootElement, "ht__selection--rows"), ae(n.rootElement, "ht__selection--columns")) : Le(n.rootElement, ["ht__selection--rows", "ht__selection--columns"]), n._refreshBorders(null);
  }), this.selection.addLocalHook("afterSelectionFinished", function(v) {
    var m = v.length - 1, b = v[m], S = b.from, R = b.to;
    n.runHooks("afterSelectionEnd", S.row, S.col, R.row, R.col, m), n.runHooks("afterSelectionEndByProp", S.row, a.colToProp(S.col), R.row, a.colToProp(R.col), m);
  }), this.selection.addLocalHook("afterIsMultipleSelection", function(v) {
    var m = n.runHooks("afterIsMultipleSelection", v.value);
    v.value && (v.value = m);
  }), this.selection.addLocalHook("beforeModifyTransformStart", function(v) {
    n.runHooks("modifyTransformStart", v);
  }), this.selection.addLocalHook("afterModifyTransformStart", function(v, m, b) {
    n.runHooks("afterModifyTransformStart", v, m, b);
  }), this.selection.addLocalHook("beforeModifyTransformEnd", function(v) {
    n.runHooks("modifyTransformEnd", v);
  }), this.selection.addLocalHook("afterModifyTransformEnd", function(v, m, b) {
    n.runHooks("afterModifyTransformEnd", v, m, b);
  }), this.selection.addLocalHook("afterDeselect", function() {
    c.destroyEditor(), n._refreshBorders(), Le(n.rootElement, ["ht__selection--rows", "ht__selection--columns"]), n.runHooks("afterDeselect");
  }), this.selection.addLocalHook("insertRowRequire", function(v) {
    n.alter("insert_row_above", v, 1, "auto");
  }), this.selection.addLocalHook("insertColRequire", function(v) {
    n.alter("insert_col_start", v, 1, "auto");
  }), f = {
    /**
     * Inserts or removes rows and columns.
     *
     * @private
     * @param {string} action Possible values: "insert_row_above", "insert_row_below", "insert_col_start", "insert_col_end",
     *                        "remove_row", "remove_col".
     * @param {number|Array} index Row or column visual index which from the alter action will be triggered.
     *                             Alter actions such as "remove_row" and "remove_col" support array indexes in the
     *                             format `[[index, amount], [index, amount]...]` this can be used to remove
     *                             non-consecutive columns or rows in one call.
     * @param {number} [amount=1] Amount of rows or columns to remove.
     * @param {string} [source] Optional. Source of hook runner.
     * @param {boolean} [keepEmptyRows] Optional. Flag for preventing deletion of empty rows.
     */
    alter: function(m, b) {
      var S, R, $ = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, H = arguments.length > 3 ? arguments[3] : void 0, F = arguments.length > 4 ? arguments[4] : void 0, K = function(De) {
        if (De.length === 0)
          return [];
        var Ne = ml(De);
        Ne.sort(function(ot, Je) {
          var qe = _n(ot, 1), Qe = qe[0], Ht = _n(Je, 1), vt = Ht[0];
          return Qe === vt ? 0 : Qe > vt ? 1 : -1;
        });
        var tt = sr(Ne, function(ot, Je) {
          var qe = _n(Je, 2), Qe = qe[0], Ht = qe[1], vt = ot[ot.length - 1], lt = _n(vt, 2), rt = lt[0], Mi = lt[1], Yo = rt + Mi;
          if (Qe <= Yo) {
            var il = Math.max(Ht - (Yo - Qe), 0);
            vt[1] += il;
          } else
            ot.push([Qe, Ht]);
          return ot;
        }, [Ne[0]]);
        return tt;
      };
      switch (m) {
        case "insert_row":
          sy.has(m) || (sy.add(m), ht(ut(rx || (rx = ox(["The `", "` action of the `alter()` method is deprecated and will be removed \n                              in the next major release of Handsontable. Use the `insert_row_above` action instead."], ["The \\`", "\\` action of the \\`alter()\\` method is deprecated and will be removed\\x20\n                              in the next major release of Handsontable. Use the \\`insert_row_above\\` action instead."])), m)));
        case "insert_row_below":
        case "insert_row_above":
          var te = a.countSourceRows();
          if (g.maxRows === te)
            return;
          var re = m === "insert_row_below" ? "below" : "above";
          b = (S = b) !== null && S !== void 0 ? S : m === "insert_row" || re === "below" ? te : 0;
          var ce = s.createRow(b, $, {
            source: H,
            mode: re
          }), Oe = ce.delta, ve = ce.startPhysicalIndex;
          if (Oe) {
            var ye = E.selectedRange.current(), x = ye == null ? void 0 : ye.from, ke = x == null ? void 0 : x.row, He = a.toVisualRow(ve);
            if (E.isSelectedByCorner())
              a.selectAll();
            else if (be(ke) && ke >= He) {
              var Ee = ye.to, Ae = Ee.row, $e = Ee.col, O = x.col;
              E.isSelectedByRowHeader() && (O = -1), E.getSelectedRange().pop(), E.setRangeStartOnly(a._createCellCoords(ke + Oe, O), !0), E.setRangeEnd(a._createCellCoords(Ae + Oe, $e));
            } else
              a._refreshBorders();
          }
          break;
        case "insert_col":
          sy.has(m) || (sy.add(m), ht(ut(nx || (nx = ox(["The `", "` action of the `alter()` method is deprecated and will be removed \n                              in the next major release of Handsontable. Use the `insert_col_start` action instead."], ["The \\`", "\\` action of the \\`alter()\\` method is deprecated and will be removed\\x20\n                              in the next major release of Handsontable. Use the \\`insert_col_start\\` action instead."])), m)));
        case "insert_col_start":
        case "insert_col_end":
          var P = m === "insert_col_end" ? "end" : "start";
          b = (R = b) !== null && R !== void 0 ? R : m === "insert_col" || P === "end" ? a.countSourceCols() : 0;
          var A = s.createCol(b, $, {
            source: H,
            mode: P
          }), B = A.delta, M = A.startPhysicalIndex;
          if (B) {
            if (Array.isArray(g.colHeaders)) {
              var W = [a.toVisualColumn(M), 0];
              W.length += B, Array.prototype.splice.apply(g.colHeaders, W);
            }
            var D = E.selectedRange.current(), N = D == null ? void 0 : D.from, z = N == null ? void 0 : N.col, V = a.toVisualColumn(M);
            if (E.isSelectedByCorner())
              a.selectAll();
            else if (be(z) && z >= V) {
              var G = D.to, fe = G.row, ge = G.col, Re = N.row;
              E.isSelectedByColumnHeader() && (Re = -1), E.getSelectedRange().pop(), E.setRangeStartOnly(a._createCellCoords(Re, z + B), !0), E.setRangeEnd(a._createCellCoords(fe, ge + B));
            } else
              a._refreshBorders();
          }
          break;
        case "remove_row":
          var xe = function(De) {
            var Ne = 0;
            I(De, function(tt) {
              var ot = _n(tt, 2), Je = ot[0], qe = ot[1], Qe = Xt(Je) ? a.countRows() - 1 : Math.max(Je - Ne, 0);
              Number.isInteger(Je) && (Je = Math.max(Je - Ne, 0));
              var Ht = s.removeRow(Je, qe, H);
              if (Ht) {
                var vt = a.countRows(), lt = g.fixedRowsTop;
                lt >= Qe + 1 && (g.fixedRowsTop -= Math.min(qe, lt - Qe));
                var rt = g.fixedRowsBottom;
                rt && Qe >= vt - rt && (g.fixedRowsBottom -= Math.min(qe, rt)), Ne += qe;
              }
            });
          };
          Array.isArray(b) ? xe(K(b)) : xe([[b, $]]), f.adjustRowsAndCols(), a._refreshBorders();
          break;
        case "remove_col":
          var Ke = function(De) {
            var Ne = 0;
            I(De, function(tt) {
              var ot = _n(tt, 2), Je = ot[0], qe = ot[1], Qe = Xt(Je) ? a.countCols() - 1 : Math.max(Je - Ne, 0), Ht = a.toPhysicalColumn(Qe);
              Number.isInteger(Je) && (Je = Math.max(Je - Ne, 0));
              var vt = s.removeCol(Je, qe, H);
              if (vt) {
                var lt = g.fixedColumnsStart;
                lt >= Qe + 1 && (g.fixedColumnsStart -= Math.min(qe, lt - Qe)), Array.isArray(g.colHeaders) && (typeof Ht > "u" && (Ht = -1), g.colHeaders.splice(Ht, qe)), Ne += qe;
              }
            });
          };
          Array.isArray(b) ? Ke(K(b)) : Ke([[b, $]]), f.adjustRowsAndCols(), a._refreshBorders();
          break;
        default:
          throw new Error('There is no such action "'.concat(m, '"'));
      }
      F || f.adjustRowsAndCols();
    },
    /**
     * Makes sure there are empty rows at the bottom of the table.
     *
     * @private
     */
    adjustRowsAndCols: function() {
      var m = g.minRows, b = g.minSpareRows, S = g.minCols, R = g.minSpareCols;
      if (a.countRows() === 0 && a.countCols() === 0 && E.deselect(), m) {
        var $ = a.countRows();
        $ < m && s.createRow($, m - $, {
          source: "auto"
        });
      }
      if (b) {
        var H = a.countEmptyRows(!0);
        if (H < b) {
          var F = b - H, K = Math.min(F, g.maxRows - a.countSourceRows());
          s.createRow(a.countRows(), K, {
            source: "auto"
          });
        }
      }
      {
        var te;
        (S || R) && (te = a.countEmptyCols(!0));
        var re = a.countCols();
        if (S && !g.columns && re < S) {
          var ce = S - re;
          te += ce, s.createCol(re, ce, {
            source: "auto"
          });
        }
        if (R && !g.columns && a.dataType === "array" && te < R) {
          re = a.countCols();
          var Oe = R - te, ve = Math.min(Oe, g.maxCols - re);
          s.createCol(re, ve, {
            source: "auto"
          });
        }
      }
      if (E.isSelected()) {
        var ye = a.countRows(), x = a.countCols();
        I(E.selectedRange, function(ke) {
          var He = !1, Ee = ke.from.row, Ae = ke.from.col, $e = ke.to.row, O = ke.to.col;
          Ee > ye - 1 ? (Ee = ye - 1, He = !0, $e > Ee && ($e = Ee)) : $e > ye - 1 && ($e = ye - 1, He = !0, Ee > $e && (Ee = $e)), Ae > x - 1 ? (Ae = x - 1, He = !0, O > Ae && (O = Ae)) : O > x - 1 && (O = x - 1, He = !0, Ae > O && (Ae = O)), He && a.selectCell(Ee, Ae, $e, O);
        });
      }
      a.view && a.view.adjustElementsSize();
    },
    /**
     * Populate the data from the provided 2d array from the given cell coordinates.
     *
     * @private
     * @param {object} start Start selection position. Visual indexes.
     * @param {Array} input 2d data array.
     * @param {object} [end] End selection position (only for drag-down mode). Visual indexes.
     * @param {string} [source="populateFromArray"] Source information string.
     * @param {string} [method="overwrite"] Populate method. Possible options: `shift_down`, `shift_right`, `overwrite`.
     * @param {string} direction (left|right|up|down) String specifying the direction.
     * @param {Array} deltas The deltas array. A difference between values of adjacent cells.
     *                       Useful **only** when the type of handled cells is `numeric`.
     * @returns {object|undefined} Ending td in pasted area (only if any cell was changed).
     */
    populateFromArray: function(m, b, S, R, $, H, F) {
      var K, te, re, ce, Oe = [], ve = {}, ye = [], x = m.row, ke = m.col;
      if (te = b.length, te === 0)
        return !1;
      var He = 0, Ee = 0;
      switch (ze(S) && (He = S.col - ke + 1, Ee = S.row - x + 1), $) {
        case "shift_down":
          var Ae = Gy(b), $e = Ae.length, O = Math.max($e, He), P = a.getData().slice(x), A = Gy(P).slice(ke, ke + O);
          for (re = 0; re < O; re += 1)
            if (re < $e) {
              for (K = 0, te = Ae[re].length; K < Ee - te; K += 1)
                Ae[re].push(Ae[re][K % te]);
              re < A.length ? ye.push(Ae[re].concat(A[re])) : ye.push(Ae[re].concat(new Array(P.length).fill(null)));
            } else
              ye.push(Ae[re % $e].concat(A[re]));
          a.populateFromArray(x, ke, Gy(ye));
          break;
        case "shift_right":
          var B = b.length, M = Math.max(B, Ee), W = a.getData().slice(x).map(function(lt) {
            return lt.slice(ke);
          });
          for (K = 0; K < M; K += 1)
            if (K < B) {
              for (re = 0, ce = b[K].length; re < He - ce; re += 1)
                b[K].push(b[K][re % ce]);
              if (K < W.length)
                for (var D = 0; D < W[K].length; D += 1)
                  b[K].push(W[K][D]);
              else {
                var N;
                (N = b[K]).push.apply(N, ml(new Array(W[0].length).fill(null)));
              }
            } else
              b.push(b[K % te].slice(0, M).concat(W[K]));
          a.populateFromArray(x, ke, b);
          break;
        case "overwrite":
        default:
          ve.row = m.row, ve.col = m.col;
          var z = {
            // selected range
            row: S && m ? S.row - m.row + 1 : 1,
            col: S && m ? S.col - m.col + 1 : 1
          }, V = 0, G = 0, fe = !0, ge, Re = function(rt) {
            var Mi = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, Yo = b[rt % b.length];
            return Mi !== null ? Yo[Mi % Yo.length] : Yo;
          }, xe = b.length, Ke = S ? S.row - m.row + 1 : 0;
          for (S ? te = Ke : te = Math.max(xe, Ke), K = 0; K < te && !(S && ve.row > S.row && Ke > xe || !g.allowInsertRow && ve.row > a.countRows() - 1 || ve.row >= g.maxRows); K++) {
            var ct = K - V, De = Re(ct).length, Ne = S ? S.col - m.col + 1 : 0;
            if (S ? ce = Ne : ce = Math.max(De, Ne), ve.col = m.col, ge = a.getCellMeta(ve.row, ve.col), (R === "CopyPaste.paste" || R === "Autofill.fill") && ge.skipRowOnPaste) {
              V += 1, ve.row += 1, te += 1;
              continue;
            }
            for (G = 0, re = 0; re < ce && !(S && ve.col > S.col && Ne > De || !g.allowInsertColumn && ve.col > a.countCols() - 1 || ve.col >= g.maxCols); re++) {
              if (ge = a.getCellMeta(ve.row, ve.col), (R === "CopyPaste.paste" || R === "Autofill.fill") && ge.skipColumnOnPaste) {
                G += 1, ve.col += 1, ce += 1;
                continue;
              }
              if (ge.readOnly && R !== "UndoRedo.undo") {
                ve.col += 1;
                continue;
              }
              var tt = re - G, ot = Re(ct, tt), Je = a.getDataAtCell(ve.row, ve.col), qe = {
                row: ct,
                col: tt
              };
              if (R === "Autofill.fill") {
                var Qe = a.runHooks("beforeAutofillInsidePopulate", qe, H, b, F, {}, z);
                Qe && (ot = gt(Qe.value) ? ot : Qe.value);
              }
              if (ot !== null && Cr(ot) === "object")
                if (Array.isArray(ot) && Je === null && (Je = []), Je === null || Cr(Je) !== "object")
                  fe = !1;
                else {
                  var Ht = Mc(Array.isArray(Je) ? Je : Je[0] || Je), vt = Mc(Array.isArray(ot) ? ot : ot[0] || ot);
                  WE(Ht, vt) || Array.isArray(Ht) && Array.isArray(vt) ? ot = mr(ot) : fe = !1;
                }
              else
                Je !== null && Cr(Je) === "object" && (fe = !1);
              fe && Oe.push([ve.row, ve.col, ot]), fe = !0, ve.col += 1;
            }
            ve.row += 1;
          }
          a.setDataAtCell(Oe, null, null, R || "populateFromArray");
          break;
      }
    }
  };
  function Y(v) {
    var m = r2(v);
    nP(m) ? (a.runHooks("beforeLanguageChange", m), w.language = m, a.runHooks("afterLanguageChange", m)) : n2(v);
  }
  function Q(v, m) {
    var b = v === "className" ? a.rootElement : a.table;
    if (h)
      ae(b, m);
    else {
      var S = [], R = [];
      w[v] && (S = Array.isArray(w[v]) ? w[v] : EA(w[v])), m && (R = Array.isArray(m) ? m : EA(m));
      var $ = RA(S, R), H = RA(R, S);
      $.length && Le(b, $), H.length && ae(b, H);
    }
    w[v] = m;
  }
  this.init = function() {
    u.setData(g.data), a.runHooks("beforeInit"), (Nn() || _B()) && ae(a.rootElement, "mobile"), this.updateSettings(g, !0), this.view = new dpe(this), c = mle.getInstance(a, g, E), a.runHooks("init"), this.forceFullRender = !0, this.view.render(), h && a.rootElement.offsetParent === null && pae(a.rootElement, function() {
      a.view._wt.wtOverlays.updateLastSpreaderSize(), a.render(), a.view.adjustElementsSize();
    }), Cr(h) === "object" && (a.runHooks("afterChange", h[0], h[1]), h = !1), a.runHooks("afterInit");
  };
  function X() {
    var v = !1;
    return {
      validatorsInQueue: 0,
      valid: !0,
      addValidatorToQueue: function() {
        this.validatorsInQueue += 1, v = !1;
      },
      removeValidatorFormQueue: function() {
        this.validatorsInQueue = this.validatorsInQueue - 1 < 0 ? 0 : this.validatorsInQueue - 1, this.checkIfQueueIsEmpty();
      },
      onQueueEmpty: function() {
      },
      checkIfQueueIsEmpty: function() {
        this.validatorsInQueue === 0 && v === !1 && (v = !0, this.onQueueEmpty(this.valid));
      }
    };
  }
  function q(v) {
    var m = v.replace(",", ".");
    return isNaN(parseFloat(m)) === !1 ? parseFloat(m) : v;
  }
  function J(v, m, b) {
    if (v.length) {
      var S = a.getActiveEditor(), R = a.runHooks("beforeChange", v, m || "edit"), $ = !0;
      if (R === !1) {
        S && S.cancelChanges();
        return;
      }
      var H = new X();
      H.onQueueEmpty = function(ye) {
        S && $ && S.cancelChanges(), b(ye);
      };
      for (var F = v.length - 1; F >= 0; F--)
        if (v[F] === null)
          v.splice(F, 1);
        else {
          var K = _n(v[F], 4), te = K[0], re = K[1], ce = K[3], Oe = s.propToCol(re), ve = a.getCellMeta(te, Oe);
          ve.type === "numeric" && typeof ce == "string" && yse(ce) && (v[F][3] = q(ce)), a.getCellValidator(ve) && (H.addValidatorToQueue(), a.validateCell(v[F][3], ve, function(ye, x) {
            return function(ke) {
              if (typeof ke != "boolean")
                throw new Error("Validation error: result is not boolean");
              if (ke === !1 && x.allowInvalid === !1) {
                $ = !1, v.splice(ye, 1), x.valid = !0;
                var He = a.getCell(x.visualRow, x.visualCol);
                He !== null && Le(He, g.invalidCellClassName);
              }
              H.removeValidatorFormQueue();
            };
          }(F, ve), m));
        }
      H.checkIfQueueIsEmpty();
    }
  }
  function le(v, m) {
    var b = v.length - 1;
    if (!(b < 0)) {
      for (; b >= 0; b--) {
        var S = !1;
        if (v[b] === null) {
          v.splice(b, 1);
          continue;
        }
        if (!((v[b][2] === null || v[b][2] === void 0) && (v[b][3] === null || v[b][3] === void 0))) {
          if (g.allowInsertRow)
            for (; v[b][0] > a.countRows() - 1; ) {
              var R = s.createRow(void 0, void 0, {
                source: m
              }), $ = R.delta;
              if ($ === 0) {
                S = !0;
                break;
              }
            }
          if (a.dataType === "array" && (!g.columns || g.columns.length === 0) && g.allowInsertColumn)
            for (; s.propToCol(v[b][1]) > a.countCols() - 1; ) {
              var H = s.createCol(void 0, void 0, {
                source: m
              }), F = H.delta;
              if (F === 0) {
                S = !0;
                break;
              }
            }
          S || s.set(v[b][0], v[b][1], v[b][3]);
        }
      }
      a.forceFullRender = !0, f.adjustRowsAndCols(), a.runHooks("beforeChangeRender", v, m), c.lockEditor(), a._refreshBorders(null), c.unlockEditor(), a.view.adjustElementsSize(), a.runHooks("afterChange", v, m || "edit");
      var K = a.getActiveEditor();
      K && be(K.refreshValue) && K.refreshValue();
    }
  }
  this._createCellCoords = function(v, m) {
    return a.view._wt.createCellCoords(v, m);
  }, this._createCellRange = function(v, m, b) {
    return a.view._wt.createCellRange(v, m, b);
  }, this.validateCell = function(v, m, b, S) {
    var R = a.getCellValidator(m);
    function $(H) {
      var F = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
      if (!F || m.hidden === !0) {
        b(H);
        return;
      }
      var K = m.visualCol, te = m.visualRow, re = a.getCell(te, K, !0);
      if (re && re.nodeName !== "TH") {
        var ce = a.rowIndexMapper.getRenderableFromVisualIndex(te), Oe = a.columnIndexMapper.getRenderableFromVisualIndex(K);
        a.view._wt.getSetting("cellRenderer", ce, Oe, re);
      }
      b(H);
    }
    Zie(R) && (R = function(H) {
      return function(F, K) {
        K(H.test(F));
      };
    }(R)), wt(R) ? (v = a.runHooks("beforeValidate", v, m.visualRow, m.prop, S), a._registerImmediate(function() {
      R.call(m, v, function(H) {
        a && (H = a.runHooks("afterValidate", H, v, m.visualRow, m.prop, S), m.valid = H, $(H), a.runHooks("postAfterValidate", H, v, m.visualRow, m.prop, S));
      });
    })) : a._registerImmediate(function() {
      m.valid = !0, $(m.valid, !1);
    });
  };
  function ee(v, m, b) {
    return Array.isArray(v) ? v : [[v, m, b]];
  }
  this.setDataAtCell = function(v, m, b, S) {
    var R = ee(v, m, b), $ = [], H = S, F, K, te;
    for (F = 0, K = R.length; F < K; F++) {
      if (Cr(R[F]) !== "object")
        throw new Error("Method `setDataAtCell` accepts row number or changes array of arrays as its first parameter");
      if (typeof R[F][1] != "number")
        throw new Error("Method `setDataAtCell` accepts row and column number as its parameters. If you want to use object property name, use method `setDataAtRowProp`");
      R[F][1] >= this.countCols() ? te = R[F][1] : te = s.colToProp(R[F][1]), $.push([R[F][0], te, u.getAtCell(this.toPhysicalRow(R[F][0]), R[F][1]), R[F][2]]);
    }
    !H && Cr(v) === "object" && (H = m), a.runHooks("afterSetDataAtCell", $, H), J($, H, function() {
      le($, H);
    });
  }, this.setDataAtRowProp = function(v, m, b, S) {
    var R = ee(v, m, b), $ = [], H = S, F, K;
    for (F = 0, K = R.length; F < K; F++)
      $.push([R[F][0], R[F][1], u.getAtCell(this.toPhysicalRow(R[F][0]), R[F][1]), R[F][2]]);
    !H && Cr(v) === "object" && (H = m), a.runHooks("afterSetDataAtRowProp", $, H), J($, H, function() {
      le($, H);
    });
  }, this.listen = function() {
    a && !a.isListening() && (Vw = a.guid, a.runHooks("afterListen"));
  }, this.unlisten = function() {
    this.isListening() && (Vw = null, a.runHooks("afterUnlisten"));
  }, this.isListening = function() {
    return Vw === a.guid;
  }, this.destroyEditor = function() {
    var v = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, m = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
    a._refreshBorders(v, m);
  }, this.populateFromArray = function(v, m, b, S, R, $, H, F, K) {
    if (!(Cr(b) === "object" && Cr(b[0]) === "object"))
      throw new Error("populateFromArray parameter `input` must be an array of arrays");
    var te = typeof S == "number" ? a._createCellCoords(S, R) : null;
    return f.populateFromArray(a._createCellCoords(v, m), b, te, $, H, F, K);
  }, this.spliceCol = function(v, m, b) {
    for (var S, R = arguments.length, $ = new Array(R > 3 ? R - 3 : 0), H = 3; H < R; H++)
      $[H - 3] = arguments[H];
    return (S = s).spliceCol.apply(S, [v, m, b].concat($));
  }, this.spliceRow = function(v, m, b) {
    for (var S, R = arguments.length, $ = new Array(R > 3 ? R - 3 : 0), H = 3; H < R; H++)
      $[H - 3] = arguments[H];
    return (S = s).spliceRow.apply(S, [v, m, b].concat($));
  }, this.getSelected = function() {
    if (E.isSelected())
      return Ue(E.getSelectedRange(), function(v) {
        var m = v.from, b = v.to;
        return [m.row, m.col, b.row, b.col];
      });
  }, this.getSelectedLast = function() {
    var v = this.getSelected(), m;
    return v && v.length > 0 && (m = v[v.length - 1]), m;
  }, this.getSelectedRange = function() {
    if (E.isSelected())
      return Array.from(E.getSelectedRange());
  }, this.getSelectedRangeLast = function() {
    var v = this.getSelectedRange(), m;
    return v && v.length > 0 && (m = v[v.length - 1]), m;
  }, this.emptySelectedCells = function(v) {
    var m = this;
    if (!(!E.isSelected() || this.countRows() === 0 || this.countCols() === 0)) {
      var b = [];
      I(E.getSelectedRange(), function(S) {
        var R = S.getTopStartCorner(), $ = S.getBottomEndCorner();
        _e(R.row, $.row, function(H) {
          _e(R.col, $.col, function(F) {
            m.getCellMeta(H, F).readOnly || b.push([H, F, null]);
          });
        });
      }), b.length > 0 && this.setDataAtCell(b, v);
    }
  }, this.isRenderSuspended = function() {
    return this.renderSuspendedCounter > 0;
  }, this.suspendRender = function() {
    this.renderSuspendedCounter += 1;
  }, this.resumeRender = function() {
    var v = this.renderSuspendedCounter - 1;
    this.renderSuspendedCounter = Math.max(v, 0), !this.isRenderSuspended() && v === this.renderSuspendedCounter && (this.renderCall ? this.render() : this._refreshBorders(null));
  }, this.render = function() {
    this.view && (this.renderCall = !0, this.forceFullRender = !0, this.isRenderSuspended() || (c.lockEditor(), this._refreshBorders(null), c.unlockEditor()));
  }, this.batchRender = function(v) {
    this.suspendRender();
    var m = v();
    return this.resumeRender(), m;
  }, this.isExecutionSuspended = function() {
    return this.executionSuspendedCounter > 0;
  }, this.suspendExecution = function() {
    this.executionSuspendedCounter += 1, this.columnIndexMapper.suspendOperations(), this.rowIndexMapper.suspendOperations();
  }, this.resumeExecution = function() {
    var v = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, m = this.executionSuspendedCounter - 1;
    this.executionSuspendedCounter = Math.max(m, 0), (!this.isExecutionSuspended() && m === this.executionSuspendedCounter || v) && (this.columnIndexMapper.resumeOperations(), this.rowIndexMapper.resumeOperations());
  }, this.batchExecution = function(v) {
    var m = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
    this.suspendExecution();
    var b = v();
    return this.resumeExecution(m), b;
  }, this.batch = function(v) {
    this.suspendRender(), this.suspendExecution();
    var m = v();
    return this.resumeExecution(), this.resumeRender(), m;
  }, this.refreshDimensions = function() {
    if (a.view) {
      var v = a.view.getLastSize(), m = v.width, b = v.height, S = a.rootElement.getBoundingClientRect(), R = S.width, $ = S.height, H = R !== m || $ !== b, F = a.runHooks("beforeRefreshDimensions", {
        width: m,
        height: b
      }, {
        width: R,
        height: $
      }, H) === !1;
      F || ((H || a.view._wt.wtOverlays.scrollableElement === a.rootWindow) && (a.view.setLastSize(R, $), a.render()), a.runHooks("afterRefreshDimensions", {
        width: m,
        height: b
      }, {
        width: R,
        height: $
      }, H));
    }
  }, this.updateData = function(v, m) {
    var b = this;
    XM(v, function(S) {
      s = S;
    }, function(S) {
      s = S, a.columnIndexMapper.fitToLength(b.getInitialColumnCount()), a.rowIndexMapper.fitToLength(b.countSourceRows()), f.adjustRowsAndCols();
    }, {
      hotInstance: a,
      dataMap: s,
      dataSource: u,
      internalSource: "updateData",
      source: m,
      metaManager: p,
      firstRun: h
    });
  }, this.loadData = function(v, m) {
    XM(v, function(b) {
      s = b;
    }, function() {
      p.clearCellsCache(), a.initIndexMappers(), f.adjustRowsAndCols(), h && (h = [null, "loadData"]);
    }, {
      hotInstance: a,
      dataMap: s,
      dataSource: u,
      internalSource: "loadData",
      source: m,
      metaManager: p,
      firstRun: h
    });
  }, this.getInitialColumnCount = function() {
    var v = g.columns, m = 0;
    if (Array.isArray(v))
      m = v.length;
    else if (wt(v))
      if (a.dataType === "array")
        for (var b = this.countSourceCols(), S = 0; S < b; S += 1)
          v(S) && (m += 1);
      else
        (a.dataType === "object" || a.dataType === "function") && (m = s.colToPropCache.length);
    else if (be(g.dataSchema)) {
      var R = s.getSchema();
      m = Array.isArray(R) ? R.length : UE(R);
    } else
      m = this.countSourceCols();
    return m;
  }, this.initIndexMappers = function() {
    this.columnIndexMapper.initToLength(this.getInitialColumnCount()), this.rowIndexMapper.initToLength(this.countSourceRows());
  }, this.getData = function(v, m, b, S) {
    return gt(v) ? s.getAll() : s.getRange(a._createCellCoords(v, m), a._createCellCoords(b, S), s.DESTINATION_RENDERER);
  }, this.getCopyableText = function(v, m, b, S) {
    return s.getCopyableText(a._createCellCoords(v, m), a._createCellCoords(b, S));
  }, this.getCopyableData = function(v, m) {
    return s.getCopyable(v, s.colToProp(m));
  }, this.getSchema = function() {
    return s.getSchema();
  }, this.updateSettings = function(v) {
    var m = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, b = (h ? a.loadData : a.updateData).bind(this), S = !1, R, $;
    if (be(v.rows))
      throw new Error('The "rows" setting is no longer supported. Do you mean startRows, minRows or maxRows?');
    if (be(v.cols))
      throw new Error('The "cols" setting is no longer supported. Do you mean startCols, minCols or maxCols?');
    if (be(v.ganttChart))
      throw new Error('Since 8.0.0 the "ganttChart" setting is no longer supported.');
    for (R in v)
      R === "data" || (R === "language" ? Y(v.language) : R === "className" ? Q("className", v.className) : R === "tableClassName" && a.table ? (Q("tableClassName", v.tableClassName), a.view._wt.wtOverlays.syncOverlayTableClassNames()) : we.getSingleton().isRegistered(R) || we.getSingleton().isDeprecated(R) ? (wt(v[R]) || Array.isArray(v[R])) && (v[R].initialHook = !0, a.addHook(R, v[R])) : !m && Dt(v, R) && (w[R] = v[R]));
    v.data === void 0 && g.data === void 0 ? b(null, "updateSettings") : v.data !== void 0 ? b(v.data, "updateSettings") : v.columns !== void 0 && (s.createMap(), a.initIndexMappers());
    var H = a.countCols(), F = g.columns;
    if (F && wt(F) && (S = !0), (v.cell !== void 0 || v.cells !== void 0 || v.columns !== void 0) && p.clearCache(), H > 0)
      for (R = 0, $ = 0; R < H; R++) {
        if (F) {
          var K = S ? F(R) : F[$];
          K && p.updateColumnMeta($, K);
        }
        $ += 1;
      }
    be(v.cell) && Ye(v.cell, function(ye) {
      a.setCellMetaObject(ye.row, ye.col, ye);
    }), a.runHooks("afterCellMetaReset");
    var te = a.rootElement.style.height;
    te !== "" && (te = parseInt(a.rootElement.style.height, 10));
    var re = v.height;
    if (wt(re) && (re = re()), m) {
      var ce = a.rootElement.getAttribute("style");
      ce && a.rootElement.setAttribute("data-initialstyle", a.rootElement.getAttribute("style"));
    }
    if (re === null) {
      var Oe = a.rootElement.getAttribute("data-initialstyle");
      Oe && (Oe.indexOf("height") > -1 || Oe.indexOf("overflow") > -1) ? a.rootElement.setAttribute("style", Oe) : (a.rootElement.style.height = "", a.rootElement.style.overflow = "");
    } else
      re !== void 0 && (a.rootElement.style.height = isNaN(re) ? "".concat(re) : "".concat(re, "px"), a.rootElement.style.overflow = "hidden");
    if (typeof v.width < "u") {
      var ve = v.width;
      wt(ve) && (ve = ve()), a.rootElement.style.width = isNaN(ve) ? "".concat(ve) : "".concat(ve, "px");
    }
    m || (a.view && (a.view._wt.wtViewport.resetHasOversizedColumnHeadersMarked(), a.view._wt.exportSettingsAsClassNames()), a.runHooks("afterUpdateSettings", v)), f.adjustRowsAndCols(), a.view && !h && (a.forceFullRender = !0, c.lockEditor(), a._refreshBorders(null), a.view._wt.wtOverlays.adjustElementsSize(), c.unlockEditor()), !m && a.view && (te === "" || re === "" || re === void 0) && te !== re && a.view._wt.wtOverlays.updateMainScrollableElements();
  }, this.getValue = function() {
    var v = a.getSelectedLast();
    if (g.getValue) {
      if (wt(g.getValue))
        return g.getValue.call(a);
      if (v)
        return a.getData()[v[0][0]][g.getValue];
    } else if (v)
      return a.getDataAtCell(v[0], v[1]);
  }, this.getSettings = function() {
    return g;
  }, this.clear = function() {
    this.selectAll(), this.emptySelectedCells();
  }, this.alter = function(v, m, b, S, R) {
    f.alter(v, m, b, S, R);
  }, this.getCell = function(v, m) {
    var b = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, S = m, R = v;
    if (m >= 0) {
      if (this.columnIndexMapper.isHidden(this.toPhysicalColumn(m)))
        return null;
      S = this.columnIndexMapper.getRenderableFromVisualIndex(m);
    }
    if (v >= 0) {
      if (this.rowIndexMapper.isHidden(this.toPhysicalRow(v)))
        return null;
      R = this.rowIndexMapper.getRenderableFromVisualIndex(v);
    }
    return R === null || S === null ? null : a.view.getCellAtCoords(a._createCellCoords(R, S), b);
  }, this.getCoords = function(v) {
    var m = this.view._wt.wtTable.getCoords(v);
    if (m === null)
      return null;
    var b = m.row, S = m.col, R = b, $ = S;
    return b >= 0 && (R = this.rowIndexMapper.getVisualFromRenderableIndex(b)), S >= 0 && ($ = this.columnIndexMapper.getVisualFromRenderableIndex(S)), a._createCellCoords(R, $);
  }, this.colToProp = function(v) {
    return s.colToProp(v);
  }, this.propToCol = function(v) {
    return s.propToCol(v);
  }, this.toVisualRow = function(v) {
    return n.rowIndexMapper.getVisualFromPhysicalIndex(v);
  }, this.toVisualColumn = function(v) {
    return n.columnIndexMapper.getVisualFromPhysicalIndex(v);
  }, this.toPhysicalRow = function(v) {
    return n.rowIndexMapper.getPhysicalFromVisualIndex(v);
  }, this.toPhysicalColumn = function(v) {
    return n.columnIndexMapper.getPhysicalFromVisualIndex(v);
  }, this.getDataAtCell = function(v, m) {
    return s.get(v, s.colToProp(m));
  }, this.getDataAtRowProp = function(v, m) {
    return s.get(v, m);
  }, this.getDataAtCol = function(v) {
    for (var m = [], b = s.getRange(a._createCellCoords(0, v), a._createCellCoords(g.data.length - 1, v), s.DESTINATION_RENDERER), S = 0; S < b.length; S += 1)
      for (var R = 0; R < b[S].length; R += 1)
        m.push(b[S][R]);
    return m;
  }, this.getDataAtProp = function(v) {
    for (var m = [], b = s.getRange(a._createCellCoords(0, s.propToCol(v)), a._createCellCoords(g.data.length - 1, s.propToCol(v)), s.DESTINATION_RENDERER), S = 0; S < b.length; S += 1)
      for (var R = 0; R < b[S].length; R += 1)
        m.push(b[S][R]);
    return m;
  }, this.getSourceData = function(v, m, b, S) {
    var R;
    return v === void 0 ? R = u.getData() : R = u.getByRange(a._createCellCoords(v, m), a._createCellCoords(b, S)), R;
  }, this.getSourceDataArray = function(v, m, b, S) {
    var R;
    return v === void 0 ? R = u.getData(!0) : R = u.getByRange(a._createCellCoords(v, m), a._createCellCoords(b, S), !0), R;
  }, this.getSourceDataAtCol = function(v) {
    return u.getAtColumn(v);
  }, this.setSourceDataAtCell = function(v, m, b, S) {
    var R = ee(v, m, b), $ = this.hasHook("afterSetSourceDataAtCell"), H = [];
    $ && I(R, function(K) {
      var te = _n(K, 3), re = te[0], ce = te[1], Oe = te[2];
      H.push([
        re,
        ce,
        u.getAtCell(re, ce),
        // The previous value.
        Oe
      ]);
    }), I(R, function(K) {
      var te = _n(K, 3), re = te[0], ce = te[1], Oe = te[2];
      u.setAtCell(re, ce, Oe);
    }), $ && this.runHooks("afterSetSourceDataAtCell", H, S), this.render();
    var F = a.getActiveEditor();
    F && be(F.refreshValue) && F.refreshValue();
  }, this.getSourceDataAtRow = function(v) {
    return u.getAtRow(v);
  }, this.getSourceDataAtCell = function(v, m) {
    return u.getAtCell(v, m);
  }, this.getDataAtRow = function(v) {
    var m = s.getRange(a._createCellCoords(v, 0), a._createCellCoords(v, this.countCols() - 1), s.DESTINATION_RENDERER);
    return m[0] || [];
  }, this.getDataType = function(v, m, b, S) {
    var R = this, $ = v === void 0 ? [0, 0, this.countRows(), this.countCols()] : [v, m, b, S], H = $[0], F = $[1], K = $[2], te = $[3], re = null, ce = null;
    K === void 0 && (K = H), te === void 0 && (te = F);
    var Oe = "mixed";
    return _e(Math.max(Math.min(H, K), 0), Math.max(H, K), function(ve) {
      var ye = !0;
      return _e(Math.max(Math.min(F, te), 0), Math.max(F, te), function(x) {
        var ke = R.getCellMeta(ve, x);
        return ce = ke.type, re ? ye = re === ce : re = ce, ye;
      }), Oe = ye ? ce : "mixed", ye;
    }), Oe;
  }, this.removeCellMeta = function(v, m, b) {
    var S = [this.toPhysicalRow(v), this.toPhysicalColumn(m)], R = S[0], $ = S[1], H = p.getCellMetaKeyValue(R, $, b), F = a.runHooks("beforeRemoveCellMeta", v, m, b, H);
    F !== !1 && (p.removeCellMeta(R, $, b), a.runHooks("afterRemoveCellMeta", v, m, b, H)), H = null;
  }, this.spliceCellsMeta = function(v) {
    for (var m = this, b = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, S = arguments.length, R = new Array(S > 2 ? S - 2 : 0), $ = 2; $ < S; $++)
      R[$ - 2] = arguments[$];
    if (R.length > 0 && !Array.isArray(R[0]))
      throw new Error("The 3rd argument (cellMetaRows) has to be passed as an array of cell meta objects array.");
    b > 0 && p.removeRow(this.toPhysicalRow(v), b), R.length > 0 && I(R.reverse(), function(H) {
      p.createRow(m.toPhysicalRow(v)), I(H, function(F, K) {
        return m.setCellMetaObject(v, K, F);
      });
    }), a.render();
  }, this.setCellMetaObject = function(v, m, b) {
    var S = this;
    Cr(b) === "object" && Ye(b, function(R, $) {
      S.setCellMeta(v, m, $, R);
    });
  }, this.setCellMeta = function(v, m, b, S) {
    var R = a.runHooks("beforeSetCellMeta", v, m, b, S);
    if (R !== !1) {
      var $ = v, H = m;
      v < this.countRows() && ($ = this.toPhysicalRow(v)), m < this.countCols() && (H = this.toPhysicalColumn(m)), p.setCellMeta($, H, b, S), a.runHooks("afterSetCellMeta", v, m, b, S);
    }
  }, this.getCellsMeta = function() {
    return p.getCellsMeta();
  }, this.getCellMeta = function(v, m) {
    var b = this.toPhysicalRow(v), S = this.toPhysicalColumn(m);
    return b === null && (b = v), S === null && (S = m), p.getCellMeta(b, S, {
      visualRow: v,
      visualColumn: m
    });
  }, this.getCellMetaAtRow = function(v) {
    return p.getCellsMetaAtRow(v);
  }, this.isColumnModificationAllowed = function() {
    return !(a.dataType === "object" || g.columns);
  }, this.getCellRenderer = function(v, m) {
    var b = typeof v == "number" ? a.getCellMeta(v, m).renderer : v.renderer;
    return typeof b == "string" ? PI(b) : gt(b) ? PI("text") : b;
  }, this.getCellEditor = function(v, m) {
    var b = typeof v == "number" ? a.getCellMeta(v, m).editor : v.editor;
    return typeof b == "string" ? vI(b) : gt(b) ? vI("text") : b;
  }, this.getCellValidator = function(v, m) {
    var b = typeof v == "number" ? a.getCellMeta(v, m).validator : v.validator;
    return typeof b == "string" ? sue(b) : b;
  }, this.validateCells = function(v) {
    this._validateCells(v);
  }, this.validateRows = function(v, m) {
    if (!Array.isArray(v))
      throw new Error("validateRows parameter `rows` must be an array");
    this._validateCells(m, v);
  }, this.validateColumns = function(v, m) {
    if (!Array.isArray(v))
      throw new Error("validateColumns parameter `columns` must be an array");
    this._validateCells(m, void 0, v);
  }, this._validateCells = function(v, m, b) {
    var S = new X();
    v && (S.onQueueEmpty = v);
    for (var R = a.countRows() - 1; R >= 0; ) {
      if (m !== void 0 && m.indexOf(R) === -1) {
        R -= 1;
        continue;
      }
      for (var $ = a.countCols() - 1; $ >= 0; ) {
        if (b !== void 0 && b.indexOf($) === -1) {
          $ -= 1;
          continue;
        }
        S.addValidatorToQueue(), a.validateCell(a.getDataAtCell(R, $), a.getCellMeta(R, $), function(H) {
          if (typeof H != "boolean")
            throw new Error("Validation error: result is not boolean");
          H === !1 && (S.valid = !1), S.removeValidatorFormQueue();
        }, "validateCells"), $ -= 1;
      }
      R -= 1;
    }
    S.checkIfQueueIsEmpty();
  }, this.getRowHeader = function(v) {
    var m = g.rowHeaders, b = v;
    return b !== void 0 && (b = a.runHooks("modifyRowHeader", b)), b === void 0 ? (m = [], _e(a.countRows() - 1, function(S) {
      m.push(a.getRowHeader(S));
    })) : Array.isArray(m) && m[b] !== void 0 ? m = m[b] : wt(m) ? m = m(b) : m && typeof m != "string" && typeof m != "number" && (m = b + 1), m;
  }, this.hasRowHeaders = function() {
    return !!g.rowHeaders;
  }, this.hasColHeaders = function() {
    if (g.colHeaders !== void 0 && g.colHeaders !== null)
      return !!g.colHeaders;
    for (var v = 0, m = a.countCols(); v < m; v++)
      if (a.getColHeader(v))
        return !0;
    return !1;
  }, this.getColHeader = function(v) {
    var m = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : -1, b = a.runHooks("modifyColHeader", v);
    if (b === void 0) {
      for (var S = [], R = a.countCols(), $ = 0; $ < R; $++)
        S.push(a.getColHeader($));
      return S;
    }
    var H = g.colHeaders, F = function(ce) {
      for (var Oe = [], ve = a.countCols(), ye = 0; ye < ve; ye++)
        wt(g.columns) && g.columns(ye) && Oe.push(ye);
      return Oe[ce];
    }, K = a.toPhysicalColumn(b), te = F(K);
    return g.colHeaders === !1 ? H = null : g.columns && wt(g.columns) && g.columns(te) && g.columns(te).title ? H = g.columns(te).title : g.columns && g.columns[K] && g.columns[K].title ? H = g.columns[K].title : Array.isArray(g.colHeaders) && g.colHeaders[K] !== void 0 ? H = g.colHeaders[K] : wt(g.colHeaders) ? H = g.colHeaders(K) : g.colHeaders && typeof g.colHeaders != "string" && typeof g.colHeaders != "number" && (H = ype(b)), H = a.runHooks("modifyColumnHeaderValue", H, v, m), H;
  }, this._getColWidthFromSettings = function(v) {
    var m;
    if (v >= 0) {
      var b = a.getCellMeta(0, v);
      m = b.width;
    }
    if ((m === void 0 || m === g.width) && (m = g.colWidths), m != null) {
      switch (Cr(m)) {
        case "object":
          m = m[v];
          break;
        case "function":
          m = m(v);
          break;
      }
      typeof m == "string" && (m = parseInt(m, 10));
    }
    return m;
  }, this.getColWidth = function(v) {
    var m = a._getColWidthFromSettings(v);
    return m = a.runHooks("modifyColWidth", m, v), m === void 0 && (m = bT.DEFAULT_WIDTH), m;
  }, this._getRowHeightFromSettings = function(v) {
    var m = g.rowHeights;
    if (m != null) {
      switch (Cr(m)) {
        case "object":
          m = m[v];
          break;
        case "function":
          m = m(v);
          break;
      }
      typeof m == "string" && (m = parseInt(m, 10));
    }
    return m;
  }, this.getRowHeight = function(v) {
    var m = a._getRowHeightFromSettings(v);
    return m = a.runHooks("modifyRowHeight", m, v), m;
  }, this.countSourceRows = function() {
    return u.countRows();
  }, this.countSourceCols = function() {
    return u.countFirstRowKeys();
  }, this.countRows = function() {
    return s.getLength();
  }, this.countCols = function() {
    var v = g.maxCols, m = this.columnIndexMapper.getNotTrimmedIndexesLength();
    return Math.min(v, m);
  }, this.countRenderedRows = function() {
    return a.view._wt.drawn ? a.view._wt.wtTable.getRenderedRowsCount() : -1;
  }, this.countVisibleRows = function() {
    return a.view._wt.drawn ? a.view._wt.wtTable.getVisibleRowsCount() : -1;
  }, this.countRenderedCols = function() {
    return a.view._wt.drawn ? a.view._wt.wtTable.getRenderedColumnsCount() : -1;
  }, this.countVisibleCols = function() {
    return a.view._wt.drawn ? a.view._wt.wtTable.getVisibleColumnsCount() : -1;
  }, this.countEmptyRows = function() {
    var v = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, m = 0;
    return qC(a.countRows() - 1, function(b) {
      if (a.isEmptyRow(b))
        m += 1;
      else if (v === !0)
        return !1;
    }), m;
  }, this.countEmptyCols = function() {
    var v = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, m = 0;
    return qC(a.countCols() - 1, function(b) {
      if (a.isEmptyCol(b))
        m += 1;
      else if (v === !0)
        return !1;
    }), m;
  }, this.isEmptyRow = function(v) {
    return g.isEmptyRow.call(a, v);
  }, this.isEmptyCol = function(v) {
    return g.isEmptyCol.call(a, v);
  }, this.selectCell = function(v, m, b, S) {
    var R = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !0, $ = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : !0;
    return gt(v) || gt(m) ? !1 : this.selectCells([[v, m, b, S]], R, $);
  }, this.selectCells = function() {
    var v = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [[]], m = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, b = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
    m === !1 && (i = !0);
    var S = E.selectCells(v);
    return S && b && a.listen(), i = !1, S;
  }, this.selectColumns = function(v) {
    var m = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : v;
    return E.selectColumns(v, m);
  }, this.selectRows = function(v) {
    var m = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : v;
    return E.selectRows(v, m);
  }, this.deselectCell = function() {
    E.deselect();
  }, this.selectAll = function() {
    var v = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0, m = v && this.hasRowHeaders(), b = v && this.hasColHeaders();
    i = !0, E.selectAll(m, b), i = !1;
  };
  var U = function(m, b) {
    return m.getNearestNotHiddenIndex(b, 1, !0);
  };
  this.scrollViewportTo = function(v, m) {
    var b = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, S = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1, R = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !0, $ = !b, H = !S, F = v, K = m;
    if (R) {
      var te = Number.isInteger(v), re = Number.isInteger(m), ce = te ? U(this.rowIndexMapper, v) : void 0, Oe = re ? U(this.columnIndexMapper, m) : void 0;
      if (ce === null || Oe === null)
        return !1;
      F = te ? a.rowIndexMapper.getRenderableFromVisualIndex(ce) : void 0, K = re ? a.columnIndexMapper.getRenderableFromVisualIndex(Oe) : void 0;
    }
    var ve = Number.isInteger(F), ye = Number.isInteger(K);
    return ve && ye ? a.view.scrollViewport(a._createCellCoords(F, K), $, S, b, H) : ve && ye === !1 ? a.view.scrollViewportVertically(F, $, b) : ye && ve === !1 ? a.view.scrollViewportHorizontally(K, S, H) : !1;
  }, this.destroy = function() {
    if (a._clearTimeouts(), a._clearImmediates(), a.view && a.view.destroy(), u && u.destroy(), u = null, this.getShortcutManager().destroy(), p.clearCache(), S_(a)) {
      var v = this.rootDocument.querySelector(".hot-display-license-info");
      v && v.parentNode.removeChild(v);
    }
    jn(a.rootElement), l.destroy(), c && c.destroy(), a.batchExecution(function() {
      a.rowIndexMapper.unregisterAll(), a.columnIndexMapper.unregisterAll(), C.getItems().forEach(function(m) {
        var b = _n(m, 2), S = b[1];
        S.destroy();
      }), C.clear(), a.runHooks("afterDestroy");
    }, !0), we.getSingleton().destroy(a), Ye(a, function(m, b, S) {
      wt(m) ? S[b] = Z(b) : b !== "guid" && (S[b] = null);
    }), a.isDestroyed = !0, s && s.destroy(), s = null, f = null, E = null, c = null, a = null;
  };
  function Z(v) {
    return function() {
      throw new Error('The "'.concat(v, '" method cannot be called because this Handsontable instance has been destroyed'));
    };
  }
  this.getActiveEditor = function() {
    return c.getActiveEditor();
  }, this.getPlugin = function(v) {
    var m = vn(v);
    return m === "UndoRedo" ? this.undoRedo : C.getItem(m);
  }, this.getPluginName = function(v) {
    return v === this.undoRedo ? this.undoRedo.constructor.PLUGIN_KEY : C.getId(v);
  }, this.getInstance = function() {
    return a;
  }, this.addHook = function(v, m) {
    we.getSingleton().add(v, m, a);
  }, this.hasHook = function(v) {
    return we.getSingleton().has(v, a) || we.getSingleton().has(v);
  }, this.addHookOnce = function(v, m) {
    we.getSingleton().once(v, m, a);
  }, this.removeHook = function(v, m) {
    we.getSingleton().remove(v, m, a);
  }, this.runHooks = function(v, m, b, S, R, $, H) {
    return we.getSingleton().run(a, v, m, b, S, R, $, H);
  }, this.getTranslatedPhrase = function(v, m) {
    return f2(g.language, v, m);
  }, this.toHTML = function() {
    return _I(n);
  }, this.toTableElement = function() {
    var v = n.rootDocument.createElement("div");
    return v.insertAdjacentHTML("afterbegin", _I(n)), v.firstElementChild;
  }, this.timeouts = [], this._registerTimeout = function(v) {
    var m = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, b = v;
    typeof b == "function" && (b = setTimeout(b, m)), this.timeouts.push(b);
  }, this._clearTimeouts = function() {
    I(this.timeouts, function(v) {
      clearTimeout(v);
    });
  }, this.immediates = [], this._registerImmediate = function(v) {
    this.immediates.push(setImmediate(v));
  }, this._clearImmediates = function() {
    I(this.immediates, function(v) {
      clearImmediate(v);
    });
  }, this._refreshBorders = function() {
    var v = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, m = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
    c.destroyEditor(v), a.view.render(), m && E.isSelected() && c.prepareEditor();
  }, this.isRtl = function() {
    return a.rootWindow.getComputedStyle(a.rootElement).direction === "rtl";
  }, this.isLtr = function() {
    return !a.isRtl();
  }, this.getDirectionFactor = function() {
    return a.isLtr() ? 1 : -1;
  };
  var oe = xCe({
    handleEvent: function(m) {
      var b = a.isListening(), S = (m == null ? void 0 : m.key) !== void 0;
      return b && S;
    },
    beforeKeyDown: function(m) {
      return n.runHooks("beforeKeyDown", m);
    },
    afterKeyDown: function(m) {
      n.isDestroyed || a.runHooks("afterDocumentKeyDown", m);
    },
    ownerWindow: this.rootWindow
  });
  this.addHook("beforeOnCellMouseDown", function(v) {
    v.ctrlKey === !1 && v.metaKey === !1 && oe.releasePressedKeys();
  }), this.getShortcutManager = function() {
    return oe;
  };
  var ie = oe.addContext("grid"), T = {
    runOnlyIf: function() {
      return be(a.getSelected()) && a.countRenderedRows() > 0 && a.countRenderedCols() > 0;
    },
    group: BCe
  };
  oe.setActiveContextName("grid"), ie.addShortcuts([{
    keys: [["Control/Meta", "A"]],
    callback: function() {
      a.selectAll();
    }
  }, {
    keys: [["Control/Meta", "Enter"]],
    callback: function() {
      for (var m = a.getSelectedRange(), b = m[m.length - 1].highlight, S = b.row, R = b.col, $ = a.getDataAtCell(S, R), H = /* @__PURE__ */ new Map(), F = 0; F < m.length; F++)
        m[F].forAll(function(K, te) {
          if (K >= 0 && te >= 0 && (K !== S || te !== R)) {
            var re = a.getCellMeta(K, te), ce = re.readOnly;
            ce || H.set("".concat(K, "x").concat(te), [K, te, $]);
          }
        });
      a.setDataAtCell(Array.from(H.values()));
    },
    runOnlyIf: function() {
      return a.getSelectedRangeLast().getCellsCount() > 1;
    }
  }, {
    keys: [["ArrowUp"]],
    callback: function() {
      E.transformStart(-1, 0);
    }
  }, {
    keys: [["ArrowUp", "Control/Meta"]],
    captureCtrl: !0,
    callback: function() {
      E.setRangeStart(a._createCellCoords(a.rowIndexMapper.getNearestNotHiddenIndex(0, 1), a.getSelectedRangeLast().highlight.col));
    }
  }, {
    keys: [["ArrowUp", "Shift"]],
    callback: function() {
      E.transformEnd(-1, 0);
    }
  }, {
    keys: [["ArrowUp", "Shift", "Control/Meta"]],
    captureCtrl: !0,
    callback: function() {
      var m = a.getSelectedRangeLast(), b = m.from, S = m.to, R = a.rowIndexMapper.getNearestNotHiddenIndex(0, 1);
      E.setRangeStart(b.clone()), E.setRangeEnd(a._createCellCoords(R, S.col));
    },
    runOnlyIf: function() {
      return !(a.selection.isSelectedByCorner() || a.selection.isSelectedByColumnHeader());
    }
  }, {
    keys: [["ArrowDown"]],
    callback: function() {
      E.transformStart(1, 0);
    }
  }, {
    keys: [["ArrowDown", "Control/Meta"]],
    captureCtrl: !0,
    callback: function() {
      E.setRangeStart(a._createCellCoords(a.rowIndexMapper.getNearestNotHiddenIndex(a.countRows() - 1, -1), a.getSelectedRangeLast().highlight.col));
    }
  }, {
    keys: [["ArrowDown", "Shift"]],
    callback: function() {
      E.transformEnd(1, 0);
    }
  }, {
    keys: [["ArrowDown", "Shift", "Control/Meta"]],
    captureCtrl: !0,
    callback: function() {
      var m = a.getSelectedRangeLast(), b = m.from, S = m.to, R = a.rowIndexMapper.getNearestNotHiddenIndex(a.countRows() - 1, -1);
      E.setRangeStart(b.clone()), E.setRangeEnd(a._createCellCoords(R, S.col));
    },
    runOnlyIf: function() {
      return !(a.selection.isSelectedByCorner() || a.selection.isSelectedByColumnHeader());
    }
  }, {
    keys: [["ArrowLeft"]],
    callback: function() {
      E.transformStart(0, -1 * a.getDirectionFactor());
    }
  }, {
    keys: [["ArrowLeft", "Control/Meta"]],
    captureCtrl: !0,
    callback: function() {
      var m, b = a.getSelectedRangeLast().highlight.row, S = (m = a.columnIndexMapper).getNearestNotHiddenIndex.apply(m, ml(a.isRtl() ? [a.countCols() - 1, -1] : [0, 1]));
      E.setRangeStart(a._createCellCoords(b, S));
    }
  }, {
    keys: [["ArrowLeft", "Shift"]],
    callback: function() {
      E.transformEnd(0, -1 * a.getDirectionFactor());
    }
  }, {
    keys: [["ArrowLeft", "Shift", "Control/Meta"]],
    captureCtrl: !0,
    callback: function() {
      var m, b = a.getSelectedRangeLast(), S = b.from, R = b.to, $ = (m = a.columnIndexMapper).getNearestNotHiddenIndex.apply(m, ml(a.isRtl() ? [a.countCols() - 1, -1] : [0, 1]));
      E.setRangeStart(S.clone()), E.setRangeEnd(a._createCellCoords(R.row, $));
    },
    runOnlyIf: function() {
      return !(a.selection.isSelectedByCorner() || a.selection.isSelectedByRowHeader());
    }
  }, {
    keys: [["ArrowRight"]],
    callback: function() {
      E.transformStart(0, a.getDirectionFactor());
    }
  }, {
    keys: [["ArrowRight", "Control/Meta"]],
    captureCtrl: !0,
    callback: function() {
      var m, b = a.getSelectedRangeLast().highlight.row, S = (m = a.columnIndexMapper).getNearestNotHiddenIndex.apply(m, ml(a.isRtl() ? [0, 1] : [a.countCols() - 1, -1]));
      E.setRangeStart(a._createCellCoords(b, S));
    }
  }, {
    keys: [["ArrowRight", "Shift"]],
    callback: function() {
      E.transformEnd(0, a.getDirectionFactor());
    }
  }, {
    keys: [["ArrowRight", "Shift", "Control/Meta"]],
    captureCtrl: !0,
    callback: function() {
      var m, b = a.getSelectedRangeLast(), S = b.from, R = b.to, $ = (m = a.columnIndexMapper).getNearestNotHiddenIndex.apply(m, ml(a.isRtl() ? [0, 1] : [a.countCols() - 1, -1]));
      E.setRangeStart(S.clone()), E.setRangeEnd(a._createCellCoords(R.row, $));
    },
    runOnlyIf: function() {
      return !(a.selection.isSelectedByCorner() || a.selection.isSelectedByRowHeader());
    }
  }, {
    keys: [["Home"]],
    captureCtrl: !0,
    callback: function() {
      var m = parseInt(a.getSettings().fixedColumnsStart, 10), b = a.getSelectedRangeLast().highlight.row, S = a.columnIndexMapper.getNearestNotHiddenIndex(m, 1);
      E.setRangeStart(a._createCellCoords(b, S));
    },
    runOnlyIf: function() {
      return a.view.isMainTableNotFullyCoveredByOverlays();
    }
  }, {
    keys: [["Home", "Shift"]],
    callback: function() {
      E.setRangeEnd(a._createCellCoords(E.selectedRange.current().from.row, a.columnIndexMapper.getNearestNotHiddenIndex(0, 1)));
    }
  }, {
    keys: [["Home", "Control/Meta"]],
    captureCtrl: !0,
    callback: function() {
      var m = parseInt(a.getSettings().fixedRowsTop, 10), b = parseInt(a.getSettings().fixedColumnsStart, 10), S = a.rowIndexMapper.getNearestNotHiddenIndex(m, 1), R = a.columnIndexMapper.getNearestNotHiddenIndex(b, 1);
      E.setRangeStart(a._createCellCoords(S, R));
    },
    runOnlyIf: function() {
      return a.view.isMainTableNotFullyCoveredByOverlays();
    }
  }, {
    keys: [["End"]],
    captureCtrl: !0,
    callback: function() {
      E.setRangeStart(a._createCellCoords(a.getSelectedRangeLast().highlight.row, a.columnIndexMapper.getNearestNotHiddenIndex(a.countCols() - 1, -1)));
    },
    runOnlyIf: function() {
      return a.view.isMainTableNotFullyCoveredByOverlays();
    }
  }, {
    keys: [["End", "Shift"]],
    callback: function() {
      E.setRangeEnd(a._createCellCoords(E.selectedRange.current().from.row, a.columnIndexMapper.getNearestNotHiddenIndex(a.countCols() - 1, -1)));
    }
  }, {
    keys: [["End", "Control/Meta"]],
    captureCtrl: !0,
    callback: function() {
      var m = parseInt(a.getSettings().fixedRowsBottom, 10), b = a.rowIndexMapper.getNearestNotHiddenIndex(a.countRows() - m - 1, -1), S = a.columnIndexMapper.getNearestNotHiddenIndex(a.countCols() - 1, -1);
      E.setRangeStart(a._createCellCoords(b, S));
    },
    runOnlyIf: function() {
      return a.view.isMainTableNotFullyCoveredByOverlays();
    }
  }, {
    keys: [["PageUp"]],
    callback: function() {
      E.transformStart(-a.countVisibleRows(), 0);
    }
  }, {
    keys: [["PageUp", "Shift"]],
    callback: function() {
      var m = a.getSelectedRangeLast(), b = m.to, S = Math.max(b.row - a.countVisibleRows(), 0), R = a.rowIndexMapper.getNearestNotHiddenIndex(S, 1);
      if (R !== null) {
        var $ = a._createCellCoords(R, b.col), H = b.row - a.view.getFirstFullyVisibleRow(), F = Math.max($.row - H, 0);
        E.setRangeEnd($), a.scrollViewportTo(F);
      }
    }
  }, {
    keys: [["PageDown"]],
    callback: function() {
      E.transformStart(a.countVisibleRows(), 0);
    }
  }, {
    keys: [["PageDown", "Shift"]],
    callback: function() {
      var m = a.getSelectedRangeLast(), b = m.to, S = Math.min(b.row + a.countVisibleRows(), a.countRows() - 1), R = a.rowIndexMapper.getNearestNotHiddenIndex(S, -1);
      if (R !== null) {
        var $ = a._createCellCoords(R, b.col), H = b.row - a.view.getFirstFullyVisibleRow(), F = Math.min($.row - H, a.countRows() - 1);
        E.setRangeEnd($), a.scrollViewportTo(F);
      }
    }
  }, {
    keys: [["Tab"]],
    callback: function(m) {
      var b = typeof g.tabMoves == "function" ? g.tabMoves(m) : g.tabMoves;
      E.transformStart(b.row, b.col, !0);
    }
  }, {
    keys: [["Shift", "Tab"]],
    callback: function(m) {
      var b = typeof g.tabMoves == "function" ? g.tabMoves(m) : g.tabMoves;
      E.transformStart(-b.row, -b.col);
    }
  }], T), ZV().forEach(function(v) {
    var m = gT(v);
    C.addItem(v, new m(n));
  }), we.getSingleton().run(a, "construct");
}
var VCe = "hooksRefRegisterer", k2 = {
  /**
   * Internal hooks storage.
   */
  _hooksStorage: /* @__PURE__ */ Object.create(null),
  /**
   * Add hook to the collection.
   *
   * @param {string} key The hook name.
   * @param {Function} callback The hook callback.
   * @returns {object}
   */
  addHook: function(t, r) {
    return this._hooksStorage[t] || (this._hooksStorage[t] = []), this.hot.addHook(t, r), this._hooksStorage[t].push(r), this;
  },
  /**
   * Remove all hooks listeners by hook name.
   *
   * @param {string} key The hook name.
   */
  removeHooksByKey: function(t) {
    var r = this;
    I(this._hooksStorage[t] || [], function(n) {
      r.hot.removeHook(t, n);
    });
  },
  /**
   * Clear all added hooks.
   */
  clearHooks: function() {
    var t = this;
    Ye(this._hooksStorage, function(r, n) {
      return t.removeHooksByKey(n);
    }), this._hooksStorage = {};
  }
};
Wo(k2, "MIXIN_NAME", VCe, {
  writable: !1,
  enumerable: !1
});
const WCe = k2;
function Bs(e) {
  "@babel/helpers - typeof";
  return Bs = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Bs(e);
}
function UCe(e, t) {
  return KCe(e) || GCe(e, t) || YCe(e, t) || zCe();
}
function zCe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function YCe(e, t) {
  if (e) {
    if (typeof e == "string")
      return ix(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return ix(e, t);
  }
}
function ix(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function GCe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function KCe(e) {
  if (Array.isArray(e))
    return e;
}
function qCe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && Y_(e, t);
}
function Y_(e, t) {
  return Y_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, Y_(e, t);
}
function XCe(e) {
  var t = JCe();
  return function() {
    var n = Em(e), o;
    if (t) {
      var i = Em(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return ZCe(this, o);
  };
}
function ZCe(e, t) {
  if (t && (Bs(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return QCe(e);
}
function QCe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function JCe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Em(e) {
  return Em = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Em(e);
}
function ax(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function lx(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, e_e(n.key), n);
  }
}
function sx(e, t, r) {
  return t && lx(e.prototype, t), r && lx(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function e_e(e) {
  var t = t_e(e, "string");
  return Bs(t) === "symbol" ? t : String(t);
}
function t_e(e, t) {
  if (Bs(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Bs(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var r_e = "base", Qt = Object.freeze({
  VIRGIN: "STATE_VIRGIN",
  // before editing
  EDITING: "STATE_EDITING",
  WAITING: "STATE_WAITING",
  // waiting for async validation
  FINISHED: "STATE_FINISHED"
}), G_ = "baseEditor", Tf = /* @__PURE__ */ function() {
  function e(t) {
    ax(this, e), this.hot = t, this.instance = t, this.state = Qt.VIRGIN, this._opened = !1, this._fullEditMode = !1, this._closeCallback = null, this.TD = null, this.row = null, this.col = null, this.prop = null, this.originalValue = null, this.cellProperties = null, this.init();
  }
  return sx(e, [{
    key: "_fireCallbacks",
    value: function(r) {
      this._closeCallback && (this._closeCallback(r), this._closeCallback = null);
    }
    /**
     * Initializes an editor's intance.
     */
  }, {
    key: "init",
    value: function() {
    }
    /**
     * Required method to get current value from editable element.
     */
  }, {
    key: "getValue",
    value: function() {
      throw Error("Editor getValue() method unimplemented");
    }
    /**
     * Required method to set new value into editable element.
     */
  }, {
    key: "setValue",
    value: function() {
      throw Error("Editor setValue() method unimplemented");
    }
    /**
     * Required method to open editor.
     */
  }, {
    key: "open",
    value: function() {
      throw Error("Editor open() method unimplemented");
    }
    /**
     * Required method to close editor.
     */
  }, {
    key: "close",
    value: function() {
      throw Error("Editor close() method unimplemented");
    }
    /**
     * Prepares editor's meta data.
     *
     * @param {number} row The visual row index.
     * @param {number} col The visual column index.
     * @param {number|string} prop The column property (passed when datasource is an array of objects).
     * @param {HTMLTableCellElement} td The rendered cell element.
     * @param {*} value The rendered value.
     * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
     */
  }, {
    key: "prepare",
    value: function(r, n, o, i, a, l) {
      this.TD = i, this.row = r, this.col = n, this.prop = o, this.originalValue = a, this.cellProperties = l, this.state = Qt.VIRGIN;
    }
    /**
     * Fallback method to provide extendable editors in ES5.
     *
     * @returns {Function}
     */
  }, {
    key: "extend",
    value: function() {
      return /* @__PURE__ */ function(r) {
        qCe(o, r);
        var n = XCe(o);
        function o() {
          return ax(this, o), n.apply(this, arguments);
        }
        return sx(o);
      }(this.constructor);
    }
    /**
     * Saves value from editor into data storage.
     *
     * @param {*} value The editor value.
     * @param {boolean} ctrlDown If `true`, applies value to each cell in the last selected range.
     */
  }, {
    key: "saveValue",
    value: function(r, n) {
      var o = this, i, a, l, s;
      if (n) {
        var u = this.hot.getSelectedLast();
        i = Math.max(Math.min(u[0], u[2]), 0), a = Math.max(Math.min(u[1], u[3]), 0), l = Math.max(u[0], u[2]), s = Math.max(u[1], u[3]);
      } else {
        var f = [this.row, this.col, null, null];
        i = f[0], a = f[1], l = f[2], s = f[3];
      }
      var c = this.hot.runHooks("modifyGetCellCoords", i, a);
      if (Array.isArray(c)) {
        var h = UCe(c, 2);
        i = h[0], a = h[1];
      }
      var d = this.hot.getShortcutManager(), y = d.getContext("editor"), p = {
        runOnlyIf: function() {
          return be(o.hot.getSelected());
        },
        group: G_
      };
      this.isInFullEditMode() && y.addShortcuts([{
        keys: [["ArrowUp"]],
        callback: function() {
          o.hot.selection.transformStart(-1, 0);
        }
      }, {
        keys: [["ArrowDown"]],
        callback: function() {
          o.hot.selection.transformStart(1, 0);
        }
      }, {
        keys: [["ArrowLeft"]],
        callback: function() {
          o.hot.selection.transformStart(0, -1 * o.hot.getDirectionFactor());
        }
      }, {
        keys: [["ArrowRight"]],
        callback: function() {
          o.hot.selection.transformStart(0, o.hot.getDirectionFactor());
        }
      }], p), this.hot.populateFromArray(i, a, r, l, s, "edit");
    }
    /**
     * Begins editing on a highlighted cell and hides fillHandle corner if was present.
     *
     * @param {*} newInitialValue The initial editor value.
     * @param {Event} event The keyboard event object.
     */
  }, {
    key: "beginEditing",
    value: function(r, n) {
      if (this.state === Qt.VIRGIN) {
        var o = this.hot, i = o.rowIndexMapper.getRenderableFromVisualIndex(this.row), a = o.columnIndexMapper.getRenderableFromVisualIndex(this.col);
        if (o.view.scrollViewport(o._createCellCoords(i, a)), this.state = Qt.EDITING, this.isInFullEditMode()) {
          var l = typeof r == "string" ? r : Ft(this.originalValue);
          this.setValue(l);
        }
        this.open(n), this._opened = !0, this.focus(), o.view.render(), o.runHooks("afterBeginEditing", this.row, this.col);
      }
    }
    /**
     * Finishes editing and start saving or restoring process for editing cell or last selected range.
     *
     * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.
     * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.
     * @param {Function} callback The callback function, fired after editor closing.
     */
  }, {
    key: "finishEditing",
    value: function(r, n, o) {
      var i = this, a;
      if (o) {
        var l = this._closeCallback;
        this._closeCallback = function(c) {
          l && l(c), o(c), i.hot.view.render();
        };
      }
      if (!this.isWaiting()) {
        var s = this.hot.getShortcutManager(), u = s.getContext("editor");
        if (u.removeShortcutsByGroup(G_), u.removeShortcutsByGroup($g), this.state === Qt.VIRGIN) {
          this.hot._registerTimeout(function() {
            i._fireCallbacks(!0);
          });
          return;
        }
        if (this.state === Qt.EDITING) {
          if (r) {
            this.cancelChanges(), this.hot.view.render();
            return;
          }
          var f = this.getValue();
          this.cellProperties.trimWhitespace ? a = [[typeof f == "string" ? String.prototype.trim.call(f || "") : f]] : a = [[f]], this.state = Qt.WAITING, this.saveValue(a, n), this.hot.getCellValidator(this.cellProperties) ? this.hot.addHookOnce("postAfterValidate", function(c) {
            i.state = Qt.FINISHED, i.discardEditor(c);
          }) : (this.state = Qt.FINISHED, this.discardEditor(!0));
        }
      }
    }
    /**
     * Finishes editing without singout saving value.
     */
  }, {
    key: "cancelChanges",
    value: function() {
      this.state = Qt.FINISHED, this.discardEditor();
    }
    /**
     * Verifies result of validation or closes editor if user's cancelled changes.
     *
     * @param {boolean|undefined} result If `false` and the cell using allowInvalid option,
     *                                   then an editor won't be closed until validation is passed.
     */
  }, {
    key: "discardEditor",
    value: function(r) {
      if (this.state === Qt.FINISHED)
        if (r === !1 && this.cellProperties.allowInvalid !== !0)
          this.hot.selectCell(this.row, this.col), this.focus(), this.state = Qt.EDITING, this._fireCallbacks(!1);
        else {
          this.close(), this._opened = !1, this._fullEditMode = !1, this.state = Qt.VIRGIN, this._fireCallbacks(!0);
          var n = this.hot.getShortcutManager();
          n.setActiveContextName("grid");
        }
    }
    /**
     * Switch editor into full edit mode. In this state navigation keys don't close editor. This mode is activated
     * automatically after hit ENTER or F2 key on the cell or while editing cell press F2 key.
     */
  }, {
    key: "enableFullEditMode",
    value: function() {
      this._fullEditMode = !0;
    }
    /**
     * Checks if editor is in full edit mode.
     *
     * @returns {boolean}
     */
  }, {
    key: "isInFullEditMode",
    value: function() {
      return this._fullEditMode;
    }
    /**
     * Returns information whether the editor is open.
     *
     * @returns {boolean}
     */
  }, {
    key: "isOpened",
    value: function() {
      return this._opened;
    }
    /**
     * Returns information whether the editor is waiting, eg.: for async validation.
     *
     * @returns {boolean}
     */
  }, {
    key: "isWaiting",
    value: function() {
      return this.state === Qt.WAITING;
    }
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * Gets the object that provides information about the edited cell size and its position
     * relative to the table viewport.
     *
     * The rectangle has six integer properties:
     *  - `top` The top position relative to the table viewport
     *  - `start` The left (or right in RTL) position relative to the table viewport
     *  - `width` The cell's current width;
     *  - `maxWidth` The maximum cell's width after which the editor goes out of the table viewport
     *  - `height` The cell's current height;
     *  - `maxHeight` The maximum cell's height after which the editor goes out of the table viewport
     *
     * @returns {{top: number, start: number, width: number, maxWidth: number, height: number, maxHeight: number} | undefined}
     */
  }, {
    key: "getEditedCellRect",
    value: function() {
      var r, n = this.getEditedCell();
      if (n) {
        var o = this.hot.view._wt, i = o.wtOverlays, a = o.wtViewport, l = this.hot.rootWindow, s = Yt(n), u = yt(n), f = Yt(this.hot.rootElement), c = yt(this.hot.rootElement), h = i.topOverlay.holder, d = i.inlineStartOverlay.holder, y = h !== l ? h.scrollTop : 0, p = d !== l ? d.scrollLeft : 0, g = l.innerWidth - f.left - c, w = (r = i.getParentOverlay(n)) !== null && r !== void 0 ? r : this.hot.view._wt, C = w.wtTable, _ = C.name, k = ["master", "inline_start"].includes(_) ? y : 0, E = ["master", "top", "bottom"].includes(_) ? p : 0, j = s.top === f.top ? 0 : 1, Y = s.top - f.top - j - k, Q = 0;
        this.hot.isRtl() ? Q = l.innerWidth - s.left - u - g - 1 + E : Q = s.left - f.left - 1 - E, ["top", "top_inline_start_corner"].includes(_) && (Y += i.topOverlay.getOverlayOffset()), ["inline_start", "top_inline_start_corner"].includes(_) && (Q += Math.abs(i.inlineStartOverlay.getOverlayOffset()));
        var X = this.hot.hasColHeaders(), q = this.hot.rowIndexMapper.getRenderableFromVisualIndex(this.row), J = this.hot.columnIndexMapper.getRenderableFromVisualIndex(this.col), le = this.hot.rowIndexMapper.getRenderableIndexesLength(), ee = le - this.hot.view._wt.getSetting("fixedRowsBottom");
        (X && q <= 0 || q === ee) && (Y += 1), J <= 0 && (Q += 1);
        var U = a.rowsRenderCalculator.startPosition, Z = a.columnsRenderCalculator.startPosition, oe = Math.abs(i.inlineStartOverlay.getScrollPosition()), ie = i.topOverlay.getScrollPosition(), T = tr(this.hot.rootDocument), v = n.offsetTop + U - ie, m = 0;
        if (this.hot.isRtl()) {
          var b = n.offsetLeft;
          b >= 0 ? m = C.getWidth() - n.offsetLeft : m = Math.abs(b), m += Z - oe - u;
        } else
          m = n.offsetLeft + Z - oe;
        var S = Da(this.TD, this.hot.rootWindow), R = this.hot.isRtl() ? "borderRightWidth" : "borderLeftWidth", $ = parseInt(S[R], 10) > 0 ? 0 : 1, H = parseInt(S.borderTopWidth, 10) > 0 ? 0 : 1, F = yt(n) + $, K = $t(n) + H, te = dae(h) ? T : 0, re = vae(d) ? T : 0, ce = this.hot.view.maximumVisibleElementWidth(m) - te + $, Oe = Math.max(this.hot.view.maximumVisibleElementHeight(v) - re + H, 23);
        return {
          top: Y,
          start: Q,
          height: K,
          maxHeight: Oe,
          width: F,
          maxWidth: ce
        };
      }
    }
    /* eslint-enable jsdoc/require-description-complete-sentence */
    /**
     * Gets className of the edited cell if exist.
     *
     * @returns {string}
     */
  }, {
    key: "getEditedCellsLayerClass",
    value: function() {
      var r = this.checkEditorSection();
      switch (r) {
        case "inline-start":
          return "ht_clone_left ht_clone_inline_start";
        case "bottom":
          return "ht_clone_bottom";
        case "bottom-inline-start-corner":
          return "ht_clone_bottom_left_corner ht_clone_bottom_inline_start_corner";
        case "top":
          return "ht_clone_top";
        case "top-inline-start-corner":
          return "ht_clone_top_left_corner ht_clone_top_inline_start_corner";
        default:
          return "ht_clone_master";
      }
    }
    /**
     * Gets HTMLTableCellElement of the edited cell if exist.
     *
     * @returns {HTMLTableCellElement|null}
     */
  }, {
    key: "getEditedCell",
    value: function() {
      return this.hot.getCell(this.row, this.col, !0);
    }
    /**
     * Returns name of the overlay, where editor is placed.
     *
     * @private
     * @returns {string}
     */
  }, {
    key: "checkEditorSection",
    value: function() {
      var r = this.hot.countRows(), n = "";
      return this.row < this.hot.getSettings().fixedRowsTop ? this.col < this.hot.getSettings().fixedColumnsStart ? n = "top-inline-start-corner" : n = "top" : this.hot.getSettings().fixedRowsBottom && this.row >= r - this.hot.getSettings().fixedRowsBottom ? this.col < this.hot.getSettings().fixedColumnsStart ? n = "bottom-inline-start-corner" : n = "bottom" : this.col < this.hot.getSettings().fixedColumnsStart && (n = "inline-start"), n;
    }
  }], [{
    key: "EDITOR_TYPE",
    get: function() {
      return r_e;
    }
  }]), e;
}();
bt(Tf, WCe);
function n_e() {
  var e = {
    minHeight: 200,
    maxHeight: 300,
    minWidth: 100,
    maxWidth: 300
  }, t, r = document.body, n = document.createTextNode(""), o = document.createElement("SPAN"), i = function(d, y, p) {
    d.addEventListener(y, p, !1);
  }, a = function(d, y, p) {
    d.removeEventListener(y, p, !1);
  }, l = function(d) {
    var y, p;
    d ? /^[a-zA-Z \.,\\\/\|0-9]$/.test(d) || (d = ".") : d = "", n.textContent !== void 0 ? n.textContent = t.value + d : n.data = t.value + d, o.style.position = "absolute", o.style.fontSize = c(t).fontSize, o.style.fontFamily = c(t).fontFamily, o.style.whiteSpace = "pre", r.appendChild(o), y = o.clientWidth + 2, r.removeChild(o), t.style.height = e.minHeight + "px", e.minWidth > y ? t.style.width = e.minWidth + "px" : y > e.maxWidth ? t.style.width = e.maxWidth + "px" : t.style.width = y + "px", p = t.scrollHeight ? t.scrollHeight - 1 : 0, e.minHeight > p ? t.style.height = e.minHeight + "px" : e.maxHeight < p ? (t.style.height = e.maxHeight + "px", t.style.overflowY = "visible") : t.style.height = p + "px";
  }, s = function() {
    window.setTimeout(l, 0);
  }, u = function(d) {
    if (d && d.minHeight)
      if (d.minHeight == "inherit")
        e.minHeight = t.clientHeight;
      else {
        var y = parseInt(d.minHeight);
        isNaN(y) || (e.minHeight = y);
      }
    if (d && d.maxHeight)
      if (d.maxHeight == "inherit")
        e.maxHeight = t.clientHeight;
      else {
        var p = parseInt(d.maxHeight);
        isNaN(p) || (e.maxHeight = p);
      }
    if (d && d.minWidth)
      if (d.minWidth == "inherit")
        e.minWidth = t.clientWidth;
      else {
        var g = parseInt(d.minWidth);
        isNaN(g) || (e.minWidth = g);
      }
    if (d && d.maxWidth)
      if (d.maxWidth == "inherit")
        e.maxWidth = t.clientWidth;
      else {
        var w = parseInt(d.maxWidth);
        isNaN(w) || (e.maxWidth = w);
      }
    o.firstChild || (o.className = "autoResize", o.style.display = "inline-block", o.appendChild(n));
  }, f = function(d, y, p) {
    t = d, u(y), t.nodeName == "TEXTAREA" && (t.style.resize = "none", t.style.overflowY = "", t.style.height = e.minHeight + "px", t.style.minWidth = e.minWidth + "px", t.style.maxWidth = e.maxWidth + "px", t.style.overflowY = "hidden"), p && (i(t, "change", l), i(t, "cut", s), i(t, "paste", s), i(t, "drop", s), i(t, "keydown", s), i(t, "focus", l), i(t, "compositionstart", s), i(t, "compositionupdate", s), i(t, "compositionend", s)), l();
  };
  function c(h) {
    return h.currentStyle || document.defaultView.getComputedStyle(h);
  }
  return {
    init: function(d, y, p) {
      f(d, y, p);
    },
    unObserve: function() {
      a(t, "change", l), a(t, "cut", s), a(t, "paste", s), a(t, "drop", s), a(t, "keydown", s), a(t, "focus", l), a(t, "compositionstart", s), a(t, "compositionupdate", s), a(t, "compositionend", s);
    },
    resize: l
  };
}
function ux(e, t) {
  for (var r = CV(t), n = t.value.split(`
`), o = r, i = 0, a = 0; a < n.length; a++) {
    var l = n[a];
    a !== 0 && (i += n[a - 1].length + 1);
    var s = i + l.length;
    if (e === "home" ? o = i : e === "end" && (o = s), r <= s)
      break;
  }
  Pg(t, o);
}
function Vs(e) {
  "@babel/helpers - typeof";
  return Vs = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Vs(e);
}
function fx(e, t) {
  return l_e(e) || a_e(e, t) || i_e(e, t) || o_e();
}
function o_e() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function i_e(e, t) {
  if (e) {
    if (typeof e == "string")
      return cx(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return cx(e, t);
  }
}
function cx(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function a_e(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function l_e(e) {
  if (Array.isArray(e))
    return e;
}
function s_e(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function hx(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, f_e(n.key), n);
  }
}
function u_e(e, t, r) {
  return t && hx(e.prototype, t), r && hx(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function f_e(e) {
  var t = c_e(e, "string");
  return Vs(t) === "symbol" ? t : String(t);
}
function c_e(e, t) {
  if (Vs(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Vs(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function _c() {
  return typeof Reflect < "u" && Reflect.get ? _c = Reflect.get.bind() : _c = function(t, r, n) {
    var o = h_e(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, _c.apply(this, arguments);
}
function h_e(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Va(e), e !== null); )
    ;
  return e;
}
function d_e(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && K_(e, t);
}
function K_(e, t) {
  return K_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, K_(e, t);
}
function v_e(e) {
  var t = p_e();
  return function() {
    var n = Va(e), o;
    if (t) {
      var i = Va(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return y_e(this, o);
  };
}
function y_e(e, t) {
  if (t && (Vs(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return $2(e);
}
function $2(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function p_e() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Va(e) {
  return Va = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Va(e);
}
var m_e = "ht_editor_visible", uy = "ht_editor_hidden", dx = "textEditor", g_e = "text", nl = /* @__PURE__ */ function(e) {
  d_e(r, e);
  var t = v_e(r);
  function r(n) {
    var o;
    return s_e(this, r), o = t.call(this, n), o.eventManager = new It($2(o)), o.autoResize = n_e(), o.TEXTAREA = void 0, o.textareaStyle = void 0, o.TEXTAREA_PARENT = void 0, o.textareaParentStyle = void 0, o.layerClass = void 0, o.createElements(), o.bindEvents(), o.hot.addHookOnce("afterDestroy", function() {
      return o.destroy();
    }), o;
  }
  return u_e(r, [{
    key: "getValue",
    value: function() {
      return this.TEXTAREA.value;
    }
    /**
     * Sets new value into editable element.
     *
     * @param {*} newValue The editor value.
     */
  }, {
    key: "setValue",
    value: function(o) {
      this.TEXTAREA.value = o;
    }
    /**
     * Opens the editor and adjust its size.
     */
  }, {
    key: "open",
    value: function() {
      var o = this;
      this.refreshDimensions(), this.showEditableElement();
      var i = this.hot.getShortcutManager();
      i.setActiveContextName("editor"), this.addHook("afterDocumentKeyDown", function(a) {
        return o.onAfterDocumentKeyDown(a);
      }), this.registerShortcuts();
    }
    /**
     * Closes the editor.
     */
  }, {
    key: "close",
    value: function() {
      this.autoResize.unObserve(), this.hot.rootDocument.activeElement === this.TEXTAREA && this.hot.listen(), this.hideEditableElement(), this.unregisterShortcuts(), this.removeHooksByKey("afterDocumentKeyDown");
    }
    /**
     * Prepares editor's meta data.
     *
     * @param {number} row The visual row index.
     * @param {number} col The visual column index.
     * @param {number|string} prop The column property (passed when datasource is an array of objects).
     * @param {HTMLTableCellElement} td The rendered cell element.
     * @param {*} value The rendered value.
     * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
     */
  }, {
    key: "prepare",
    value: function(o, i, a, l, s, u) {
      var f = this.state;
      if (_c(Va(r.prototype), "prepare", this).call(this, o, i, a, l, s, u), !u.readOnly) {
        this.refreshDimensions(!0);
        var c = u.allowInvalid, h = u.fragmentSelection;
        c && (this.TEXTAREA.value = ""), f !== Qt.FINISHED && this.hideEditableElement();
        var d = !h;
        d && !Nn() && this.focus();
      }
    }
    /**
     * Begins editing on a highlighted cell and hides fillHandle corner if was present.
     *
     * @param {*} newInitialValue The editor initial value.
     * @param {Event} event The keyboard event object.
     */
  }, {
    key: "beginEditing",
    value: function(o, i) {
      this.state === Qt.VIRGIN && (this.TEXTAREA.value = "", _c(Va(r.prototype), "beginEditing", this).call(this, o, i));
    }
    /**
     * Sets focus state on the select element.
     */
  }, {
    key: "focus",
    value: function() {
      this.TEXTAREA.select(), Pg(this.TEXTAREA, this.TEXTAREA.value.length);
    }
    /**
     * Creates an editor's elements and adds necessary CSS classnames.
     */
  }, {
    key: "createElements",
    value: function() {
      var o = this.hot.rootDocument;
      this.TEXTAREA = o.createElement("TEXTAREA"), this.TEXTAREA.setAttribute("data-hot-input", ""), this.TEXTAREA.tabIndex = -1, ae(this.TEXTAREA, "handsontableInput"), this.textareaStyle = this.TEXTAREA.style, this.textareaStyle.width = 0, this.textareaStyle.height = 0, this.textareaStyle.overflowY = "visible", this.TEXTAREA_PARENT = o.createElement("DIV"), ae(this.TEXTAREA_PARENT, "handsontableInputHolder"), Me(this.TEXTAREA_PARENT, this.layerClass) && Le(this.TEXTAREA_PARENT, this.layerClass), ae(this.TEXTAREA_PARENT, uy), this.textareaParentStyle = this.TEXTAREA_PARENT.style, this.TEXTAREA_PARENT.appendChild(this.TEXTAREA), this.hot.rootElement.appendChild(this.TEXTAREA_PARENT);
    }
    /**
     * Moves an editable element out of the viewport, but element must be able to hold focus for IME support.
     *
     * @private
     */
  }, {
    key: "hideEditableElement",
    value: function() {
      (tte() || ete()) && (this.textareaStyle.textIndent = "-99999px"), this.textareaStyle.overflowY = "visible", this.textareaParentStyle.opacity = "0", this.textareaParentStyle.height = "1px", Le(this.TEXTAREA_PARENT, this.layerClass), ae(this.TEXTAREA_PARENT, uy);
    }
    /**
     * Resets an editable element position.
     *
     * @private
     */
  }, {
    key: "showEditableElement",
    value: function() {
      this.textareaParentStyle.height = "", this.textareaParentStyle.overflow = "", this.textareaParentStyle.position = "", this.textareaParentStyle[this.hot.isRtl() ? "left" : "right"] = "auto", this.textareaParentStyle.opacity = "1", this.textareaStyle.textIndent = "", this.textareaStyle.overflowY = "hidden";
      var o = this.TEXTAREA_PARENT.childNodes, i = !1;
      _e(o.length - 1, function(a) {
        var l = o[a];
        if (Me(l, "handsontableEditor"))
          return i = !0, !1;
      }), Me(this.TEXTAREA_PARENT, uy) && Le(this.TEXTAREA_PARENT, uy), i ? (this.layerClass = m_e, ae(this.TEXTAREA_PARENT, this.layerClass)) : (this.layerClass = this.getEditedCellsLayerClass(), ae(this.TEXTAREA_PARENT, this.layerClass));
    }
    /**
     * Refreshes editor's value using source data.
     *
     * @private
     */
  }, {
    key: "refreshValue",
    value: function() {
      var o = this.hot.toPhysicalRow(this.row), i = this.hot.getSourceDataAtCell(o, this.col);
      this.originalValue = i, this.setValue(i), this.refreshDimensions();
    }
    /**
     * Refreshes editor's size and position.
     *
     * @private
     * @param {boolean} force Indicates if the refreshing editor dimensions should be triggered.
     */
  }, {
    key: "refreshDimensions",
    value: function() {
      var o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      if (!(this.state !== Qt.EDITING && !o)) {
        if (this.TD = this.getEditedCell(), !this.TD) {
          o || this.close();
          return;
        }
        var i = this.getEditedCellRect(), a = i.top, l = i.start, s = i.width, u = i.maxWidth, f = i.height, c = i.maxHeight;
        this.textareaParentStyle.top = "".concat(a, "px"), this.textareaParentStyle[this.hot.isRtl() ? "right" : "left"] = "".concat(l, "px"), this.showEditableElement();
        var h = Da(this.TD, this.hot.rootWindow);
        this.TEXTAREA.style.fontSize = h.fontSize, this.TEXTAREA.style.fontFamily = h.fontFamily, this.TEXTAREA.style.backgroundColor = this.TD.style.backgroundColor;
        var d = Da(this.TEXTAREA), y = parseInt(d.paddingLeft, 10) + parseInt(d.paddingRight, 10), p = parseInt(d.paddingTop, 10) + parseInt(d.paddingBottom, 10), g = s - y, w = f - p, C = u - y, _ = c - p;
        this.autoResize.init(this.TEXTAREA, {
          minWidth: Math.min(g, C),
          minHeight: Math.min(w, _),
          // TEXTAREA should never be wider than visible part of the viewport (should not cover the scrollbar)
          maxWidth: C,
          maxHeight: _
        }, !0);
      }
    }
    /**
     * Binds events and hooks.
     *
     * @private
     */
  }, {
    key: "bindEvents",
    value: function() {
      var o = this;
      this.eventManager.addEventListener(this.TEXTAREA, "cut", function(i) {
        return i.stopPropagation();
      }), this.eventManager.addEventListener(this.TEXTAREA, "paste", function(i) {
        return i.stopPropagation();
      }), CB() && this.eventManager.addEventListener(this.TEXTAREA, "focusout", function() {
        return o.finishEditing(!1);
      }), this.addHook("afterScrollHorizontally", function() {
        return o.refreshDimensions();
      }), this.addHook("afterScrollVertically", function() {
        return o.refreshDimensions();
      }), this.addHook("afterColumnResize", function() {
        o.refreshDimensions(), o.focus();
      }), this.addHook("afterRowResize", function() {
        o.refreshDimensions(), o.focus();
      });
    }
    /**
     * Ugly hack for autocompleteEditor.
     *
     * @private
     */
  }, {
    key: "allowKeyEventPropagation",
    value: function() {
    }
    /**
     * Destroys the internal event manager and clears attached hooks.
     *
     * @private
     */
  }, {
    key: "destroy",
    value: function() {
      this.eventManager.destroy(), this.clearHooks();
    }
    /**
     * Register shortcuts responsible for handling editor.
     *
     * @private
     */
  }, {
    key: "registerShortcuts",
    value: function() {
      var o = this, i = this.hot.getShortcutManager(), a = i.getContext("editor"), l = {
        runOnlyIf: function() {
          return be(o.hot.getSelected());
        },
        group: dx
      }, s = function() {
        o.hot.rootDocument.execCommand("insertText", !1, `
`);
      };
      a.addShortcuts([{
        keys: [["Tab"]],
        // TODO: Duplicated part of code (callback to shortcut).
        callback: function(f) {
          var c = o.hot.getSettings(), h = typeof c.tabMoves == "function" ? c.tabMoves(f) : c.tabMoves;
          o.hot.selection.transformStart(h.row, h.col, !0);
        }
      }, {
        keys: [["Shift", "Tab"]],
        // TODO: Duplicated part of code (callback to shortcut).
        callback: function(f) {
          var c = o.hot.getSettings(), h = typeof c.tabMoves == "function" ? c.tabMoves(f) : c.tabMoves;
          o.hot.selection.transformStart(-h.row, -h.col);
        }
      }, {
        keys: [["Control", "Enter"]],
        callback: function() {
          return s(), !1;
        },
        runOnlyIf: function(f) {
          return !o.hot.selection.isMultiple() && // We trigger a data population for multiple selection.
          // catch CTRL but not right ALT (which in some systems triggers ALT+CTRL)
          !f.altKey;
        },
        relativeToGroup: bc,
        position: "before"
      }, {
        keys: [["Meta", "Enter"]],
        callback: function() {
          return s(), !1;
        },
        runOnlyIf: function() {
          return !o.hot.selection.isMultiple();
        },
        // We trigger a data population for multiple selection.
        relativeToGroup: bc,
        position: "before"
      }, {
        keys: [["Alt", "Enter"]],
        callback: function() {
          return s(), !1;
        },
        relativeToGroup: bc,
        position: "before"
      }, {
        // TODO: Duplicated part of code (callback to shortcut)
        keys: [["PageUp"]],
        callback: function() {
          o.hot.selection.transformStart(-o.hot.countVisibleRows(), 0);
        }
      }, {
        // TODO: Duplicated part of code (callback to shortcut)
        keys: [["PageDown"]],
        callback: function() {
          o.hot.selection.transformStart(o.hot.countVisibleRows(), 0);
        }
      }, {
        keys: [["Home"]],
        callback: function(f, c) {
          var h = fx(c, 1), d = h[0];
          ux(d, o.TEXTAREA);
        }
      }, {
        keys: [["End"]],
        callback: function(f, c) {
          var h = fx(c, 1), d = h[0];
          ux(d, o.TEXTAREA);
        }
      }, {
        keys: [["Control/Meta", "Z"]],
        preventDefault: !1,
        callback: function() {
          o.hot._registerTimeout(function() {
            o.autoResize.resize();
          }, 10);
        }
      }, {
        keys: [["Control/Meta", "Shift", "Z"]],
        preventDefault: !1,
        callback: function() {
          o.hot._registerTimeout(function() {
            o.autoResize.resize();
          }, 10);
        }
      }], l);
    }
    /**
     * Unregister shortcuts responsible for handling editor.
     *
     * @private
     */
  }, {
    key: "unregisterShortcuts",
    value: function() {
      var o = this.hot.getShortcutManager(), i = o.getContext("editor");
      i.removeShortcutsByGroup($g), i.removeShortcutsByGroup(dx), i.removeShortcutsByGroup(G_);
    }
    /**
     * OnAfterDocumentKeyDown callback.
     *
     * @private
     * @param {KeyboardEvent} event The keyboard event object.
     */
  }, {
    key: "onAfterDocumentKeyDown",
    value: function(o) {
      var i = [Ce.ARROW_UP, Ce.ARROW_RIGHT, Ce.ARROW_DOWN, Ce.ARROW_LEFT];
      i.indexOf(o.keyCode) === -1 && this.autoResize.resize(String.fromCharCode(o.keyCode));
    }
  }], [{
    key: "EDITOR_TYPE",
    get: function() {
      return g_e;
    }
  }]), r;
}(Tf), b_e = "base";
function Sv(e, t, r, n, o, i, a) {
  var l = [], s = [];
  a.className && ae(t, a.className), a.readOnly && l.push(a.readOnlyCellClassName), a.valid === !1 && a.invalidCellClassName ? l.push(a.invalidCellClassName) : s.push(a.invalidCellClassName), a.wordWrap === !1 && a.noWordWrapClassName && l.push(a.noWordWrapClassName), !i && a.placeholder && l.push(a.placeholderCellClassName), Le(t, s), ae(t, l);
}
Sv.RENDERER_TYPE = b_e;
var w_e = "text";
function Ii(e, t, r, n, o, i, a) {
  Sv.apply(this, [e, t, r, n, o, i, a]);
  var l = i;
  if (!l && a.placeholder && (l = a.placeholder), l = Ft(l), a.trimWhitespace && (l = l.trim()), a.rendererTemplate) {
    jn(t);
    var s = e.rootDocument.createElement("TEMPLATE");
    s.setAttribute("bind", "{{}}"), s.innerHTML = a.rendererTemplate, HTMLTemplateElement.decorate(s), s.model = e.getSourceDataAtRow(r), t.appendChild(s);
  } else
    xa(t, l);
}
Ii.RENDERER_TYPE = w_e;
var S_e = "text", A2 = {
  CELL_TYPE: S_e,
  editor: nl,
  renderer: Ii
};
$n(A2);
Xe.editors = {
  BaseEditor: Tf
};
function Xe(e, t) {
  var r = new lP(e, t || {}, AT);
  return r.init(), r;
}
Xe.Core = function(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return new lP(e, t, AT);
};
Xe.DefaultSettings = C2();
Xe.hooks = we.getSingleton();
Xe.CellCoords = Kp;
Xe.CellRange = wT;
Xe.packageName = "handsontable";
Xe.buildDate = "23/05/2023 09:21:52";
Xe.version = "12.4.0";
Xe.languages = {
  dictionaryKeys: Vge,
  getLanguageDictionary: u2,
  getLanguagesDictionaries: Xge,
  registerLanguageDictionary: s2,
  getTranslatedPhrase: f2
};
function vx(e, t) {
  var r = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    t && (n = n.filter(function(o) {
      return Object.getOwnPropertyDescriptor(e, o).enumerable;
    })), r.push.apply(r, n);
  }
  return r;
}
function C_e(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? vx(Object(r), !0).forEach(function(n) {
      __e(e, n, r[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : vx(Object(r)).forEach(function(n) {
      Object.defineProperty(e, n, Object.getOwnPropertyDescriptor(r, n));
    });
  }
  return e;
}
function Br(e) {
  "@babel/helpers - typeof";
  return Br = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Br(e);
}
function Ws(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function yx(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, M2(n.key), n);
  }
}
function Us(e, t, r) {
  return t && yx(e.prototype, t), r && yx(e, r), Object.defineProperty(e, "prototype", {
    writable: !1
  }), e;
}
function __e(e, t, r) {
  return t = M2(t), t in e ? Object.defineProperty(e, t, {
    value: r,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[t] = r, e;
}
function zh(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, {
    constructor: {
      value: e,
      writable: !0,
      configurable: !0
    }
  }), Object.defineProperty(e, "prototype", {
    writable: !1
  }), t && q_(e, t);
}
function Tm(e) {
  return Tm = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Tm(e);
}
function q_(e, t) {
  return q_ = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, q_(e, t);
}
function O_e() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function I2(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function R_e(e, t) {
  if (t && (typeof t == "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return I2(e);
}
function Yh(e) {
  var t = O_e();
  return function() {
    var n = Tm(e), o;
    if (t) {
      var i = Tm(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return R_e(this, o);
  };
}
function E_e(e) {
  return T_e(e) || P_e(e) || k_e(e) || $_e();
}
function T_e(e) {
  if (Array.isArray(e))
    return X_(e);
}
function P_e(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function k_e(e, t) {
  if (e) {
    if (typeof e == "string")
      return X_(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return X_(e, t);
  }
}
function X_(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function $_e() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function A_e(e, t) {
  if (typeof e != "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (typeof n != "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function M2(e) {
  var t = A_e(e, "string");
  return typeof t == "symbol" ? t : String(t);
}
var Ww = null, I_e = "Your `HotTable` configuration includes `autoRowSize`/`autoColumnSize` options, which are not compatible with  the component-based renderers`. Disable `autoRowSize` and `autoColumnSize` to prevent row and column misalignment.", M_e = "The Handsontable instance bound to this component was destroyed and cannot be used properly.", Pm = "global", x_e = "hot-wrapper-editor-container";
function D_e() {
  if (typeof console < "u") {
    var e;
    (e = console).warn.apply(e, arguments);
  }
}
function Z_(e, t) {
  var r = zt.Children.toArray(e), n = zt.Children.count(e), o = null;
  return n !== 0 && (n === 1 && r[0].props[t] ? o = r[0] : o = r.find(function(i) {
    return i.props[t] !== void 0;
  })), o || null;
}
function x2(e) {
  return e ? e.type.WrappedComponent ? e.type.WrappedComponent : e.type : null;
}
function D2() {
  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : document, t = arguments.length > 1 ? arguments[1] : void 0;
  if (t === null)
    return null;
  var r = H2(t.props, !1);
  return r.className = "".concat(x_e, " ").concat(r.className), rj.createPortal(zt.createElement("div", Object.assign({}, r), t), e.body);
}
function N2(e, t) {
  var r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : Pm, n = Z_(e, "hot-editor"), o = x2(n);
  return n ? zt.cloneElement(n, {
    emitEditorInstance: function(a, l) {
      t.get(o) || t.set(o, /* @__PURE__ */ new Map());
      var s = t.get(o);
      s.set(l ?? Pm, a);
    },
    editorColumnScope: r,
    isEditor: !0
  }) : null;
}
function N_e(e, t) {
  var r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : document;
  r || (r = document), Ww || (Ww = r.createDocumentFragment());
  var n = r.createElement("DIV");
  Ww.appendChild(n);
  var o = zt.cloneElement(e, C_e({
    key: "".concat(t.row, "-").concat(t.col)
  }, t));
  return {
    portal: rj.createPortal(o, n, "".concat(t.row, "-").concat(t.col, "-").concat(Math.random())),
    portalContainer: n
  };
}
function H2(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
  return {
    id: e.id || (t ? "hot-" + Math.random().toString(36).substring(5) : void 0),
    className: e.className || "",
    style: e.style || {}
  };
}
var L2 = /* @__PURE__ */ function() {
  function e() {
    Ws(this, e);
  }
  return Us(e, null, [{
    key: "getSettings",
    value: (
      /**
       * Parse component settings into Handosntable-compatible settings.
       *
       * @param {Object} properties Object containing properties from the HotTable object.
       * @returns {Object} Handsontable-compatible settings object.
       */
      function(r) {
        var n = {};
        if (r.settings) {
          var o = r.settings;
          for (var i in o)
            o.hasOwnProperty(i) && (n[i] = o[i]);
        }
        for (var a in r)
          a !== "settings" && a !== "children" && r.hasOwnProperty(a) && (n[a] = r[a]);
        return n;
      }
    )
  }]), e;
}(), H_e = /* @__PURE__ */ function(e) {
  zh(r, e);
  var t = Yh(r);
  function r() {
    return Ws(this, r), t.apply(this, arguments);
  }
  return Us(r, [{
    key: "getSettingsProps",
    value: (
      /**
       * Filter out all the internal properties and return an object with just the Handsontable-related props.
       *
       * @returns {Object}
       */
      function() {
        var o = this;
        return this.internalProps = ["_componentRendererColumns", "_emitColumnSettings", "_columnIndex", "_getChildElementByType", "_getRendererWrapper", "_getEditorClass", "_getEditorCache", "_getOwnerDocument", "hot-renderer", "hot-editor", "children"], Object.keys(this.props).filter(function(i) {
          return !o.internalProps.includes(i);
        }).reduce(function(i, a) {
          return i[a] = o.props[a], i;
        }, {});
      }
    )
    /**
     * Get the editor element for the current column.
     *
     * @returns {React.ReactElement} React editor component element.
     */
  }, {
    key: "getLocalEditorElement",
    value: function() {
      return N2(this.props.children, this.props._getEditorCache(), this.props._columnIndex);
    }
    /**
     * Create the column settings based on the data provided to the `HotColumn` component and it's child components.
     */
  }, {
    key: "createColumnSettings",
    value: function() {
      var o = this.props._getChildElementByType(this.props.children, "hot-renderer"), i = this.getLocalEditorElement();
      this.columnSettings = L2.getSettings(this.getSettingsProps()), o !== null && (this.columnSettings.renderer = this.props._getRendererWrapper(o), this.props._componentRendererColumns.set(this.props._columnIndex, !0)), i !== null && (this.columnSettings.editor = this.props._getEditorClass(i, this.props._columnIndex));
    }
    /**
     * Emit the column settings to the parent using a prop passed from the parent.
     */
  }, {
    key: "emitColumnSettings",
    value: function() {
      this.props._emitColumnSettings(this.columnSettings, this.props._columnIndex);
    }
    /*
    ---------------------------------------
    ------- React lifecycle methods -------
    ---------------------------------------
    */
    /**
     * Logic performed after the mounting of the HotColumn component.
     */
  }, {
    key: "componentDidMount",
    value: function() {
      this.createColumnSettings(), this.emitColumnSettings();
    }
    /**
     * Logic performed after the updating of the HotColumn component.
     */
  }, {
    key: "componentDidUpdate",
    value: function() {
      this.createColumnSettings(), this.emitColumnSettings();
    }
    /**
     * Render the portals of the editors, if there are any.
     *
     * @returns {React.ReactElement}
     */
  }, {
    key: "render",
    value: function() {
      var o = this.props._getOwnerDocument(), i = D2(o, this.getLocalEditorElement());
      return zt.createElement(zt.Fragment, null, i);
    }
  }]), r;
}(zt.Component), L_e = /* @__PURE__ */ function(e) {
  zh(r, e);
  var t = Yh(r);
  function r() {
    var n;
    return Ws(this, r), n = t.apply(this, arguments), n.state = {
      portals: []
    }, n;
  }
  return Us(r, [{
    key: "render",
    value: function() {
      return zt.createElement(zt.Fragment, null, this.state.portals);
    }
  }]), r;
}(zt.Component), j_e = "12.4.0";
function sP(e, t) {
  return t = { exports: {} }, e(t, t.exports), t.exports;
}
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var rr = typeof Symbol == "function" && Symbol.for, uP = rr ? Symbol.for("react.element") : 60103, fP = rr ? Symbol.for("react.portal") : 60106, Vg = rr ? Symbol.for("react.fragment") : 60107, Wg = rr ? Symbol.for("react.strict_mode") : 60108, Ug = rr ? Symbol.for("react.profiler") : 60114, zg = rr ? Symbol.for("react.provider") : 60109, Yg = rr ? Symbol.for("react.context") : 60110, cP = rr ? Symbol.for("react.async_mode") : 60111, Gg = rr ? Symbol.for("react.concurrent_mode") : 60111, Kg = rr ? Symbol.for("react.forward_ref") : 60112, qg = rr ? Symbol.for("react.suspense") : 60113, F_e = rr ? Symbol.for("react.suspense_list") : 60120, Xg = rr ? Symbol.for("react.memo") : 60115, Zg = rr ? Symbol.for("react.lazy") : 60116, B_e = rr ? Symbol.for("react.block") : 60121, V_e = rr ? Symbol.for("react.fundamental") : 60117, W_e = rr ? Symbol.for("react.responder") : 60118, U_e = rr ? Symbol.for("react.scope") : 60119;
function Ur(e) {
  if (Br(e) === "object" && e !== null) {
    var t = e.$$typeof;
    switch (t) {
      case uP:
        switch (e = e.type, e) {
          case cP:
          case Gg:
          case Vg:
          case Ug:
          case Wg:
          case qg:
            return e;
          default:
            switch (e = e && e.$$typeof, e) {
              case Yg:
              case Kg:
              case Zg:
              case Xg:
              case zg:
                return e;
              default:
                return t;
            }
        }
      case fP:
        return t;
    }
  }
}
function j2(e) {
  return Ur(e) === Gg;
}
var z_e = cP, Y_e = Gg, G_e = Yg, K_e = zg, q_e = uP, X_e = Kg, Z_e = Vg, Q_e = Zg, J_e = Xg, eOe = fP, tOe = Ug, rOe = Wg, nOe = qg, oOe = function(t) {
  return j2(t) || Ur(t) === cP;
}, iOe = j2, aOe = function(t) {
  return Ur(t) === Yg;
}, lOe = function(t) {
  return Ur(t) === zg;
}, sOe = function(t) {
  return Br(t) === "object" && t !== null && t.$$typeof === uP;
}, uOe = function(t) {
  return Ur(t) === Kg;
}, fOe = function(t) {
  return Ur(t) === Vg;
}, cOe = function(t) {
  return Ur(t) === Zg;
}, hOe = function(t) {
  return Ur(t) === Xg;
}, dOe = function(t) {
  return Ur(t) === fP;
}, vOe = function(t) {
  return Ur(t) === Ug;
}, yOe = function(t) {
  return Ur(t) === Wg;
}, pOe = function(t) {
  return Ur(t) === qg;
}, mOe = function(t) {
  return typeof t == "string" || typeof t == "function" || t === Vg || t === Gg || t === Ug || t === Wg || t === qg || t === F_e || Br(t) === "object" && t !== null && (t.$$typeof === Zg || t.$$typeof === Xg || t.$$typeof === zg || t.$$typeof === Yg || t.$$typeof === Kg || t.$$typeof === V_e || t.$$typeof === W_e || t.$$typeof === U_e || t.$$typeof === B_e);
}, gOe = Ur, bOe = {
  AsyncMode: z_e,
  ConcurrentMode: Y_e,
  ContextConsumer: G_e,
  ContextProvider: K_e,
  Element: q_e,
  ForwardRef: X_e,
  Fragment: Z_e,
  Lazy: Q_e,
  Memo: J_e,
  Portal: eOe,
  Profiler: tOe,
  StrictMode: rOe,
  Suspense: nOe,
  isAsyncMode: oOe,
  isConcurrentMode: iOe,
  isContextConsumer: aOe,
  isContextProvider: lOe,
  isElement: sOe,
  isForwardRef: uOe,
  isFragment: fOe,
  isLazy: cOe,
  isMemo: hOe,
  isPortal: dOe,
  isProfiler: vOe,
  isStrictMode: yOe,
  isSuspense: pOe,
  isValidElementType: mOe,
  typeOf: gOe
}, dt = sP(function(e, t) {
  process.env.NODE_ENV !== "production" && function() {
    var r = typeof Symbol == "function" && Symbol.for, n = r ? Symbol.for("react.element") : 60103, o = r ? Symbol.for("react.portal") : 60106, i = r ? Symbol.for("react.fragment") : 60107, a = r ? Symbol.for("react.strict_mode") : 60108, l = r ? Symbol.for("react.profiler") : 60114, s = r ? Symbol.for("react.provider") : 60109, u = r ? Symbol.for("react.context") : 60110, f = r ? Symbol.for("react.async_mode") : 60111, c = r ? Symbol.for("react.concurrent_mode") : 60111, h = r ? Symbol.for("react.forward_ref") : 60112, d = r ? Symbol.for("react.suspense") : 60113, y = r ? Symbol.for("react.suspense_list") : 60120, p = r ? Symbol.for("react.memo") : 60115, g = r ? Symbol.for("react.lazy") : 60116, w = r ? Symbol.for("react.block") : 60121, C = r ? Symbol.for("react.fundamental") : 60117, _ = r ? Symbol.for("react.responder") : 60118, k = r ? Symbol.for("react.scope") : 60119;
    function E(x) {
      return typeof x == "string" || typeof x == "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      x === i || x === c || x === l || x === a || x === d || x === y || Br(x) === "object" && x !== null && (x.$$typeof === g || x.$$typeof === p || x.$$typeof === s || x.$$typeof === u || x.$$typeof === h || x.$$typeof === C || x.$$typeof === _ || x.$$typeof === k || x.$$typeof === w);
    }
    function j(x) {
      if (Br(x) === "object" && x !== null) {
        var ke = x.$$typeof;
        switch (ke) {
          case n:
            var He = x.type;
            switch (He) {
              case f:
              case c:
              case i:
              case l:
              case a:
              case d:
                return He;
              default:
                var Ee = He && He.$$typeof;
                switch (Ee) {
                  case u:
                  case h:
                  case g:
                  case p:
                  case s:
                    return Ee;
                  default:
                    return ke;
                }
            }
          case o:
            return ke;
        }
      }
    }
    var Y = f, Q = c, X = u, q = s, J = n, le = h, ee = i, U = g, Z = p, oe = o, ie = l, T = a, v = d, m = !1;
    function b(x) {
      return m || (m = !0, console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.")), S(x) || j(x) === f;
    }
    function S(x) {
      return j(x) === c;
    }
    function R(x) {
      return j(x) === u;
    }
    function $(x) {
      return j(x) === s;
    }
    function H(x) {
      return Br(x) === "object" && x !== null && x.$$typeof === n;
    }
    function F(x) {
      return j(x) === h;
    }
    function K(x) {
      return j(x) === i;
    }
    function te(x) {
      return j(x) === g;
    }
    function re(x) {
      return j(x) === p;
    }
    function ce(x) {
      return j(x) === o;
    }
    function Oe(x) {
      return j(x) === l;
    }
    function ve(x) {
      return j(x) === a;
    }
    function ye(x) {
      return j(x) === d;
    }
    t.AsyncMode = Y, t.ConcurrentMode = Q, t.ContextConsumer = X, t.ContextProvider = q, t.Element = J, t.ForwardRef = le, t.Fragment = ee, t.Lazy = U, t.Memo = Z, t.Portal = oe, t.Profiler = ie, t.StrictMode = T, t.Suspense = v, t.isAsyncMode = b, t.isConcurrentMode = S, t.isContextConsumer = R, t.isContextProvider = $, t.isElement = H, t.isForwardRef = F, t.isFragment = K, t.isLazy = te, t.isMemo = re, t.isPortal = ce, t.isProfiler = Oe, t.isStrictMode = ve, t.isSuspense = ye, t.isValidElementType = E, t.typeOf = j;
  }();
});
dt.AsyncMode;
dt.ConcurrentMode;
dt.ContextConsumer;
dt.ContextProvider;
dt.Element;
dt.ForwardRef;
dt.Fragment;
dt.Lazy;
dt.Memo;
dt.Portal;
dt.Profiler;
dt.StrictMode;
dt.Suspense;
dt.isAsyncMode;
dt.isConcurrentMode;
dt.isContextConsumer;
dt.isContextProvider;
dt.isElement;
dt.isForwardRef;
dt.isFragment;
dt.isLazy;
dt.isMemo;
dt.isPortal;
dt.isProfiler;
dt.isStrictMode;
dt.isSuspense;
dt.isValidElementType;
dt.typeOf;
var F2 = sP(function(e) {
  process.env.NODE_ENV === "production" ? e.exports = bOe : e.exports = dt;
});
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var px = Object.getOwnPropertySymbols, wOe = Object.prototype.hasOwnProperty, SOe = Object.prototype.propertyIsEnumerable;
function COe(e) {
  if (e == null)
    throw new TypeError("Object.assign cannot be called with null or undefined");
  return Object(e);
}
function _Oe() {
  try {
    if (!Object.assign)
      return !1;
    var e = new String("abc");
    if (e[5] = "de", Object.getOwnPropertyNames(e)[0] === "5")
      return !1;
    for (var t = {}, r = 0; r < 10; r++)
      t["_" + String.fromCharCode(r)] = r;
    var n = Object.getOwnPropertyNames(t).map(function(i) {
      return t[i];
    });
    if (n.join("") !== "0123456789")
      return !1;
    var o = {};
    return "abcdefghijklmnopqrst".split("").forEach(function(i) {
      o[i] = i;
    }), Object.keys(Object.assign({}, o)).join("") === "abcdefghijklmnopqrst";
  } catch {
    return !1;
  }
}
var OOe = _Oe() ? Object.assign : function(e, t) {
  for (var r, n = COe(e), o, i = 1; i < arguments.length; i++) {
    r = Object(arguments[i]);
    for (var a in r)
      wOe.call(r, a) && (n[a] = r[a]);
    if (px) {
      o = px(r);
      for (var l = 0; l < o.length; l++)
        SOe.call(r, o[l]) && (n[o[l]] = r[o[l]]);
    }
  }
  return n;
}, ROe = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED", ii = ROe, cp = Function.call.bind(Object.prototype.hasOwnProperty), Q_ = function() {
};
if (process.env.NODE_ENV !== "production") {
  var EOe = ii, J_ = {}, TOe = cp;
  Q_ = function(t) {
    var r = "Warning: " + t;
    typeof console < "u" && console.error(r);
    try {
      throw new Error(r);
    } catch {
    }
  };
}
function B2(e, t, r, n, o) {
  if (process.env.NODE_ENV !== "production") {
    for (var i in e)
      if (TOe(e, i)) {
        var a;
        try {
          if (typeof e[i] != "function") {
            var l = Error((n || "React class") + ": " + r + " type `" + i + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + Br(e[i]) + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
            throw l.name = "Invariant Violation", l;
          }
          a = e[i](t, i, n, r, null, EOe);
        } catch (u) {
          a = u;
        }
        if (a && !(a instanceof Error) && Q_((n || "React class") + ": type specification of " + r + " `" + i + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + Br(a) + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."), a instanceof Error && !(a.message in J_)) {
          J_[a.message] = !0;
          var s = o ? o() : "";
          Q_("Failed " + r + " type: " + a.message + (s ?? ""));
        }
      }
  }
}
B2.resetWarningCache = function() {
  process.env.NODE_ENV !== "production" && (J_ = {});
};
var mx = B2, Fl = function() {
};
process.env.NODE_ENV !== "production" && (Fl = function(t) {
  var r = "Warning: " + t;
  typeof console < "u" && console.error(r);
  try {
    throw new Error(r);
  } catch {
  }
});
function fy() {
  return null;
}
var POe = function(t, r) {
  var n = typeof Symbol == "function" && Symbol.iterator, o = "@@iterator";
  function i(U) {
    var Z = U && (n && U[n] || U[o]);
    if (typeof Z == "function")
      return Z;
  }
  var a = "<<anonymous>>", l = {
    array: c("array"),
    bigint: c("bigint"),
    bool: c("boolean"),
    func: c("function"),
    number: c("number"),
    object: c("object"),
    string: c("string"),
    symbol: c("symbol"),
    any: h(),
    arrayOf: d,
    element: y(),
    elementType: p(),
    instanceOf: g,
    node: k(),
    objectOf: C,
    oneOf: w,
    oneOfType: _,
    shape: j,
    exact: Y
  };
  function s(U, Z) {
    return U === Z ? U !== 0 || 1 / U === 1 / Z : U !== U && Z !== Z;
  }
  function u(U, Z) {
    this.message = U, this.data = Z && Br(Z) === "object" ? Z : {}, this.stack = "";
  }
  u.prototype = Error.prototype;
  function f(U) {
    if (process.env.NODE_ENV !== "production")
      var Z = {}, oe = 0;
    function ie(v, m, b, S, R, $, H) {
      if (S = S || a, $ = $ || b, H !== ii) {
        if (r) {
          var F = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
          throw F.name = "Invariant Violation", F;
        } else if (process.env.NODE_ENV !== "production" && typeof console < "u") {
          var K = S + ":" + b;
          !Z[K] && // Avoid spamming the console because they are often not actionable except for lib authors
          oe < 3 && (Fl("You are manually calling a React.PropTypes validation function for the `" + $ + "` prop on `" + S + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."), Z[K] = !0, oe++);
        }
      }
      return m[b] == null ? v ? m[b] === null ? new u("The " + R + " `" + $ + "` is marked as required " + ("in `" + S + "`, but its value is `null`.")) : new u("The " + R + " `" + $ + "` is marked as required in " + ("`" + S + "`, but its value is `undefined`.")) : null : U(m, b, S, R, $);
    }
    var T = ie.bind(null, !1);
    return T.isRequired = ie.bind(null, !0), T;
  }
  function c(U) {
    function Z(oe, ie, T, v, m, b) {
      var S = oe[ie], R = q(S);
      if (R !== U) {
        var $ = J(S);
        return new u("Invalid " + v + " `" + m + "` of type " + ("`" + $ + "` supplied to `" + T + "`, expected ") + ("`" + U + "`."), {
          expectedType: U
        });
      }
      return null;
    }
    return f(Z);
  }
  function h() {
    return f(fy);
  }
  function d(U) {
    function Z(oe, ie, T, v, m) {
      if (typeof U != "function")
        return new u("Property `" + m + "` of component `" + T + "` has invalid PropType notation inside arrayOf.");
      var b = oe[ie];
      if (!Array.isArray(b)) {
        var S = q(b);
        return new u("Invalid " + v + " `" + m + "` of type " + ("`" + S + "` supplied to `" + T + "`, expected an array."));
      }
      for (var R = 0; R < b.length; R++) {
        var $ = U(b, R, T, v, m + "[" + R + "]", ii);
        if ($ instanceof Error)
          return $;
      }
      return null;
    }
    return f(Z);
  }
  function y() {
    function U(Z, oe, ie, T, v) {
      var m = Z[oe];
      if (!t(m)) {
        var b = q(m);
        return new u("Invalid " + T + " `" + v + "` of type " + ("`" + b + "` supplied to `" + ie + "`, expected a single ReactElement."));
      }
      return null;
    }
    return f(U);
  }
  function p() {
    function U(Z, oe, ie, T, v) {
      var m = Z[oe];
      if (!F2.isValidElementType(m)) {
        var b = q(m);
        return new u("Invalid " + T + " `" + v + "` of type " + ("`" + b + "` supplied to `" + ie + "`, expected a single ReactElement type."));
      }
      return null;
    }
    return f(U);
  }
  function g(U) {
    function Z(oe, ie, T, v, m) {
      if (!(oe[ie] instanceof U)) {
        var b = U.name || a, S = ee(oe[ie]);
        return new u("Invalid " + v + " `" + m + "` of type " + ("`" + S + "` supplied to `" + T + "`, expected ") + ("instance of `" + b + "`."));
      }
      return null;
    }
    return f(Z);
  }
  function w(U) {
    if (!Array.isArray(U))
      return process.env.NODE_ENV !== "production" && (arguments.length > 1 ? Fl("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).") : Fl("Invalid argument supplied to oneOf, expected an array.")), fy;
    function Z(oe, ie, T, v, m) {
      for (var b = oe[ie], S = 0; S < U.length; S++)
        if (s(b, U[S]))
          return null;
      var R = JSON.stringify(U, function(H, F) {
        var K = J(F);
        return K === "symbol" ? String(F) : F;
      });
      return new u("Invalid " + v + " `" + m + "` of value `" + String(b) + "` " + ("supplied to `" + T + "`, expected one of " + R + "."));
    }
    return f(Z);
  }
  function C(U) {
    function Z(oe, ie, T, v, m) {
      if (typeof U != "function")
        return new u("Property `" + m + "` of component `" + T + "` has invalid PropType notation inside objectOf.");
      var b = oe[ie], S = q(b);
      if (S !== "object")
        return new u("Invalid " + v + " `" + m + "` of type " + ("`" + S + "` supplied to `" + T + "`, expected an object."));
      for (var R in b)
        if (cp(b, R)) {
          var $ = U(b, R, T, v, m + "." + R, ii);
          if ($ instanceof Error)
            return $;
        }
      return null;
    }
    return f(Z);
  }
  function _(U) {
    if (!Array.isArray(U))
      return process.env.NODE_ENV !== "production" && Fl("Invalid argument supplied to oneOfType, expected an instance of array."), fy;
    for (var Z = 0; Z < U.length; Z++) {
      var oe = U[Z];
      if (typeof oe != "function")
        return Fl("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + le(oe) + " at index " + Z + "."), fy;
    }
    function ie(T, v, m, b, S) {
      for (var R = [], $ = 0; $ < U.length; $++) {
        var H = U[$], F = H(T, v, m, b, S, ii);
        if (F == null)
          return null;
        F.data && cp(F.data, "expectedType") && R.push(F.data.expectedType);
      }
      var K = R.length > 0 ? ", expected one of type [" + R.join(", ") + "]" : "";
      return new u("Invalid " + b + " `" + S + "` supplied to " + ("`" + m + "`" + K + "."));
    }
    return f(ie);
  }
  function k() {
    function U(Z, oe, ie, T, v) {
      return Q(Z[oe]) ? null : new u("Invalid " + T + " `" + v + "` supplied to " + ("`" + ie + "`, expected a ReactNode."));
    }
    return f(U);
  }
  function E(U, Z, oe, ie, T) {
    return new u((U || "React class") + ": " + Z + " type `" + oe + "." + ie + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + T + "`.");
  }
  function j(U) {
    function Z(oe, ie, T, v, m) {
      var b = oe[ie], S = q(b);
      if (S !== "object")
        return new u("Invalid " + v + " `" + m + "` of type `" + S + "` " + ("supplied to `" + T + "`, expected `object`."));
      for (var R in U) {
        var $ = U[R];
        if (typeof $ != "function")
          return E(T, v, m, R, J($));
        var H = $(b, R, T, v, m + "." + R, ii);
        if (H)
          return H;
      }
      return null;
    }
    return f(Z);
  }
  function Y(U) {
    function Z(oe, ie, T, v, m) {
      var b = oe[ie], S = q(b);
      if (S !== "object")
        return new u("Invalid " + v + " `" + m + "` of type `" + S + "` " + ("supplied to `" + T + "`, expected `object`."));
      var R = OOe({}, oe[ie], U);
      for (var $ in R) {
        var H = U[$];
        if (cp(U, $) && typeof H != "function")
          return E(T, v, m, $, J(H));
        if (!H)
          return new u("Invalid " + v + " `" + m + "` key `" + $ + "` supplied to `" + T + "`.\nBad object: " + JSON.stringify(oe[ie], null, "  ") + `
Valid keys: ` + JSON.stringify(Object.keys(U), null, "  "));
        var F = H(b, $, T, v, m + "." + $, ii);
        if (F)
          return F;
      }
      return null;
    }
    return f(Z);
  }
  function Q(U) {
    switch (Br(U)) {
      case "number":
      case "string":
      case "undefined":
        return !0;
      case "boolean":
        return !U;
      case "object":
        if (Array.isArray(U))
          return U.every(Q);
        if (U === null || t(U))
          return !0;
        var Z = i(U);
        if (Z) {
          var oe = Z.call(U), ie;
          if (Z !== U.entries) {
            for (; !(ie = oe.next()).done; )
              if (!Q(ie.value))
                return !1;
          } else
            for (; !(ie = oe.next()).done; ) {
              var T = ie.value;
              if (T && !Q(T[1]))
                return !1;
            }
        } else
          return !1;
        return !0;
      default:
        return !1;
    }
  }
  function X(U, Z) {
    return U === "symbol" ? !0 : Z ? Z["@@toStringTag"] === "Symbol" || typeof Symbol == "function" && Z instanceof Symbol : !1;
  }
  function q(U) {
    var Z = Br(U);
    return Array.isArray(U) ? "array" : U instanceof RegExp ? "object" : X(Z, U) ? "symbol" : Z;
  }
  function J(U) {
    if (typeof U > "u" || U === null)
      return "" + U;
    var Z = q(U);
    if (Z === "object") {
      if (U instanceof Date)
        return "date";
      if (U instanceof RegExp)
        return "regexp";
    }
    return Z;
  }
  function le(U) {
    var Z = J(U);
    switch (Z) {
      case "array":
      case "object":
        return "an " + Z;
      case "boolean":
      case "date":
      case "regexp":
        return "a " + Z;
      default:
        return Z;
    }
  }
  function ee(U) {
    return !U.constructor || !U.constructor.name ? a : U.constructor.name;
  }
  return l.checkPropTypes = mx, l.resetWarningCache = mx.resetWarningCache, l.PropTypes = l, l;
};
function V2() {
}
function W2() {
}
W2.resetWarningCache = V2;
var kOe = function() {
  function t(o, i, a, l, s, u) {
    if (u !== ii) {
      var f = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
      throw f.name = "Invariant Violation", f;
    }
  }
  t.isRequired = t;
  function r() {
    return t;
  }
  var n = {
    array: t,
    bigint: t,
    bool: t,
    func: t,
    number: t,
    object: t,
    string: t,
    symbol: t,
    any: t,
    arrayOf: r,
    element: t,
    elementType: t,
    instanceOf: r,
    node: t,
    objectOf: r,
    oneOf: r,
    oneOfType: r,
    shape: r,
    exact: r,
    checkPropTypes: W2,
    resetWarningCache: V2
  };
  return n.PropTypes = n, n;
}, $Oe = sP(function(e) {
  if (process.env.NODE_ENV !== "production") {
    var t = F2, r = !0;
    e.exports = POe(t.isElement, r);
  } else
    e.exports = kOe();
}), Uw = $Oe, U2 = /* @__PURE__ */ function(e) {
  zh(r, e);
  var t = Yh(r);
  function r() {
    var n;
    return Ws(this, r), n = t.apply(this, arguments), n.id = null, n.__hotInstance = null, n.hotElementRef = null, n.columnSettings = [], n.renderersPortalManager = null, n.portalCacheArray = [], n.renderedCellCache = /* @__PURE__ */ new Map(), n.editorCache = /* @__PURE__ */ new Map(), n.componentRendererColumns = /* @__PURE__ */ new Map(), n;
  }
  return Us(r, [{
    key: "hotInstance",
    get: (
      /**
       * Getter for the property storing the Handsontable instance.
       */
      function() {
        return !this.__hotInstance || this.__hotInstance && !this.__hotInstance.isDestroyed ? this.__hotInstance : (console.warn(M_e), null);
      }
    ),
    set: function(o) {
      this.__hotInstance = o;
    }
    /**
     * Get the rendered table cell cache.
     *
     * @returns {Map}
     */
  }, {
    key: "getRenderedCellCache",
    value: function() {
      return this.renderedCellCache;
    }
    /**
     * Get the editor cache and return it.
     *
     * @returns {Map}
     */
  }, {
    key: "getEditorCache",
    value: function() {
      return this.editorCache;
    }
    /**
     * Clear both the editor and the renderer cache.
     */
  }, {
    key: "clearCache",
    value: function() {
      this.getRenderedCellCache().clear(), this.componentRendererColumns.clear();
    }
    /**
     * Get the `Document` object corresponding to the main component element.
     *
     * @returns The `Document` object used by the component.
     */
  }, {
    key: "getOwnerDocument",
    value: function() {
      return this.hotElementRef ? this.hotElementRef.ownerDocument : document;
    }
    /**
     * Set the reference to the main Handsontable DOM element.
     *
     * @param {HTMLElement} element The main Handsontable DOM element.
     */
  }, {
    key: "setHotElementRef",
    value: function(o) {
      this.hotElementRef = o;
    }
    /**
     * Return a renderer wrapper function for the provided renderer component.
     *
     * @param {React.ReactElement} rendererElement React renderer component.
     * @returns {Handsontable.renderers.Base} The Handsontable rendering function.
     */
  }, {
    key: "getRendererWrapper",
    value: function(o) {
      var i = this;
      return function(a, l, s, u, f, c, h) {
        var d = i.getRenderedCellCache();
        if (d.has("".concat(s, "-").concat(u)) && (l.innerHTML = d.get("".concat(s, "-").concat(u)).innerHTML), l && !l.getAttribute("ghost-table")) {
          for (var y = N_e(o, {
            TD: l,
            row: s,
            col: u,
            prop: f,
            value: c,
            cellProperties: h,
            isRenderer: !0
          }, l.ownerDocument), p = y.portal, g = y.portalContainer; l.firstChild; )
            l.removeChild(l.firstChild);
          l.appendChild(g), i.portalCacheArray.push(p);
        }
        return d.set("".concat(s, "-").concat(u), l), l;
      };
    }
    /**
     * Create a fresh class to be used as an editor, based on the provided editor React element.
     *
     * @param {React.ReactElement} editorElement React editor component.
     * @param {string|number} [editorColumnScope] The editor scope (column index or a 'global' string). Defaults to
     * 'global'.
     * @returns {Function} A class to be passed to the Handsontable editor settings.
     */
  }, {
    key: "getEditorClass",
    value: function(o) {
      var i, a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Pm, l = x2(o), s = (i = this.getEditorCache().get(l)) === null || i === void 0 ? void 0 : i.get(a);
      return this.makeEditorClass(s);
    }
    /**
     * Create a class to be passed to the Handsontable's settings.
     *
     * @param {React.ReactElement} editorComponent React editor component.
     * @returns {Function} A class to be passed to the Handsontable editor settings.
     */
  }, {
    key: "makeEditorClass",
    value: function(o) {
      var i = /* @__PURE__ */ function(a) {
        zh(s, a);
        var l = Yh(s);
        function s(u) {
          var f;
          return Ws(this, s), f = l.call(this, u), o.hotCustomEditorInstance = I2(f), f.editorComponent = o, f;
        }
        return Us(s, [{
          key: "focus",
          value: function() {
          }
        }, {
          key: "getValue",
          value: function() {
          }
        }, {
          key: "setValue",
          value: function() {
          }
        }, {
          key: "open",
          value: function() {
          }
        }, {
          key: "close",
          value: function() {
          }
        }]), s;
      }(Xe.editors.BaseEditor);
      return Object.getOwnPropertyNames(Xe.editors.BaseEditor.prototype).forEach(function(a) {
        a !== "constructor" && (i.prototype[a] = function() {
          for (var l, s = arguments.length, u = new Array(s), f = 0; f < s; f++)
            u[f] = arguments[f];
          return (l = o[a]).call.apply(l, [o].concat(u));
        });
      }), i;
    }
    /**
     * Get the renderer element for the entire HotTable instance.
     *
     * @returns {React.ReactElement} React renderer component element.
     */
  }, {
    key: "getGlobalRendererElement",
    value: function() {
      return Z_(this.props.children, "hot-renderer");
    }
    /**
     * Get the editor element for the entire HotTable instance.
     *
     * @param {React.ReactNode} [children] Children of the HotTable instance. Defaults to `this.props.children`.
     * @returns {React.ReactElement} React editor component element.
     */
  }, {
    key: "getGlobalEditorElement",
    value: function() {
      return N2(this.props.children, this.getEditorCache());
    }
    /**
     * Create a new settings object containing the column settings and global editors and renderers.
     *
     * @returns {Handsontable.GridSettings} New global set of settings for Handsontable.
     */
  }, {
    key: "createNewGlobalSettings",
    value: function() {
      var o = L2.getSettings(this.props), i = this.getGlobalRendererElement(), a = this.getGlobalEditorElement();
      return o.columns = this.columnSettings.length ? this.columnSettings : o.columns, a ? o.editor = this.getEditorClass(a, Pm) : o.editor = this.props.editor || (this.props.settings ? this.props.settings.editor : void 0), i ? (o.renderer = this.getRendererWrapper(i), this.componentRendererColumns.set("global", !0)) : o.renderer = this.props.renderer || (this.props.settings ? this.props.settings.renderer : void 0), o;
    }
    /**
     * Detect if `autoRowSize` or `autoColumnSize` is defined, and if so, throw an incompatibility warning.
     *
     * @param {Handsontable.GridSettings} newGlobalSettings New global settings passed as Handsontable config.
     */
  }, {
    key: "displayAutoSizeWarning",
    value: function(o) {
      var i, a;
      this.hotInstance && ((i = this.hotInstance.getPlugin("autoRowSize")) !== null && i !== void 0 && i.enabled || (a = this.hotInstance.getPlugin("autoColumnSize")) !== null && a !== void 0 && a.enabled) && this.componentRendererColumns.size > 0 && D_e(I_e);
    }
    /**
     * Sets the column settings based on information received from HotColumn.
     *
     * @param {HotTableProps} columnSettings Column settings object.
     * @param {Number} columnIndex Column index.
     */
  }, {
    key: "setHotColumnSettings",
    value: function(o, i) {
      this.columnSettings[i] = o;
    }
    /**
     * Handsontable's `beforeViewRender` hook callback.
     */
  }, {
    key: "handsontableBeforeViewRender",
    value: function() {
      this.getRenderedCellCache().clear();
    }
    /**
     * Handsontable's `afterViewRender` hook callback.
     */
  }, {
    key: "handsontableAfterViewRender",
    value: function() {
      var o = this;
      this.renderersPortalManager.setState({
        portals: E_e(this.portalCacheArray)
      }, function() {
        o.portalCacheArray = [];
      });
    }
    /**
     * Call the `updateSettings` method for the Handsontable instance.
     *
     * @param {Object} newSettings The settings object.
     */
  }, {
    key: "updateHot",
    value: function(o) {
      this.hotInstance && this.hotInstance.updateSettings(o, !1);
    }
    /**
     * Set the renderers portal manager ref.
     *
     * @param {React.ReactComponent} pmComponent The PortalManager component.
     */
  }, {
    key: "setRenderersPortalManagerRef",
    value: function(o) {
      this.renderersPortalManager = o;
    }
    /*
    ---------------------------------------
    ------- React lifecycle methods -------
    ---------------------------------------
    */
    /**
     * Initialize Handsontable after the component has mounted.
     */
  }, {
    key: "componentDidMount",
    value: function() {
      var o = this, i = this.createNewGlobalSettings();
      this.hotInstance = new Xe.Core(this.hotElementRef, i), this.hotInstance.addHook("beforeViewRender", function() {
        return o.handsontableBeforeViewRender();
      }), this.hotInstance.addHook("afterViewRender", function() {
        return o.handsontableAfterViewRender();
      }), this.hotInstance.init(), this.displayAutoSizeWarning(i);
    }
    /**
     * Logic performed after the component update.
     */
  }, {
    key: "componentDidUpdate",
    value: function() {
      this.clearCache();
      var o = this.createNewGlobalSettings();
      this.updateHot(o), this.displayAutoSizeWarning(o);
    }
    /**
     * Destroy the Handsontable instance when the parent component unmounts.
     */
  }, {
    key: "componentWillUnmount",
    value: function() {
      this.clearCache(), this.hotInstance && this.hotInstance.destroy();
    }
    /**
     * Render the component.
     */
  }, {
    key: "render",
    value: function() {
      var o = this, i = H2(this.props), a = function(c) {
        return c.type === H_e;
      }, l = zt.Children.toArray(this.props.children), s = l.filter(function(f) {
        return a(f);
      }).map(function(f, c) {
        return zt.cloneElement(f, {
          _componentRendererColumns: o.componentRendererColumns,
          _emitColumnSettings: o.setHotColumnSettings.bind(o),
          _columnIndex: c,
          _getChildElementByType: Z_.bind(o),
          _getRendererWrapper: o.getRendererWrapper.bind(o),
          _getEditorClass: o.getEditorClass.bind(o),
          _getOwnerDocument: o.getOwnerDocument.bind(o),
          _getEditorCache: o.getEditorCache.bind(o),
          children: f.props.children
        });
      }), u = D2(this.getOwnerDocument(), this.getGlobalEditorElement());
      return zt.createElement(zt.Fragment, null, zt.createElement("div", Object.assign({
        ref: this.setHotElementRef.bind(this)
      }, i), s), zt.createElement(L_e, {
        ref: this.setRenderersPortalManagerRef.bind(this)
      }), u);
    }
  }], [{
    key: "version",
    get: function() {
      return j_e;
    }
  }]), r;
}(zt.Component);
U2.propTypes = {
  style: Uw.object,
  id: Uw.string,
  className: Uw.string
};
zt.Component;
function zs(e) {
  "@babel/helpers - typeof";
  return zs = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, zs(e);
}
function AOe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function gx(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, MOe(n.key), n);
  }
}
function IOe(e, t, r) {
  return t && gx(e.prototype, t), r && gx(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function MOe(e) {
  var t = xOe(e, "string");
  return zs(t) === "symbol" ? t : String(t);
}
function xOe(e, t) {
  if (zs(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (zs(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function un() {
  return typeof Reflect < "u" && Reflect.get ? un = Reflect.get.bind() : un = function(t, r, n) {
    var o = DOe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, un.apply(this, arguments);
}
function DOe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Lr(e), e !== null); )
    ;
  return e;
}
function NOe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && eO(e, t);
}
function eO(e, t) {
  return eO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, eO(e, t);
}
function HOe(e) {
  var t = FOe();
  return function() {
    var n = Lr(e), o;
    if (t) {
      var i = Lr(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return LOe(this, o);
  };
}
function LOe(e, t) {
  if (t && (zs(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return jOe(e);
}
function jOe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function FOe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Lr(e) {
  return Lr = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Lr(e);
}
var bx = "handsontableEditor", BOe = "handsontable", hP = /* @__PURE__ */ function(e) {
  NOe(r, e);
  var t = HOe(r);
  function r() {
    return AOe(this, r), t.apply(this, arguments);
  }
  return IOe(r, [{
    key: "open",
    value: (
      /**
       * Opens the editor and adjust its size.
       */
      function() {
        un(Lr(r.prototype), "open", this).call(this), this.htEditor && this.htEditor.destroy(), this.htContainer.style.display === "none" && (this.htContainer.style.display = ""), this.htEditor = new this.hot.constructor(this.htContainer, this.htOptions), this.htEditor.init(), this.htEditor.rootElement.style.display = "", this.cellProperties.strict ? this.htEditor.selectCell(0, 0) : this.htEditor.deselectCell(), Pg(this.TEXTAREA, 0, this.TEXTAREA.value.length), this.refreshDimensions();
      }
    )
    /**
     * Closes the editor.
     */
  }, {
    key: "close",
    value: function() {
      this.htEditor && (this.htEditor.rootElement.style.display = "none"), this.removeHooksByKey("beforeKeyDown"), un(Lr(r.prototype), "close", this).call(this);
    }
    /**
     * Prepares editor's meta data and configuration of the internal Handsontable's instance.
     *
     * @param {number} row The visual row index.
     * @param {number} col The visual column index.
     * @param {number|string} prop The column property (passed when datasource is an array of objects).
     * @param {HTMLTableCellElement} td The rendered cell element.
     * @param {*} value The rendered value.
     * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
     */
  }, {
    key: "prepare",
    value: function(o, i, a, l, s, u) {
      un(Lr(r.prototype), "prepare", this).call(this, o, i, a, l, s, u);
      var f = this, c = {
        startRows: 0,
        startCols: 0,
        minRows: 0,
        minCols: 0,
        className: "listbox",
        copyPaste: !1,
        autoColumnSize: !1,
        autoRowSize: !1,
        readOnly: !0,
        fillHandle: !1,
        autoWrapCol: !1,
        autoWrapRow: !1,
        afterOnCellMouseDown: function(d, y) {
          var p = this.getSourceData(y.row, y.col);
          p !== void 0 && f.setValue(p), f.instance.destroyEditor();
        },
        preventWheel: !0,
        layoutDirection: this.hot.isRtl() ? "rtl" : "ltr"
      };
      this.cellProperties.handsontable && Gt(c, u.handsontable), this.htOptions = c;
    }
    /**
     * Begins editing on a highlighted cell and hides fillHandle corner if was present.
     *
     * @param {*} newInitialValue The editor initial value.
     * @param {*} event The keyboard event object.
     */
  }, {
    key: "beginEditing",
    value: function(o, i) {
      var a = this.hot.getSettings().onBeginEditing;
      a && a() === !1 || un(Lr(r.prototype), "beginEditing", this).call(this, o, i);
    }
    /**
     * Creates an editor's elements and adds necessary CSS classnames.
     */
  }, {
    key: "createElements",
    value: function() {
      un(Lr(r.prototype), "createElements", this).call(this);
      var o = this.hot.rootDocument.createElement("DIV");
      o.className = "handsontableEditor", this.TEXTAREA_PARENT.appendChild(o), this.htContainer = o, this.assignHooks();
    }
    /**
     * Finishes editing and start saving or restoring process for editing cell or last selected range.
     *
     * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.
     * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.
     * @param {Function} callback The callback function, fired after editor closing.
     */
  }, {
    key: "finishEditing",
    value: function(o, i, a) {
      if (this.htEditor && this.htEditor.isListening() && this.hot.listen(), this.htEditor && this.htEditor.getSelectedLast()) {
        var l = this.htEditor.getInstance().getValue();
        l !== void 0 && this.setValue(l);
      }
      un(Lr(r.prototype), "finishEditing", this).call(this, o, i, a);
    }
    /**
     * Assings afterDestroy callback to prevent memory leaks.
     *
     * @private
     */
  }, {
    key: "assignHooks",
    value: function() {
      var o = this;
      this.hot.addHook("afterDestroy", function() {
        o.htEditor && o.htEditor.destroy();
      });
    }
    /**
     * Register shortcuts responsible for handling editor.
     *
     * @private
     */
  }, {
    key: "registerShortcuts",
    value: function() {
      var o = this, i = this.hot.getShortcutManager(), a = i.getContext("editor");
      un(Lr(r.prototype), "registerShortcuts", this).call(this);
      var l = {
        group: bx,
        relativeToGroup: $g,
        position: "before"
      }, s = function(f, c) {
        var h = o.htEditor.getInstance();
        if (f !== void 0 && (f < 0 || h.flipped && f > h.countRows() - 1 ? h.deselectCell() : h.selectCell(f, 0), h.getData().length))
          return c.preventDefault(), Fn(c), o.hot.listen(), o.TEXTAREA.focus(), !1;
      };
      a.addShortcuts([{
        keys: [["ArrowUp"]],
        callback: function(f) {
          var c = o.htEditor.getInstance(), h, d;
          return !c.getSelectedLast() && c.flipped ? h = c.countRows() - 1 : c.getSelectedLast() && (c.flipped ? (d = c.getSelectedLast()[0], h = Math.max(0, d - 1)) : (d = c.getSelectedLast()[0], h = d - 1)), s(h, f);
        },
        preventDefault: !1
        // Doesn't block default behaviour (navigation) for a `textArea` HTMLElement.
      }, {
        keys: [["ArrowDown"]],
        callback: function(f) {
          var c = o.htEditor.getInstance(), h, d;
          if (!c.getSelectedLast() && !c.flipped)
            h = 0;
          else if (c.getSelectedLast()) {
            if (c.flipped)
              h = c.getSelectedLast()[0] + 1;
            else if (!c.flipped) {
              var y = c.countRows() - 1;
              d = c.getSelectedLast()[0], h = Math.min(y, d + 1);
            }
          }
          return s(h, f);
        },
        preventDefault: !1
        // Doesn't block default behaviour (navigation) for a `textArea` HTMLElement.
      }], l);
    }
    /**
     * Unregister shortcuts responsible for handling editor.
     *
     * @private
     */
  }, {
    key: "unregisterShortcuts",
    value: function() {
      un(Lr(r.prototype), "unregisterShortcuts", this).call(this);
      var o = this.hot.getShortcutManager(), i = o.getContext("editor");
      i.removeShortcutsByGroup(bx);
    }
  }], [{
    key: "EDITOR_TYPE",
    get: function() {
      return BOe;
    }
  }]), r;
}(nl);
function Ys(e) {
  "@babel/helpers - typeof";
  return Ys = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Ys(e);
}
function VOe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function wx(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, z2(n.key), n);
  }
}
function WOe(e, t, r) {
  return t && wx(e.prototype, t), r && wx(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function ra() {
  return typeof Reflect < "u" && Reflect.get ? ra = Reflect.get.bind() : ra = function(t, r, n) {
    var o = UOe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, ra.apply(this, arguments);
}
function UOe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = fo(e), e !== null); )
    ;
  return e;
}
function zOe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && tO(e, t);
}
function tO(e, t) {
  return tO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, tO(e, t);
}
function YOe(e) {
  var t = KOe();
  return function() {
    var n = fo(e), o;
    if (t) {
      var i = fo(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return GOe(this, o);
  };
}
function GOe(e, t) {
  if (t && (Ys(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return rO(e);
}
function rO(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function KOe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function fo(e) {
  return fo = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, fo(e);
}
function qOe(e, t, r) {
  return t = z2(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function z2(e) {
  var t = XOe(e, "string");
  return Ys(t) === "symbol" ? t : String(t);
}
function XOe(e, t) {
  if (Ys(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Ys(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var zw = /* @__PURE__ */ new WeakMap(), ZOe = "autocomplete", dP = /* @__PURE__ */ function(e) {
  zOe(r, e);
  var t = YOe(r);
  function r(n) {
    var o;
    return VOe(this, r), o = t.call(this, n), qOe(rO(o), "sortByRelevance", function(i, a, l) {
      var s = [], u = [], f = i.length, c = a.length, h, d, y, p;
      if (f === 0) {
        for (y = 0; y < c; y++)
          u.push(y);
        return u;
      }
      for (y = 0; y < c; y++) {
        if (d = JA(Ft(a[y])), l)
          p = d.indexOf(i);
        else {
          var g = this.cellProperties.locale;
          p = d.toLocaleLowerCase(g).indexOf(i.toLocaleLowerCase(g));
        }
        p !== -1 && (h = d.length - p - f, s.push({
          baseIndex: y,
          index: p,
          charsLeft: h,
          value: d
        }));
      }
      for (s.sort(function(w, C) {
        if (C.index === -1)
          return -1;
        if (w.index === -1)
          return 1;
        if (w.index < C.index)
          return -1;
        if (C.index < w.index)
          return 1;
        if (w.index === C.index) {
          if (w.charsLeft < C.charsLeft)
            return -1;
          if (w.charsLeft > C.charsLeft)
            return 1;
        }
        return 0;
      }), y = 0, c = s.length; y < c; y++)
        u.push(s[y].baseIndex);
      return u;
    }), o.query = null, o.strippedChoices = [], o.rawChoices = [], zw.set(rO(o), {
      skipOne: !1,
      isMacOS: o.hot.rootWindow.navigator.platform.indexOf("Mac") > -1
    }), o;
  }
  return WOe(r, [{
    key: "getValue",
    value: function() {
      var o = this, i = this.rawChoices.find(function(a) {
        var l = o.stripValueIfNeeded(a);
        return l === o.TEXTAREA.value;
      });
      return be(i) ? i : this.TEXTAREA.value;
    }
    /**
     * Creates an editor's elements and adds necessary CSS classnames.
     */
  }, {
    key: "createElements",
    value: function() {
      ra(fo(r.prototype), "createElements", this).call(this), ae(this.htContainer, "autocompleteEditor"), ae(this.htContainer, this.hot.rootWindow.navigator.platform.indexOf("Mac") === -1 ? "" : "htMacScroll");
    }
    /**
     * Opens the editor and adjust its size and internal Handsontable's instance.
     */
  }, {
    key: "open",
    value: function() {
      var o = this, i = zw.get(this);
      ra(fo(r.prototype), "open", this).call(this);
      var a = this.htEditor.getInstance(), l = this.cellProperties.trimDropdown === void 0 ? !0 : this.cellProperties.trimDropdown;
      this.showEditableElement(), this.focus();
      var s = tr();
      s === 0 && i.isMacOS && (s += 15), this.addHook("beforeKeyDown", function(u) {
        return o.onBeforeKeyDown(u);
      }), a.updateSettings({
        colWidths: l ? [yt(this.TEXTAREA) - 2] : void 0,
        width: l ? yt(this.TEXTAREA) + s : void 0,
        renderer: function(f, c, h, d, y, p, g) {
          Ii(f, c, h, d, y, p, g);
          var w = o.cellProperties, C = w.filteringCaseSensitive, _ = w.allowHtml, k = w.locale, E = o.query, j = Ft(p), Y, Q;
          j && !_ && (Y = C === !0 ? j.indexOf(E) : j.toLocaleLowerCase(k).indexOf(E.toLocaleLowerCase(k)), Y !== -1 && (Q = j.substr(Y, E.length), j = j.replace(Q, "<strong>".concat(Q, "</strong>")))), c.innerHTML = j;
        },
        autoColumnSize: !0
      }), i.skipOne && (i.skipOne = !1), this.hot._registerTimeout(function() {
        o.queryChoices(o.TEXTAREA.value);
      });
    }
    /**
     * Closes the editor.
     */
  }, {
    key: "close",
    value: function() {
      this.removeHooksByKey("beforeKeyDown"), ra(fo(r.prototype), "close", this).call(this);
    }
    /**
     * Verifies result of validation or closes editor if user's cancelled changes.
     *
     * @param {boolean|undefined} result If `false` and the cell using allowInvalid option,
     *                                   then an editor won't be closed until validation is passed.
     */
  }, {
    key: "discardEditor",
    value: function(o) {
      ra(fo(r.prototype), "discardEditor", this).call(this, o), this.hot.view.render();
    }
    /**
     * Prepares choices list based on applied argument.
     *
     * @private
     * @param {string} query The query.
     */
  }, {
    key: "queryChoices",
    value: function(o) {
      var i = this, a = this.cellProperties.source;
      this.query = o, typeof a == "function" ? a.call(this.cellProperties, o, function(l) {
        i.rawChoices = l, i.updateChoicesList(i.stripValuesIfNeeded(l));
      }) : Array.isArray(a) ? (this.rawChoices = a, this.updateChoicesList(this.stripValuesIfNeeded(a))) : this.updateChoicesList([]);
    }
    /**
     * Updates list of the possible completions to choose.
     *
     * @private
     * @param {Array} choicesList The choices list to process.
     */
  }, {
    key: "updateChoicesList",
    value: function(o) {
      var i = CV(this.TEXTAREA), a = fae(this.TEXTAREA), l = this.cellProperties.sortByRelevance, s = this.cellProperties.filter, u = null, f = null, c = o;
      l && (u = this.sortByRelevance(this.stripValueIfNeeded(this.getValue()), c, this.cellProperties.filteringCaseSensitive));
      var h = Array.isArray(u) ? u.length : 0;
      if (s === !1)
        h && (f = u[0]);
      else {
        for (var d = [], y = 0, p = c.length; y < p && !(l && h <= y); y++)
          h ? d.push(c[u[y]]) : d.push(c[y]);
        f = 0, c = d;
      }
      this.strippedChoices = c, this.htEditor.loadData(Gy([c])), this.updateDropdownHeight(), this.flipDropdownIfNeeded(), this.cellProperties.strict === !0 && this.highlightBestMatchingChoice(f), this.hot.listen(), Pg(this.TEXTAREA, i, i === a ? void 0 : a);
    }
    /**
     * Checks where is enough place to open editor.
     *
     * @private
     * @returns {boolean}
     */
  }, {
    key: "flipDropdownIfNeeded",
    value: function() {
      var o = fs(this.hot.view._wt.wtTable.TABLE), i = o === this.hot.rootWindow, a = this.cellProperties.preventOverflow;
      if (i || !i && (a || a === "horizontal"))
        return !1;
      var l = Yt(this.TEXTAREA), s = $t(this.TEXTAREA), u = this.getDropdownHeight(), f = o.scrollTop, c = $t(this.hot.view._wt.wtTable.THEAD), h = Yt(o), d = l.top - h.top - c + f, y = o.scrollHeight - d - c - s, p = u > y && d > y;
      return p ? this.flipDropdown(u) : this.unflipDropdown(), this.limitDropdownIfNeeded(p ? d : y, u), p;
    }
    /**
     * Checks if the internal table should generate scrollbar or could be rendered without it.
     *
     * @private
     * @param {number} spaceAvailable The free space as height defined in px available for dropdown list.
     * @param {number} dropdownHeight The dropdown height.
     */
  }, {
    key: "limitDropdownIfNeeded",
    value: function(o, i) {
      if (i > o) {
        var a = 0, l = 0, s = 0, u = null;
        do
          s = this.htEditor.getRowHeight(l) || this.htEditor.view._wt.getSetting("defaultRowHeight"), a += s, l += 1;
        while (a < o);
        u = a - s, this.htEditor.flipped && (this.htEditor.rootElement.style.top = "".concat(parseInt(this.htEditor.rootElement.style.top, 10) + i - u, "px")), this.setDropdownHeight(a - s);
      }
    }
    /**
     * Configures editor to open it at the top.
     *
     * @private
     * @param {number} dropdownHeight The dropdown height.
     */
  }, {
    key: "flipDropdown",
    value: function(o) {
      var i = this.htEditor.rootElement.style;
      i.position = "absolute", i.top = "".concat(-o, "px"), this.htEditor.flipped = !0;
    }
    /**
     * Configures editor to open it at the bottom.
     *
     * @private
     */
  }, {
    key: "unflipDropdown",
    value: function() {
      var o = this.htEditor.rootElement.style;
      o.position = "absolute", o.top = "", this.htEditor.flipped = void 0;
    }
    /**
     * Updates width and height of the internal Handsontable's instance.
     *
     * @private
     */
  }, {
    key: "updateDropdownHeight",
    value: function() {
      var o = this.htEditor.getColWidth(0) + tr(this.hot.rootDocument) + 2, i = this.cellProperties.trimDropdown;
      this.htEditor.updateSettings({
        height: this.getDropdownHeight(),
        width: i ? void 0 : o
      }), this.htEditor.view._wt.wtTable.alignOverlaysWithTrimmingContainer();
    }
    /**
     * Sets new height of the internal Handsontable's instance.
     *
     * @private
     * @param {number} height The new dropdown height.
     */
  }, {
    key: "setDropdownHeight",
    value: function(o) {
      this.htEditor.updateSettings({
        height: o
      });
    }
    /**
     * Creates new selection on specified row index, or deselects selected cells.
     *
     * @private
     * @param {number|undefined} index The visual row index.
     */
  }, {
    key: "highlightBestMatchingChoice",
    value: function(o) {
      typeof o == "number" ? this.htEditor.selectCell(o, 0, void 0, void 0, void 0, !1) : this.htEditor.deselectCell();
    }
    /**
     * Calculates and return the internal Handsontable's height.
     *
     * @private
     * @returns {number}
     */
  }, {
    key: "getDropdownHeight",
    value: function() {
      var o = this.htEditor.getInstance().getRowHeight(0) || 23, i = this.cellProperties.visibleRows;
      return this.strippedChoices.length >= i ? i * o : this.strippedChoices.length * o + 8;
    }
    /**
     * Sanitizes value from potential dangerous tags.
     *
     * @private
     * @param {string} value The value to sanitize.
     * @returns {string}
     */
  }, {
    key: "stripValueIfNeeded",
    value: function(o) {
      return this.stripValuesIfNeeded([o])[0];
    }
    /**
     * Sanitizes an array of the values from potential dangerous tags.
     *
     * @private
     * @param {string[]} values The value to sanitize.
     * @returns {string[]}
     */
  }, {
    key: "stripValuesIfNeeded",
    value: function(o) {
      var i = this.cellProperties.allowHtml, a = Ue(o, function(s) {
        return Ft(s);
      }), l = Ue(a, function(s) {
        return i ? s : JA(s);
      });
      return l;
    }
    /**
     * Captures use of arrow down and up to control their behaviour.
     *
     * @private
     * @param {number} keyCode The keyboard keycode.
     * @returns {boolean}
     */
  }, {
    key: "allowKeyEventPropagation",
    value: function(o) {
      var i = this.htEditor.getSelectedRangeLast(), a = {
        row: i ? i.from.row : -1
      }, l = !1;
      return o === Ce.ARROW_DOWN && a.row > 0 && a.row < this.htEditor.countRows() - 1 && (l = !0), o === Ce.ARROW_UP && a.row > -1 && (l = !0), l;
    }
    /**
     * OnBeforeKeyDown callback.
     *
     * @private
     * @param {KeyboardEvent} event The keyboard event object.
     */
  }, {
    key: "onBeforeKeyDown",
    value: function(o) {
      var i = this, a = zw.get(this);
      if (a.skipOne = !1, Fae(o.keyCode) || o.keyCode === Ce.BACKSPACE || o.keyCode === Ce.DELETE || o.keyCode === Ce.INSERT) {
        var l = 10;
        if (o.keyCode === Ce.C && (o.ctrlKey || o.metaKey))
          return;
        this.isOpened() || (l += 10), this.htEditor && this.hot._registerTimeout(function() {
          i.queryChoices(i.TEXTAREA.value), a.skipOne = !0;
        }, l);
      }
    }
  }], [{
    key: "EDITOR_TYPE",
    get: function() {
      return ZOe;
    }
  }]), r;
}(hP);
function Gs(e) {
  "@babel/helpers - typeof";
  return Gs = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Gs(e);
}
function QOe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function Sx(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, eRe(n.key), n);
  }
}
function JOe(e, t, r) {
  return t && Sx(e.prototype, t), r && Sx(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function eRe(e) {
  var t = tRe(e, "string");
  return Gs(t) === "symbol" ? t : String(t);
}
function tRe(e, t) {
  if (Gs(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Gs(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function rRe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && nO(e, t);
}
function nO(e, t) {
  return nO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, nO(e, t);
}
function nRe(e) {
  var t = aRe();
  return function() {
    var n = km(e), o;
    if (t) {
      var i = km(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return oRe(this, o);
  };
}
function oRe(e, t) {
  if (t && (Gs(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return iRe(e);
}
function iRe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function aRe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function km(e) {
  return km = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, km(e);
}
var lRe = "checkbox", Y2 = /* @__PURE__ */ function(e) {
  rRe(r, e);
  var t = nRe(r);
  function r() {
    return QOe(this, r), t.apply(this, arguments);
  }
  return JOe(r, [{
    key: "beginEditing",
    value: function(o, i) {
      if (i && i.type === "mouseup") {
        var a = this.TD.querySelector('input[type="checkbox"]');
        Me(a, "htBadValue") || a.click();
      }
    }
  }, {
    key: "finishEditing",
    value: function() {
    }
  }, {
    key: "init",
    value: function() {
    }
  }, {
    key: "open",
    value: function() {
    }
  }, {
    key: "close",
    value: function() {
    }
  }, {
    key: "getValue",
    value: function() {
    }
  }, {
    key: "setValue",
    value: function() {
    }
  }, {
    key: "focus",
    value: function() {
    }
  }], [{
    key: "EDITOR_TYPE",
    get: function() {
      return lRe;
    }
  }]), r;
}(Tf), G2 = { exports: {} };
const sRe = /* @__PURE__ */ pY(Xie);
/*!
 * Pikaday
 *
 * Copyright Â© 2014 David Bushell | BSD & MIT license | https://github.com/Pikaday/Pikaday
 */
(function(e, t) {
  (function(r, n) {
    var o;
    {
      try {
        o = sRe;
      } catch {
      }
      e.exports = n(o);
    }
  })(By, function(r) {
    var n = typeof r == "function", o = !!window.addEventListener, i = window.document, a = window.setTimeout, l = function(T, v, m, b) {
      o ? T.addEventListener(v, m, !!b) : T.attachEvent("on" + v, m);
    }, s = function(T, v, m, b) {
      o ? T.removeEventListener(v, m, !!b) : T.detachEvent("on" + v, m);
    }, u = function(T) {
      return T.trim ? T.trim() : T.replace(/^\s+|\s+$/g, "");
    }, f = function(T, v) {
      return (" " + T.className + " ").indexOf(" " + v + " ") !== -1;
    }, c = function(T, v) {
      f(T, v) || (T.className = T.className === "" ? v : T.className + " " + v);
    }, h = function(T, v) {
      T.className = u((" " + T.className + " ").replace(" " + v + " ", " "));
    }, d = function(T) {
      return /Array/.test(Object.prototype.toString.call(T));
    }, y = function(T) {
      return /Date/.test(Object.prototype.toString.call(T)) && !isNaN(T.getTime());
    }, p = function(T) {
      var v = T.getDay();
      return v === 0 || v === 6;
    }, g = function(T) {
      return T % 4 === 0 && T % 100 !== 0 || T % 400 === 0;
    }, w = function(T, v) {
      return [31, g(T) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][v];
    }, C = function(T) {
      y(T) && T.setHours(0, 0, 0, 0);
    }, _ = function(T, v) {
      return T.getTime() === v.getTime();
    }, k = function(T, v, m) {
      var b, S;
      for (b in v)
        S = T[b] !== void 0, S && typeof v[b] == "object" && v[b] !== null && v[b].nodeName === void 0 ? y(v[b]) ? m && (T[b] = new Date(v[b].getTime())) : d(v[b]) ? m && (T[b] = v[b].slice(0)) : T[b] = k({}, v[b], m) : (m || !S) && (T[b] = v[b]);
      return T;
    }, E = function(T, v, m) {
      var b;
      i.createEvent ? (b = i.createEvent("HTMLEvents"), b.initEvent(v, !0, !1), b = k(b, m), T.dispatchEvent(b)) : i.createEventObject && (b = i.createEventObject(), b = k(b, m), T.fireEvent("on" + v, b));
    }, j = function(T) {
      return T.month < 0 && (T.year -= Math.ceil(Math.abs(T.month) / 12), T.month += 12), T.month > 11 && (T.year += Math.floor(Math.abs(T.month) / 12), T.month -= 12), T;
    }, Y = {
      // bind the picker to a form field
      field: null,
      // automatically show/hide the picker on `field` focus (default `true` if `field` is set)
      bound: void 0,
      // data-attribute on the input field with an aria assistance text (only applied when `bound` is set)
      ariaLabel: "Use the arrow keys to pick a date",
      // position of the datepicker, relative to the field (default to bottom & left)
      // ('bottom' & 'left' keywords are not used, 'top' & 'right' are modifier on the bottom/left position)
      position: "bottom left",
      // automatically fit in the viewport even if it means repositioning from the position option
      reposition: !0,
      // the default output format for `.toString()` and `field` value
      format: "YYYY-MM-DD",
      // the toString function which gets passed a current date object and format
      // and returns a string
      toString: null,
      // used to create date object from current input string
      parse: null,
      // the initial date to view when first opened
      defaultDate: null,
      // make the `defaultDate` the initial selected value
      setDefaultDate: !1,
      // first day of week (0: Sunday, 1: Monday etc)
      firstDay: 0,
      // minimum number of days in the week that gets week number one
      // default ISO 8601, week 01 is the week with the first Thursday (4)
      firstWeekOfYearMinDays: 4,
      // the default flag for moment's strict date parsing
      formatStrict: !1,
      // the minimum/earliest date that can be selected
      minDate: null,
      // the maximum/latest date that can be selected
      maxDate: null,
      // number of years either side, or array of upper/lower range
      yearRange: 10,
      // show week numbers at head of row
      showWeekNumber: !1,
      // Week picker mode
      pickWholeWeek: !1,
      // used internally (don't config outside)
      minYear: 0,
      maxYear: 9999,
      minMonth: void 0,
      maxMonth: void 0,
      startRange: null,
      endRange: null,
      isRTL: !1,
      // Additional text to append to the year in the calendar title
      yearSuffix: "",
      // Render the month after year in the calendar title
      showMonthAfterYear: !1,
      // Render days of the calendar grid that fall in the next or previous month
      showDaysInNextAndPreviousMonths: !1,
      // Allows user to select days that fall in the next or previous month
      enableSelectionDaysInNextAndPreviousMonths: !1,
      // how many months are visible
      numberOfMonths: 1,
      // when numberOfMonths is used, this will help you to choose where the main calendar will be (default `left`, can be set to `right`)
      // only used for the first display or when a selected date is not visible
      mainCalendar: "left",
      // Specify a DOM element to render the calendar in
      container: void 0,
      // Blur field when date is selected
      blurFieldOnSelect: !0,
      // internationalization
      i18n: {
        previousMonth: "Previous Month",
        nextMonth: "Next Month",
        months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        weekdays: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        weekdaysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
      },
      // Theme Classname
      theme: null,
      // events array
      events: [],
      // callback function
      onSelect: null,
      onOpen: null,
      onClose: null,
      onDraw: null,
      // Enable keyboard input
      keyboardInput: !0
    }, Q = function(T, v, m) {
      for (v += T.firstDay; v >= 7; )
        v -= 7;
      return m ? T.i18n.weekdaysShort[v] : T.i18n.weekdays[v];
    }, X = function(T) {
      var v = [], m = "false";
      if (T.isEmpty)
        if (T.showDaysInNextAndPreviousMonths)
          v.push("is-outside-current-month"), T.enableSelectionDaysInNextAndPreviousMonths || v.push("is-selection-disabled");
        else
          return '<td class="is-empty"></td>';
      return T.isDisabled && v.push("is-disabled"), T.isToday && v.push("is-today"), T.isSelected && (v.push("is-selected"), m = "true"), T.hasEvent && v.push("has-event"), T.isInRange && v.push("is-inrange"), T.isStartRange && v.push("is-startrange"), T.isEndRange && v.push("is-endrange"), '<td data-day="' + T.day + '" class="' + v.join(" ") + '" aria-selected="' + m + '"><button class="pika-button pika-day" type="button" data-pika-year="' + T.year + '" data-pika-month="' + T.month + '" data-pika-day="' + T.day + '">' + T.day + "</button></td>";
    }, q = function(T, v) {
      T.setHours(0, 0, 0, 0);
      var m = T.getDate(), b = T.getDay(), S = v, R = S - 1, $ = 7, H = function(ce) {
        return (ce + $ - 1) % $;
      };
      T.setDate(m + R - H(b));
      var F = new Date(T.getFullYear(), 0, S), K = 24 * 60 * 60 * 1e3, te = (T.getTime() - F.getTime()) / K, re = 1 + Math.round((te - R + H(F.getDay())) / $);
      return re;
    }, J = function(T, v, m, b) {
      var S = new Date(m, v, T), R = n ? r(S).isoWeek() : q(S, b);
      return '<td class="pika-week">' + R + "</td>";
    }, le = function(T, v, m, b) {
      return '<tr class="pika-row' + (m ? " pick-whole-week" : "") + (b ? " is-selected" : "") + '">' + (v ? T.reverse() : T).join("") + "</tr>";
    }, ee = function(T) {
      return "<tbody>" + T.join("") + "</tbody>";
    }, U = function(T) {
      var v, m = [];
      for (T.showWeekNumber && m.push("<th></th>"), v = 0; v < 7; v++)
        m.push('<th scope="col"><abbr title="' + Q(T, v) + '">' + Q(T, v, !0) + "</abbr></th>");
      return "<thead><tr>" + (T.isRTL ? m.reverse() : m).join("") + "</tr></thead>";
    }, Z = function(T, v, m, b, S, R) {
      var $, H, F, K = T._o, te = m === K.minYear, re = m === K.maxYear, ce = '<div id="' + R + '" class="pika-title" role="heading" aria-live="assertive">', Oe, ve, ye = !0, x = !0;
      for (F = [], $ = 0; $ < 12; $++)
        F.push('<option value="' + (m === S ? $ - v : 12 + $ - v) + '"' + ($ === b ? ' selected="selected"' : "") + (te && $ < K.minMonth || re && $ > K.maxMonth ? ' disabled="disabled"' : "") + ">" + K.i18n.months[$] + "</option>");
      for (Oe = '<div class="pika-label">' + K.i18n.months[b] + '<select class="pika-select pika-select-month" tabindex="-1">' + F.join("") + "</select></div>", d(K.yearRange) ? ($ = K.yearRange[0], H = K.yearRange[1] + 1) : ($ = m - K.yearRange, H = 1 + m + K.yearRange), F = []; $ < H && $ <= K.maxYear; $++)
        $ >= K.minYear && F.push('<option value="' + $ + '"' + ($ === m ? ' selected="selected"' : "") + ">" + $ + "</option>");
      return ve = '<div class="pika-label">' + m + K.yearSuffix + '<select class="pika-select pika-select-year" tabindex="-1">' + F.join("") + "</select></div>", K.showMonthAfterYear ? ce += ve + Oe : ce += Oe + ve, te && (b === 0 || K.minMonth >= b) && (ye = !1), re && (b === 11 || K.maxMonth <= b) && (x = !1), v === 0 && (ce += '<button class="pika-prev' + (ye ? "" : " is-disabled") + '" type="button">' + K.i18n.previousMonth + "</button>"), v === T._o.numberOfMonths - 1 && (ce += '<button class="pika-next' + (x ? "" : " is-disabled") + '" type="button">' + K.i18n.nextMonth + "</button>"), ce += "</div>";
    }, oe = function(T, v, m) {
      return '<table cellpadding="0" cellspacing="0" class="pika-table" role="grid" aria-labelledby="' + m + '">' + U(T) + ee(v) + "</table>";
    }, ie = function(T) {
      var v = this, m = v.config(T);
      v._onMouseDown = function(S) {
        if (v._v) {
          S = S || window.event;
          var R = S.target || S.srcElement;
          if (R)
            if (f(R, "is-disabled") || (f(R, "pika-button") && !f(R, "is-empty") && !f(R.parentNode, "is-disabled") ? (v.setDate(new Date(R.getAttribute("data-pika-year"), R.getAttribute("data-pika-month"), R.getAttribute("data-pika-day"))), m.bound && a(function() {
              v.hide(), m.blurFieldOnSelect && m.field && m.field.blur();
            }, 100)) : f(R, "pika-prev") ? v.prevMonth() : f(R, "pika-next") && v.nextMonth()), f(R, "pika-select"))
              v._c = !0;
            else if (S.preventDefault)
              S.preventDefault();
            else
              return S.returnValue = !1, !1;
        }
      }, v._onChange = function(S) {
        S = S || window.event;
        var R = S.target || S.srcElement;
        R && (f(R, "pika-select-month") ? v.gotoMonth(R.value) : f(R, "pika-select-year") && v.gotoYear(R.value));
      }, v._onKeyChange = function(S) {
        if (S = S || window.event, v.isVisible())
          switch (S.keyCode) {
            case 13:
            case 27:
              m.field && m.field.blur();
              break;
            case 37:
              v.adjustDate("subtract", 1);
              break;
            case 38:
              v.adjustDate("subtract", 7);
              break;
            case 39:
              v.adjustDate("add", 1);
              break;
            case 40:
              v.adjustDate("add", 7);
              break;
            case 8:
            case 46:
              v.setDate(null);
              break;
          }
      }, v._parseFieldValue = function() {
        if (m.parse)
          return m.parse(m.field.value, m.format);
        if (n) {
          var S = r(m.field.value, m.format, m.formatStrict);
          return S && S.isValid() ? S.toDate() : null;
        } else
          return new Date(Date.parse(m.field.value));
      }, v._onInputChange = function(S) {
        var R;
        S.firedBy !== v && (R = v._parseFieldValue(), y(R) && v.setDate(R), v._v || v.show());
      }, v._onInputFocus = function() {
        v.show();
      }, v._onInputClick = function() {
        v.show();
      }, v._onInputBlur = function() {
        var S = i.activeElement;
        do
          if (f(S, "pika-single"))
            return;
        while (S = S.parentNode);
        v._c || (v._b = a(function() {
          v.hide();
        }, 50)), v._c = !1;
      }, v._onClick = function(S) {
        S = S || window.event;
        var R = S.target || S.srcElement, $ = R;
        if (R) {
          !o && f(R, "pika-select") && (R.onchange || (R.setAttribute("onchange", "return;"), l(R, "change", v._onChange)));
          do
            if (f($, "pika-single") || $ === m.trigger)
              return;
          while ($ = $.parentNode);
          v._v && R !== m.trigger && $ !== m.trigger && v.hide();
        }
      }, v.el = i.createElement("div"), v.el.className = "pika-single" + (m.isRTL ? " is-rtl" : "") + (m.theme ? " " + m.theme : ""), l(v.el, "mousedown", v._onMouseDown, !0), l(v.el, "touchend", v._onMouseDown, !0), l(v.el, "change", v._onChange), m.keyboardInput && l(i, "keydown", v._onKeyChange), m.field && (m.container ? m.container.appendChild(v.el) : m.bound ? i.body.appendChild(v.el) : m.field.parentNode.insertBefore(v.el, m.field.nextSibling), l(m.field, "change", v._onInputChange), m.defaultDate || (m.defaultDate = v._parseFieldValue(), m.setDefaultDate = !0));
      var b = m.defaultDate;
      y(b) ? m.setDefaultDate ? v.setDate(b, !0) : v.gotoDate(b) : v.gotoDate(/* @__PURE__ */ new Date()), m.bound ? (this.hide(), v.el.className += " is-bound", l(m.trigger, "click", v._onInputClick), l(m.trigger, "focus", v._onInputFocus), l(m.trigger, "blur", v._onInputBlur)) : this.show();
    };
    return ie.prototype = {
      /**
       * configure functionality
       */
      config: function(T) {
        this._o || (this._o = k({}, Y, !0));
        var v = k(this._o, T, !0);
        v.isRTL = !!v.isRTL, v.field = v.field && v.field.nodeName ? v.field : null, v.theme = typeof v.theme == "string" && v.theme ? v.theme : null, v.bound = !!(v.bound !== void 0 ? v.field && v.bound : v.field), v.trigger = v.trigger && v.trigger.nodeName ? v.trigger : v.field, v.disableWeekends = !!v.disableWeekends, v.disableDayFn = typeof v.disableDayFn == "function" ? v.disableDayFn : null;
        var m = parseInt(v.numberOfMonths, 10) || 1;
        if (v.numberOfMonths = m > 4 ? 4 : m, y(v.minDate) || (v.minDate = !1), y(v.maxDate) || (v.maxDate = !1), v.minDate && v.maxDate && v.maxDate < v.minDate && (v.maxDate = v.minDate = !1), v.minDate && this.setMinDate(v.minDate), v.maxDate && this.setMaxDate(v.maxDate), d(v.yearRange)) {
          var b = (/* @__PURE__ */ new Date()).getFullYear() - 10;
          v.yearRange[0] = parseInt(v.yearRange[0], 10) || b, v.yearRange[1] = parseInt(v.yearRange[1], 10) || b;
        } else
          v.yearRange = Math.abs(parseInt(v.yearRange, 10)) || Y.yearRange, v.yearRange > 100 && (v.yearRange = 100);
        return v;
      },
      /**
       * return a formatted string of the current selection (using Moment.js if available)
       */
      toString: function(T) {
        return T = T || this._o.format, y(this._d) ? this._o.toString ? this._o.toString(this._d, T) : n ? r(this._d).format(T) : this._d.toDateString() : "";
      },
      /**
       * return a Moment.js object of the current selection (if available)
       */
      getMoment: function() {
        return n ? r(this._d) : null;
      },
      /**
       * set the current selection from a Moment.js object (if available)
       */
      setMoment: function(T, v) {
        n && r.isMoment(T) && this.setDate(T.toDate(), v);
      },
      /**
       * return a Date object of the current selection
       */
      getDate: function() {
        return y(this._d) ? new Date(this._d.getTime()) : null;
      },
      /**
       * set the current selection
       */
      setDate: function(T, v) {
        if (!T)
          return this._d = null, this._o.field && (this._o.field.value = "", E(this._o.field, "change", { firedBy: this })), this.draw();
        if (typeof T == "string" && (T = new Date(Date.parse(T))), !!y(T)) {
          var m = this._o.minDate, b = this._o.maxDate;
          y(m) && T < m ? T = m : y(b) && T > b && (T = b), this._d = new Date(T.getTime()), C(this._d), this.gotoDate(this._d), this._o.field && (this._o.field.value = this.toString(), E(this._o.field, "change", { firedBy: this })), !v && typeof this._o.onSelect == "function" && this._o.onSelect.call(this, this.getDate());
        }
      },
      /**
       * clear and reset the date
       */
      clear: function() {
        this.setDate(null);
      },
      /**
       * change view to a specific date
       */
      gotoDate: function(T) {
        var v = !0;
        if (y(T)) {
          if (this.calendars) {
            var m = new Date(this.calendars[0].year, this.calendars[0].month, 1), b = new Date(this.calendars[this.calendars.length - 1].year, this.calendars[this.calendars.length - 1].month, 1), S = T.getTime();
            b.setMonth(b.getMonth() + 1), b.setDate(b.getDate() - 1), v = S < m.getTime() || b.getTime() < S;
          }
          v && (this.calendars = [{
            month: T.getMonth(),
            year: T.getFullYear()
          }], this._o.mainCalendar === "right" && (this.calendars[0].month += 1 - this._o.numberOfMonths)), this.adjustCalendars();
        }
      },
      adjustDate: function(T, v) {
        var m = this.getDate() || /* @__PURE__ */ new Date(), b = parseInt(v) * 24 * 60 * 60 * 1e3, S;
        T === "add" ? S = new Date(m.valueOf() + b) : T === "subtract" && (S = new Date(m.valueOf() - b)), this.setDate(S);
      },
      adjustCalendars: function() {
        this.calendars[0] = j(this.calendars[0]);
        for (var T = 1; T < this._o.numberOfMonths; T++)
          this.calendars[T] = j({
            month: this.calendars[0].month + T,
            year: this.calendars[0].year
          });
        this.draw();
      },
      gotoToday: function() {
        this.gotoDate(/* @__PURE__ */ new Date());
      },
      /**
       * change view to a specific month (zero-index, e.g. 0: January)
       */
      gotoMonth: function(T) {
        isNaN(T) || (this.calendars[0].month = parseInt(T, 10), this.adjustCalendars());
      },
      nextMonth: function() {
        this.calendars[0].month++, this.adjustCalendars();
      },
      prevMonth: function() {
        this.calendars[0].month--, this.adjustCalendars();
      },
      /**
       * change view to a specific full year (e.g. "2012")
       */
      gotoYear: function(T) {
        isNaN(T) || (this.calendars[0].year = parseInt(T, 10), this.adjustCalendars());
      },
      /**
       * change the minDate
       */
      setMinDate: function(T) {
        T instanceof Date ? (C(T), this._o.minDate = T, this._o.minYear = T.getFullYear(), this._o.minMonth = T.getMonth()) : (this._o.minDate = Y.minDate, this._o.minYear = Y.minYear, this._o.minMonth = Y.minMonth, this._o.startRange = Y.startRange), this.draw();
      },
      /**
       * change the maxDate
       */
      setMaxDate: function(T) {
        T instanceof Date ? (C(T), this._o.maxDate = T, this._o.maxYear = T.getFullYear(), this._o.maxMonth = T.getMonth()) : (this._o.maxDate = Y.maxDate, this._o.maxYear = Y.maxYear, this._o.maxMonth = Y.maxMonth, this._o.endRange = Y.endRange), this.draw();
      },
      setStartRange: function(T) {
        this._o.startRange = T;
      },
      setEndRange: function(T) {
        this._o.endRange = T;
      },
      /**
       * refresh the HTML
       */
      draw: function(T) {
        if (!(!this._v && !T)) {
          var v = this._o, m = v.minYear, b = v.maxYear, S = v.minMonth, R = v.maxMonth, $ = "", H;
          this._y <= m && (this._y = m, !isNaN(S) && this._m < S && (this._m = S)), this._y >= b && (this._y = b, !isNaN(R) && this._m > R && (this._m = R));
          for (var F = 0; F < v.numberOfMonths; F++)
            H = "pika-title-" + Math.random().toString(36).replace(/[^a-z]+/g, "").substr(0, 2), $ += '<div class="pika-lendar">' + Z(this, F, this.calendars[F].year, this.calendars[F].month, this.calendars[0].year, H) + this.render(this.calendars[F].year, this.calendars[F].month, H) + "</div>";
          this.el.innerHTML = $, v.bound && v.field.type !== "hidden" && a(function() {
            v.trigger.focus();
          }, 1), typeof this._o.onDraw == "function" && this._o.onDraw(this), v.bound && v.field.setAttribute("aria-label", v.ariaLabel);
        }
      },
      adjustPosition: function() {
        var T, v, m, b, S, R, $, H, F, K, te, re;
        if (!this._o.container) {
          if (this.el.style.position = "absolute", T = this._o.trigger, v = T, m = this.el.offsetWidth, b = this.el.offsetHeight, S = window.innerWidth || i.documentElement.clientWidth, R = window.innerHeight || i.documentElement.clientHeight, $ = window.pageYOffset || i.body.scrollTop || i.documentElement.scrollTop, te = !0, re = !0, typeof T.getBoundingClientRect == "function")
            K = T.getBoundingClientRect(), H = K.left + window.pageXOffset, F = K.bottom + window.pageYOffset;
          else
            for (H = v.offsetLeft, F = v.offsetTop + v.offsetHeight; v = v.offsetParent; )
              H += v.offsetLeft, F += v.offsetTop;
          (this._o.reposition && H + m > S || this._o.position.indexOf("right") > -1 && H - m + T.offsetWidth > 0) && (H = H - m + T.offsetWidth, te = !1), (this._o.reposition && F + b > R + $ || this._o.position.indexOf("top") > -1 && F - b - T.offsetHeight > 0) && (F = F - b - T.offsetHeight, re = !1), this.el.style.left = H + "px", this.el.style.top = F + "px", c(this.el, te ? "left-aligned" : "right-aligned"), c(this.el, re ? "bottom-aligned" : "top-aligned"), h(this.el, te ? "right-aligned" : "left-aligned"), h(this.el, re ? "top-aligned" : "bottom-aligned");
        }
      },
      /**
       * render HTML for a particular month
       */
      render: function(T, v, m) {
        var b = this._o, S = /* @__PURE__ */ new Date(), R = w(T, v), $ = new Date(T, v, 1).getDay(), H = [], F = [];
        C(S), b.firstDay > 0 && ($ -= b.firstDay, $ < 0 && ($ += 7));
        for (var K = v === 0 ? 11 : v - 1, te = v === 11 ? 0 : v + 1, re = v === 0 ? T - 1 : T, ce = v === 11 ? T + 1 : T, Oe = w(re, K), ve = R + $, ye = ve; ye > 7; )
          ye -= 7;
        ve += 7 - ye;
        for (var x = !1, ke = 0, He = 0; ke < ve; ke++) {
          var Ee = new Date(T, v, 1 + (ke - $)), Ae = y(this._d) ? _(Ee, this._d) : !1, $e = _(Ee, S), O = b.events.indexOf(Ee.toDateString()) !== -1, P = ke < $ || ke >= R + $, A = 1 + (ke - $), B = v, M = T, W = b.startRange && _(b.startRange, Ee), D = b.endRange && _(b.endRange, Ee), N = b.startRange && b.endRange && b.startRange < Ee && Ee < b.endRange, z = b.minDate && Ee < b.minDate || b.maxDate && Ee > b.maxDate || b.disableWeekends && p(Ee) || b.disableDayFn && b.disableDayFn(Ee);
          P && (ke < $ ? (A = Oe + A, B = K, M = re) : (A = A - R, B = te, M = ce));
          var V = {
            day: A,
            month: B,
            year: M,
            hasEvent: O,
            isSelected: Ae,
            isToday: $e,
            isDisabled: z,
            isEmpty: P,
            isStartRange: W,
            isEndRange: D,
            isInRange: N,
            showDaysInNextAndPreviousMonths: b.showDaysInNextAndPreviousMonths,
            enableSelectionDaysInNextAndPreviousMonths: b.enableSelectionDaysInNextAndPreviousMonths
          };
          b.pickWholeWeek && Ae && (x = !0), F.push(X(V)), ++He === 7 && (b.showWeekNumber && F.unshift(J(ke - $, v, T, b.firstWeekOfYearMinDays)), H.push(le(F, b.isRTL, b.pickWholeWeek, x)), F = [], He = 0, x = !1);
        }
        return oe(b, H, m);
      },
      isVisible: function() {
        return this._v;
      },
      show: function() {
        this.isVisible() || (this._v = !0, this.draw(), h(this.el, "is-hidden"), this._o.bound && (l(i, "click", this._onClick), this.adjustPosition()), typeof this._o.onOpen == "function" && this._o.onOpen.call(this));
      },
      hide: function() {
        var T = this._v;
        T !== !1 && (this._o.bound && s(i, "click", this._onClick), this._o.container || (this.el.style.position = "static", this.el.style.left = "auto", this.el.style.top = "auto"), c(this.el, "is-hidden"), this._v = !1, T !== void 0 && typeof this._o.onClose == "function" && this._o.onClose.call(this));
      },
      /**
       * GAME OVER
       */
      destroy: function() {
        var T = this._o;
        this.hide(), s(this.el, "mousedown", this._onMouseDown, !0), s(this.el, "touchend", this._onMouseDown, !0), s(this.el, "change", this._onChange), T.keyboardInput && s(i, "keydown", this._onKeyChange), T.field && (s(T.field, "change", this._onInputChange), T.bound && (s(T.trigger, "click", this._onInputClick), s(T.trigger, "focus", this._onInputFocus), s(T.trigger, "blur", this._onInputBlur))), this.el.parentNode && this.el.parentNode.removeChild(this.el);
      }
    }, ie;
  });
})(G2);
var uRe = G2.exports;
const Cx = /* @__PURE__ */ tj(uRe);
function Ks(e) {
  "@babel/helpers - typeof";
  return Ks = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Ks(e);
}
function fRe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function _x(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, hRe(n.key), n);
  }
}
function cRe(e, t, r) {
  return t && _x(e.prototype, t), r && _x(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function hRe(e) {
  var t = dRe(e, "string");
  return Ks(t) === "symbol" ? t : String(t);
}
function dRe(e, t) {
  if (Ks(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Ks(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function lo() {
  return typeof Reflect < "u" && Reflect.get ? lo = Reflect.get.bind() : lo = function(t, r, n) {
    var o = vRe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, lo.apply(this, arguments);
}
function vRe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = hn(e), e !== null); )
    ;
  return e;
}
function yRe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && oO(e, t);
}
function oO(e, t) {
  return oO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, oO(e, t);
}
function pRe(e) {
  var t = bRe();
  return function() {
    var n = hn(e), o;
    if (t) {
      var i = hn(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return mRe(this, o);
  };
}
function mRe(e, t) {
  if (t && (Ks(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return gRe(e);
}
function gRe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function bRe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function hn(e) {
  return hn = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, hn(e);
}
var K2 = "date", Ox = "dateEditor", q2 = /* @__PURE__ */ function(e) {
  yRe(r, e);
  var t = pRe(r);
  function r(n) {
    var o;
    return fRe(this, r), o = t.call(this, n), o.defaultDateFormat = "DD/MM/YYYY", o.isCellEdited = !1, o.parentDestroyed = !1, o.$datePicker = null, o;
  }
  return cRe(r, [{
    key: "init",
    value: function() {
      var o = this;
      if (typeof ne != "function")
        throw new Error("You need to include moment.js to your project.");
      if (typeof Cx != "function")
        throw new Error("You need to include Pikaday to your project.");
      lo(hn(r.prototype), "init", this).call(this), this.instance.addHook("afterDestroy", function() {
        o.parentDestroyed = !0, o.destroyElements();
      });
    }
    /**
     * Create data picker instance.
     */
  }, {
    key: "createElements",
    value: function() {
      lo(hn(r.prototype), "createElements", this).call(this), this.datePicker = this.hot.rootDocument.createElement("DIV"), this.datePickerStyle = this.datePicker.style, this.datePickerStyle.position = "absolute", this.datePickerStyle.top = 0, this.datePickerStyle.left = 0, this.datePickerStyle.zIndex = 9999, this.datePicker.setAttribute("dir", this.hot.isRtl() ? "rtl" : "ltr"), ae(this.datePicker, "htDatepickerHolder"), this.hot.rootDocument.body.appendChild(this.datePicker);
      var o = new It(this);
      o.addEventListener(this.datePicker, "mousedown", function(i) {
        return i.stopPropagation();
      });
    }
    /**
     * Destroy data picker instance.
     */
  }, {
    key: "destroyElements",
    value: function() {
      var o = this.datePicker.parentNode;
      this.$datePicker && this.$datePicker.destroy(), o && o.removeChild(this.datePicker);
    }
    /**
     * Prepare editor to appear.
     *
     * @param {number} row The visual row index.
     * @param {number} col The visual column index.
     * @param {number|string} prop The column property (passed when datasource is an array of objects).
     * @param {HTMLTableCellElement} td The rendered cell element.
     * @param {*} value The rendered value.
     * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
     */
  }, {
    key: "prepare",
    value: function(o, i, a, l, s, u) {
      lo(hn(r.prototype), "prepare", this).call(this, o, i, a, l, s, u);
    }
    /**
     * Open editor.
     *
     * @param {Event} [event=null] The event object.
     */
  }, {
    key: "open",
    value: function() {
      var o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null, i = this.hot.getShortcutManager(), a = i.getContext("editor");
      lo(hn(r.prototype), "open", this).call(this), this.showDatepicker(o), a.addShortcut({
        keys: [["Enter"]],
        callback: function(s) {
          s.stopPropagation();
        },
        group: Ox
      });
    }
    /**
     * Close editor.
     */
  }, {
    key: "close",
    value: function() {
      var o, i = this;
      this._opened = !1, (o = this.$datePicker) !== null && o !== void 0 && o.destroy && this.$datePicker.destroy(), this.instance._registerTimeout(function() {
        i.instance._refreshBorders();
      });
      var a = this.hot.getShortcutManager(), l = a.getContext("editor");
      l.removeShortcutsByGroup(Ox), lo(hn(r.prototype), "close", this).call(this);
    }
    /**
     * Finishes editing and start saving or restoring process for editing cell or last selected range.
     *
     * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.
     * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.
     */
  }, {
    key: "finishEditing",
    value: function() {
      var o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
      if (o) {
        var a = this.originalValue;
        a !== void 0 && this.setValue(a);
      }
      lo(hn(r.prototype), "finishEditing", this).call(this, o, i);
    }
    /**
     * Show data picker.
     *
     * @param {Event} event The event object.
     */
  }, {
    key: "showDatepicker",
    value: function(o) {
      var i = this.TD.getBoundingClientRect(), a = this.cellProperties.dateFormat || this.defaultDateFormat, l = this.instance.view.isMouseDown(), s = o ? DV(o.keyCode) : !1, u;
      this.datePicker.style.display = "block", this.$datePicker = new Cx(this.getDatePickerConfig()), this.$datePicker._onInputFocus = function() {
      }, this.datePickerStyle.top = "".concat(this.hot.rootWindow.pageYOffset + i.top + $t(this.TD), "px");
      var f = this.hot.rootWindow.pageXOffset;
      this.hot.isRtl() ? f = i.right - yt(this.datePicker) : f = i.left, this.datePickerStyle.left = "".concat(f, "px"), this.originalValue ? (u = this.originalValue, ne(u, a, !0).isValid() && this.$datePicker.setMoment(ne(u, a), !0), this.getValue() !== this.originalValue && this.setValue(this.originalValue), !s && !l && this.setValue("")) : this.cellProperties.defaultDate ? (u = this.cellProperties.defaultDate, ne(u, a, !0).isValid() && this.$datePicker.setMoment(ne(u, a), !0), !s && !l && this.setValue("")) : this.$datePicker.gotoToday();
    }
    /**
     * Hide data picker.
     */
  }, {
    key: "hideDatepicker",
    value: function() {
      this.datePickerStyle.display = "none", this.$datePicker.hide();
    }
    /**
     * Get date picker options.
     *
     * @returns {object}
     */
  }, {
    key: "getDatePickerConfig",
    value: function() {
      var o = this, i = this.TEXTAREA, a = {};
      this.cellProperties && this.cellProperties.datePickerConfig && yg(a, this.cellProperties.datePickerConfig);
      var l = a.onSelect, s = a.onClose;
      return a.field = i, a.trigger = i, a.container = this.datePicker, a.bound = !1, a.format = a.format || this.defaultDateFormat, a.reposition = a.reposition || !1, a.isRTL = !1, a.onSelect = function(u) {
        var f = u;
        isNaN(f.getTime()) || (f = ne(f).format(o.cellProperties.dateFormat || o.defaultDateFormat)), o.setValue(f), o.hideDatepicker(), l && l();
      }, a.onClose = function() {
        o.parentDestroyed || o.finishEditing(!1), s && s();
      }, a;
    }
  }], [{
    key: "EDITOR_TYPE",
    get: function() {
      return K2;
    }
  }]), r;
}(nl);
function qs(e) {
  "@babel/helpers - typeof";
  return qs = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, qs(e);
}
function wRe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function Rx(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, CRe(n.key), n);
  }
}
function SRe(e, t, r) {
  return t && Rx(e.prototype, t), r && Rx(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function CRe(e) {
  var t = _Re(e, "string");
  return qs(t) === "symbol" ? t : String(t);
}
function _Re(e, t) {
  if (qs(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (qs(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function hp() {
  return typeof Reflect < "u" && Reflect.get ? hp = Reflect.get.bind() : hp = function(t, r, n) {
    var o = ORe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, hp.apply(this, arguments);
}
function ORe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Xs(e), e !== null); )
    ;
  return e;
}
function RRe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && iO(e, t);
}
function iO(e, t) {
  return iO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, iO(e, t);
}
function ERe(e) {
  var t = kRe();
  return function() {
    var n = Xs(e), o;
    if (t) {
      var i = Xs(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return TRe(this, o);
  };
}
function TRe(e, t) {
  if (t && (qs(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return PRe(e);
}
function PRe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function kRe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Xs(e) {
  return Xs = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Xs(e);
}
var $Re = "dropdown", vP = /* @__PURE__ */ function(e) {
  RRe(r, e);
  var t = ERe(r);
  function r() {
    return wRe(this, r), t.apply(this, arguments);
  }
  return SRe(r, [{
    key: "prepare",
    value: (
      /**
       * @param {number} row The visual row index.
       * @param {number} col The visual column index.
       * @param {number|string} prop The column property (passed when datasource is an array of objects).
       * @param {HTMLTableCellElement} td The rendered cell element.
       * @param {*} value The rendered value.
       * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
       */
      function(o, i, a, l, s, u) {
        hp(Xs(r.prototype), "prepare", this).call(this, o, i, a, l, s, u), this.cellProperties.filter = !1, this.cellProperties.strict = !0;
      }
    )
  }], [{
    key: "EDITOR_TYPE",
    get: function() {
      return $Re;
    }
  }]), r;
}(dP);
we.getSingleton().add("beforeValidate", function(e, t, r) {
  var n = this.getCellMeta(t, this.propToCol(r));
  n.editor === vP && n.strict === void 0 && (n.filter = !1, n.strict = !0);
});
function Zs(e) {
  "@babel/helpers - typeof";
  return Zs = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Zs(e);
}
function ARe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function Ex(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, MRe(n.key), n);
  }
}
function IRe(e, t, r) {
  return t && Ex(e.prototype, t), r && Ex(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function MRe(e) {
  var t = xRe(e, "string");
  return Zs(t) === "symbol" ? t : String(t);
}
function xRe(e, t) {
  if (Zs(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Zs(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function DRe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && aO(e, t);
}
function aO(e, t) {
  return aO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, aO(e, t);
}
function NRe(e) {
  var t = jRe();
  return function() {
    var n = $m(e), o;
    if (t) {
      var i = $m(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return HRe(this, o);
  };
}
function HRe(e, t) {
  if (t && (Zs(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return LRe(e);
}
function LRe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function jRe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function $m(e) {
  return $m = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, $m(e);
}
var FRe = "numeric", X2 = /* @__PURE__ */ function(e) {
  DRe(r, e);
  var t = NRe(r);
  function r() {
    return ARe(this, r), t.apply(this, arguments);
  }
  return IRe(r, null, [{
    key: "EDITOR_TYPE",
    get: function() {
      return FRe;
    }
  }]), r;
}(nl);
function Qs(e) {
  "@babel/helpers - typeof";
  return Qs = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Qs(e);
}
function BRe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function Tx(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, WRe(n.key), n);
  }
}
function VRe(e, t, r) {
  return t && Tx(e.prototype, t), r && Tx(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function WRe(e) {
  var t = URe(e, "string");
  return Qs(t) === "symbol" ? t : String(t);
}
function URe(e, t) {
  if (Qs(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Qs(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function dp() {
  return typeof Reflect < "u" && Reflect.get ? dp = Reflect.get.bind() : dp = function(t, r, n) {
    var o = zRe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, dp.apply(this, arguments);
}
function zRe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Js(e), e !== null); )
    ;
  return e;
}
function YRe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && lO(e, t);
}
function lO(e, t) {
  return lO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, lO(e, t);
}
function GRe(e) {
  var t = XRe();
  return function() {
    var n = Js(e), o;
    if (t) {
      var i = Js(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return KRe(this, o);
  };
}
function KRe(e, t) {
  if (t && (Qs(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return qRe(e);
}
function qRe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function XRe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Js(e) {
  return Js = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Js(e);
}
var ZRe = "password", Z2 = /* @__PURE__ */ function(e) {
  YRe(r, e);
  var t = GRe(r);
  function r() {
    return BRe(this, r), t.apply(this, arguments);
  }
  return VRe(r, [{
    key: "createElements",
    value: function() {
      dp(Js(r.prototype), "createElements", this).call(this), this.TEXTAREA = this.hot.rootDocument.createElement("input"), this.TEXTAREA.setAttribute("type", "password"), this.TEXTAREA.setAttribute("data-hot-input", ""), this.TEXTAREA.className = "handsontableInput", this.textareaStyle = this.TEXTAREA.style, this.textareaStyle.width = 0, this.textareaStyle.height = 0, jn(this.TEXTAREA_PARENT), this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);
    }
  }], [{
    key: "EDITOR_TYPE",
    get: function() {
      return ZRe;
    }
  }]), r;
}(nl);
function Wa(e) {
  "@babel/helpers - typeof";
  return Wa = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Wa(e);
}
function QRe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function Px(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, eEe(n.key), n);
  }
}
function JRe(e, t, r) {
  return t && Px(e.prototype, t), r && Px(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function eEe(e) {
  var t = tEe(e, "string");
  return Wa(t) === "symbol" ? t : String(t);
}
function tEe(e, t) {
  if (Wa(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Wa(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function vp() {
  return typeof Reflect < "u" && Reflect.get ? vp = Reflect.get.bind() : vp = function(t, r, n) {
    var o = rEe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, vp.apply(this, arguments);
}
function rEe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = eu(e), e !== null); )
    ;
  return e;
}
function nEe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && sO(e, t);
}
function sO(e, t) {
  return sO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, sO(e, t);
}
function oEe(e) {
  var t = lEe();
  return function() {
    var n = eu(e), o;
    if (t) {
      var i = eu(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return iEe(this, o);
  };
}
function iEe(e, t) {
  if (t && (Wa(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return aEe(e);
}
function aEe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function lEe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function eu(e) {
  return eu = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, eu(e);
}
var Yw = "ht_editor_visible", kx = "selectEditor", sEe = "select", uEe = /* @__PURE__ */ function(e) {
  nEe(r, e);
  var t = oEe(r);
  function r() {
    return QRe(this, r), t.apply(this, arguments);
  }
  return JRe(r, [{
    key: "init",
    value: (
      /**
       * Initializes editor instance, DOM Element and mount hooks.
       */
      function() {
        this.select = this.hot.rootDocument.createElement("SELECT"), ae(this.select, "htSelectEditor"), this.select.style.display = "none", this.hot.rootElement.appendChild(this.select), this.registerHooks();
      }
    )
    /**
     * Returns select's value.
     *
     * @returns {*}
     */
  }, {
    key: "getValue",
    value: function() {
      return this.select.value;
    }
    /**
     * Sets value in the select element.
     *
     * @param {*} value A new select's value.
     */
  }, {
    key: "setValue",
    value: function(o) {
      this.select.value = o;
    }
    /**
     * Opens the editor and adjust its size.
     */
  }, {
    key: "open",
    value: function() {
      this._opened = !0, this.refreshDimensions(), this.select.style.display = "";
      var o = this.hot.getShortcutManager();
      o.setActiveContextName("editor"), this.registerShortcuts();
    }
    /**
     * Closes the editor.
     */
  }, {
    key: "close",
    value: function() {
      this._opened = !1, this.select.style.display = "none", Me(this.select, Yw) && Le(this.select, Yw), this.unregisterShortcuts(), this.clearHooks();
    }
    /**
     * Sets focus state on the select element.
     */
  }, {
    key: "focus",
    value: function() {
      this.select.focus();
    }
    /**
     * Binds hooks to refresh editor's size after scrolling of the viewport or resizing of columns/rows.
     *
     * @private
     */
  }, {
    key: "registerHooks",
    value: function() {
      var o = this;
      this.addHook("afterScrollHorizontally", function() {
        return o.refreshDimensions();
      }), this.addHook("afterScrollVertically", function() {
        return o.refreshDimensions();
      }), this.addHook("afterColumnResize", function() {
        return o.refreshDimensions();
      }), this.addHook("afterRowResize", function() {
        return o.refreshDimensions();
      });
    }
    /**
     * Prepares editor's meta data and a list of available options.
     *
     * @param {number} row The visual row index.
     * @param {number} col The visual column index.
     * @param {number|string} prop The column property (passed when datasource is an array of objects).
     * @param {HTMLTableCellElement} td The rendered cell element.
     * @param {*} value The rendered value.
     * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
     */
  }, {
    key: "prepare",
    value: function(o, i, a, l, s, u) {
      var f = this;
      vp(eu(r.prototype), "prepare", this).call(this, o, i, a, l, s, u);
      var c = this.cellProperties.selectOptions, h;
      typeof c == "function" ? h = this.prepareOptions(c(this.row, this.col, this.prop)) : h = this.prepareOptions(c), jn(this.select), Ye(h, function(d, y) {
        var p = f.hot.rootDocument.createElement("OPTION");
        p.value = y, _f(p, d), f.select.appendChild(p);
      });
    }
    /**
     * Creates consistent list of available options.
     *
     * @private
     * @param {Array|object} optionsToPrepare The list of the values to render in the select eleemnt.
     * @returns {object}
     */
  }, {
    key: "prepareOptions",
    value: function(o) {
      var i = {};
      if (Array.isArray(o))
        for (var a = 0, l = o.length; a < l; a++)
          i[o[a]] = o[a];
      else
        Wa(o) === "object" && (i = o);
      return i;
    }
    /**
     * Refreshes editor's value using source data.
     *
     * @private
     */
  }, {
    key: "refreshValue",
    value: function() {
      var o = this.hot.getSourceDataAtCell(this.row, this.prop);
      this.originalValue = o, this.setValue(o), this.refreshDimensions();
    }
    /**
     * Refreshes editor's size and position.
     *
     * @private
     */
  }, {
    key: "refreshDimensions",
    value: function() {
      if (this.state === Qt.EDITING) {
        if (this.TD = this.getEditedCell(), !this.TD) {
          this.close();
          return;
        }
        var o = this.getEditedCellRect(), i = o.top, a = o.start, l = o.width, s = o.height, u = this.select.style;
        u.height = "".concat(s, "px"), u.width = "".concat(l, "px"), u.top = "".concat(i, "px"), u[this.hot.isRtl() ? "right" : "left"] = "".concat(a, "px"), u.margin = "0px", ae(this.select, Yw);
      }
    }
    /**
     * Register shortcuts responsible for handling editor.
     *
     * @private
     */
  }, {
    key: "registerShortcuts",
    value: function() {
      var o = this, i = this.hot.getShortcutManager(), a = i.getContext("editor"), l = {
        group: kx
      };
      this.isInFullEditMode() !== !1 && a.addShortcuts([{
        keys: [["ArrowUp"]],
        callback: function() {
          var u = o.select.selectedIndex - 1;
          u >= 0 && (o.select[u].selected = !0);
        }
      }, {
        keys: [["ArrowDown"]],
        callback: function() {
          var u = o.select.selectedIndex + 1;
          u <= o.select.length - 1 && (o.select[u].selected = !0);
        }
      }], l);
    }
    /**
     * Unregister shortcuts responsible for handling editor.
     *
     * @private
     */
  }, {
    key: "unregisterShortcuts",
    value: function() {
      var o = this.hot.getShortcutManager(), i = o.getContext("editor");
      i.removeShortcutsByGroup(kx);
    }
  }], [{
    key: "EDITOR_TYPE",
    get: function() {
      return sEe;
    }
  }]), r;
}(Tf);
function tu(e) {
  "@babel/helpers - typeof";
  return tu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, tu(e);
}
function fEe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function $x(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, hEe(n.key), n);
  }
}
function cEe(e, t, r) {
  return t && $x(e.prototype, t), r && $x(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function hEe(e) {
  var t = dEe(e, "string");
  return tu(t) === "symbol" ? t : String(t);
}
function dEe(e, t) {
  if (tu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (tu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function yp() {
  return typeof Reflect < "u" && Reflect.get ? yp = Reflect.get.bind() : yp = function(t, r, n) {
    var o = vEe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, yp.apply(this, arguments);
}
function vEe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = ru(e), e !== null); )
    ;
  return e;
}
function yEe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && uO(e, t);
}
function uO(e, t) {
  return uO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, uO(e, t);
}
function pEe(e) {
  var t = bEe();
  return function() {
    var n = ru(e), o;
    if (t) {
      var i = ru(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return mEe(this, o);
  };
}
function mEe(e, t) {
  if (t && (tu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return gEe(e);
}
function gEe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function bEe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function ru(e) {
  return ru = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, ru(e);
}
var wEe = "time", Q2 = /* @__PURE__ */ function(e) {
  yEe(r, e);
  var t = pEe(r);
  function r() {
    return fEe(this, r), t.apply(this, arguments);
  }
  return cEe(r, [{
    key: "prepare",
    value: (
      /**
       * Prepares editor's meta data.
       *
       * @param {number} row The visual row index.
       * @param {number} col The visual column index.
       * @param {number|string} prop The column property (passed when datasource is an array of objects).
       * @param {HTMLTableCellElement} td The rendered cell element.
       * @param {*} value The rendered value.
       * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).
       */
      function(o, i, a, l, s, u) {
        yp(ru(r.prototype), "prepare", this).call(this, o, i, a, l, s, u), this.TEXTAREA.dir = "ltr";
      }
    )
  }], [{
    key: "EDITOR_TYPE",
    get: function() {
      return wEe;
    }
  }]), r;
}(nl);
function SEe() {
  Nr(Tf), Nr(dP), Nr(Y2), Nr(q2), Nr(vP), Nr(hP), Nr(X2), Nr(Z2), Nr(uEe), Nr(nl), Nr(Q2);
}
var CEe = "html";
function yP(e, t, r, n, o, i, a) {
  Sv.apply(this, [e, t, r, n, o, i, a]), _f(t, i ?? "", !1);
}
yP.RENDERER_TYPE = CEe;
var _Ee = "autocomplete";
function Pf(e, t, r, n, o, i, a) {
  var l = e.rootDocument, s = a.allowHtml ? yP : Ii, u = l.createElement("DIV");
  if (u.className = "htAutocompleteArrow", u.appendChild(l.createTextNode(String.fromCharCode(9660))), s.apply(this, [e, t, r, n, o, i, a]), t.firstChild || t.appendChild(l.createTextNode(String.fromCharCode(160))), t.insertBefore(u, t.firstChild), ae(t, "htAutocomplete"), !e.acArrowListener) {
    var f = new It(e);
    e.acArrowListener = function(c) {
      Me(c.target, "htAutocompleteArrow") && e.view._wt.getSetting("onCellDblClick", null, e._createCellCoords(r, n), t);
    }, f.addEventListener(e.rootElement, "mousedown", e.acArrowListener), e.addHookOnce("afterDestroy", function() {
      f.destroy();
    });
  }
}
Pf.RENDERER_TYPE = _Ee;
var Ax = /* @__PURE__ */ new WeakMap(), Ix = /* @__PURE__ */ new WeakMap(), OEe = "htBadValue", nu = "data-row", ou = "data-col", REe = "checkboxRenderer", J2 = "checkbox";
we.getSingleton().add("modifyAutoColumnSizeSeed", function(e, t, r) {
  var n = t.label, o = t.type, i = t.row, a = t.column, l = t.prop;
  if (o === J2) {
    if (n) {
      var s = n.value, u = n.property, f = r;
      if (s)
        f = typeof s == "function" ? s(i, a, l, r) : s;
      else if (u) {
        var c = this.getDataAtRowProp(i, u);
        f = c !== null ? c : r;
      }
      e = f;
    }
    return e;
  }
});
function pP(e, t, r, n, o, i, a) {
  var l = e.rootDocument;
  Sv.apply(this, [e, t, r, n, o, i, a]), EEe(e);
  var s = TEe(l), u = a.label, f = !1;
  if (typeof a.checkedTemplate > "u" && (a.checkedTemplate = !0), typeof a.uncheckedTemplate > "u" && (a.uncheckedTemplate = !1), jn(t), i === a.checkedTemplate || Ft(i).toLocaleLowerCase(a.locale) === Ft(a.checkedTemplate).toLocaleLowerCase(a.locale) ? s.checked = !0 : i === a.uncheckedTemplate || Ft(i).toLocaleLowerCase(a.locale) === Ft(a.uncheckedTemplate).toLocaleLowerCase(a.locale) ? s.checked = !1 : Xt(i) ? ae(s, "noValue") : (s.style.display = "none", ae(s, OEe), f = !0), s.setAttribute(nu, r), s.setAttribute(ou, n), !f && u) {
    var c = "";
    if (u.value)
      c = typeof u.value == "function" ? u.value.call(this, r, n, o, i) : u.value;
    else if (u.property) {
      var h = e.getDataAtRowProp(r, u.property);
      c = h !== null ? h : "";
    }
    var d = PEe(l, c, u.separated !== !0);
    u.position === "before" ? u.separated ? (t.appendChild(d), t.appendChild(s)) : (d.appendChild(s), s = d) : (!u.position || u.position === "after") && (u.separated ? (t.appendChild(s), t.appendChild(d)) : (d.insertBefore(s, d.firstChild), s = d));
  }
  (!u || u && !u.separated) && t.appendChild(s), f && t.appendChild(l.createTextNode("#bad-value#")), Ax.has(e) || (Ax.set(e, !0), y());
  function y() {
    var w = e.getShortcutManager(), C = w.getContext("grid"), _ = {
      group: REe
    };
    C.addShortcuts([{
      keys: [["space"]],
      callback: function() {
        return p(), !g();
      }
    }, {
      keys: [["enter"]],
      callback: function() {
        return p(), !g();
      },
      runOnlyIf: function() {
        return e.getSettings().enterBeginsEditing;
      }
    }, {
      keys: [["delete"], ["backspace"]],
      callback: function() {
        return p(!0), !g();
      },
      relativeToGroup: bc,
      position: "before"
    }], _);
  }
  function p() {
    var w = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1, C = e.getSelectedRange();
    if (C)
      for (var _ = 0; _ < C.length; _++) {
        for (var k = C[_].getTopStartCorner(), E = k.row, j = k.col, Y = C[_].getBottomEndCorner(), Q = Y.row, X = Y.col, q = [], J = E; J <= Q; J += 1)
          for (var le = j; le <= X; le += 1) {
            var ee = e.getCellMeta(J, le);
            if (ee.type !== "checkbox")
              return;
            if (ee.readOnly !== !0) {
              typeof ee.checkedTemplate > "u" && (ee.checkedTemplate = !0), typeof ee.uncheckedTemplate > "u" && (ee.uncheckedTemplate = !1);
              var U = e.getDataAtCell(J, le);
              w === !1 ? [ee.checkedTemplate, ee.checkedTemplate.toString()].includes(U) ? q.push([J, le, ee.uncheckedTemplate]) : [ee.uncheckedTemplate, ee.uncheckedTemplate.toString(), null, void 0].includes(U) && q.push([J, le, ee.checkedTemplate]) : q.push([J, le, ee.uncheckedTemplate]);
            }
          }
        q.length > 0 && e.setDataAtCell(q);
      }
  }
  function g() {
    var w = e.getSelectedRange();
    if (w) {
      for (var C = 0; C < w.length; C++)
        for (var _ = w[C].getTopStartCorner(), k = w[C].getBottomEndCorner(), E = _.row; E <= k.row; E++)
          for (var j = _.col; j <= k.col; j++) {
            var Y = e.getCellMeta(E, j);
            if (Y.type !== "checkbox")
              return !1;
            var Q = e.getCell(E, j);
            if (Q == null)
              return !0;
            var X = Q.querySelectorAll("input[type=checkbox]");
            if (X.length > 0 && !Y.readOnly)
              return !0;
          }
      return !1;
    }
  }
}
pP.RENDERER_TYPE = J2;
function EEe(e) {
  var t = Ix.get(e);
  if (!t) {
    var r = e.rootElement;
    t = new It(e), t.addEventListener(r, "click", function(n) {
      return $Ee(n, e);
    }), t.addEventListener(r, "mouseup", function(n) {
      return kEe(n, e);
    }), t.addEventListener(r, "change", function(n) {
      return AEe(n, e);
    }), Ix.set(e, t);
  }
  return t;
}
function TEe(e) {
  var t = e.createElement("input");
  return t.className = "htCheckboxRendererInput", t.type = "checkbox", t.setAttribute("autocomplete", "off"), t.setAttribute("tabindex", "-1"), t.cloneNode(!1);
}
function PEe(e, t, r) {
  var n = e.createElement("label");
  return n.className = "htCheckboxRendererLabel ".concat(r ? "fullWidth" : ""), n.appendChild(e.createTextNode(t)), n.cloneNode(!0);
}
function kEe(e, t) {
  var r = e.target;
  mP(r) && (!r.hasAttribute(nu) || !r.hasAttribute(ou) || setTimeout(t.listen, 10));
}
function $Ee(e, t) {
  var r = e.target;
  if (mP(r) && !(!r.hasAttribute(nu) || !r.hasAttribute(ou))) {
    var n = parseInt(r.getAttribute(nu), 10), o = parseInt(r.getAttribute(ou), 10), i = t.getCellMeta(n, o);
    i.readOnly && e.preventDefault();
  }
}
function AEe(e, t) {
  var r = e.target;
  if (mP(r) && !(!r.hasAttribute(nu) || !r.hasAttribute(ou))) {
    var n = parseInt(r.getAttribute(nu), 10), o = parseInt(r.getAttribute(ou), 10), i = t.getCellMeta(n, o);
    if (!i.readOnly) {
      var a = null;
      e.target.checked ? a = i.uncheckedTemplate === void 0 ? !0 : i.checkedTemplate : a = i.uncheckedTemplate === void 0 ? !1 : i.uncheckedTemplate, t.setDataAtCell(n, o, a);
    }
  }
}
function mP(e) {
  return e.tagName === "INPUT" && e.getAttribute("type") === "checkbox";
}
var eU = { exports: {} };
(function(e, t) {
  (function(r) {
    e.exports = r();
  })(function() {
    return function r(n, o, i) {
      function a(u, f) {
        if (!o[u]) {
          if (!n[u]) {
            var c = typeof kv == "function" && kv;
            if (!f && c)
              return c(u, !0);
            if (l)
              return l(u, !0);
            var h = new Error("Cannot find module '" + u + "'");
            throw h.code = "MODULE_NOT_FOUND", h;
          }
          var d = o[u] = { exports: {} };
          n[u][0].call(d.exports, function(y) {
            return a(n[u][1][y] || y);
          }, d, d.exports, r, n, o, i);
        }
        return o[u].exports;
      }
      for (var l = typeof kv == "function" && kv, s = 0; s < i.length; s++)
        a(i[s]);
      return a;
    }({ 1: [function(r, n, o) {
      (function(i) {
        var a, l = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, s = Math.ceil, u = Math.floor, f = "[BigNumber Error] ", c = f + "Number primitive has more than 15 significant digits: ", h = 1e14, d = 14, y = 9007199254740991, p = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], g = 1e7, w = 1e9;
        function C(X) {
          var q = 0 | X;
          return 0 < X || X === q ? q : q - 1;
        }
        function _(X) {
          for (var q, J, le = 1, ee = X.length, U = X[0] + ""; le < ee; ) {
            for (q = X[le++] + "", J = d - q.length; J--; q = "0" + q)
              ;
            U += q;
          }
          for (ee = U.length; U.charCodeAt(--ee) === 48; )
            ;
          return U.slice(0, ee + 1 || 1);
        }
        function k(X, q) {
          var J, le, ee = X.c, U = q.c, Z = X.s, oe = q.s, ie = X.e, T = q.e;
          if (!Z || !oe)
            return null;
          if (J = ee && !ee[0], le = U && !U[0], J || le)
            return J ? le ? 0 : -oe : Z;
          if (Z != oe)
            return Z;
          if (J = Z < 0, le = ie == T, !ee || !U)
            return le ? 0 : !ee ^ J ? 1 : -1;
          if (!le)
            return T < ie ^ J ? 1 : -1;
          for (oe = (ie = ee.length) < (T = U.length) ? ie : T, Z = 0; Z < oe; Z++)
            if (ee[Z] != U[Z])
              return ee[Z] > U[Z] ^ J ? 1 : -1;
          return ie == T ? 0 : T < ie ^ J ? 1 : -1;
        }
        function E(X, q, J, le) {
          if (X < q || J < X || X !== (X < 0 ? s(X) : u(X)))
            throw Error(f + (le || "Argument") + (typeof X == "number" ? X < q || J < X ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(X));
        }
        function j(X) {
          var q = X.c.length - 1;
          return C(X.e / d) == q && X.c[q] % 2 != 0;
        }
        function Y(X, q) {
          return (1 < X.length ? X.charAt(0) + "." + X.slice(1) : X) + (q < 0 ? "e" : "e+") + q;
        }
        function Q(X, q, J) {
          var le, ee;
          if (q < 0) {
            for (ee = J + "."; ++q; ee += J)
              ;
            X = ee + X;
          } else if (++q > (le = X.length)) {
            for (ee = J, q -= le; --q; ee += J)
              ;
            X += ee;
          } else
            q < le && (X = X.slice(0, q) + "." + X.slice(q));
          return X;
        }
        (a = function X(q) {
          var J, le, ee, U, Z, oe, ie, T, v, m, b = x.prototype = { constructor: x, toString: null, valueOf: null }, S = new x(1), R = 20, $ = 4, H = -7, F = 21, K = -1e7, te = 1e7, re = !1, ce = 1, Oe = 0, ve = { prefix: "", groupSize: 3, secondaryGroupSize: 0, groupSeparator: ",", decimalSeparator: ".", fractionGroupSize: 0, fractionGroupSeparator: "Â ", suffix: "" }, ye = "0123456789abcdefghijklmnopqrstuvwxyz";
          function x(O, P) {
            var A, B, M, W, D, N, z, V, G = this;
            if (!(G instanceof x))
              return new x(O, P);
            if (P == null) {
              if (O instanceof x)
                return G.s = O.s, G.e = O.e, void (G.c = (O = O.c) ? O.slice() : O);
              if ((N = typeof O == "number") && 0 * O == 0) {
                if (G.s = 1 / O < 0 ? (O = -O, -1) : 1, O === ~~O) {
                  for (W = 0, D = O; 10 <= D; D /= 10, W++)
                    ;
                  return G.e = W, void (G.c = [O]);
                }
                V = String(O);
              } else {
                if (V = String(O), !l.test(V))
                  return ee(G, V, N);
                G.s = V.charCodeAt(0) == 45 ? (V = V.slice(1), -1) : 1;
              }
              -1 < (W = V.indexOf(".")) && (V = V.replace(".", "")), 0 < (D = V.search(/e/i)) ? (W < 0 && (W = D), W += +V.slice(D + 1), V = V.substring(0, D)) : W < 0 && (W = V.length);
            } else {
              if (E(P, 2, ye.length, "Base"), V = String(O), P == 10)
                return Ae(G = new x(O instanceof x ? O : V), R + G.e + 1, $);
              if (N = typeof O == "number") {
                if (0 * O != 0)
                  return ee(G, V, N, P);
                if (G.s = 1 / O < 0 ? (V = V.slice(1), -1) : 1, x.DEBUG && 15 < V.replace(/^0\.0*|\./, "").length)
                  throw Error(c + O);
                N = !1;
              } else
                G.s = V.charCodeAt(0) === 45 ? (V = V.slice(1), -1) : 1;
              for (A = ye.slice(0, P), W = D = 0, z = V.length; D < z; D++)
                if (A.indexOf(B = V.charAt(D)) < 0) {
                  if (B == ".") {
                    if (W < D) {
                      W = z;
                      continue;
                    }
                  } else if (!M && (V == V.toUpperCase() && (V = V.toLowerCase()) || V == V.toLowerCase() && (V = V.toUpperCase()))) {
                    M = !0, D = -1, W = 0;
                    continue;
                  }
                  return ee(G, String(O), N, P);
                }
              -1 < (W = (V = le(V, P, 10, G.s)).indexOf(".")) ? V = V.replace(".", "") : W = V.length;
            }
            for (D = 0; V.charCodeAt(D) === 48; D++)
              ;
            for (z = V.length; V.charCodeAt(--z) === 48; )
              ;
            if (V = V.slice(D, ++z)) {
              if (z -= D, N && x.DEBUG && 15 < z && (y < O || O !== u(O)))
                throw Error(c + G.s * O);
              if (te < (W = W - D - 1))
                G.c = G.e = null;
              else if (W < K)
                G.c = [G.e = 0];
              else {
                if (G.e = W, G.c = [], D = (W + 1) % d, W < 0 && (D += d), D < z) {
                  for (D && G.c.push(+V.slice(0, D)), z -= d; D < z; )
                    G.c.push(+V.slice(D, D += d));
                  V = V.slice(D), D = d - V.length;
                } else
                  D -= z;
                for (; D--; V += "0")
                  ;
                G.c.push(+V);
              }
            } else
              G.c = [G.e = 0];
          }
          function ke(O, P, A, B) {
            var M, W, D, N, z;
            if (A == null ? A = $ : E(A, 0, 8), !O.c)
              return O.toString();
            if (M = O.c[0], D = O.e, P == null)
              z = _(O.c), z = B == 1 || B == 2 && (D <= H || F <= D) ? Y(z, D) : Q(z, D, "0");
            else if (W = (O = Ae(new x(O), P, A)).e, N = (z = _(O.c)).length, B == 1 || B == 2 && (P <= W || W <= H)) {
              for (; N < P; z += "0", N++)
                ;
              z = Y(z, W);
            } else if (P -= D, z = Q(z, W, "0"), N < W + 1) {
              if (0 < --P)
                for (z += "."; P--; z += "0")
                  ;
            } else if (0 < (P += W - N))
              for (W + 1 == N && (z += "."); P--; z += "0")
                ;
            return O.s < 0 && M ? "-" + z : z;
          }
          function He(O, P) {
            for (var A, B = 1, M = new x(O[0]); B < O.length; B++) {
              if (!(A = new x(O[B])).s) {
                M = A;
                break;
              }
              P.call(M, A) && (M = A);
            }
            return M;
          }
          function Ee(O, P, A) {
            for (var B = 1, M = P.length; !P[--M]; P.pop())
              ;
            for (M = P[0]; 10 <= M; M /= 10, B++)
              ;
            return (A = B + A * d - 1) > te ? O.c = O.e = null : O.c = A < K ? [O.e = 0] : (O.e = A, P), O;
          }
          function Ae(O, P, A, B) {
            var M, W, D, N, z, V, G, fe = O.c, ge = p;
            if (fe) {
              e: {
                for (M = 1, N = fe[0]; 10 <= N; N /= 10, M++)
                  ;
                if ((W = P - M) < 0)
                  W += d, D = P, G = (z = fe[V = 0]) / ge[M - D - 1] % 10 | 0;
                else if ((V = s((W + 1) / d)) >= fe.length) {
                  if (!B)
                    break e;
                  for (; fe.length <= V; fe.push(0))
                    ;
                  z = G = 0, D = (W %= d) - d + (M = 1);
                } else {
                  for (z = N = fe[V], M = 1; 10 <= N; N /= 10, M++)
                    ;
                  G = (D = (W %= d) - d + M) < 0 ? 0 : z / ge[M - D - 1] % 10 | 0;
                }
                if (B = B || P < 0 || fe[V + 1] != null || (D < 0 ? z : z % ge[M - D - 1]), B = A < 4 ? (G || B) && (A == 0 || A == (O.s < 0 ? 3 : 2)) : 5 < G || G == 5 && (A == 4 || B || A == 6 && (0 < W ? 0 < D ? z / ge[M - D] : 0 : fe[V - 1]) % 10 & 1 || A == (O.s < 0 ? 8 : 7)), P < 1 || !fe[0])
                  return fe.length = 0, B ? (P -= O.e + 1, fe[0] = ge[(d - P % d) % d], O.e = -P || 0) : fe[0] = O.e = 0, O;
                if (W == 0 ? (fe.length = V, N = 1, V--) : (fe.length = V + 1, N = ge[d - W], fe[V] = 0 < D ? u(z / ge[M - D] % ge[D]) * N : 0), B)
                  for (; ; ) {
                    if (V == 0) {
                      for (W = 1, D = fe[0]; 10 <= D; D /= 10, W++)
                        ;
                      for (D = fe[0] += N, N = 1; 10 <= D; D /= 10, N++)
                        ;
                      W != N && (O.e++, fe[0] == h && (fe[0] = 1));
                      break;
                    }
                    if (fe[V] += N, fe[V] != h)
                      break;
                    fe[V--] = 0, N = 1;
                  }
                for (W = fe.length; fe[--W] === 0; fe.pop())
                  ;
              }
              O.e > te ? O.c = O.e = null : O.e < K && (O.c = [O.e = 0]);
            }
            return O;
          }
          function $e(O) {
            var P, A = O.e;
            return A === null ? O.toString() : (P = _(O.c), P = A <= H || F <= A ? Y(P, A) : Q(P, A, "0"), O.s < 0 ? "-" + P : P);
          }
          return x.clone = X, x.ROUND_UP = 0, x.ROUND_DOWN = 1, x.ROUND_CEIL = 2, x.ROUND_FLOOR = 3, x.ROUND_HALF_UP = 4, x.ROUND_HALF_DOWN = 5, x.ROUND_HALF_EVEN = 6, x.ROUND_HALF_CEIL = 7, x.ROUND_HALF_FLOOR = 8, x.EUCLID = 9, x.config = x.set = function(O) {
            var P, A;
            if (O != null) {
              if (typeof O != "object")
                throw Error(f + "Object expected: " + O);
              if (O.hasOwnProperty(P = "DECIMAL_PLACES") && (E(A = O[P], 0, w, P), R = A), O.hasOwnProperty(P = "ROUNDING_MODE") && (E(A = O[P], 0, 8, P), $ = A), O.hasOwnProperty(P = "EXPONENTIAL_AT") && ((A = O[P]) && A.pop ? (E(A[0], -w, 0, P), E(A[1], 0, w, P), H = A[0], F = A[1]) : (E(A, -w, w, P), H = -(F = A < 0 ? -A : A))), O.hasOwnProperty(P = "RANGE"))
                if ((A = O[P]) && A.pop)
                  E(A[0], -w, -1, P), E(A[1], 1, w, P), K = A[0], te = A[1];
                else {
                  if (E(A, -w, w, P), !A)
                    throw Error(f + P + " cannot be zero: " + A);
                  K = -(te = A < 0 ? -A : A);
                }
              if (O.hasOwnProperty(P = "CRYPTO")) {
                if ((A = O[P]) !== !!A)
                  throw Error(f + P + " not true or false: " + A);
                if (A) {
                  if (typeof crypto > "u" || !crypto || !crypto.getRandomValues && !crypto.randomBytes)
                    throw re = !A, Error(f + "crypto unavailable");
                  re = A;
                } else
                  re = A;
              }
              if (O.hasOwnProperty(P = "MODULO_MODE") && (E(A = O[P], 0, 9, P), ce = A), O.hasOwnProperty(P = "POW_PRECISION") && (E(A = O[P], 0, w, P), Oe = A), O.hasOwnProperty(P = "FORMAT")) {
                if (typeof (A = O[P]) != "object")
                  throw Error(f + P + " not an object: " + A);
                ve = A;
              }
              if (O.hasOwnProperty(P = "ALPHABET")) {
                if (typeof (A = O[P]) != "string" || /^.$|[+-.\s]|(.).*\1/.test(A))
                  throw Error(f + P + " invalid: " + A);
                ye = A;
              }
            }
            return { DECIMAL_PLACES: R, ROUNDING_MODE: $, EXPONENTIAL_AT: [H, F], RANGE: [K, te], CRYPTO: re, MODULO_MODE: ce, POW_PRECISION: Oe, FORMAT: ve, ALPHABET: ye };
          }, x.isBigNumber = function(O) {
            return O instanceof x || O && O._isBigNumber === !0 || !1;
          }, x.maximum = x.max = function() {
            return He(arguments, b.lt);
          }, x.minimum = x.min = function() {
            return He(arguments, b.gt);
          }, x.random = (U = 9007199254740992, Z = Math.random() * U & 2097151 ? function() {
            return u(Math.random() * U);
          } : function() {
            return 8388608 * (1073741824 * Math.random() | 0) + (8388608 * Math.random() | 0);
          }, function(O) {
            var P, A, B, M, W, D = 0, N = [], z = new x(S);
            if (O == null ? O = R : E(O, 0, w), M = s(O / d), re)
              if (crypto.getRandomValues) {
                for (P = crypto.getRandomValues(new Uint32Array(M *= 2)); D < M; )
                  9e15 <= (W = 131072 * P[D] + (P[D + 1] >>> 11)) ? (A = crypto.getRandomValues(new Uint32Array(2)), P[D] = A[0], P[D + 1] = A[1]) : (N.push(W % 1e14), D += 2);
                D = M / 2;
              } else {
                if (!crypto.randomBytes)
                  throw re = !1, Error(f + "crypto unavailable");
                for (P = crypto.randomBytes(M *= 7); D < M; )
                  9e15 <= (W = 281474976710656 * (31 & P[D]) + 1099511627776 * P[D + 1] + 4294967296 * P[D + 2] + 16777216 * P[D + 3] + (P[D + 4] << 16) + (P[D + 5] << 8) + P[D + 6]) ? crypto.randomBytes(7).copy(P, D) : (N.push(W % 1e14), D += 7);
                D = M / 7;
              }
            if (!re)
              for (; D < M; )
                (W = Z()) < 9e15 && (N[D++] = W % 1e14);
            for (M = N[--D], O %= d, M && O && (W = p[d - O], N[D] = u(M / W) * W); N[D] === 0; N.pop(), D--)
              ;
            if (D < 0)
              N = [B = 0];
            else {
              for (B = -1; N[0] === 0; N.splice(0, 1), B -= d)
                ;
              for (D = 1, W = N[0]; 10 <= W; W /= 10, D++)
                ;
              D < d && (B -= d - D);
            }
            return z.e = B, z.c = N, z;
          }), x.sum = function() {
            for (var O = 1, P = arguments, A = new x(P[0]); O < P.length; )
              A = A.plus(P[O++]);
            return A;
          }, le = function() {
            var O = "0123456789";
            function P(A, B, M, W) {
              for (var D, N, z = [0], V = 0, G = A.length; V < G; ) {
                for (N = z.length; N--; z[N] *= B)
                  ;
                for (z[0] += W.indexOf(A.charAt(V++)), D = 0; D < z.length; D++)
                  z[D] > M - 1 && (z[D + 1] == null && (z[D + 1] = 0), z[D + 1] += z[D] / M | 0, z[D] %= M);
              }
              return z.reverse();
            }
            return function(A, B, M, W, D) {
              var N, z, V, G, fe, ge, Re, xe, Ke = A.indexOf("."), ct = R, De = $;
              for (0 <= Ke && (G = Oe, Oe = 0, A = A.replace(".", ""), ge = (xe = new x(B)).pow(A.length - Ke), Oe = G, xe.c = P(Q(_(ge.c), ge.e, "0"), 10, M, O), xe.e = xe.c.length), V = G = (Re = P(A, B, M, D ? (N = ye, O) : (N = O, ye))).length; Re[--G] == 0; Re.pop())
                ;
              if (!Re[0])
                return N.charAt(0);
              if (Ke < 0 ? --V : (ge.c = Re, ge.e = V, ge.s = W, Re = (ge = J(ge, xe, ct, De, M)).c, fe = ge.r, V = ge.e), Ke = Re[z = V + ct + 1], G = M / 2, fe = fe || z < 0 || Re[z + 1] != null, fe = De < 4 ? (Ke != null || fe) && (De == 0 || De == (ge.s < 0 ? 3 : 2)) : G < Ke || Ke == G && (De == 4 || fe || De == 6 && 1 & Re[z - 1] || De == (ge.s < 0 ? 8 : 7)), z < 1 || !Re[0])
                A = fe ? Q(N.charAt(1), -ct, N.charAt(0)) : N.charAt(0);
              else {
                if (Re.length = z, fe)
                  for (--M; ++Re[--z] > M; )
                    Re[z] = 0, z || (++V, Re = [1].concat(Re));
                for (G = Re.length; !Re[--G]; )
                  ;
                for (Ke = 0, A = ""; Ke <= G; A += N.charAt(Re[Ke++]))
                  ;
                A = Q(A, V, N.charAt(0));
              }
              return A;
            };
          }(), J = function() {
            function O(B, M, W) {
              var D, N, z, V, G = 0, fe = B.length, ge = M % g, Re = M / g | 0;
              for (B = B.slice(); fe--; )
                G = ((N = ge * (z = B[fe] % g) + (D = Re * z + (V = B[fe] / g | 0) * ge) % g * g + G) / W | 0) + (D / g | 0) + Re * V, B[fe] = N % W;
              return G && (B = [G].concat(B)), B;
            }
            function P(B, M, W, D) {
              var N, z;
              if (W != D)
                z = D < W ? 1 : -1;
              else
                for (N = z = 0; N < W; N++)
                  if (B[N] != M[N]) {
                    z = B[N] > M[N] ? 1 : -1;
                    break;
                  }
              return z;
            }
            function A(B, M, W, D) {
              for (var N = 0; W--; )
                B[W] -= N, N = B[W] < M[W] ? 1 : 0, B[W] = N * D + B[W] - M[W];
              for (; !B[0] && 1 < B.length; B.splice(0, 1))
                ;
            }
            return function(B, M, W, D, N) {
              var z, V, G, fe, ge, Re, xe, Ke, ct, De, Ne, tt, ot, Je, qe, Qe, Ht, vt = B.s == M.s ? 1 : -1, lt = B.c, rt = M.c;
              if (!(lt && lt[0] && rt && rt[0]))
                return new x(B.s && M.s && (lt ? !rt || lt[0] != rt[0] : rt) ? lt && lt[0] == 0 || !rt ? 0 * vt : vt / 0 : NaN);
              for (ct = (Ke = new x(vt)).c = [], vt = W + (V = B.e - M.e) + 1, N || (N = h, V = C(B.e / d) - C(M.e / d), vt = vt / d | 0), G = 0; rt[G] == (lt[G] || 0); G++)
                ;
              if (rt[G] > (lt[G] || 0) && V--, vt < 0)
                ct.push(1), fe = !0;
              else {
                for (Je = lt.length, Qe = rt.length, vt += 2, 1 < (ge = u(N / (rt[G = 0] + 1))) && (rt = O(rt, ge, N), lt = O(lt, ge, N), Qe = rt.length, Je = lt.length), ot = Qe, Ne = (De = lt.slice(0, Qe)).length; Ne < Qe; De[Ne++] = 0)
                  ;
                Ht = rt.slice(), Ht = [0].concat(Ht), qe = rt[0], rt[1] >= N / 2 && qe++;
                do {
                  if (ge = 0, (z = P(rt, De, Qe, Ne)) < 0) {
                    if (tt = De[0], Qe != Ne && (tt = tt * N + (De[1] || 0)), 1 < (ge = u(tt / qe)))
                      for (N <= ge && (ge = N - 1), xe = (Re = O(rt, ge, N)).length, Ne = De.length; P(Re, De, xe, Ne) == 1; )
                        ge--, A(Re, Qe < xe ? Ht : rt, xe, N), xe = Re.length, z = 1;
                    else
                      ge == 0 && (z = ge = 1), xe = (Re = rt.slice()).length;
                    if (xe < Ne && (Re = [0].concat(Re)), A(De, Re, Ne, N), Ne = De.length, z == -1)
                      for (; P(rt, De, Qe, Ne) < 1; )
                        ge++, A(De, Qe < Ne ? Ht : rt, Ne, N), Ne = De.length;
                  } else
                    z === 0 && (ge++, De = [0]);
                  ct[G++] = ge, De[0] ? De[Ne++] = lt[ot] || 0 : (De = [lt[ot]], Ne = 1);
                } while ((ot++ < Je || De[0] != null) && vt--);
                fe = De[0] != null, ct[0] || ct.splice(0, 1);
              }
              if (N == h) {
                for (G = 1, vt = ct[0]; 10 <= vt; vt /= 10, G++)
                  ;
                Ae(Ke, W + (Ke.e = G + V * d - 1) + 1, D, fe);
              } else
                Ke.e = V, Ke.r = +fe;
              return Ke;
            };
          }(), oe = /^(-?)0([xbo])(?=\w[\w.]*$)/i, ie = /^([^.]+)\.$/, T = /^\.([^.]+)$/, v = /^-?(Infinity|NaN)$/, m = /^\s*\+(?=[\w.])|^\s+|\s+$/g, ee = function(O, P, A, B) {
            var M, W = A ? P : P.replace(m, "");
            if (v.test(W))
              O.s = isNaN(W) ? null : W < 0 ? -1 : 1, O.c = O.e = null;
            else {
              if (!A && (W = W.replace(oe, function(D, N, z) {
                return M = (z = z.toLowerCase()) == "x" ? 16 : z == "b" ? 2 : 8, B && B != M ? D : N;
              }), B && (M = B, W = W.replace(ie, "$1").replace(T, "0.$1")), P != W))
                return new x(W, M);
              if (x.DEBUG)
                throw Error(f + "Not a" + (B ? " base " + B : "") + " number: " + P);
              O.c = O.e = O.s = null;
            }
          }, b.absoluteValue = b.abs = function() {
            var O = new x(this);
            return O.s < 0 && (O.s = 1), O;
          }, b.comparedTo = function(O, P) {
            return k(this, new x(O, P));
          }, b.decimalPlaces = b.dp = function(O, P) {
            var A, B, M;
            if (O != null)
              return E(O, 0, w), P == null ? P = $ : E(P, 0, 8), Ae(new x(this), O + this.e + 1, P);
            if (!(A = this.c))
              return null;
            if (B = ((M = A.length - 1) - C(this.e / d)) * d, M = A[M])
              for (; M % 10 == 0; M /= 10, B--)
                ;
            return B < 0 && (B = 0), B;
          }, b.dividedBy = b.div = function(O, P) {
            return J(this, new x(O, P), R, $);
          }, b.dividedToIntegerBy = b.idiv = function(O, P) {
            return J(this, new x(O, P), 0, 1);
          }, b.exponentiatedBy = b.pow = function(O, P) {
            var A, B, M, W, D, N, z, V, G = this;
            if ((O = new x(O)).c && !O.isInteger())
              throw Error(f + "Exponent not an integer: " + $e(O));
            if (P != null && (P = new x(P)), D = 14 < O.e, !G.c || !G.c[0] || G.c[0] == 1 && !G.e && G.c.length == 1 || !O.c || !O.c[0])
              return V = new x(Math.pow(+$e(G), D ? 2 - j(O) : +$e(O))), P ? V.mod(P) : V;
            if (N = O.s < 0, P) {
              if (P.c ? !P.c[0] : !P.s)
                return new x(NaN);
              (B = !N && G.isInteger() && P.isInteger()) && (G = G.mod(P));
            } else {
              if (9 < O.e && (0 < G.e || G.e < -1 || (G.e == 0 ? 1 < G.c[0] || D && 24e7 <= G.c[1] : G.c[0] < 8e13 || D && G.c[0] <= 9999975e7)))
                return W = G.s < 0 && j(O) ? -0 : 0, -1 < G.e && (W = 1 / W), new x(N ? 1 / W : W);
              Oe && (W = s(Oe / d + 2));
            }
            for (z = D ? (A = new x(0.5), N && (O.s = 1), j(O)) : (M = Math.abs(+$e(O))) % 2, V = new x(S); ; ) {
              if (z) {
                if (!(V = V.times(G)).c)
                  break;
                W ? V.c.length > W && (V.c.length = W) : B && (V = V.mod(P));
              }
              if (M) {
                if ((M = u(M / 2)) === 0)
                  break;
                z = M % 2;
              } else if (Ae(O = O.times(A), O.e + 1, 1), 14 < O.e)
                z = j(O);
              else {
                if ((M = +$e(O)) == 0)
                  break;
                z = M % 2;
              }
              G = G.times(G), W ? G.c && G.c.length > W && (G.c.length = W) : B && (G = G.mod(P));
            }
            return B ? V : (N && (V = S.div(V)), P ? V.mod(P) : W ? Ae(V, Oe, $, void 0) : V);
          }, b.integerValue = function(O) {
            var P = new x(this);
            return O == null ? O = $ : E(O, 0, 8), Ae(P, P.e + 1, O);
          }, b.isEqualTo = b.eq = function(O, P) {
            return k(this, new x(O, P)) === 0;
          }, b.isFinite = function() {
            return !!this.c;
          }, b.isGreaterThan = b.gt = function(O, P) {
            return 0 < k(this, new x(O, P));
          }, b.isGreaterThanOrEqualTo = b.gte = function(O, P) {
            return (P = k(this, new x(O, P))) === 1 || P === 0;
          }, b.isInteger = function() {
            return !!this.c && C(this.e / d) > this.c.length - 2;
          }, b.isLessThan = b.lt = function(O, P) {
            return k(this, new x(O, P)) < 0;
          }, b.isLessThanOrEqualTo = b.lte = function(O, P) {
            return (P = k(this, new x(O, P))) === -1 || P === 0;
          }, b.isNaN = function() {
            return !this.s;
          }, b.isNegative = function() {
            return this.s < 0;
          }, b.isPositive = function() {
            return 0 < this.s;
          }, b.isZero = function() {
            return !!this.c && this.c[0] == 0;
          }, b.minus = function(O, P) {
            var A, B, M, W, D = this, N = D.s;
            if (P = (O = new x(O, P)).s, !N || !P)
              return new x(NaN);
            if (N != P)
              return O.s = -P, D.plus(O);
            var z = D.e / d, V = O.e / d, G = D.c, fe = O.c;
            if (!z || !V) {
              if (!G || !fe)
                return G ? (O.s = -P, O) : new x(fe ? D : NaN);
              if (!G[0] || !fe[0])
                return fe[0] ? (O.s = -P, O) : new x(G[0] ? D : $ == 3 ? -0 : 0);
            }
            if (z = C(z), V = C(V), G = G.slice(), N = z - V) {
              for ((M = (W = N < 0) ? (N = -N, G) : (V = z, fe)).reverse(), P = N; P--; M.push(0))
                ;
              M.reverse();
            } else
              for (B = (W = (N = G.length) < (P = fe.length)) ? N : P, N = P = 0; P < B; P++)
                if (G[P] != fe[P]) {
                  W = G[P] < fe[P];
                  break;
                }
            if (W && (M = G, G = fe, fe = M, O.s = -O.s), 0 < (P = (B = fe.length) - (A = G.length)))
              for (; P--; G[A++] = 0)
                ;
            for (P = h - 1; N < B; ) {
              if (G[--B] < fe[B]) {
                for (A = B; A && !G[--A]; G[A] = P)
                  ;
                --G[A], G[B] += h;
              }
              G[B] -= fe[B];
            }
            for (; G[0] == 0; G.splice(0, 1), --V)
              ;
            return G[0] ? Ee(O, G, V) : (O.s = $ == 3 ? -1 : 1, O.c = [O.e = 0], O);
          }, b.modulo = b.mod = function(O, P) {
            var A, B, M = this;
            return O = new x(O, P), !M.c || !O.s || O.c && !O.c[0] ? new x(NaN) : !O.c || M.c && !M.c[0] ? new x(M) : (ce == 9 ? (B = O.s, O.s = 1, A = J(M, O, 0, 3), O.s = B, A.s *= B) : A = J(M, O, 0, ce), (O = M.minus(A.times(O))).c[0] || ce != 1 || (O.s = M.s), O);
          }, b.multipliedBy = b.times = function(O, P) {
            var A, B, M, W, D, N, z, V, G, fe, ge, Re, xe, Ke, ct, De = this, Ne = De.c, tt = (O = new x(O, P)).c;
            if (!(Ne && tt && Ne[0] && tt[0]))
              return !De.s || !O.s || Ne && !Ne[0] && !tt || tt && !tt[0] && !Ne ? O.c = O.e = O.s = null : (O.s *= De.s, Ne && tt ? (O.c = [0], O.e = 0) : O.c = O.e = null), O;
            for (B = C(De.e / d) + C(O.e / d), O.s *= De.s, (z = Ne.length) < (fe = tt.length) && (xe = Ne, Ne = tt, tt = xe, M = z, z = fe, fe = M), M = z + fe, xe = []; M--; xe.push(0))
              ;
            for (Ke = h, ct = g, M = fe; 0 <= --M; ) {
              for (A = 0, ge = tt[M] % ct, Re = tt[M] / ct | 0, W = M + (D = z); M < W; )
                A = ((V = ge * (V = Ne[--D] % ct) + (N = Re * V + (G = Ne[D] / ct | 0) * ge) % ct * ct + xe[W] + A) / Ke | 0) + (N / ct | 0) + Re * G, xe[W--] = V % Ke;
              xe[W] = A;
            }
            return A ? ++B : xe.splice(0, 1), Ee(O, xe, B);
          }, b.negated = function() {
            var O = new x(this);
            return O.s = -O.s || null, O;
          }, b.plus = function(O, P) {
            var A, B = this, M = B.s;
            if (P = (O = new x(O, P)).s, !M || !P)
              return new x(NaN);
            if (M != P)
              return O.s = -P, B.minus(O);
            var W = B.e / d, D = O.e / d, N = B.c, z = O.c;
            if (!W || !D) {
              if (!N || !z)
                return new x(M / 0);
              if (!N[0] || !z[0])
                return z[0] ? O : new x(N[0] ? B : 0 * M);
            }
            if (W = C(W), D = C(D), N = N.slice(), M = W - D) {
              for ((A = 0 < M ? (D = W, z) : (M = -M, N)).reverse(); M--; A.push(0))
                ;
              A.reverse();
            }
            for ((M = N.length) - (P = z.length) < 0 && (A = z, z = N, N = A, P = M), M = 0; P; )
              M = (N[--P] = N[P] + z[P] + M) / h | 0, N[P] = h === N[P] ? 0 : N[P] % h;
            return M && (N = [M].concat(N), ++D), Ee(O, N, D);
          }, b.precision = b.sd = function(O, P) {
            var A, B, M;
            if (O != null && O !== !!O)
              return E(O, 1, w), P == null ? P = $ : E(P, 0, 8), Ae(new x(this), O, P);
            if (!(A = this.c))
              return null;
            if (B = (M = A.length - 1) * d + 1, M = A[M]) {
              for (; M % 10 == 0; M /= 10, B--)
                ;
              for (M = A[0]; 10 <= M; M /= 10, B++)
                ;
            }
            return O && this.e + 1 > B && (B = this.e + 1), B;
          }, b.shiftedBy = function(O) {
            return E(O, -y, y), this.times("1e" + O);
          }, b.squareRoot = b.sqrt = function() {
            var O, P, A, B, M, W = this, D = W.c, N = W.s, z = W.e, V = R + 4, G = new x("0.5");
            if (N !== 1 || !D || !D[0])
              return new x(!N || N < 0 && (!D || D[0]) ? NaN : D ? W : 1 / 0);
            if ((A = (N = Math.sqrt(+$e(W))) == 0 || N == 1 / 0 ? (((P = _(D)).length + z) % 2 == 0 && (P += "0"), N = Math.sqrt(+P), z = C((z + 1) / 2) - (z < 0 || z % 2), new x(P = N == 1 / 0 ? "1e" + z : (P = N.toExponential()).slice(0, P.indexOf("e") + 1) + z)) : new x(N + "")).c[0]) {
              for ((N = (z = A.e) + V) < 3 && (N = 0); ; )
                if (M = A, A = G.times(M.plus(J(W, M, V, 1))), _(M.c).slice(0, N) === (P = _(A.c)).slice(0, N)) {
                  if (A.e < z && --N, (P = P.slice(N - 3, N + 1)) != "9999" && (B || P != "4999")) {
                    +P && (+P.slice(1) || P.charAt(0) != "5") || (Ae(A, A.e + R + 2, 1), O = !A.times(A).eq(W));
                    break;
                  }
                  if (!B && (Ae(M, M.e + R + 2, 0), M.times(M).eq(W))) {
                    A = M;
                    break;
                  }
                  V += 4, N += 4, B = 1;
                }
            }
            return Ae(A, A.e + R + 1, $, O);
          }, b.toExponential = function(O, P) {
            return O != null && (E(O, 0, w), O++), ke(this, O, P, 1);
          }, b.toFixed = function(O, P) {
            return O != null && (E(O, 0, w), O = O + this.e + 1), ke(this, O, P);
          }, b.toFormat = function(O, P, A) {
            var B;
            if (A == null)
              O != null && P && typeof P == "object" ? (A = P, P = null) : O && typeof O == "object" ? (A = O, O = P = null) : A = ve;
            else if (typeof A != "object")
              throw Error(f + "Argument not an object: " + A);
            if (B = this.toFixed(O, P), this.c) {
              var M, W = B.split("."), D = +A.groupSize, N = +A.secondaryGroupSize, z = A.groupSeparator || "", V = W[0], G = W[1], fe = this.s < 0, ge = fe ? V.slice(1) : V, Re = ge.length;
              if (N && (M = D, D = N, Re -= N = M), 0 < D && 0 < Re) {
                for (M = Re % D || D, V = ge.substr(0, M); M < Re; M += D)
                  V += z + ge.substr(M, D);
                0 < N && (V += z + ge.slice(M)), fe && (V = "-" + V);
              }
              B = G ? V + (A.decimalSeparator || "") + ((N = +A.fractionGroupSize) ? G.replace(new RegExp("\\d{" + N + "}\\B", "g"), "$&" + (A.fractionGroupSeparator || "")) : G) : V;
            }
            return (A.prefix || "") + B + (A.suffix || "");
          }, b.toFraction = function(O) {
            var P, A, B, M, W, D, N, z, V, G, fe, ge, Re = this, xe = Re.c;
            if (O != null && (!(N = new x(O)).isInteger() && (N.c || N.s !== 1) || N.lt(S)))
              throw Error(f + "Argument " + (N.isInteger() ? "out of range: " : "not an integer: ") + $e(N));
            if (!xe)
              return new x(Re);
            for (P = new x(S), V = A = new x(S), B = z = new x(S), ge = _(xe), W = P.e = ge.length - Re.e - 1, P.c[0] = p[(D = W % d) < 0 ? d + D : D], O = !O || 0 < N.comparedTo(P) ? 0 < W ? P : V : N, D = te, te = 1 / 0, N = new x(ge), z.c[0] = 0; G = J(N, P, 0, 1), (M = A.plus(G.times(B))).comparedTo(O) != 1; )
              A = B, B = M, V = z.plus(G.times(M = V)), z = M, P = N.minus(G.times(M = P)), N = M;
            return M = J(O.minus(A), B, 0, 1), z = z.plus(M.times(V)), A = A.plus(M.times(B)), z.s = V.s = Re.s, fe = J(V, B, W *= 2, $).minus(Re).abs().comparedTo(J(z, A, W, $).minus(Re).abs()) < 1 ? [V, B] : [z, A], te = D, fe;
          }, b.toNumber = function() {
            return +$e(this);
          }, b.toPrecision = function(O, P) {
            return O != null && E(O, 1, w), ke(this, O, P, 2);
          }, b.toString = function(O) {
            var P, A = this, B = A.s, M = A.e;
            return M === null ? B ? (P = "Infinity", B < 0 && (P = "-" + P)) : P = "NaN" : (P = O == null ? M <= H || F <= M ? Y(_(A.c), M) : Q(_(A.c), M, "0") : O === 10 ? Q(_((A = Ae(new x(A), R + M + 1, $)).c), A.e, "0") : (E(O, 2, ye.length, "Base"), le(Q(_(A.c), M, "0"), 10, O, B, !0)), B < 0 && A.c[0] && (P = "-" + P)), P;
          }, b.valueOf = b.toJSON = function() {
            return $e(this);
          }, b._isBigNumber = !0, typeof Symbol == "function" && typeof Symbol.iterator == "symbol" && (b[Symbol.toStringTag] = "BigNumber", b[Symbol.for("nodejs.util.inspect.custom")] = b.valueOf), q != null && x.set(q), x;
        }()).default = a.BigNumber = a, n !== void 0 && n.exports ? n.exports = a : (i || (i = typeof self < "u" && self ? self : window), i.BigNumber = a);
      })(this);
    }, {}], 2: [function(r, n, o) {
      n.exports = { languageTag: "en-US", delimiters: { thousands: ",", decimal: "." }, abbreviations: { thousand: "k", million: "m", billion: "b", trillion: "t" }, spaceSeparated: !1, ordinal: function(i) {
        var a = i % 10;
        return ~~(i % 100 / 10) == 1 ? "th" : a === 1 ? "st" : a === 2 ? "nd" : a === 3 ? "rd" : "th";
      }, currency: { symbol: "$", position: "prefix", code: "USD" }, currencyFormat: { thousandSeparated: !0, totalLength: 4, spaceSeparated: !0 }, formats: { fourDigits: { totalLength: 4, spaceSeparated: !0 }, fullWithTwoDecimals: { output: "currency", thousandSeparated: !0, mantissa: 2 }, fullWithTwoDecimalsNoCurrency: { thousandSeparated: !0, mantissa: 2 }, fullWithNoDecimals: { output: "currency", thousandSeparated: !0, mantissa: 0 } } };
    }, {}], 3: [function(r, n, o) {
      function i(C, _) {
        return function(k) {
          if (Array.isArray(k))
            return k;
        }(C) || function(k, E) {
          var j = [], Y = !0, Q = !1, X = void 0;
          try {
            for (var q, J = k[Symbol.iterator](); !(Y = (q = J.next()).done) && (j.push(q.value), !E || j.length !== E); Y = !0)
              ;
          } catch (le) {
            Q = !0, X = le;
          } finally {
            try {
              Y || J.return == null || J.return();
            } finally {
              if (Q)
                throw X;
            }
          }
          return j;
        }(C, _) || function() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }();
      }
      var a = r("./globalState"), l = r("./validating"), s = r("./parsing"), u = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"], f = { general: { scale: 1024, suffixes: u, marker: "bd" }, binary: { scale: 1024, suffixes: ["B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"], marker: "b" }, decimal: { scale: 1e3, suffixes: u, marker: "d" } }, c = { totalLength: 0, characteristic: 0, forceAverage: !1, average: !1, mantissa: -1, optionalMantissa: !0, thousandSeparated: !1, spaceSeparated: !1, negative: "sign", forceSign: !1 };
      function h(C) {
        var _ = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : {}, k = 2 < arguments.length ? arguments[2] : void 0;
        if (typeof _ == "string" && (_ = s.parseFormat(_)), !l.validateFormat(_))
          return "ERROR: invalid format";
        var E = _.prefix || "", j = _.postfix || "", Y = function(Q, X, q) {
          switch (X.output) {
            case "currency":
              return X = w(X, a.currentCurrencyDefaultFormat()), function(ye, x, ke) {
                var He = ke.currentCurrency(), Ee = Object.assign({}, c, x), Ae = void 0, $e = "", O = !!Ee.totalLength || !!Ee.forceAverage || Ee.average, P = x.currencyPosition || He.position, A = x.currencySymbol || He.symbol;
                Ee.spaceSeparated && ($e = " "), P === "infix" && (Ae = $e + A + $e);
                var B = g({ instance: ye, providedFormat: x, state: ke, decimalSeparator: Ae });
                return P === "prefix" && (B = ye._value < 0 && Ee.negative === "sign" ? "-".concat($e).concat(A).concat(B.slice(1)) : A + $e + B), P && P !== "postfix" || (B = B + ($e = O ? "" : $e) + A), B;
              }(Q, X, a);
            case "percent":
              return X = w(X, a.currentPercentageDefaultFormat()), function(ye, x, ke, He) {
                var Ee = x.prefixSymbol, Ae = g({ instance: He(100 * ye._value), providedFormat: x, state: ke }), $e = Object.assign({}, c, x);
                return Ee ? "%".concat($e.spaceSeparated ? " " : "").concat(Ae) : "".concat(Ae).concat($e.spaceSeparated ? " " : "", "%");
              }(Q, X, a, q);
            case "byte":
              return X = w(X, a.currentByteDefaultFormat()), S = Q, $ = a, H = q, F = (R = X).base || "binary", K = f[F], te = d(S._value, K.suffixes, K.scale), re = te.value, ce = te.suffix, Oe = g({ instance: H(re), providedFormat: R, state: $, defaults: $.currentByteDefaultFormat() }), ve = $.currentAbbreviations(), "".concat(Oe).concat(ve.spaced ? " " : "").concat(ce);
            case "time":
              return X = w(X, a.currentTimeDefaultFormat()), T = Q, v = Math.floor(T._value / 60 / 60), m = Math.floor((T._value - 60 * v * 60) / 60), b = Math.round(T._value - 60 * v * 60 - 60 * m), "".concat(v, ":").concat(m < 10 ? "0" : "").concat(m, ":").concat(b < 10 ? "0" : "").concat(b);
            case "ordinal":
              return X = w(X, a.currentOrdinalDefaultFormat()), J = Q, le = X, U = (ee = a).currentOrdinal(), Z = Object.assign({}, c, le), oe = g({ instance: J, providedFormat: le, state: ee }), ie = U(J._value), "".concat(oe).concat(Z.spaceSeparated ? " " : "").concat(ie);
            case "number":
            default:
              return g({ instance: Q, providedFormat: X, numbro: q });
          }
          var J, le, ee, U, Z, oe, ie, T, v, m, b, S, R, $, H, F, K, te, re, ce, Oe, ve;
        }(C, _, k);
        return Y = (Y = E + Y) + j;
      }
      function d(C, _, k) {
        var E = _[0], j = Math.abs(C);
        if (k <= j) {
          for (var Y = 1; Y < _.length; ++Y) {
            var Q = Math.pow(k, Y), X = Math.pow(k, Y + 1);
            if (Q <= j && j < X) {
              E = _[Y], C /= Q;
              break;
            }
          }
          E === _[0] && (C /= Math.pow(k, _.length - 1), E = _[_.length - 1]);
        }
        return { value: C, suffix: E };
      }
      function y(C) {
        for (var _ = "", k = 0; k < C; k++)
          _ += "0";
        return _;
      }
      function p(C, _) {
        return C.toString().indexOf("e") !== -1 ? function(k, E) {
          var j = k.toString(), Y = i(j.split("e"), 2), Q = Y[0], X = Y[1], q = i(Q.split("."), 2), J = q[0], le = q[1], ee = le === void 0 ? "" : le;
          if (0 < +X)
            j = J + ee + y(X - ee.length);
          else {
            var U = ".";
            U = +J < 0 ? "-0".concat(U) : "0".concat(U);
            var Z = (y(-X - 1) + Math.abs(J) + ee).substr(0, E);
            Z.length < E && (Z += y(E - Z.length)), j = U + Z;
          }
          return 0 < +X && 0 < E && (j += ".".concat(y(E))), j;
        }(C, _) : (Math.round(+"".concat(C, "e+").concat(_)) / Math.pow(10, _)).toFixed(_);
      }
      function g(C) {
        var _ = C.instance, k = C.providedFormat, E = C.state, j = E === void 0 ? a : E, Y = C.decimalSeparator, Q = C.defaults, X = Q === void 0 ? j.currentDefaults() : Q, q = _._value;
        if (q === 0 && j.hasZeroFormat())
          return j.getZeroFormat();
        if (!isFinite(q))
          return q.toString();
        var J, le, ee, U, Z, oe, ie, T, v = Object.assign({}, c, X, k), m = v.totalLength, b = m ? 0 : v.characteristic, S = v.optionalCharacteristic, R = v.forceAverage, $ = !!m || !!R || v.average, H = m ? -1 : $ && k.mantissa === void 0 ? 0 : v.mantissa, F = !m && (k.optionalMantissa === void 0 ? H === -1 : v.optionalMantissa), K = v.trimMantissa, te = v.thousandSeparated, re = v.spaceSeparated, ce = v.negative, Oe = v.forceSign, ve = v.exponential, ye = "";
        if ($) {
          var x = function(O) {
            var P = O.value, A = O.forceAverage, B = O.abbreviations, M = O.spaceSeparated, W = M !== void 0 && M, D = O.totalLength, N = D === void 0 ? 0 : D, z = "", V = Math.abs(P), G = -1;
            if (V >= Math.pow(10, 12) && !A || A === "trillion" ? (z = B.trillion, P /= Math.pow(10, 12)) : V < Math.pow(10, 12) && V >= Math.pow(10, 9) && !A || A === "billion" ? (z = B.billion, P /= Math.pow(10, 9)) : V < Math.pow(10, 9) && V >= Math.pow(10, 6) && !A || A === "million" ? (z = B.million, P /= Math.pow(10, 6)) : (V < Math.pow(10, 6) && V >= Math.pow(10, 3) && !A || A === "thousand") && (z = B.thousand, P /= Math.pow(10, 3)), z && (z = (W ? " " : "") + z), N) {
              var fe = P.toString().split(".")[0];
              G = Math.max(N - fe.length, 0);
            }
            return { value: P, abbreviation: z, mantissaPrecision: G };
          }({ value: q, forceAverage: R, abbreviations: j.currentAbbreviations(), spaceSeparated: re, totalLength: m });
          q = x.value, ye += x.abbreviation, m && (H = x.mantissaPrecision);
        }
        if (ve) {
          var ke = (le = (J = { value: q, characteristicPrecision: b }).value, ee = J.characteristicPrecision, U = ee === void 0 ? 0 : ee, Z = i(le.toExponential().split("e"), 2), oe = Z[0], ie = Z[1], T = +oe, U && 1 < U && (T *= Math.pow(10, U - 1), ie = 0 <= (ie = +ie - (U - 1)) ? "+".concat(ie) : ie), { value: T, abbreviation: "e".concat(ie) });
          q = ke.value, ye = ke.abbreviation + ye;
        }
        var He, Ee, Ae, $e = function(O, P, A, B, M) {
          if (B === -1)
            return O;
          var W = p(P, B), D = i(W.toString().split("."), 2), N = D[0], z = D[1], V = z === void 0 ? "" : z;
          if (V.match(/^0+$/) && (A || M))
            return N;
          var G = V.match(/0+$/);
          return M && G ? "".concat(N, ".").concat(V.toString().slice(0, G.index)) : W.toString();
        }(q.toString(), q, F, H, K);
        return $e = function(O, P, A, B, M) {
          var W = B.currentDelimiters(), D = W.thousands;
          M = M || W.decimal;
          var N = W.thousandsSize || 3, z = O.toString(), V = z.split(".")[0], G = z.split(".")[1];
          return A && (P < 0 && (V = V.slice(1)), function(fe, ge) {
            for (var Re = [], xe = 0, Ke = fe; 0 < Ke; Ke--)
              xe === ge && (Re.unshift(Ke), xe = 0), xe++;
            return Re;
          }(V.length, N).forEach(function(fe, ge) {
            V = V.slice(0, fe + ge) + D + V.slice(fe + ge);
          }), P < 0 && (V = "-".concat(V))), z = G ? V + M + G : V;
        }($e = function(O, P, A, B) {
          var M = O, W = i(M.toString().split("."), 2), D = W[0], N = W[1];
          if (D.match(/^-?0$/) && A)
            return N ? "".concat(D.replace("0", ""), ".").concat(N) : D.replace("0", "");
          if (D.length < B)
            for (var z = B - D.length, V = 0; V < z; V++)
              M = "0".concat(M);
          return M.toString();
        }($e, 0, S, b), q, te, j, Y), ($ || ve) && ($e = $e + ye), (Oe || q < 0) && (He = $e, Ae = ce, $e = (Ee = q) === 0 ? He : +He == 0 ? He.replace("-", "") : 0 < Ee ? "+".concat(He) : Ae === "sign" ? He : "(".concat(He.replace("-", ""), ")")), $e;
      }
      function w(C, _) {
        if (!C)
          return _;
        var k = Object.keys(C);
        return k.length === 1 && k[0] === "output" ? _ : C;
      }
      n.exports = function(C) {
        return { format: function() {
          for (var _ = arguments.length, k = new Array(_), E = 0; E < _; E++)
            k[E] = arguments[E];
          return h.apply(void 0, k.concat([C]));
        }, getByteUnit: function() {
          for (var _ = arguments.length, k = new Array(_), E = 0; E < _; E++)
            k[E] = arguments[E];
          return function(j) {
            var Y = f.general;
            return d(j._value, Y.suffixes, Y.scale).suffix;
          }.apply(void 0, k.concat([C]));
        }, getBinaryByteUnit: function() {
          for (var _ = arguments.length, k = new Array(_), E = 0; E < _; E++)
            k[E] = arguments[E];
          return function(j) {
            var Y = f.binary;
            return d(j._value, Y.suffixes, Y.scale).suffix;
          }.apply(void 0, k.concat([C]));
        }, getDecimalByteUnit: function() {
          for (var _ = arguments.length, k = new Array(_), E = 0; E < _; E++)
            k[E] = arguments[E];
          return function(j) {
            var Y = f.decimal;
            return d(j._value, Y.suffixes, Y.scale).suffix;
          }.apply(void 0, k.concat([C]));
        }, formatOrDefault: w };
      };
    }, { "./globalState": 4, "./parsing": 8, "./validating": 10 }], 4: [function(r, n, o) {
      var i = r("./en-US"), a = r("./validating"), l = r("./parsing"), s = {}, u = void 0, f = {}, c = null, h = {};
      function d(p) {
        u = p;
      }
      function y() {
        return f[u];
      }
      s.languages = function() {
        return Object.assign({}, f);
      }, s.currentLanguage = function() {
        return u;
      }, s.currentCurrency = function() {
        return y().currency;
      }, s.currentAbbreviations = function() {
        return y().abbreviations;
      }, s.currentDelimiters = function() {
        return y().delimiters;
      }, s.currentOrdinal = function() {
        return y().ordinal;
      }, s.currentDefaults = function() {
        return Object.assign({}, y().defaults, h);
      }, s.currentOrdinalDefaultFormat = function() {
        return Object.assign({}, s.currentDefaults(), y().ordinalFormat);
      }, s.currentByteDefaultFormat = function() {
        return Object.assign({}, s.currentDefaults(), y().byteFormat);
      }, s.currentPercentageDefaultFormat = function() {
        return Object.assign({}, s.currentDefaults(), y().percentageFormat);
      }, s.currentCurrencyDefaultFormat = function() {
        return Object.assign({}, s.currentDefaults(), y().currencyFormat);
      }, s.currentTimeDefaultFormat = function() {
        return Object.assign({}, s.currentDefaults(), y().timeFormat);
      }, s.setDefaults = function(p) {
        p = l.parseFormat(p), a.validateFormat(p) && (h = p);
      }, s.getZeroFormat = function() {
        return c;
      }, s.setZeroFormat = function(p) {
        return c = typeof p == "string" ? p : null;
      }, s.hasZeroFormat = function() {
        return c !== null;
      }, s.languageData = function(p) {
        if (p) {
          if (f[p])
            return f[p];
          throw new Error('Unknown tag "'.concat(p, '"'));
        }
        return y();
      }, s.registerLanguage = function(p) {
        var g = 1 < arguments.length && arguments[1] !== void 0 && arguments[1];
        if (!a.validateLanguage(p))
          throw new Error("Invalid language data");
        f[p.languageTag] = p, g && d(p.languageTag);
      }, s.setLanguage = function(p) {
        var g = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : i.languageTag;
        if (!f[p]) {
          var w = p.split("-")[0], C = Object.keys(f).find(function(_) {
            return _.split("-")[0] === w;
          });
          return f[C] ? void d(C) : void d(g);
        }
        d(p);
      }, s.registerLanguage(i), u = i.languageTag, n.exports = s;
    }, { "./en-US": 2, "./parsing": 8, "./validating": 10 }], 5: [function(r, n, o) {
      n.exports = function(i) {
        return { loadLanguagesInNode: function(a) {
          return l = i, void a.forEach(function(s) {
            var u = void 0;
            try {
              u = r("../languages/".concat(s));
            } catch {
              console.error('Unable to load "'.concat(s, '". No matching language file found.'));
            }
            u && l.registerLanguage(u);
          });
          var l;
        } };
      };
    }, {}], 6: [function(r, n, o) {
      var i = r("bignumber.js");
      function a(l, s, u) {
        var f = new i(l._value), c = s;
        return u.isNumbro(s) && (c = s._value), c = new i(c), l._value = f.minus(c).toNumber(), l;
      }
      n.exports = function(l) {
        return { add: function(s, u) {
          return c = u, h = l, d = new i((f = s)._value), y = c, h.isNumbro(c) && (y = c._value), y = new i(y), f._value = d.plus(y).toNumber(), f;
          var f, c, h, d, y;
        }, subtract: function(s, u) {
          return a(s, u, l);
        }, multiply: function(s, u) {
          return c = u, h = l, d = new i((f = s)._value), y = c, h.isNumbro(c) && (y = c._value), y = new i(y), f._value = d.times(y).toNumber(), f;
          var f, c, h, d, y;
        }, divide: function(s, u) {
          return c = u, h = l, d = new i((f = s)._value), y = c, h.isNumbro(c) && (y = c._value), y = new i(y), f._value = d.dividedBy(y).toNumber(), f;
          var f, c, h, d, y;
        }, set: function(s, u) {
          return f = s, h = c = u, l.isNumbro(c) && (h = c._value), f._value = h, f;
          var f, c, h;
        }, difference: function(s, u) {
          return f = u, a(h = (c = l)(s._value), f, c), Math.abs(h._value);
          var f, c, h;
        } };
      };
    }, { "bignumber.js": 1 }], 7: [function(r, n, o) {
      function i(g, w) {
        for (var C = 0; C < w.length; C++) {
          var _ = w[C];
          _.enumerable = _.enumerable || !1, _.configurable = !0, "value" in _ && (_.writable = !0), Object.defineProperty(g, _.key, _);
        }
      }
      var a = r("./globalState"), l = r("./validating"), s = r("./loading")(p), u = r("./unformatting"), f = r("./formatting")(p), c = r("./manipulating")(p), h = r("./parsing"), d = function() {
        function g(_) {
          (function(k, E) {
            if (!(k instanceof E))
              throw new TypeError("Cannot call a class as a function");
          })(this, g), this._value = _;
        }
        var w, C;
        return w = g, (C = [{ key: "clone", value: function() {
          return p(this._value);
        } }, { key: "format", value: function() {
          var _ = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : {};
          return f.format(this, _);
        } }, { key: "formatCurrency", value: function(_) {
          return typeof _ == "string" && (_ = h.parseFormat(_)), (_ = f.formatOrDefault(_, a.currentCurrencyDefaultFormat())).output = "currency", f.format(this, _);
        } }, { key: "formatTime", value: function() {
          var _ = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : {};
          return _.output = "time", f.format(this, _);
        } }, { key: "binaryByteUnits", value: function() {
          return f.getBinaryByteUnit(this);
        } }, { key: "decimalByteUnits", value: function() {
          return f.getDecimalByteUnit(this);
        } }, { key: "byteUnits", value: function() {
          return f.getByteUnit(this);
        } }, { key: "difference", value: function(_) {
          return c.difference(this, _);
        } }, { key: "add", value: function(_) {
          return c.add(this, _);
        } }, { key: "subtract", value: function(_) {
          return c.subtract(this, _);
        } }, { key: "multiply", value: function(_) {
          return c.multiply(this, _);
        } }, { key: "divide", value: function(_) {
          return c.divide(this, _);
        } }, { key: "set", value: function(_) {
          return c.set(this, y(_));
        } }, { key: "value", value: function() {
          return this._value;
        } }, { key: "valueOf", value: function() {
          return this._value;
        } }]) && i(w.prototype, C), g;
      }();
      function y(g) {
        var w = g;
        return p.isNumbro(g) ? w = g._value : typeof g == "string" ? w = p.unformat(g) : isNaN(g) && (w = NaN), w;
      }
      function p(g) {
        return new d(y(g));
      }
      p.version = "2.1.2", p.isNumbro = function(g) {
        return g instanceof d;
      }, p.language = a.currentLanguage, p.registerLanguage = a.registerLanguage, p.setLanguage = a.setLanguage, p.languages = a.languages, p.languageData = a.languageData, p.zeroFormat = a.setZeroFormat, p.defaultFormat = a.currentDefaults, p.setDefaults = a.setDefaults, p.defaultCurrencyFormat = a.currentCurrencyDefaultFormat, p.validate = l.validate, p.loadLanguagesInNode = s.loadLanguagesInNode, p.unformat = u.unformat, n.exports = p;
    }, { "./formatting": 3, "./globalState": 4, "./loading": 5, "./manipulating": 6, "./parsing": 8, "./unformatting": 9, "./validating": 10 }], 8: [function(r, n, o) {
      n.exports = { parseFormat: function(i) {
        var a, l, s, u, f, c, h, d, y, p, g, w, C, _, k, E, j, Y, Q, X, q = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : {};
        return typeof i != "string" ? i : (l = q, i = (s = (a = i).match(/^{([^}]*)}/)) ? (l.prefix = s[1], a.slice(s[0].length)) : a, f = q, function(J, le) {
          if (J.indexOf("$") === -1) {
            if (J.indexOf("%") === -1)
              return J.indexOf("bd") !== -1 ? (le.output = "byte", le.base = "general") : J.indexOf("b") !== -1 ? (le.output = "byte", le.base = "binary") : J.indexOf("d") !== -1 ? (le.output = "byte", le.base = "decimal") : J.indexOf(":") === -1 ? J.indexOf("o") !== -1 && (le.output = "ordinal") : le.output = "time";
            le.output = "percent";
          } else
            le.output = "currency";
        }(i = (c = (u = i).match(/{([^}]*)}$/)) ? (f.postfix = c[1], u.slice(0, -c[0].length)) : u, q), h = q, (d = i.match(/[1-9]+[0-9]*/)) && (h.totalLength = +d[0]), y = q, (p = i.split(".")[0].match(/0+/)) && (y.characteristic = p[0].length), function(J, le) {
          if (J.indexOf(".") !== -1) {
            var ee = J.split(".")[0];
            le.optionalCharacteristic = ee.indexOf("0") === -1;
          }
        }(i, q), g = q, i.indexOf("a") !== -1 && (g.average = !0), C = q, (w = i).indexOf("K") !== -1 ? C.forceAverage = "thousand" : w.indexOf("M") !== -1 ? C.forceAverage = "million" : w.indexOf("B") !== -1 ? C.forceAverage = "billion" : w.indexOf("T") !== -1 && (C.forceAverage = "trillion"), function(J, le) {
          var ee = J.split(".")[1];
          if (ee) {
            var U = ee.match(/0+/);
            U && (le.mantissa = U[0].length);
          }
        }(i, q), k = q, (_ = i).match(/\[\.]/) ? k.optionalMantissa = !0 : _.match(/\./) && (k.optionalMantissa = !1), E = q, i.indexOf(",") !== -1 && (E.thousandSeparated = !0), j = q, i.indexOf(" ") !== -1 && (j.spaceSeparated = !0), Q = q, (Y = i).match(/^\+?\([^)]*\)$/) && (Q.negative = "parenthesis"), Y.match(/^\+?-/) && (Q.negative = "sign"), X = q, i.match(/^\+/) && (X.forceSign = !0), q);
      } };
    }, {}], 9: [function(r, n, o) {
      var i = [{ key: "ZiB", factor: Math.pow(1024, 7) }, { key: "ZB", factor: Math.pow(1e3, 7) }, { key: "YiB", factor: Math.pow(1024, 8) }, { key: "YB", factor: Math.pow(1e3, 8) }, { key: "TiB", factor: Math.pow(1024, 4) }, { key: "TB", factor: Math.pow(1e3, 4) }, { key: "PiB", factor: Math.pow(1024, 5) }, { key: "PB", factor: Math.pow(1e3, 5) }, { key: "MiB", factor: Math.pow(1024, 2) }, { key: "MB", factor: Math.pow(1e3, 2) }, { key: "KiB", factor: Math.pow(1024, 1) }, { key: "KB", factor: Math.pow(1e3, 1) }, { key: "GiB", factor: Math.pow(1024, 3) }, { key: "GB", factor: Math.pow(1e3, 3) }, { key: "EiB", factor: Math.pow(1024, 6) }, { key: "EB", factor: Math.pow(1e3, 6) }, { key: "B", factor: 1 }];
      function a(s) {
        return s.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
      }
      function l(s, u) {
        var f = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : "", c = 3 < arguments.length ? arguments[3] : void 0, h = 4 < arguments.length ? arguments[4] : void 0, d = 5 < arguments.length ? arguments[5] : void 0, y = 6 < arguments.length ? arguments[6] : void 0;
        if (s !== "")
          return s === h ? 0 : function p(g, w) {
            var C = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : "", _ = 3 < arguments.length ? arguments[3] : void 0, k = 4 < arguments.length ? arguments[4] : void 0, E = 5 < arguments.length ? arguments[5] : void 0, j = 6 < arguments.length ? arguments[6] : void 0;
            if (!isNaN(+g))
              return +g;
            var Y = "", Q = g.replace(/(^[^(]*)\((.*)\)([^)]*$)/, "$1$2$3");
            if (Q !== g)
              return -1 * p(Q, w, C, _, k, E, j);
            for (var X = 0; X < i.length; X++) {
              var q = i[X];
              if ((Y = g.replace(q.key, "")) !== g)
                return p(Y, w, C, _, k, E, j) * q.factor;
            }
            if ((Y = g.replace("%", "")) !== g)
              return p(Y, w, C, _, k, E, j) / 100;
            var J = parseFloat(g);
            if (!isNaN(J)) {
              var le = _(J);
              if (le && le !== "." && (Y = g.replace(new RegExp("".concat(a(le), "$")), "")) !== g)
                return p(Y, w, C, _, k, E, j);
              var ee = {};
              Object.keys(E).forEach(function(m) {
                ee[E[m]] = m;
              });
              for (var U = Object.keys(ee).sort().reverse(), Z = U.length, oe = 0; oe < Z; oe++) {
                var ie = U[oe], T = ee[ie];
                if ((Y = g.replace(ie, "")) !== g) {
                  var v = void 0;
                  switch (T) {
                    case "thousand":
                      v = Math.pow(10, 3);
                      break;
                    case "million":
                      v = Math.pow(10, 6);
                      break;
                    case "billion":
                      v = Math.pow(10, 9);
                      break;
                    case "trillion":
                      v = Math.pow(10, 12);
                  }
                  return p(Y, w, C, _, k, E, j) * v;
                }
              }
            }
          }(function(p, g) {
            var w = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : "", C = p.replace(w, "");
            return C = (C = C.replace(new RegExp("([0-9])".concat(a(g.thousands), "([0-9])"), "g"), "$1$2")).replace(g.decimal, ".");
          }(s, u, f), u, f, c, h, d, y);
      }
      n.exports = { unformat: function(s, u) {
        var f, c, h, d = r("./globalState"), y = d.currentDelimiters(), p = d.currentCurrency().symbol, g = d.currentOrdinal(), w = d.getZeroFormat(), C = d.currentAbbreviations(), _ = void 0;
        if (typeof s == "string")
          _ = function(k, E) {
            if (!k.indexOf(":") || E.thousands === ":")
              return !1;
            var j = k.split(":");
            if (j.length !== 3)
              return !1;
            var Y = +j[0], Q = +j[1], X = +j[2];
            return !isNaN(Y) && !isNaN(Q) && !isNaN(X);
          }(s, y) ? (f = s.split(":"), c = +f[0], h = +f[1], +f[2] + 60 * h + 3600 * c) : l(s, y, p, g, w, C, u);
        else {
          if (typeof s != "number")
            return;
          _ = s;
        }
        if (_ !== void 0)
          return _;
      } };
    }, { "./globalState": 4 }], 10: [function(r, n, o) {
      function i(y) {
        return function(p) {
          if (Array.isArray(p)) {
            for (var g = 0, w = new Array(p.length); g < p.length; g++)
              w[g] = p[g];
            return w;
          }
        }(y) || function(p) {
          if (Symbol.iterator in Object(p) || Object.prototype.toString.call(p) === "[object Arguments]")
            return Array.from(p);
        }(y) || function() {
          throw new TypeError("Invalid attempt to spread non-iterable instance");
        }();
      }
      function a(y) {
        return (a = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(p) {
          return typeof p;
        } : function(p) {
          return p && typeof Symbol == "function" && p.constructor === Symbol && p !== Symbol.prototype ? "symbol" : typeof p;
        })(y);
      }
      var l = r("./unformatting"), s = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/, u = { output: { type: "string", validValues: ["currency", "percent", "byte", "time", "ordinal", "number"] }, base: { type: "string", validValues: ["decimal", "binary", "general"], restriction: function(y, p) {
        return p.output === "byte";
      }, message: "`base` must be provided only when the output is `byte`", mandatory: function(y) {
        return y.output === "byte";
      } }, characteristic: { type: "number", restriction: function(y) {
        return 0 <= y;
      }, message: "value must be positive" }, prefix: "string", postfix: "string", forceAverage: { type: "string", validValues: ["trillion", "billion", "million", "thousand"] }, average: "boolean", currencyPosition: { type: "string", validValues: ["prefix", "infix", "postfix"] }, currencySymbol: "string", totalLength: { type: "number", restrictions: [{ restriction: function(y) {
        return 0 <= y;
      }, message: "value must be positive" }, { restriction: function(y, p) {
        return !p.exponential;
      }, message: "`totalLength` is incompatible with `exponential`" }] }, mantissa: { type: "number", restriction: function(y) {
        return 0 <= y;
      }, message: "value must be positive" }, optionalMantissa: "boolean", trimMantissa: "boolean", optionalCharacteristic: "boolean", thousandSeparated: "boolean", spaceSeparated: "boolean", abbreviations: { type: "object", children: { thousand: "string", million: "string", billion: "string", trillion: "string" } }, negative: { type: "string", validValues: ["sign", "parenthesis"] }, forceSign: "boolean", exponential: { type: "boolean" }, prefixSymbol: { type: "boolean", restriction: function(y, p) {
        return p.output === "percent";
      }, message: "`prefixSymbol` can be provided only when the output is `percent`" } }, f = { languageTag: { type: "string", mandatory: !0, restriction: function(y) {
        return y.match(s);
      }, message: "the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)" }, delimiters: { type: "object", children: { thousands: "string", decimal: "string", thousandsSize: "number" }, mandatory: !0 }, abbreviations: { type: "object", children: { thousand: { type: "string", mandatory: !0 }, million: { type: "string", mandatory: !0 }, billion: { type: "string", mandatory: !0 }, trillion: { type: "string", mandatory: !0 } }, mandatory: !0 }, spaceSeparated: "boolean", ordinal: { type: "function", mandatory: !0 }, currency: { type: "object", children: { symbol: "string", position: "string", code: "string" }, mandatory: !0 }, defaults: "format", ordinalFormat: "format", byteFormat: "format", percentageFormat: "format", currencyFormat: "format", timeDefaults: "format", formats: { type: "object", children: { fourDigits: { type: "format", mandatory: !0 }, fullWithTwoDecimals: { type: "format", mandatory: !0 }, fullWithTwoDecimalsNoCurrency: { type: "format", mandatory: !0 }, fullWithNoDecimals: { type: "format", mandatory: !0 } } } };
      function c(y) {
        return !!l.unformat(y);
      }
      function h(y, p, g) {
        var w = 3 < arguments.length && arguments[3] !== void 0 && arguments[3], C = Object.keys(y).map(function(_) {
          if (!p[_])
            return console.error("".concat(g, " Invalid key: ").concat(_)), !1;
          var k = y[_], E = p[_];
          if (typeof E == "string" && (E = { type: E }), E.type === "format") {
            if (!h(k, u, "[Validate ".concat(_, "]"), !0))
              return !1;
          } else if (a(k) !== E.type)
            return console.error("".concat(g, " ").concat(_, ' type mismatched: "').concat(E.type, '" expected, "').concat(a(k), '" provided')), !1;
          if (E.restrictions && E.restrictions.length)
            for (var j = E.restrictions.length, Y = 0; Y < j; Y++) {
              var Q = E.restrictions[Y], X = Q.restriction, q = Q.message;
              if (!X(k, y))
                return console.error("".concat(g, " ").concat(_, " invalid value: ").concat(q)), !1;
            }
          return E.restriction && !E.restriction(k, y) ? (console.error("".concat(g, " ").concat(_, " invalid value: ").concat(E.message)), !1) : E.validValues && E.validValues.indexOf(k) === -1 ? (console.error("".concat(g, " ").concat(_, " invalid value: must be among ").concat(JSON.stringify(E.validValues), ', "').concat(k, '" provided')), !1) : !(E.children && !h(k, E.children, "[Validate ".concat(_, "]")));
        });
        return w || C.push.apply(C, i(Object.keys(p).map(function(_) {
          var k = p[_];
          if (typeof k == "string" && (k = { type: k }), k.mandatory) {
            var E = k.mandatory;
            if (typeof E == "function" && (E = E(y)), E && y[_] === void 0)
              return console.error("".concat(g, ' Missing mandatory key "').concat(_, '"')), !1;
          }
          return !0;
        }))), C.reduce(function(_, k) {
          return _ && k;
        }, !0);
      }
      function d(y) {
        return h(y, u, "[Validate format]");
      }
      n.exports = { validate: function(y, p) {
        var g = c(y), w = d(p);
        return g && w;
      }, validateFormat: d, validateInput: c, validateLanguage: function(y) {
        return h(y, f, "[Validate language]");
      } };
    }, { "./unformatting": 9 }] }, {}, [7])(7);
  });
})(eU);
var IEe = eU.exports;
const Vi = /* @__PURE__ */ tj(IEe);
var MEe = "numeric";
function gP(e, t, r, n, o, i, a) {
  var l = i;
  if (Er(l)) {
    var s = a.numericFormat, u = s && s.culture || "-", f = s && s.pattern, c = a.className || "", h = c.length ? c.split(" ") : [];
    if (typeof u < "u" && !Vi.languages()[u]) {
      var d = u.replace("-", ""), y = Vi.allLanguages ? Vi.allLanguages[u] : Vi[d];
      y && Vi.registerLanguage(y);
    }
    Vi.setLanguage(u), l = Vi(l).format(f || "0"), h.indexOf("htLeft") < 0 && h.indexOf("htCenter") < 0 && h.indexOf("htRight") < 0 && h.indexOf("htJustify") < 0 && h.push("htRight"), h.indexOf("htNumeric") < 0 && h.push("htNumeric"), a.className = h.join(" "), t.dir = "ltr";
  }
  Ii(e, t, r, n, o, l, a);
}
gP.RENDERER_TYPE = MEe;
var xEe = "password";
function bP(e, t, r, n, o, i, a) {
  Ii.apply(this, [e, t, r, n, o, i, a]);
  var l = a.hashLength || t.innerHTML.length, s = a.hashSymbol || "*", u = "";
  _e(l - 1, function() {
    u += s;
  }), _f(t, u);
}
bP.RENDERER_TYPE = xEe;
var DEe = "time";
function wP(e, t, r, n, o, i, a) {
  Ii.apply(this, [e, t, r, n, o, i, a]), t.dir = "ltr";
}
wP.RENDERER_TYPE = DEe;
function NEe() {
  ro(Pf), ro(Sv), ro(pP), ro(yP), ro(gP), ro(bP), ro(Ii), ro(wP);
}
var HEe = "autocomplete";
function Qg(e, t) {
  var r = e;
  if (r == null && (r = ""), this.allowEmpty && r === "") {
    t(!0);
    return;
  }
  this.strict && this.source ? typeof this.source == "function" ? this.source(r, Mx(r, t)) : Mx(r, t)(this.source) : t(!0);
}
Qg.VALIDATOR_TYPE = HEe;
function Mx(e, t) {
  var r = e;
  return function(n) {
    for (var o = !1, i = 0, a = n.length; i < a; i++)
      if (r === n[i]) {
        o = !0;
        break;
      }
    t(o);
  };
}
var LEe = Object.is || function(t, r) {
  return t === r ? t !== 0 || 1 / t === 1 / r : t != t && r != r;
}, jEe = Kt, FEe = hg, BEe = Nt, VEe = gn, WEe = Pr, xx = LEe, Dx = Wt, UEe = qa, zEe = dg;
FEe("search", function(e, t, r) {
  return [
    // `String.prototype.search` method
    // https://tc39.es/ecma262/#sec-string.prototype.search
    function(o) {
      var i = WEe(this), a = VEe(o) ? void 0 : UEe(o, e);
      return a ? jEe(a, o, i) : new RegExp(o)[e](Dx(i));
    },
    // `RegExp.prototype[@@search]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@search
    function(n) {
      var o = BEe(this), i = Dx(n), a = r(t, o, i);
      if (a.done)
        return a.value;
      var l = o.lastIndex;
      xx(l, 0) || (o.lastIndex = 0);
      var s = zEe(o, i);
      return xx(o.lastIndex, l) || (o.lastIndex = l), s === null ? -1 : s.index;
    }
  ];
});
function YEe(e) {
  var t = new Date(e);
  return isNaN(new Date("".concat(e, "T00:00")).getDate()) ? t : new Date(t.getTime() + t.getTimezoneOffset() * 6e4);
}
var GEe = "date";
function SP(e, t) {
  var r = jV(K2, this.instance), n = e, o = !0;
  n == null && (n = "");
  var i = ne(n, this.dateFormat || r.defaultDateFormat, !0).isValid(), a = ne(new Date(n)).isValid() || i;
  if (this.allowEmpty && n === "" && (a = !0, i = !0), a || (o = !1), !a && i && (o = !0), a && !i)
    if (this.correctFormat === !0) {
      var l = KEe(n, this.dateFormat), s = this.instance.toVisualRow(this.row), u = this.instance.toVisualColumn(this.col);
      this.instance.setDataAtCell(s, u, l, "dateValidator"), o = !0;
    } else
      o = !1;
  t(o);
}
SP.VALIDATOR_TYPE = GEe;
function KEe(e, t) {
  var r = ne(YEe(e)), n = ne(e, t), o = e.search(/[A-z]/g) > -1, i;
  return r.isValid() && r.format("x") === n.format("x") || !n.isValid() || o ? i = r : i = n, i.format(t);
}
var qEe = "numeric";
function CP(e, t) {
  var r = e;
  r == null && (r = ""), this.allowEmpty && r === "" ? t(!0) : t(r === "" ? !1 : Er(e));
}
CP.VALIDATOR_TYPE = qEe;
var XEe = [
  "YYYY-MM-DDTHH:mm:ss.SSSZ",
  "X",
  // Unix timestamp
  "x"
  // Unix ms timestamp
], ZEe = "time";
function _P(e, t) {
  var r = this.timeFormat || "h:mm:ss a", n = !0, o = e;
  o === null && (o = ""), o = /^\d{3,}$/.test(o) ? parseInt(o, 10) : o;
  var i = /^\d{1,2}$/.test(o);
  i && (o += ":00");
  var a = ne(o, XEe, !0).isValid() ? ne(o) : ne(o, r), l = a.isValid(), s = ne(o, r, !0).isValid() && !i;
  if (this.allowEmpty && o === "" && (l = !0, s = !0), l || (n = !1), !l && s && (n = !0), l && !s)
    if (this.correctFormat === !0) {
      var u = a.format(r), f = this.instance.toVisualRow(this.row), c = this.instance.toVisualColumn(this.col);
      this.instance.setDataAtCell(f, c, u, "timeValidator"), n = !0;
    } else
      n = !1;
  t(n);
}
_P.VALIDATOR_TYPE = ZEe;
function QEe() {
  fc(Qg), fc(SP), fc(CP), fc(_P);
}
var JEe = "autocomplete", eTe = {
  CELL_TYPE: JEe,
  editor: dP,
  renderer: Pf,
  validator: Qg
}, tTe = "checkbox", rTe = {
  CELL_TYPE: tTe,
  editor: Y2,
  renderer: pP
}, nTe = "date", oTe = {
  CELL_TYPE: nTe,
  editor: q2,
  // displays small gray arrow on right side of the cell
  renderer: Pf,
  validator: SP
}, iTe = "dropdown", aTe = {
  CELL_TYPE: iTe,
  editor: vP,
  // displays small gray arrow on right side of the cell
  renderer: Pf,
  validator: Qg
}, lTe = "handsontable", sTe = {
  CELL_TYPE: lTe,
  editor: hP,
  // displays small gray arrow on right side of the cell
  renderer: Pf
}, uTe = "numeric", fTe = {
  CELL_TYPE: uTe,
  editor: X2,
  renderer: gP,
  validator: CP,
  dataType: "number"
}, cTe = "password", hTe = {
  CELL_TYPE: cTe,
  editor: Z2,
  renderer: bP,
  copyable: !1
}, dTe = "time", vTe = {
  CELL_TYPE: dTe,
  editor: Q2,
  renderer: wP,
  validator: _P
};
function yTe() {
  $n(eTe), $n(rTe), $n(oTe), $n(aTe), $n(sTe), $n(fTe), $n(hTe), $n(A2), $n(vTe);
}
var pTe = lg, mTe = kV;
pTe("WeakSet", function(e) {
  return function() {
    return e(this, arguments.length ? arguments[0] : void 0);
  };
}, mTe);
function Gh(e) {
  "@babel/helpers - typeof";
  return Gh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Gh(e);
}
function gTe(e, t) {
  return CTe(e) || STe(e, t) || wTe(e, t) || bTe();
}
function bTe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function wTe(e, t) {
  if (e) {
    if (typeof e == "string")
      return Nx(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return Nx(e, t);
  }
}
function Nx(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function STe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function CTe(e) {
  if (Array.isArray(e))
    return e;
}
function _Te(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function Hx(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, RTe(n.key), n);
  }
}
function OTe(e, t, r) {
  return t && Hx(e.prototype, t), r && Hx(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function RTe(e) {
  var t = ETe(e, "string");
  return Gh(t) === "symbol" ? t : String(t);
}
function ETe(e, t) {
  if (Gh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Gh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function TTe(e, t) {
  PTe(e, t), t.add(e);
}
function PTe(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function kTe(e, t, r) {
  if (!t.has(e))
    throw new TypeError("attempted to get private field on non-instance");
  return r;
}
var Lx = /* @__PURE__ */ new Map([["plugin", tue], ["cell-type", S2], ["editor", LV], ["renderer", QV], ["validator", JV]]), $Te = "base", Wi = /* @__PURE__ */ new WeakMap(), Gw = [], On = null, jx = /* @__PURE__ */ new WeakSet(), ft = /* @__PURE__ */ function() {
  function e(t) {
    var r = this;
    _Te(this, e), TTe(this, jx), Wo(this, "hot", t, {
      writable: !1
    }), Wi.set(this, {
      hooks: {}
    }), On = null, this.pluginName = null, this.pluginsInitializedCallbacks = [], this.isPluginsReady = !1, this.enabled = !1, this.initialized = !1, this.hot.addHook("afterPluginsInitialized", function() {
      return r.onAfterPluginsInitialized();
    }), this.hot.addHook("afterUpdateSettings", function(n) {
      return r.onUpdateSettings(n);
    }), this.hot.addHook("beforeInit", function() {
      return r.init();
    });
  }
  return OTe(e, [{
    key: "init",
    value: function() {
      var r = this;
      this.pluginName = this.hot.getPluginName(this);
      var n = this.constructor.PLUGIN_DEPS, o = Array.isArray(n) ? n : [];
      if (o.length > 0) {
        var i = [];
        if (o.forEach(function(u) {
          var f = u.split(":"), c = gTe(f, 2), h = c[0], d = c[1];
          if (!Lx.has(h))
            throw new Error('Unknown plugin dependency type "'.concat(h, '" was found.'));
          Lx.get(h)(d) || i.push(" - ".concat(d, " (").concat(h, ")"));
        }), i.length > 0) {
          var a = ["The ".concat(this.pluginName, ` plugin requires the following modules:
`), "".concat(i.join(`
`), `
`)].join("");
          Gw.push(a);
        }
      }
      On || (On = ZV()), On.indexOf("UndoRedo") >= 0 && On.splice(On.indexOf("UndoRedo"), 1), On.indexOf(this.pluginName) >= 0 && On.splice(On.indexOf(this.pluginName), 1), this.hot.addHookOnce("afterPluginsInitialized", function() {
        r.isEnabled && r.isEnabled() && r.enablePlugin();
      });
      var l = On.length === 0;
      if (l) {
        if (Gw.length > 0) {
          var s = ["".concat(Gw.join(`
`), `
`), "You have to import and register them manually."].join("");
          throw new Error(s);
        }
        this.hot.runHooks("afterPluginsInitialized");
      }
      this.initialized = !0;
    }
    /**
     * Enable plugin for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      this.enabled = !0;
    }
    /**
     * Disable plugin for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      this.eventManager && this.eventManager.clear(), this.clearHooks(), this.enabled = !1;
    }
    /**
     * Add listener to plugin hooks system.
     *
     * @param {string} name The hook name.
     * @param {Function} callback The listener function to add.
     */
  }, {
    key: "addHook",
    value: function(r, n) {
      Wi.get(this).hooks[r] = Wi.get(this).hooks[r] || [];
      var o = Wi.get(this).hooks[r];
      this.hot.addHook(r, n), o.push(n), Wi.get(this).hooks[r] = o;
    }
    /**
     * Remove all hooks listeners by hook name.
     *
     * @param {string} name The hook name.
     */
  }, {
    key: "removeHooks",
    value: function(r) {
      var n = this;
      I(Wi.get(this).hooks[r] || [], function(o) {
        n.hot.removeHook(r, o);
      });
    }
    /**
     * Clear all hooks.
     */
  }, {
    key: "clearHooks",
    value: function() {
      var r = this, n = Wi.get(this).hooks;
      Ye(n, function(o, i) {
        return r.removeHooks(i);
      }), n.length = 0;
    }
    /**
     * Register function which will be immediately called after all plugins initialized.
     *
     * @param {Function} callback The listener function to call.
     */
  }, {
    key: "callOnPluginsReady",
    value: function(r) {
      this.isPluginsReady ? r() : this.pluginsInitializedCallbacks.push(r);
    }
  }, {
    key: "onAfterPluginsInitialized",
    value: (
      /**
       * On after plugins initialized listener.
       *
       * @private
       */
      function() {
        I(this.pluginsInitializedCallbacks, function(r) {
          return r();
        }), this.pluginsInitializedCallbacks.length = 0, this.isPluginsReady = !0;
      }
    )
    /**
     * On update settings listener.
     *
     * @private
     * @param {object} newSettings New set of settings passed to the `updateSettings` method.
     */
  }, {
    key: "onUpdateSettings",
    value: function(r) {
      var n = kTe(this, jx, ATe).call(this, r);
      this.isEnabled && (this.enabled && !this.isEnabled() && this.disablePlugin(), !this.enabled && this.isEnabled() && this.enablePlugin(), this.enabled && this.isEnabled() && n && this.updatePlugin(r));
    }
    /**
     * Updates the plugin to use the latest options you have specified.
     *
     * @private
     */
  }, {
    key: "updatePlugin",
    value: function() {
    }
    /**
     * Destroy plugin.
     */
  }, {
    key: "destroy",
    value: function() {
      var r = this;
      this.eventManager && this.eventManager.destroy(), this.clearHooks(), Ye(this, function(n, o) {
        o !== "hot" && (r[o] = null);
      }), delete this.t, delete this.hot;
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return $Te;
    }
    /**
     * The `SETTING_KEYS` getter defines the keys that, when present in the config object, trigger the plugin update
     * after the `updateSettings` calls.
     * - When it returns `true`, the plugin updates after all `updateSettings` calls, regardless of the contents of the
     * config object.
     * - When it returns `false`, the plugin never updates on `updateSettings` calls.
     *
     * @returns {string[] | boolean}
     */
  }, {
    key: "SETTING_KEYS",
    get: function() {
      return [this.PLUGIN_KEY];
    }
  }]), e;
}();
function ATe(e) {
  if (!e)
    return !1;
  var t = this.constructor.SETTING_KEYS;
  if (typeof t == "boolean")
    return t;
  for (var r = 0; r < t.length; r++)
    if (e[t[r]] !== void 0)
      return !0;
  return !1;
}
function Kh(e) {
  "@babel/helpers - typeof";
  return Kh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Kh(e);
}
function ITe(e, t) {
  return NTe(e) || DTe(e, t) || xTe(e, t) || MTe();
}
function MTe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function xTe(e, t) {
  if (e) {
    if (typeof e == "string")
      return Fx(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return Fx(e, t);
  }
}
function Fx(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function DTe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function NTe(e) {
  if (Array.isArray(e))
    return e;
}
function HTe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function Bx(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, jTe(n.key), n);
  }
}
function LTe(e, t, r) {
  return t && Bx(e.prototype, t), r && Bx(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function jTe(e) {
  var t = FTe(e, "string");
  return Kh(t) === "symbol" ? t : String(t);
}
function FTe(e, t) {
  if (Kh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Kh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var BTe = /* @__PURE__ */ function() {
  function e(t) {
    HTe(this, e), this.hot = t, this.container = null, this.injected = !1, this.rows = [], this.columns = [], this.samples = null, this.settings = {
      useHeaders: !0
    };
  }
  return LTe(e, [{
    key: "addRow",
    value: function(r, n) {
      if (this.columns.length)
        throw new Error("Doesn't support multi-dimensional table");
      this.rows.length || (this.container = this.createContainer(this.hot.rootElement.className));
      var o = {
        row: r
      };
      this.rows.push(o), this.samples = n, this.table = this.createTable(this.hot.table.className), this.table.colGroup.appendChild(this.createColGroupsCol()), this.table.tr.appendChild(this.createRow(r)), this.container.container.appendChild(this.table.fragment), o.table = this.table.table;
    }
    /**
     * Add a row consisting of the column headers.
     *
     * @param {Map} samples A map with sampled table values.
     */
  }, {
    key: "addColumnHeadersRow",
    value: function(r) {
      var n = this.hot.getColHeader(0);
      if (n != null) {
        var o = {
          row: -1
        };
        this.rows.push(o), this.container = this.createContainer(this.hot.rootElement.className), this.samples = r, this.table = this.createTable(this.hot.table.className), this.table.colGroup.appendChild(this.createColGroupsCol()), this.appendColumnHeadersRow(), this.container.container.appendChild(this.table.fragment), o.table = this.table.table;
      }
    }
    /**
     * Add column.
     *
     * @param {number} column Column index.
     * @param {Map} samples A map with sampled table values.
     */
  }, {
    key: "addColumn",
    value: function(r, n) {
      if (this.rows.length)
        throw new Error("Doesn't support multi-dimensional table");
      this.columns.length || (this.container = this.createContainer(this.hot.rootElement.className));
      var o = {
        col: r
      };
      this.columns.push(o), this.samples = n, this.table = this.createTable(this.hot.table.className), this.getSetting("useHeaders") && this.hot.getColHeader(r) !== null && this.hot.view.appendColHeader(r, this.table.th), this.table.tBody.appendChild(this.createCol(r)), this.container.container.appendChild(this.table.fragment), o.table = this.table.table;
    }
    /**
     * Get calculated heights.
     *
     * @param {Function} callback Callback which will be fired for each calculated row.
     */
  }, {
    key: "getHeights",
    value: function(r) {
      this.injected || this.injectTable(), I(this.rows, function(n) {
        r(n.row, $t(n.table) - 1);
      });
    }
    /**
     * Get calculated widths.
     *
     * @param {Function} callback Callback which will be fired for each calculated column.
     */
  }, {
    key: "getWidths",
    value: function(r) {
      this.injected || this.injectTable(), I(this.columns, function(n) {
        var o = n.table.getBoundingClientRect(), i = o.width;
        r(n.col, Math.ceil(i));
      });
    }
    /**
     * Set the Ghost Table settings to the provided object.
     *
     * @param {object} settings New Ghost Table Settings.
     */
  }, {
    key: "setSettings",
    value: function(r) {
      this.settings = r;
    }
    /**
     * Set a single setting of the Ghost Table.
     *
     * @param {string} name Setting name.
     * @param {*} value Setting value.
     */
  }, {
    key: "setSetting",
    value: function(r, n) {
      this.settings || (this.settings = {}), this.settings[r] = n;
    }
    /**
     * Get the Ghost Table settings.
     *
     * @returns {object|null}
     */
  }, {
    key: "getSettings",
    value: function() {
      return this.settings;
    }
    /**
     * Get a single Ghost Table setting.
     *
     * @param {string} name The setting name to get.
     * @returns {boolean|null}
     */
  }, {
    key: "getSetting",
    value: function(r) {
      return this.settings ? this.settings[r] : null;
    }
    /**
     * Create colgroup col elements.
     *
     * @returns {DocumentFragment}
     */
  }, {
    key: "createColGroupsCol",
    value: function() {
      var r = this, n = this.hot.rootDocument.createDocumentFragment();
      return this.hot.hasRowHeaders() && n.appendChild(this.createColElement(-1)), this.samples.forEach(function(o) {
        I(o.strings, function(i) {
          n.appendChild(r.createColElement(i.col));
        });
      }), n;
    }
    /**
     * Create table row element.
     *
     * @param {number} row Row index.
     * @returns {DocumentFragment} Returns created table row elements.
     */
  }, {
    key: "createRow",
    value: function(r) {
      var n = this, o = this.hot.rootDocument, i = o.createDocumentFragment(), a = o.createElement("th");
      return this.hot.hasRowHeaders() && (this.hot.view.appendRowHeader(r, a), i.appendChild(a)), this.samples.forEach(function(l) {
        I(l.strings, function(s) {
          var u = s.col, f = n.hot.getCellMeta(r, u);
          f.col = u, f.row = r;
          var c = n.hot.getCellRenderer(f), h = o.createElement("td");
          h.setAttribute("ghost-table", 1), c(n.hot, h, r, u, n.hot.colToProp(u), s.value, f), i.appendChild(h);
        });
      }), i;
    }
    /**
     * Creates DOM elements for headers and appends them to the THEAD element of the table.
     */
  }, {
    key: "appendColumnHeadersRow",
    value: function() {
      var r = this, n = this.hot.rootDocument, o = n.createDocumentFragment(), i = [];
      if (this.hot.hasRowHeaders()) {
        var a = n.createElement("th");
        i.push([-1, a]), o.appendChild(a);
      }
      this.samples.forEach(function(l) {
        I(l.strings, function(s) {
          var u = s.col, f = n.createElement("th");
          i.push([u, f]), o.appendChild(f);
        });
      }), this.table.tHead.appendChild(o), I(i, function(l) {
        var s = ITe(l, 2), u = s[0], f = s[1];
        r.hot.view.appendColHeader(u, f);
      });
    }
    /**
     * Create table column elements.
     *
     * @param {number} column Column index.
     * @returns {DocumentFragment} Returns created column table column elements.
     */
  }, {
    key: "createCol",
    value: function(r) {
      var n = this, o = this.hot.rootDocument, i = o.createDocumentFragment();
      return this.samples.forEach(function(a) {
        I(a.strings, function(l) {
          var s = l.row, u = n.hot.getCellMeta(s, r);
          u.col = r, u.row = s;
          var f = n.hot.getCellRenderer(u), c = o.createElement("td"), h = o.createElement("tr");
          c.setAttribute("ghost-table", 1), f(n.hot, c, s, r, n.hot.colToProp(r), l.value, u), h.appendChild(c), i.appendChild(h);
        });
      }), i;
    }
    /**
     * Remove table from document and reset internal state.
     */
  }, {
    key: "clean",
    value: function() {
      this.rows.length = 0, this.rows[-1] = void 0, this.columns.length = 0, this.samples && this.samples.clear(), this.samples = null, this.removeTable();
    }
    /**
     * Inject generated table into document.
     *
     * @param {HTMLElement} [parent=null] The element to which the ghost table is injected.
     */
  }, {
    key: "injectTable",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      this.injected || ((r || this.hot.rootElement).appendChild(this.container.fragment), this.injected = !0);
    }
    /**
     * Remove table from document.
     */
  }, {
    key: "removeTable",
    value: function() {
      this.injected && this.container.container.parentNode && (this.container.container.parentNode.removeChild(this.container.container), this.container = null, this.injected = !1);
    }
    /**
     * Create col element.
     *
     * @param {number} column Column index.
     * @returns {HTMLElement}
     */
  }, {
    key: "createColElement",
    value: function(r) {
      var n = this.hot.rootDocument.createElement("col");
      return n.style.width = "".concat(this.hot.view._wt.wtTable.getStretchedColumnWidth(r), "px"), n;
    }
    /**
     * Create table element.
     *
     * @param {string} className The CSS classes to add.
     * @returns {object}
     */
  }, {
    key: "createTable",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "", n = this.hot.rootDocument, o = n.createDocumentFragment(), i = n.createElement("table"), a = n.createElement("thead"), l = n.createElement("tbody"), s = n.createElement("colgroup"), u = n.createElement("tr"), f = n.createElement("th");
      return this.isVertical() && i.appendChild(s), this.isHorizontal() && (u.appendChild(f), a.appendChild(u), i.style.tableLayout = "auto", i.style.width = "auto"), i.appendChild(a), this.isVertical() && l.appendChild(u), i.appendChild(l), ae(i, r), o.appendChild(i), {
        fragment: o,
        table: i,
        tHead: a,
        tBody: l,
        colGroup: s,
        tr: u,
        th: f
      };
    }
    /**
     * Create container for tables.
     *
     * @param {string} className The CSS classes to add.
     * @returns {object}
     */
  }, {
    key: "createContainer",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "", n = this.hot.rootDocument, o = n.createDocumentFragment(), i = n.createElement("div"), a = "htGhostTable htAutoSize ".concat(r.trim());
      return ae(i, a), o.appendChild(i), {
        fragment: o,
        container: i
      };
    }
    /**
     * Checks if table is raised vertically (checking rows).
     *
     * @returns {boolean}
     */
  }, {
    key: "isVertical",
    value: function() {
      return !!(this.rows.length && !this.columns.length);
    }
    /**
     * Checks if table is raised horizontally (checking columns).
     *
     * @returns {boolean}
     */
  }, {
    key: "isHorizontal",
    value: function() {
      return !!(this.columns.length && !this.rows.length);
    }
  }]), e;
}();
const tU = BTe;
function qh(e) {
  "@babel/helpers - typeof";
  return qh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, qh(e);
}
function VTe(e, t, r) {
  return t = rU(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function WTe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function Vx(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, rU(n.key), n);
  }
}
function UTe(e, t, r) {
  return t && Vx(e.prototype, t), r && Vx(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function rU(e) {
  var t = zTe(e, "string");
  return qh(t) === "symbol" ? t : String(t);
}
function zTe(e, t) {
  if (qh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (qh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var YTe = /* @__PURE__ */ function() {
  function e(t) {
    WTe(this, e), this.samples = null, this.dataFactory = t, this.customSampleCount = null, this.allowDuplicates = !1;
  }
  return UTe(e, [{
    key: "getSampleCount",
    value: function() {
      return this.customSampleCount ? this.customSampleCount : e.SAMPLE_COUNT;
    }
    /**
     * Set the sample count.
     *
     * @param {number} sampleCount Number of samples to be collected.
     */
  }, {
    key: "setSampleCount",
    value: function(r) {
      this.customSampleCount = r;
    }
    /**
     * Set if the generator should accept duplicate values.
     *
     * @param {boolean} allowDuplicates `true` to allow duplicate values.
     */
  }, {
    key: "setAllowDuplicates",
    value: function(r) {
      this.allowDuplicates = r;
    }
    /**
     * Generate samples for row. You can control which area should be sampled by passing `rowRange` object and `colRange` object.
     *
     * @param {object|number} rowRange The rows range to generate the samples.
     * @param {object} colRange The column range to generate the samples.
     * @returns {object}
     */
  }, {
    key: "generateRowSamples",
    value: function(r, n) {
      return this.generateSamples("row", n, r);
    }
    /**
     * Generate samples for column. You can control which area should be sampled by passing `colRange` object and `rowRange` object.
     *
     * @param {object} colRange Column index.
     * @param {object} rowRange Column index.
     * @returns {object}
     */
  }, {
    key: "generateColumnSamples",
    value: function(r, n) {
      return this.generateSamples("col", n, r);
    }
    /**
     * Generate collection of samples.
     *
     * @param {string} type Type to generate. Can be `col` or `row`.
     * @param {object} range The range to generate the samples.
     * @param {object|number} specifierRange The range to generate the samples.
     * @returns {Map}
     */
  }, {
    key: "generateSamples",
    value: function(r, n, o) {
      var i = this, a = /* @__PURE__ */ new Map(), l = typeof o == "number" ? {
        from: o,
        to: o
      } : o, s = l.from, u = l.to;
      return _e(s, u, function(f) {
        var c = i.generateSample(r, n, f);
        a.set(f, c);
      }), a;
    }
    /**
     * Generate sample for specified type (`row` or `col`).
     *
     * @param {string} type Samples type `row` or `col`.
     * @param {object} range The range to generate the samples.
     * @param {number} specifierValue The range to generate the samples.
     * @returns {Map}
     */
  }, {
    key: "generateSample",
    value: function(r, n, o) {
      var i = this;
      if (r !== "row" && r !== "col")
        throw new Error("Unsupported sample type");
      var a = /* @__PURE__ */ new Map(), l = r === "row" ? "col" : "row", s = [];
      return _e(n.from, n.to, function(u) {
        var f = r === "row" ? i.dataFactory(o, u) : i.dataFactory(u, o), c = f.value, h = f.bundleSeed, d = typeof h == "string" && h.length > 0, y;
        d ? y = h : ze(c) ? y = "".concat(Object.keys(c).length) : Array.isArray(c) ? y = "".concat(c.length) : y = "".concat(Ft(c).length), a.has(y) || a.set(y, {
          needed: i.getSampleCount(),
          strings: []
        });
        var p = a.get(y);
        if (p.needed) {
          var g = s.indexOf(c) > -1;
          (!g || i.allowDuplicates || d) && (p.strings.push(VTe({
            value: c
          }, l, u)), s.push(c), p.needed -= 1);
        }
      }), a;
    }
  }], [{
    key: "SAMPLE_COUNT",
    get: (
      /**
       * Number of samples to take of each value length.
       *
       * @type {number}
       */
      function() {
        return 3;
      }
    )
  }]), e;
}();
const nU = YTe;
function iu(e) {
  "@babel/helpers - typeof";
  return iu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, iu(e);
}
function Wx(e, t) {
  return XTe(e) || qTe(e, t) || KTe(e, t) || GTe();
}
function GTe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function KTe(e, t) {
  if (e) {
    if (typeof e == "string")
      return Ux(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return Ux(e, t);
  }
}
function Ux(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function qTe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function XTe(e) {
  if (Array.isArray(e))
    return e;
}
function ZTe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function zx(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, JTe(n.key), n);
  }
}
function QTe(e, t, r) {
  return t && zx(e.prototype, t), r && zx(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function JTe(e) {
  var t = e0e(e, "string");
  return iu(t) === "symbol" ? t : String(t);
}
function e0e(e, t) {
  if (iu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (iu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function na() {
  return typeof Reflect < "u" && Reflect.get ? na = Reflect.get.bind() : na = function(t, r, n) {
    var o = t0e(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, na.apply(this, arguments);
}
function t0e(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = co(e), e !== null); )
    ;
  return e;
}
function r0e(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && fO(e, t);
}
function fO(e, t) {
  return fO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, fO(e, t);
}
function n0e(e) {
  var t = i0e();
  return function() {
    var n = co(e), o;
    if (t) {
      var i = co(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return o0e(this, o);
  };
}
function o0e(e, t) {
  if (t && (iu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return oU(e);
}
function oU(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function i0e() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function co(e) {
  return co = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, co(e);
}
we.getSingleton().register("modifyAutoColumnSizeSeed");
var Gf = "autoColumnSize", a0e = 10, Kw = /* @__PURE__ */ new WeakMap(), l0e = "autoColumnSize", s0e = /* @__PURE__ */ function(e) {
  r0e(r, e);
  var t = n0e(r);
  function r(n) {
    var o;
    return ZTe(this, r), o = t.call(this, n), Kw.set(oU(o), {
      /**
       * Cached column header names. It is used to diff current column headers with previous state and detect which
       * columns width should be updated.
       *
       * @private
       * @type {Array}
       */
      cachedColumnHeaders: []
    }), o.ghostTable = new tU(o.hot), o.samplesGenerator = new nU(function(i, a) {
      var l = o.hot.getCellMeta(i, a), s = "";
      l.spanned || (s = o.hot.getDataAtCell(i, a));
      var u = "";
      return o.hot.hasHook("modifyAutoColumnSizeSeed") && (u = o.hot.runHooks("modifyAutoColumnSizeSeed", u, l, s)), {
        value: s,
        bundleSeed: u
      };
    }), o.firstCalculation = !0, o.inProgress = !1, o.measuredColumns = 0, o.columnWidthsMap = new Ai(), o.hot.columnIndexMapper.registerMap(l0e, o.columnWidthsMap), o.addHook("beforeColumnResize", function(i, a, l) {
      return o.onBeforeColumnResize(i, a, l);
    }), o;
  }
  return QTe(r, [{
    key: "isEnabled",
    value: function() {
      return this.hot.getSettings()[Gf] !== !1 && !this.hot.getSettings().colWidths;
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      if (!this.enabled) {
        var i = this.hot.getSettings()[Gf];
        i && i.useHeaders !== null && i.useHeaders !== void 0 && this.ghostTable.setSetting("useHeaders", i.useHeaders), this.setSamplingOptions(), this.addHook("afterLoadData", function() {
          return o.onAfterLoadData.apply(o, arguments);
        }), this.addHook("beforeChangeRender", function(a) {
          return o.onBeforeChange(a);
        }), this.addHook("afterFormulasValuesUpdate", function(a) {
          return o.onAfterFormulasValuesUpdate(a);
        }), this.addHook("beforeViewRender", function(a) {
          return o.onBeforeViewRender(a);
        }), this.addHook("modifyColWidth", function(a, l) {
          return o.getColumnWidth(l, a);
        }), this.addHook("afterInit", function() {
          return o.onAfterInit();
        }), na(co(r.prototype), "enablePlugin", this).call(this);
      }
    }
    /**
     * Updates the plugin's state. This method is executed when {@link Core#updateSettings} is invoked.
     */
  }, {
    key: "updatePlugin",
    value: function() {
      var o = this.findColumnsWhereHeaderWasChanged();
      o.length && (this.clearCache(o), this.calculateVisibleColumnsWidth()), na(co(r.prototype), "updatePlugin", this).call(this);
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      var o = this;
      na(co(r.prototype), "disablePlugin", this).call(this), this.addHook("beforeColumnResize", function(i, a, l) {
        return o.onBeforeColumnResize(i, a, l);
      });
    }
    /**
     * Calculates visible columns width.
     */
  }, {
    key: "calculateVisibleColumnsWidth",
    value: function() {
      var o = this.hot.countRows();
      if (o) {
        var i = this.hot.renderCall, a = this.getFirstVisibleColumn(), l = this.getLastVisibleColumn();
        a === -1 || l === -1 || this.calculateColumnsWidth({
          from: a,
          to: l
        }, void 0, i);
      }
    }
    /**
     * Calculates a columns width.
     *
     * @param {number|object} colRange Visual column index or an object with `from` and `to` visual indexes as a range.
     * @param {number|object} rowRange Visual row index or an object with `from` and `to` visual indexes as a range.
     * @param {boolean} [force=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.
     */
  }, {
    key: "calculateColumnsWidth",
    value: function() {
      var o = this, i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        from: 0,
        to: this.hot.countCols() - 1
      }, a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        from: 0,
        to: this.hot.countRows() - 1
      }, l = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, s = typeof i == "number" ? {
        from: i,
        to: i
      } : i, u = typeof a == "number" ? {
        from: a,
        to: a
      } : a;
      _e(s.from, s.to, function(f) {
        var c = o.hot.toPhysicalColumn(f);
        if (c === null && (c = f), l || o.columnWidthsMap.getValueAtIndex(c) === null && !o.hot._getColWidthFromSettings(c)) {
          var h = o.samplesGenerator.generateColumnSamples(f, u);
          I(h, function(d) {
            var y = Wx(d, 2), p = y[0], g = y[1];
            return o.ghostTable.addColumn(p, g);
          });
        }
      }), this.ghostTable.columns.length && (this.hot.batchExecution(function() {
        o.ghostTable.getWidths(function(f, c) {
          var h = o.hot.toPhysicalColumn(f);
          o.columnWidthsMap.setValueAtIndex(h, c);
        });
      }, !0), this.measuredColumns = s.to + 1, this.ghostTable.clean());
    }
    /**
     * Calculates all columns width. The calculated column will be cached in the {@link AutoColumnSize#widths} property.
     * To retrieve width for specified column use {@link AutoColumnSize#getColumnWidth} method.
     *
     * @param {object|number} rowRange Row index or an object with `from` and `to` properties which define row range.
     */
  }, {
    key: "calculateAllColumnsWidth",
    value: function() {
      var o = this, i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        from: 0,
        to: this.hot.countRows() - 1
      }, a = 0, l = this.hot.countCols() - 1, s = null;
      this.inProgress = !0;
      var u = function c() {
        if (!o.hot) {
          Dp(s), o.inProgress = !1;
          return;
        }
        o.calculateColumnsWidth({
          from: a,
          to: Math.min(a + r.CALCULATION_STEP, l)
        }, i), a = a + r.CALCULATION_STEP + 1, a < l ? s = BE(c) : (Dp(s), o.inProgress = !1, o.hot.view.adjustElementsSize());
      }, f = this.getSyncCalculationLimit();
      this.firstCalculation && f >= 0 && (this.calculateColumnsWidth({
        from: 0,
        to: f
      }, i), this.firstCalculation = !1, a = f + 1), a < l ? u() : this.inProgress = !1;
    }
    /**
     * Sets the sampling options.
     *
     * @private
     */
  }, {
    key: "setSamplingOptions",
    value: function() {
      var o = this.hot.getSettings()[Gf], i = o && Dt(o, "samplingRatio") ? o.samplingRatio : void 0, a = o && Dt(o, "allowSampleDuplicates") ? o.allowSampleDuplicates : void 0;
      i && !isNaN(i) && this.samplesGenerator.setSampleCount(parseInt(i, 10)), a && this.samplesGenerator.setAllowDuplicates(a);
    }
    /**
     * Recalculates all columns width (overwrite cache values).
     */
  }, {
    key: "recalculateAllColumnsWidth",
    value: function() {
      this.hot.view && this.hot.view._wt.wtTable.isVisible() && (this.clearCache(), this.calculateAllColumnsWidth());
    }
    /**
     * Gets value which tells how many columns should be calculated synchronously (rest of the columns will be calculated
     * asynchronously). The limit is calculated based on `syncLimit` set to `autoColumnSize` option (see {@link Options#autoColumnSize}).
     *
     * @returns {number}
     */
  }, {
    key: "getSyncCalculationLimit",
    value: function() {
      var o = this.hot.getSettings()[Gf], i = r.SYNC_CALCULATION_LIMIT, a = this.hot.countCols() - 1;
      return ze(o) && (i = o.syncLimit, bV(i) ? i = UV(a, i) : i >>= 0), Math.min(i, a);
    }
    /**
     * Gets the calculated column width.
     *
     * @param {number} column Visual column index.
     * @param {number} [defaultWidth] Default column width. It will be picked up if no calculated width found.
     * @param {boolean} [keepMinimum=true] If `true` then returned value won't be smaller then 50 (default column width).
     * @returns {number}
     */
  }, {
    key: "getColumnWidth",
    value: function(o) {
      var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0, a = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0, l = i;
      return l === void 0 && (l = this.columnWidthsMap.getValueAtIndex(this.hot.toPhysicalColumn(o)), a && typeof l == "number" && (l = Math.max(l, bT.DEFAULT_WIDTH))), l;
    }
    /**
     * Gets the first visible column.
     *
     * @returns {number} Returns visual column index, -1 if table is not rendered or if there are no columns to base the the calculations on.
     */
  }, {
    key: "getFirstVisibleColumn",
    value: function() {
      var o = this.hot.view._wt;
      if (o.wtViewport.columnsVisibleCalculator) {
        var i = o.wtTable.getFirstVisibleColumn();
        if (i !== -1)
          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(i);
      }
      if (o.wtViewport.columnsRenderCalculator) {
        var a = o.wtTable.getFirstRenderedColumn();
        if (a !== -1)
          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(a);
      }
      return -1;
    }
    /**
     * Gets the last visible column.
     *
     * @returns {number} Returns visual column index or -1 if table is not rendered.
     */
  }, {
    key: "getLastVisibleColumn",
    value: function() {
      var o = this.hot.view._wt;
      if (o.wtViewport.columnsVisibleCalculator) {
        var i = o.wtTable.getLastVisibleColumn();
        if (i !== -1)
          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(i);
      }
      if (o.wtViewport.columnsRenderCalculator) {
        var a = o.wtTable.getLastRenderedColumn();
        if (a !== -1)
          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(a);
      }
      return -1;
    }
    /**
     * Collects all columns which titles has been changed in comparison to the previous state.
     *
     * @private
     * @returns {Array} It returns an array of physical column indexes.
     */
  }, {
    key: "findColumnsWhereHeaderWasChanged",
    value: function() {
      var o = this.hot.getColHeader(), i = Kw.get(this), a = i.cachedColumnHeaders, l = sr(o, function(s, u, f) {
        var c = a.length;
        return (c - 1 < f || a[f] !== u) && s.push(f), c - 1 < f ? a.push(u) : a[f] = u, s;
      }, []);
      return l;
    }
    /**
     * Clears cache of calculated column widths. If you want to clear only selected columns pass an array with their indexes.
     * Otherwise whole cache will be cleared.
     *
     * @param {number[]} [columns] List of physical column indexes to clear.
     */
  }, {
    key: "clearCache",
    value: function() {
      var o = this, i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      i.length ? this.hot.batchExecution(function() {
        I(i, function(a) {
          o.columnWidthsMap.setValueAtIndex(a, null);
        });
      }, !0) : this.columnWidthsMap.clear();
    }
    /**
     * Checks if all widths were calculated. If not then return `true` (need recalculate).
     *
     * @returns {boolean}
     */
  }, {
    key: "isNeedRecalculate",
    value: function() {
      return !!Zr(this.columnWidthsMap.getValues().slice(0, this.measuredColumns), function(o) {
        return o === null;
      }).length;
    }
    /**
     * On before view render listener.
     *
     * @private
     */
  }, {
    key: "onBeforeViewRender",
    value: function() {
      this.calculateVisibleColumnsWidth(), this.isNeedRecalculate() && !this.inProgress && this.calculateAllColumnsWidth();
    }
    /**
     * On after load data listener.
     *
     * @private
     */
  }, {
    key: "onAfterLoadData",
    value: function() {
      var o = this;
      this.hot.view ? this.recalculateAllColumnsWidth() : setTimeout(function() {
        o.hot && o.recalculateAllColumnsWidth();
      }, 0);
    }
    /**
     * On before change listener.
     *
     * @private
     * @param {Array} changes An array of modified data.
     */
  }, {
    key: "onBeforeChange",
    value: function(o) {
      var i = this, a = Ue(o, function(l) {
        var s = Wx(l, 2), u = s[1];
        return i.hot.toPhysicalColumn(i.hot.propToCol(u));
      });
      this.clearCache(Array.from(new Set(a)));
    }
    /**
     * On before column resize listener.
     *
     * @private
     * @param {number} size Calculated new column width.
     * @param {number} column Visual index of the resized column.
     * @param {boolean} isDblClick  Flag that determines whether there was a double-click.
     * @returns {number}
     */
  }, {
    key: "onBeforeColumnResize",
    value: function(o, i, a) {
      var l = o;
      return a && (this.calculateColumnsWidth(i, void 0, !0), l = this.getColumnWidth(i, void 0, !1)), l;
    }
    /**
     * On after Handsontable init fill plugin with all necessary values.
     *
     * @private
     */
  }, {
    key: "onAfterInit",
    value: function() {
      Kw.get(this).cachedColumnHeaders = this.hot.getColHeader();
    }
    /**
     * After formulas values updated listener.
     *
     * @private
     * @param {Array} changes An array of modified data.
     */
  }, {
    key: "onAfterFormulasValuesUpdate",
    value: function(o) {
      var i = Zr(o, function(l) {
        var s;
        return be((s = l.address) === null || s === void 0 ? void 0 : s.col);
      }), a = Ue(i, function(l) {
        return l.address.col;
      });
      this.clearCache(Array.from(new Set(a)));
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      this.ghostTable.clean(), na(co(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return Gf;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return a0e;
    }
  }, {
    key: "SETTING_KEYS",
    get: function() {
      return !0;
    }
  }, {
    key: "CALCULATION_STEP",
    get: function() {
      return 50;
    }
  }, {
    key: "SYNC_CALCULATION_LIMIT",
    get: function() {
      return 50;
    }
  }]), r;
}(ft), oa = {
  horizontal: "horizontal",
  vertical: "vertical"
};
function u0e(e, t, r, n) {
  var o = r.length, i = r ? r[0].length : 0, a = [], l = t.row - e.row, s = t.col - e.col;
  if (["down", "up"].indexOf(n) !== -1) {
    for (var u = [], f = 0; f < s; f++) {
      var c = parseInt(r[0][f], 10), h = parseInt(r[o - 1][f], 10), d = (n === "down" ? h - c : c - h) / (o - 1) || 0;
      u.push(d);
    }
    a.push(u);
  }
  if (["right", "left"].indexOf(n) !== -1)
    for (var y = 0; y < l; y++) {
      var p = parseInt(r[y][0], 10), g = parseInt(r[y][i - 1], 10), w = (n === "right" ? g - p : p - g) / (i - 1) || 0;
      a.push([w]);
    }
  return a;
}
function f0e(e, t, r) {
  var n, o, i;
  return t[0] === e[0] && t[1] < e[1] ? (i = "left", n = r(t[0], t[1]), o = r(t[2], e[1] - 1)) : t[2] === e[2] && t[0] === e[0] && t[3] > e[3] ? (i = "right", n = r(t[0], e[3] + 1), o = r(t[2], t[3])) : t[0] < e[0] && t[1] === e[1] ? (i = "up", n = r(t[0], t[1]), o = r(e[0] - 1, t[3])) : t[2] > e[2] && t[1] === e[1] && (i = "down", n = r(e[2] + 1, t[1]), o = r(t[2], t[3])), n && n.normalize(), o && o.normalize(), {
    directionOfDrag: i,
    startOfDragCoords: n,
    endOfDragCoords: o
  };
}
function c0e(e) {
  var t = {};
  return e === !0 ? (t.directions = Object.keys(oa), t.autoInsertRow = !0) : ze(e) ? (be(e.autoInsertRow) ? e.direction === oa.horizontal ? t.autoInsertRow = !1 : t.autoInsertRow = e.autoInsertRow : t.autoInsertRow = !1, be(e.direction) ? t.directions = [e.direction] : t.directions = Object.keys(oa)) : typeof e == "string" ? (t.directions = [e], t.autoInsertRow = !0) : (t.directions = [], t.autoInsertRow = !1), t;
}
function au(e) {
  "@babel/helpers - typeof";
  return au = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, au(e);
}
function h0e(e) {
  return y0e(e) || v0e(e) || iU(e) || d0e();
}
function d0e() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function v0e(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function y0e(e) {
  if (Array.isArray(e))
    return cO(e);
}
function p0e(e, t) {
  return b0e(e) || g0e(e, t) || iU(e, t) || m0e();
}
function m0e() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function iU(e, t) {
  if (e) {
    if (typeof e == "string")
      return cO(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return cO(e, t);
  }
}
function cO(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function g0e(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function b0e(e) {
  if (Array.isArray(e))
    return e;
}
function w0e(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function Yx(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, C0e(n.key), n);
  }
}
function S0e(e, t, r) {
  return t && Yx(e.prototype, t), r && Yx(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function C0e(e) {
  var t = _0e(e, "string");
  return au(t) === "symbol" ? t : String(t);
}
function _0e(e, t) {
  if (au(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (au(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function ia() {
  return typeof Reflect < "u" && Reflect.get ? ia = Reflect.get.bind() : ia = function(t, r, n) {
    var o = O0e(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, ia.apply(this, arguments);
}
function O0e(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = ho(e), e !== null); )
    ;
  return e;
}
function R0e(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && hO(e, t);
}
function hO(e, t) {
  return hO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, hO(e, t);
}
function E0e(e) {
  var t = P0e();
  return function() {
    var n = ho(e), o;
    if (t) {
      var i = ho(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return T0e(this, o);
  };
}
function T0e(e, t) {
  if (t && (au(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return aU(e);
}
function aU(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function P0e() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function ho(e) {
  return ho = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, ho(e);
}
we.getSingleton().register("modifyAutofillRange");
we.getSingleton().register("beforeAutofill");
we.getSingleton().register("afterAutofill");
var Gx = "autofill", k0e = 20, $0e = ["fillHandle"], A0e = "insert_row_below", I0e = 200, M0e = /* @__PURE__ */ function(e) {
  R0e(r, e);
  var t = E0e(r);
  function r(n) {
    var o;
    return w0e(this, r), o = t.call(this, n), o.eventManager = new It(aU(o)), o.addingStarted = !1, o.mouseDownOnCellCorner = !1, o.mouseDragOutside = !1, o.handleDraggedCells = 0, o.directions = [], o.autoInsertRow = !1, o;
  }
  return S0e(r, [{
    key: "isEnabled",
    value: function() {
      return this.hot.getSettings().fillHandle;
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      this.enabled || (this.mapSettings(), this.registerEvents(), this.addHook("afterOnCellCornerMouseDown", function(i) {
        return o.onAfterCellCornerMouseDown(i);
      }), this.addHook("afterOnCellCornerDblClick", function(i) {
        return o.onCellCornerDblClick(i);
      }), this.addHook("beforeOnCellMouseOver", function(i, a) {
        return o.onBeforeCellMouseOver(a);
      }), ia(ho(r.prototype), "enablePlugin", this).call(this));
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - `autofill`
     *  - [`fillHandle`](@/api/options.md#fillhandle)
     */
  }, {
    key: "updatePlugin",
    value: function() {
      this.disablePlugin(), this.enablePlugin(), ia(ho(r.prototype), "updatePlugin", this).call(this);
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      this.clearMappedSettings(), ia(ho(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Gets selection data.
     *
     * @private
     * @returns {object[]} Ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.
     */
  }, {
    key: "getSelectionData",
    value: function() {
      var o = this, i = this.hot.getSelectedRangeLast(), a = i.getTopStartCorner(), l = a.row, s = a.col, u = i.getBottomEndCorner(), f = u.row, c = u.col, h = this.hot.runHooks("modifyCopyableRange", [{
        startRow: l,
        startCol: s,
        endRow: f,
        endCol: c
      }]), d = [], y = [], p = [];
      return I(h, function(g) {
        for (var w = g.startRow; w <= g.endRow; w += 1)
          d.indexOf(w) === -1 && d.push(w);
        for (var C = g.startCol; C <= g.endCol; C += 1)
          y.indexOf(C) === -1 && y.push(C);
      }), I(d, function(g) {
        var w = [];
        I(y, function(C) {
          w.push(o.hot.getCopyableData(g, C));
        }), p.push(w);
      }), p;
    }
    /**
     * Try to apply fill values to the area in fill border, omitting the selection border.
     *
     * @private
     * @returns {boolean} Reports if fill was applied.
     *
     * @fires Hooks#modifyAutofillRange
     * @fires Hooks#beforeAutofill
     * @fires Hooks#afterAutofill
     */
  }, {
    key: "fillIn",
    value: function() {
      var o = this;
      if (this.hot.selection.highlight.getFill().isEmpty())
        return !1;
      var i = this.hot.selection.highlight.getFill().getVisualCorners(), a = p0e(i, 4), l = a[0], s = a[1], u = a[2], f = a[3], c = this.hot.getSelectedRangeLast(), h = c.getTopStartCorner(), d = c.getBottomEndCorner();
      this.resetSelectionOfDraggedArea();
      var y = [h.row, h.col, d.row, d.col], p = this.hot.runHooks("modifyAutofillRange", [Math.min(h.row, l), Math.min(h.col, s), Math.max(d.row, u), Math.max(d.col, f)], y), g = f0e(y, p, function(T, v) {
        return o.hot._createCellCoords(T, v);
      }), w = g.directionOfDrag, C = g.startOfDragCoords, _ = g.endOfDragCoords;
      if (C && C.row > -1 && C.col > -1) {
        var k = this.getSelectionData(), E = c.clone(), j = this.hot._createCellRange(C, C, _), Y = this.hot.runHooks("beforeAutofill", k, E, j, w);
        if (Y === !1)
          return this.hot.selection.highlight.getFill().clear(), this.hot.render(), !1;
        var Q = u0e(C, _, k, w), X = Y, q = Y;
        if (["up", "left"].indexOf(w) > -1 && !(q.length === 1 && q[0].length === 0))
          if (X = [], w === "up")
            for (var J = _.row - C.row + 1, le = J % q.length, ee = 0; ee < J; ee++)
              X.push(q[(ee + (q.length - le)) % q.length]);
          else
            for (var U = _.col - C.col + 1, Z = U % q[0].length, oe = 0; oe < q.length; oe++) {
              X.push([]);
              for (var ie = 0; ie < U; ie++)
                X[oe].push(q[oe][(ie + (q[oe].length - Z)) % q[oe].length]);
            }
        this.hot.populateFromArray(C.row, C.col, X, _.row, _.col, "".concat(this.pluginName, ".fill"), null, w, Q), this.setSelection(p), this.hot.runHooks("afterAutofill", X, E, j, w), this.hot.render();
      } else
        this.hot._refreshBorders();
      return !0;
    }
    /**
     * Reduces the selection area if the handle was dragged outside of the table or on headers.
     *
     * @private
     * @param {CellCoords} coords Indexes of selection corners.
     * @returns {CellCoords}
     */
  }, {
    key: "reduceSelectionAreaIfNeeded",
    value: function(o) {
      return o.row < 0 && (o.row = 0), o.col < 0 && (o.col = 0), o;
    }
    /**
     * Gets the coordinates of the drag & drop borders.
     *
     * @private
     * @param {CellCoords} coordsOfSelection `CellCoords` coord object.
     * @returns {CellCoords}
     */
  }, {
    key: "getCoordsOfDragAndDropBorders",
    value: function(o) {
      var i = this.hot.getSelectedRangeLast(), a = i.getBottomEndCorner(), l = o;
      if (this.directions.includes(oa.vertical) && this.directions.includes(oa.horizontal)) {
        var s = i.getTopStartCorner();
        (a.col <= o.col || s.col >= o.col) && (l = this.hot._createCellCoords(a.row, o.col)), (a.row < o.row || s.row > o.row) && (l = this.hot._createCellCoords(o.row, a.col));
      } else if (this.directions.includes(oa.vertical))
        l = this.hot._createCellCoords(o.row, a.col);
      else if (this.directions.includes(oa.horizontal))
        l = this.hot._createCellCoords(a.row, o.col);
      else
        return;
      return this.reduceSelectionAreaIfNeeded(l);
    }
    /**
     * Show the fill border.
     *
     * @private
     * @param {CellCoords} coordsOfSelection `CellCoords` coord object.
     */
  }, {
    key: "showBorder",
    value: function(o) {
      var i = this.getCoordsOfDragAndDropBorders(o);
      i && this.redrawBorders(i);
    }
    /**
     * Add new row.
     *
     * @private
     */
  }, {
    key: "addRow",
    value: function() {
      var o = this;
      this.hot._registerTimeout(function() {
        o.hot.alter(A0e, void 0, 1, "".concat(o.pluginName, ".fill")), o.addingStarted = !1;
      }, I0e);
    }
    /**
     * Add new rows if they are needed to continue auto-filling values.
     *
     * @private
     */
  }, {
    key: "addNewRowIfNeeded",
    value: function() {
      if (!this.hot.selection.highlight.getFill().isEmpty() && this.addingStarted === !1 && this.autoInsertRow) {
        var o = this.hot.getSelectedLast(), i = this.hot.selection.highlight.getFill().getVisualCorners(), a = this.hot.countRows();
        o[2] < a - 1 && i[2] === a - 1 && (this.addingStarted = !0, this.addRow());
      }
    }
    /**
     * Get index of last adjacent filled in row.
     *
     * @private
     * @param {Array} cornersOfSelectedCells Indexes of selection corners.
     * @returns {number} Gives number greater than or equal to zero when selection adjacent can be applied.
     *                   Or -1 when selection adjacent can't be applied.
     */
  }, {
    key: "getIndexOfLastAdjacentFilledInRow",
    value: function(o) {
      for (var i = this.hot.getData(), a = this.hot.countRows(), l, s = o[2] + 1; s < a; s++) {
        for (var u = o[1]; u <= o[3]; u++) {
          var f = i[s][u];
          if (f)
            return -1;
        }
        var c = i[s][o[1] - 1], h = i[s][o[3] + 1];
        (c || h) && (l = s);
      }
      return l;
    }
    /**
     * Adds a selection from the start area to the specific row index.
     *
     * @private
     * @param {Array} selectStartArea Selection area from which we start to create more comprehensive selection.
     * @param {number} rowIndex The row index into the selection will be added.
     */
  }, {
    key: "addSelectionFromStartAreaToSpecificRowIndex",
    value: function(o, i) {
      this.hot.selection.highlight.getFill().clear().add(this.hot._createCellCoords(o[0], o[1])).add(this.hot._createCellCoords(i, o[3])).commit();
    }
    /**
     * Sets selection based on passed corners.
     *
     * @private
     * @param {Array} cornersOfArea An array witch defines selection.
     */
  }, {
    key: "setSelection",
    value: function(o) {
      var i;
      (i = this.hot).selectCell.apply(i, h0e(Ue(o, function(a) {
        return Math.max(a, 0);
      })).concat([!1, !1]));
    }
    /**
     * Try to select cells down to the last row in the left column and then returns if selection was applied.
     *
     * @private
     * @returns {boolean}
     */
  }, {
    key: "selectAdjacent",
    value: function() {
      var o = this.hot.getSelectedLast(), i = this.getIndexOfLastAdjacentFilledInRow(o);
      return i === -1 || i === void 0 ? !1 : (this.addSelectionFromStartAreaToSpecificRowIndex(o, i), !0);
    }
    /**
     * Resets selection of dragged area.
     *
     * @private
     */
  }, {
    key: "resetSelectionOfDraggedArea",
    value: function() {
      this.handleDraggedCells = 0, this.hot.selection.highlight.getFill().clear();
    }
    /**
     * Redraws borders.
     *
     * @private
     * @param {CellCoords} coords `CellCoords` coord object.
     */
  }, {
    key: "redrawBorders",
    value: function(o) {
      this.hot.selection.highlight.getFill().clear().add(this.hot.getSelectedRangeLast().from).add(this.hot.getSelectedRangeLast().to).add(o).commit(), this.hot.view.render();
    }
    /**
     * Get if mouse was dragged outside.
     *
     * @private
     * @param {MouseEvent} event `mousemove` event properties.
     * @returns {boolean}
     */
  }, {
    key: "getIfMouseWasDraggedOutside",
    value: function(o) {
      var i = this.hot.rootDocument.documentElement, a = Yt(this.hot.table).top - (this.hot.rootWindow.pageYOffset || i.scrollTop) + $t(this.hot.table), l = Yt(this.hot.table).left - (this.hot.rootWindow.pageXOffset || i.scrollLeft) + yt(this.hot.table);
      return o.clientY > a && o.clientX <= l;
    }
    /**
     * Bind the events used by the plugin.
     *
     * @private
     */
  }, {
    key: "registerEvents",
    value: function() {
      var o = this, i = this.hot.rootDocument.documentElement;
      this.eventManager.addEventListener(i, "mouseup", function() {
        return o.onMouseUp();
      }), this.eventManager.addEventListener(i, "mousemove", function(a) {
        return o.onMouseMove(a);
      });
    }
    /**
     * On cell corner double click callback.
     *
     * @private
     */
  }, {
    key: "onCellCornerDblClick",
    value: function() {
      var o = this.selectAdjacent();
      o && this.fillIn();
    }
    /**
     * On after cell corner mouse down listener.
     *
     * @private
     */
  }, {
    key: "onAfterCellCornerMouseDown",
    value: function() {
      this.handleDraggedCells = 1, this.mouseDownOnCellCorner = !0;
    }
    /**
     * On before cell mouse over listener.
     *
     * @private
     * @param {CellCoords} coords `CellCoords` coord object.
     */
  }, {
    key: "onBeforeCellMouseOver",
    value: function(o) {
      this.mouseDownOnCellCorner && !this.hot.view.isMouseDown() && this.handleDraggedCells && (this.handleDraggedCells += 1, this.showBorder(o), this.addNewRowIfNeeded());
    }
    /**
     * On mouse up listener.
     *
     * @private
     */
  }, {
    key: "onMouseUp",
    value: function() {
      this.handleDraggedCells && (this.handleDraggedCells > 1 && this.fillIn(), this.handleDraggedCells = 0, this.mouseDownOnCellCorner = !1);
    }
    /**
     * On mouse move listener.
     *
     * @private
     * @param {MouseEvent} event `mousemove` event properties.
     */
  }, {
    key: "onMouseMove",
    value: function(o) {
      var i = this.getIfMouseWasDraggedOutside(o);
      this.addingStarted === !1 && this.handleDraggedCells > 0 && i ? (this.mouseDragOutside = !0, this.addingStarted = !0) : this.mouseDragOutside = !1, this.mouseDragOutside && this.autoInsertRow && this.addRow();
    }
    /**
     * Clears mapped settings.
     *
     * @private
     */
  }, {
    key: "clearMappedSettings",
    value: function() {
      this.directions.length = 0, this.autoInsertRow = !1;
    }
    /**
     * Map settings.
     *
     * @private
     */
  }, {
    key: "mapSettings",
    value: function() {
      var o = c0e(this.hot.getSettings().fillHandle);
      this.directions = o.directions, this.autoInsertRow = o.autoInsertRow;
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      ia(ho(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return Gx;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return k0e;
    }
  }, {
    key: "SETTING_KEYS",
    get: function() {
      return [Gx].concat($0e);
    }
  }]), r;
}(ft);
function lu(e) {
  "@babel/helpers - typeof";
  return lu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, lu(e);
}
function x0e(e, t) {
  return L0e(e) || H0e(e, t) || N0e(e, t) || D0e();
}
function D0e() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function N0e(e, t) {
  if (e) {
    if (typeof e == "string")
      return Kx(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return Kx(e, t);
  }
}
function Kx(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function H0e(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function L0e(e) {
  if (Array.isArray(e))
    return e;
}
function j0e(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function qx(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, B0e(n.key), n);
  }
}
function F0e(e, t, r) {
  return t && qx(e.prototype, t), r && qx(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function B0e(e) {
  var t = V0e(e, "string");
  return lu(t) === "symbol" ? t : String(t);
}
function V0e(e, t) {
  if (lu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (lu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Zl() {
  return typeof Reflect < "u" && Reflect.get ? Zl = Reflect.get.bind() : Zl = function(t, r, n) {
    var o = W0e(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, Zl.apply(this, arguments);
}
function W0e(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = pi(e), e !== null); )
    ;
  return e;
}
function U0e(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && dO(e, t);
}
function dO(e, t) {
  return dO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, dO(e, t);
}
function z0e(e) {
  var t = K0e();
  return function() {
    var n = pi(e), o;
    if (t) {
      var i = pi(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return Y0e(this, o);
  };
}
function Y0e(e, t) {
  if (t && (lu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return G0e(e);
}
function G0e(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function K0e() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function pi(e) {
  return pi = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, pi(e);
}
var cy = "autoRowSize", q0e = 40, X0e = "autoRowSize", Z0e = /* @__PURE__ */ function(e) {
  U0e(r, e);
  var t = z0e(r);
  function r(n) {
    var o;
    return j0e(this, r), o = t.call(this, n), o.rowHeightsMap = void 0, o.headerHeight = null, o.ghostTable = new tU(o.hot), o.samplesGenerator = new nU(function(i, a) {
      var l;
      return i >= 0 ? l = o.hot.getDataAtCell(i, a) : i === -1 && (l = o.hot.getColHeader(a)), {
        value: l
      };
    }), o.firstCalculation = !0, o.inProgress = !1, o.measuredRows = 0, o.rowHeightsMap = new Ai(), o.hot.rowIndexMapper.registerMap(X0e, o.rowHeightsMap), o.addHook("beforeRowResize", function(i, a, l) {
      return o.onBeforeRowResize(i, a, l);
    }), o;
  }
  return F0e(r, [{
    key: "isEnabled",
    value: function() {
      var o = this.hot.getSettings()[cy];
      return o === !0 || ze(o);
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      this.enabled || (this.setSamplingOptions(), this.addHook("afterLoadData", function() {
        return o.onAfterLoadData.apply(o, arguments);
      }), this.addHook("beforeChangeRender", function(i) {
        return o.onBeforeChange(i);
      }), this.addHook("beforeColumnResize", function() {
        return o.recalculateAllRowsHeight();
      }), this.addHook("beforeViewRender", function(i) {
        return o.onBeforeViewRender(i);
      }), this.addHook("modifyRowHeight", function(i, a) {
        return o.getRowHeight(a, i);
      }), this.addHook("modifyColumnHeaderHeight", function() {
        return o.getColumnHeaderHeight();
      }), Zl(pi(r.prototype), "enablePlugin", this).call(this));
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      var o = this;
      this.headerHeight = null, Zl(pi(r.prototype), "disablePlugin", this).call(this), this.addHook("beforeRowResize", function(i, a, l) {
        return o.onBeforeRowResize(i, a, l);
      });
    }
    /**
     * Calculate a given rows height.
     *
     * @param {number|object} rowRange Row index or an object with `from` and `to` indexes as a range.
     * @param {number|object} colRange Column index or an object with `from` and `to` indexes as a range.
     * @param {boolean} [force=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.
     */
  }, {
    key: "calculateRowsHeight",
    value: function() {
      var o = this, i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        from: 0,
        to: this.hot.countRows() - 1
      }, a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
        from: 0,
        to: this.hot.countCols() - 1
      }, l = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, s = typeof i == "number" ? {
        from: i,
        to: i
      } : i, u = typeof a == "number" ? {
        from: a,
        to: a
      } : a;
      if (this.hot.getColHeader(0) !== null) {
        var f = this.samplesGenerator.generateRowSamples(-1, u);
        this.ghostTable.addColumnHeadersRow(f.get(-1));
      }
      _e(s.from, s.to, function(c) {
        if (l || o.rowHeightsMap.getValueAtIndex(c) === null) {
          var h = o.samplesGenerator.generateRowSamples(c, u);
          I(h, function(d) {
            var y = x0e(d, 2), p = y[0], g = y[1];
            return o.ghostTable.addRow(p, g);
          });
        }
      }), this.ghostTable.rows.length && (this.hot.batchExecution(function() {
        o.ghostTable.getHeights(function(c, h) {
          c < 0 ? o.headerHeight = h : o.rowHeightsMap.setValueAtIndex(o.hot.toPhysicalRow(c), h);
        });
      }, !0), this.measuredRows = s.to + 1, this.ghostTable.clean());
    }
    /**
     * Calculate all rows heights. The calculated row will be cached in the {@link AutoRowSize#heights} property.
     * To retrieve height for specified row use {@link AutoRowSize#getRowHeight} method.
     *
     * @param {object|number} colRange Row index or an object with `from` and `to` properties which define row range.
     */
  }, {
    key: "calculateAllRowsHeight",
    value: function() {
      var o = this, i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
        from: 0,
        to: this.hot.countCols() - 1
      }, a = 0, l = this.hot.countRows() - 1, s = null;
      this.inProgress = !0;
      var u = function c() {
        if (!o.hot) {
          Dp(s), o.inProgress = !1;
          return;
        }
        o.calculateRowsHeight({
          from: a,
          to: Math.min(a + r.CALCULATION_STEP, l)
        }, i), a = a + r.CALCULATION_STEP + 1, a < l ? s = BE(c) : (Dp(s), o.inProgress = !1, o.hot.view.adjustElementsSize(!0), o.hot.view._wt.wtOverlays.inlineStartOverlay.needFullRender && o.hot.view._wt.wtOverlays.inlineStartOverlay.clone.draw());
      }, f = this.getSyncCalculationLimit();
      this.firstCalculation && f >= 0 && (this.calculateRowsHeight({
        from: 0,
        to: f
      }, i), this.firstCalculation = !1, a = f + 1), a < l ? u() : (this.inProgress = !1, this.hot.view.adjustElementsSize(!1));
    }
    /**
     * Sets the sampling options.
     *
     * @private
     */
  }, {
    key: "setSamplingOptions",
    value: function() {
      var o = this.hot.getSettings()[cy], i = o && Dt(o, "samplingRatio") ? o.samplingRatio : void 0, a = o && Dt(o, "allowSampleDuplicates") ? o.allowSampleDuplicates : void 0;
      i && !isNaN(i) && this.samplesGenerator.setSampleCount(parseInt(i, 10)), a && this.samplesGenerator.setAllowDuplicates(a);
    }
    /**
     * Recalculates all rows height (overwrite cache values).
     */
  }, {
    key: "recalculateAllRowsHeight",
    value: function() {
      Hc(this.hot.view._wt.wtTable.TABLE) && (this.clearCache(), this.calculateAllRowsHeight());
    }
    /**
     * Gets value which tells how many rows should be calculated synchronously (rest of the rows will be calculated
     * asynchronously). The limit is calculated based on `syncLimit` set to autoRowSize option (see {@link Options#autoRowSize}).
     *
     * @returns {number}
     */
  }, {
    key: "getSyncCalculationLimit",
    value: function() {
      var o = this.hot.getSettings()[cy], i = r.SYNC_CALCULATION_LIMIT, a = this.hot.countRows() - 1;
      return ze(o) && (i = o.syncLimit, bV(i) ? i = UV(a, i) : i >>= 0), Math.min(i, a);
    }
    /**
     * Get a row's height, as measured in the DOM.
     *
     * The height returned includes 1 px of the row's bottom border.
     *
     * Mind that this method is different from the
     * [`getRowHeight()`](@/api/core.md#getrowheight) method
     * of Handsontable's [Core](@/api/core.md).
     *
     * @param {number} row A visual row index.
     * @param {number} [defaultHeight] If no height is found, `defaultHeight` is returned instead.
     * @returns {number} The height of the specified row, in pixels.
     */
  }, {
    key: "getRowHeight",
    value: function(o) {
      var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0, a = o < 0 ? this.headerHeight : this.rowHeightsMap.getValueAtIndex(this.hot.toPhysicalRow(o)), l = i;
      return a !== null && a > (i || 0) && (l = a), l;
    }
    /**
     * Get the calculated column header height.
     *
     * @returns {number|undefined}
     */
  }, {
    key: "getColumnHeaderHeight",
    value: function() {
      return this.headerHeight;
    }
    /**
     * Get the first visible row.
     *
     * @returns {number} Returns row index, -1 if table is not rendered or if there are no rows to base the the calculations on.
     */
  }, {
    key: "getFirstVisibleRow",
    value: function() {
      var o = this.hot.view._wt;
      return o.wtViewport.rowsVisibleCalculator ? o.wtTable.getFirstVisibleRow() : o.wtViewport.rowsRenderCalculator ? o.wtTable.getFirstRenderedRow() : -1;
    }
    /**
     * Gets the last visible row.
     *
     * @returns {number} Returns row index or -1 if table is not rendered.
     */
  }, {
    key: "getLastVisibleRow",
    value: function() {
      var o = this.hot.view._wt;
      return o.wtViewport.rowsVisibleCalculator ? o.wtTable.getLastVisibleRow() : o.wtViewport.rowsRenderCalculator ? o.wtTable.getLastRenderedRow() : -1;
    }
    /**
     * Clears cached heights.
     */
  }, {
    key: "clearCache",
    value: function() {
      this.headerHeight = null, this.rowHeightsMap.init();
    }
    /**
     * Clears cache by range.
     *
     * @param {object|number} range Row index or an object with `from` and `to` properties which define row range.
     */
  }, {
    key: "clearCacheByRange",
    value: function(o) {
      var i = this, a = typeof o == "number" ? {
        from: o,
        to: o
      } : o, l = a.from, s = a.to;
      this.hot.batchExecution(function() {
        _e(Math.min(l, s), Math.max(l, s), function(u) {
          i.rowHeightsMap.setValueAtIndex(u, null);
        });
      }, !0);
    }
    /**
     * Checks if all heights were calculated. If not then return `true` (need recalculate).
     *
     * @returns {boolean}
     */
  }, {
    key: "isNeedRecalculate",
    value: function() {
      return !!Zr(this.rowHeightsMap.getValues().slice(0, this.measuredRows), function(o) {
        return o === null;
      }).length;
    }
    /**
     * On before view render listener.
     *
     * @private
     */
  }, {
    key: "onBeforeViewRender",
    value: function() {
      var o = this.hot.renderCall, i = this.hot.getSettings().fixedRowsBottom, a = this.getFirstVisibleRow(), l = this.getLastVisibleRow();
      if (!(a === -1 || l === -1)) {
        if (this.calculateRowsHeight({
          from: a,
          to: l
        }, void 0, o), i) {
          var s = this.hot.countRows() - 1;
          this.calculateRowsHeight({
            from: s - i,
            to: s
          });
        }
        this.isNeedRecalculate() && !this.inProgress && this.calculateAllRowsHeight();
      }
    }
    /**
     * On before row move listener.
     *
     * @private
     * @param {number} from Row index where was grabbed.
     * @param {number} to Destination row index.
     */
  }, {
    key: "onBeforeRowMove",
    value: function(o, i) {
      this.clearCacheByRange({
        from: o,
        to: i
      }), this.calculateAllRowsHeight();
    }
    /**
     * On before row resize listener.
     *
     * @private
     * @param {number} size The size of the current row index.
     * @param {number} row Current row index.
     * @param {boolean} isDblClick Indicates if the resize was triggered by doubleclick.
     * @returns {number}
     */
  }, {
    key: "onBeforeRowResize",
    value: function(o, i, a) {
      var l = o;
      return a && (this.calculateRowsHeight(i, void 0, !0), l = this.getRowHeight(i)), l;
    }
    /**
     * On after load data listener.
     *
     * @private
     */
  }, {
    key: "onAfterLoadData",
    value: function() {
      var o = this;
      this.hot.view ? this.recalculateAllRowsHeight() : setTimeout(function() {
        o.hot && o.recalculateAllRowsHeight();
      }, 0);
    }
    /**
     * On before change listener.
     *
     * @private
     * @param {Array} changes 2D array containing information about each of the edited cells.
     */
  }, {
    key: "onBeforeChange",
    value: function(o) {
      var i = null;
      o.length === 1 ? i = o[0][0] : o.length > 1 && (i = {
        from: o[0][0],
        to: o[o.length - 1][0]
      }), i !== null && this.clearCacheByRange(i);
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      this.ghostTable.clean(), Zl(pi(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return cy;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return q0e;
    }
  }, {
    key: "SETTING_KEYS",
    get: function() {
      return !0;
    }
  }, {
    key: "CALCULATION_STEP",
    get: function() {
      return 50;
    }
  }, {
    key: "SYNC_CALCULATION_LIMIT",
    get: function() {
      return 500;
    }
  }]), r;
}(ft);
function su(e) {
  "@babel/helpers - typeof";
  return su = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, su(e);
}
function Q0e(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function Xx(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, ePe(n.key), n);
  }
}
function J0e(e, t, r) {
  return t && Xx(e.prototype, t), r && Xx(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function ePe(e) {
  var t = tPe(e, "string");
  return su(t) === "symbol" ? t : String(t);
}
function tPe(e, t) {
  if (su(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (su(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Oc() {
  return typeof Reflect < "u" && Reflect.get ? Oc = Reflect.get.bind() : Oc = function(t, r, n) {
    var o = rPe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, Oc.apply(this, arguments);
}
function rPe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Ua(e), e !== null); )
    ;
  return e;
}
function nPe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && vO(e, t);
}
function vO(e, t) {
  return vO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, vO(e, t);
}
function oPe(e) {
  var t = lPe();
  return function() {
    var n = Ua(e), o;
    if (t) {
      var i = Ua(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return iPe(this, o);
  };
}
function iPe(e, t) {
  if (t && (su(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return aPe(e);
}
function aPe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function lPe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Ua(e) {
  return Ua = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Ua(e);
}
var lU = ZW("physicallyIndexed"), sPe = lU.getListWithInsertedItems, uPe = lU.getListWithRemovedItems, fPe = /* @__PURE__ */ function(e) {
  nPe(r, e);
  var t = oPe(r);
  function r() {
    return Q0e(this, r), t.call(this, function(n) {
      return n;
    });
  }
  return J0e(r, [{
    key: "insert",
    value: function(o, i) {
      var a = NT(this.indexedValues, i);
      this.indexedValues = sPe(a, o, i, this.initValueOrFn), Oc(Ua(r.prototype), "insert", this).call(this, o, i);
    }
    /**
     * Remove values from the list and reorganize.
     *
     * @private
     * @param {Array} removedIndexes List of removed indexes.
     */
  }, {
    key: "remove",
    value: function(o) {
      var i = uPe(this.indexedValues, o);
      this.indexedValues = DT(i, o), Oc(Ua(r.prototype), "remove", this).call(this, o);
    }
  }]), r;
}(rl);
const cPe = fPe;
function uu(e) {
  "@babel/helpers - typeof";
  return uu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, uu(e);
}
function hPe(e) {
  return pPe(e) || yPe(e) || vPe(e) || dPe();
}
function dPe() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function vPe(e, t) {
  if (e) {
    if (typeof e == "string")
      return yO(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return yO(e, t);
  }
}
function yPe(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function pPe(e) {
  if (Array.isArray(e))
    return yO(e);
}
function yO(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function mPe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function Zx(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, bPe(n.key), n);
  }
}
function gPe(e, t, r) {
  return t && Zx(e.prototype, t), r && Zx(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function bPe(e) {
  var t = wPe(e, "string");
  return uu(t) === "symbol" ? t : String(t);
}
function wPe(e, t) {
  if (uu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (uu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Rc() {
  return typeof Reflect < "u" && Reflect.get ? Rc = Reflect.get.bind() : Rc = function(t, r, n) {
    var o = SPe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, Rc.apply(this, arguments);
}
function SPe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = za(e), e !== null); )
    ;
  return e;
}
function CPe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && pO(e, t);
}
function pO(e, t) {
  return pO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, pO(e, t);
}
function _Pe(e) {
  var t = EPe();
  return function() {
    var n = za(e), o;
    if (t) {
      var i = za(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return OPe(this, o);
  };
}
function OPe(e, t) {
  if (t && (uu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return RPe(e);
}
function RPe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function EPe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function za(e) {
  return za = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, za(e);
}
var sU = ZW("physicallyIndexed"), TPe = sU.getListWithInsertedItems, PPe = sU.getListWithRemovedItems, kPe = /* @__PURE__ */ function(e) {
  CPe(r, e);
  var t = _Pe(r);
  function r() {
    return mPe(this, r), t.call(this, function(n) {
      return n;
    });
  }
  return gPe(r, [{
    key: "insert",
    value: function(o, i) {
      var a = this;
      this.indexedValues = TPe(this.indexedValues, o, i, function(l, s) {
        return a.getNextValue(s);
      }), Rc(za(r.prototype), "insert", this).call(this, o, i);
    }
    /**
     * Remove values from the list and reorganize.
     *
     * @private
     * @param {Array} removedIndexes List of removed indexes.
     */
  }, {
    key: "remove",
    value: function(o) {
      this.indexedValues = PPe(this.indexedValues, o), Rc(za(r.prototype), "remove", this).call(this, o);
    }
    /**
     * Get next values, which should be greater than actual maximum value in the list.
     *
     * @param {number} ordinalNumber Position in the list.
     * @returns {number}
     */
  }, {
    key: "getNextValue",
    value: function(o) {
      return Math.max.apply(Math, hPe(this.getValues())) + 1 + o;
    }
  }]), r;
}(rl);
const $Pe = kPe;
function fu(e) {
  "@babel/helpers - typeof";
  return fu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, fu(e);
}
function APe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function Qx(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, MPe(n.key), n);
  }
}
function IPe(e, t, r) {
  return t && Qx(e.prototype, t), r && Qx(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function MPe(e) {
  var t = xPe(e, "string");
  return fu(t) === "symbol" ? t : String(t);
}
function xPe(e, t) {
  if (fu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (fu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Ql() {
  return typeof Reflect < "u" && Reflect.get ? Ql = Reflect.get.bind() : Ql = function(t, r, n) {
    var o = DPe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, Ql.apply(this, arguments);
}
function DPe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = mi(e), e !== null); )
    ;
  return e;
}
function NPe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && mO(e, t);
}
function mO(e, t) {
  return mO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, mO(e, t);
}
function HPe(e) {
  var t = FPe();
  return function() {
    var n = mi(e), o;
    if (t) {
      var i = mi(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return LPe(this, o);
  };
}
function LPe(e, t) {
  if (t && (fu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return jPe(e);
}
function jPe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function FPe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function mi(e) {
  return mi = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, mi(e);
}
var qw = "bindRowsWithHeaders", BPe = 210, VPe = "loose", WPe = /* @__PURE__ */ new Map([["loose", cPe], ["strict", $Pe]]), UPe = /* @__PURE__ */ function(e) {
  NPe(r, e);
  var t = HPe(r);
  function r(n) {
    var o;
    return APe(this, r), o = t.call(this, n), o.headerIndexes = null, o;
  }
  return IPe(r, [{
    key: "isEnabled",
    value: function() {
      return !!this.hot.getSettings()[qw];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      if (!this.enabled) {
        var i = this.hot.getSettings()[qw];
        typeof i != "string" && (i = VPe);
        var a = WPe.get(i);
        this.headerIndexes = this.hot.rowIndexMapper.registerMap("bindRowsWithHeaders", new a()), this.addHook("modifyRowHeader", function(l) {
          return o.onModifyRowHeader(l);
        }), Ql(mi(r.prototype), "enablePlugin", this).call(this);
      }
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      this.hot.rowIndexMapper.unregisterMap("bindRowsWithHeaders"), Ql(mi(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * On modify row header listener.
     *
     * @private
     * @param {number} row Row index.
     * @returns {number}
     */
  }, {
    key: "onModifyRowHeader",
    value: function(o) {
      return this.headerIndexes.getValueAtIndex(this.hot.toPhysicalRow(o));
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      Ql(mi(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return qw;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return BPe;
    }
  }]), r;
}(ft);
function cu(e) {
  "@babel/helpers - typeof";
  return cu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, cu(e);
}
function Jx(e) {
  return KPe(e) || GPe(e) || YPe(e) || zPe();
}
function zPe() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function YPe(e, t) {
  if (e) {
    if (typeof e == "string")
      return gO(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return gO(e, t);
  }
}
function GPe(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function KPe(e) {
  if (Array.isArray(e))
    return gO(e);
}
function gO(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function qPe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function eD(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, uU(n.key), n);
  }
}
function XPe(e, t, r) {
  return t && eD(e.prototype, t), r && eD(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function aa() {
  return typeof Reflect < "u" && Reflect.get ? aa = Reflect.get.bind() : aa = function(t, r, n) {
    var o = ZPe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, aa.apply(this, arguments);
}
function ZPe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = vo(e), e !== null); )
    ;
  return e;
}
function QPe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && bO(e, t);
}
function bO(e, t) {
  return bO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, bO(e, t);
}
function JPe(e) {
  var t = tke();
  return function() {
    var n = vo(e), o;
    if (t) {
      var i = vo(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return eke(this, o);
  };
}
function eke(e, t) {
  if (t && (cu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return Bl(e);
}
function Bl(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function tke() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function vo(e) {
  return vo = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, vo(e);
}
function rke(e, t, r) {
  nke(e, t), t.set(e, r);
}
function nke(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Xw(e, t, r) {
  return t = uU(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function uU(e) {
  var t = oke(e, "string");
  return cu(t) === "symbol" ? t : String(t);
}
function oke(e, t) {
  if (cu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (cu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function tD(e, t) {
  var r = fU(e, t, "get");
  return ike(e, r);
}
function ike(e, t) {
  return t.get ? t.get.call(e) : t.value;
}
function Zw(e, t, r) {
  var n = fU(e, t, "set");
  return ake(e, n, r), r;
}
function fU(e, t, r) {
  if (!t.has(e))
    throw new TypeError("attempted to " + r + " private field on non-instance");
  return t.get(e);
}
function ake(e, t, r) {
  if (t.set)
    t.set.call(e, r);
  else {
    if (!t.writable)
      throw new TypeError("attempted to set read only private field");
    t.value = r;
  }
}
var Qw = "collapsibleColumns", lke = 290, ske = ["nestedHeaders"], gl = "collapsibleIndicator", rD = /* @__PURE__ */ new Map([["collapse", {
  hideColumn: !0,
  beforeHook: "beforeColumnCollapse",
  afterHook: "afterColumnCollapse"
}], ["expand", {
  hideColumn: !1,
  beforeHook: "beforeColumnExpand",
  afterHook: "afterColumnExpand"
}]]), bl = /* @__PURE__ */ new WeakMap(), uke = /* @__PURE__ */ function(e) {
  QPe(r, e);
  var t = JPe(r);
  function r() {
    var n;
    qPe(this, r);
    for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
      i[a] = arguments[a];
    return n = t.call.apply(t, [this].concat(i)), Xw(Bl(n), "nestedHeadersPlugin", null), Xw(Bl(n), "eventManager", new It(Bl(n))), Xw(Bl(n), "headerStateManager", null), rke(Bl(n), bl, {
      writable: !0,
      value: null
    }), n;
  }
  return XPe(r, [{
    key: "isEnabled",
    value: (
      /**
       * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
       * hook and if it returns `true` then the {@link CollapsibleColumns#enablePlugin} method is called.
       *
       * @returns {boolean}
       */
      function() {
        return !!this.hot.getSettings()[Qw];
      }
    )
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      if (!this.enabled) {
        var i = this.hot.getSettings(), a = i.nestedHeaders;
        a || ht("You need to configure the Nested Headers plugin in order to use collapsible headers."), Zw(this, bl, this.hot.columnIndexMapper.createAndRegisterIndexMap(this.pluginName, "hiding")), this.nestedHeadersPlugin = this.hot.getPlugin("nestedHeaders"), this.headerStateManager = this.nestedHeadersPlugin.getStateManager(), this.addHook("init", function() {
          return o.onInit();
        }), this.addHook("afterLoadData", function() {
          return o.onAfterLoadData.apply(o, arguments);
        }), this.addHook("afterGetColHeader", function() {
          return o.onAfterGetColHeader.apply(o, arguments);
        }), this.addHook("beforeOnCellMouseDown", function(l, s, u) {
          return o.onBeforeOnCellMouseDown(l, s, u);
        }), aa(vo(r.prototype), "enablePlugin", this).call(this), this.updatePlugin();
      }
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *   - [`collapsibleColumns`](@/api/options.md#collapsiblecolumns)
     *   - [`nestedHeaders`](@/api/options.md#nestedheaders)
     */
  }, {
    key: "updatePlugin",
    value: function() {
      if (this.hot.view) {
        if (!this.nestedHeadersPlugin.detectedOverlappedHeaders) {
          var o = this.hot.getSettings(), i = o.collapsibleColumns;
          typeof i == "boolean" ? this.headerStateManager.mapState(function(a) {
            return {
              collapsible: a.origColspan > 1
            };
          }) : Array.isArray(i) && (this.headerStateManager.mapState(function() {
            return {
              collapsible: !1
            };
          }), this.headerStateManager.mergeStateWith(i));
        }
        aa(vo(r.prototype), "updatePlugin", this).call(this);
      }
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      this.hot.columnIndexMapper.unregisterMap(this.pluginName), Zw(this, bl, null), this.nestedHeadersPlugin = null, this.clearButtons(), aa(vo(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Clears the expand/collapse buttons.
     *
     * @private
     */
  }, {
    key: "clearButtons",
    value: function() {
      if (this.hot.view) {
        var o = this.hot.view._wt.getSetting("columnHeaders").length, i = this.hot.view._wt.wtTable.THEAD, a = this.hot.view._wt.wtOverlays.topOverlay.clone.wtTable.THEAD, l = this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay ? this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.THEAD : null, s = function(f) {
          f && f.parentNode.removeChild(f);
        };
        _e(0, o - 1, function(u) {
          var f = i.childNodes[u], c = a.childNodes[u], h = l ? l.childNodes[u] : null;
          _e(0, f.childNodes.length - 1, function(d) {
            var y = f.childNodes[d].querySelector(".".concat(gl));
            s(y), c && c.childNodes[d] && (y = c.childNodes[d].querySelector(".".concat(gl)), s(y)), l && h && h.childNodes[d] && (y = h.childNodes[d].querySelector(".".concat(gl)), s(y));
          });
        });
      }
    }
    /**
     * Expands section at the provided coords.
     *
     * @param {object} coords Contains coordinates information. (`coords.row`, `coords.col`).
     */
  }, {
    key: "expandSection",
    value: function(o) {
      this.toggleCollapsibleSection([o], "expand");
    }
    /**
     * Collapses section at the provided coords.
     *
     * @param {object} coords Contains coordinates information. (`coords.row`, `coords.col`).
     */
  }, {
    key: "collapseSection",
    value: function(o) {
      this.toggleCollapsibleSection([o], "collapse");
    }
    /**
     * Collapses or expand all collapsible sections, depending on the action parameter.
     *
     * @param {string} action 'collapse' or 'expand'.
     */
  }, {
    key: "toggleAllCollapsibleSections",
    value: function(o) {
      var i = this, a = this.headerStateManager.mapNodes(function(l) {
        var s = l.collapsible, u = l.origColspan, f = l.headerLevel, c = l.columnIndex, h = l.isCollapsed;
        if (s === !0 && u > 1 && (h && o === "expand" || !h && o === "collapse"))
          return {
            row: i.headerStateManager.levelToRowCoords(f),
            col: c
          };
      });
      this.toggleCollapsibleSection(a, o);
    }
    /**
     * Collapses all collapsible sections.
     */
  }, {
    key: "collapseAll",
    value: function() {
      this.toggleAllCollapsibleSections("collapse");
    }
    /**
     * Expands all collapsible sections.
     */
  }, {
    key: "expandAll",
    value: function() {
      this.toggleAllCollapsibleSections("expand");
    }
    /**
     * Collapses/Expands a section.
     *
     * @param {Array} coords Array of coords - section coordinates.
     * @param {string} [action] Action definition ('collapse' or 'expand').
     * @fires Hooks#beforeColumnCollapse
     * @fires Hooks#beforeColumnExpand
     * @fires Hooks#afterColumnCollapse
     * @fires Hooks#afterColumnExpand
     */
  }, {
    key: "toggleCollapsibleSection",
    value: function(o, i) {
      var a = this;
      if (!rD.has(i))
        throw new Error("Unsupported action is passed (".concat(i, ")."));
      if (Array.isArray(o)) {
        var l = Zr(o, function(g) {
          var w = g.row;
          return w < 0;
        }), s = l.length > 0;
        I(l, function(g) {
          var w, C = g.row, _ = g.col, k = (w = a.headerStateManager.getHeaderSettings(C, _)) !== null && w !== void 0 ? w : {}, E = k.collapsible, j = k.isCollapsed;
          if (!E || j && i === "collapse" || !j && i === "expand")
            return s = !1, !1;
        });
        var u = [], f = [];
        s && I(l, function(g) {
          var w = g.row, C = g.col, _ = a.headerStateManager.triggerNodeModification(i, w, C), k = _.colspanCompensation, E = _.affectedColumns, j = _.rollbackModification;
          k > 0 && (f.push.apply(f, Jx(E)), u.push(j));
        });
        var c = this.getCollapsedColumns(), h = [];
        i === "collapse" ? h = wB([].concat(Jx(c), f)) : i === "expand" && (h = Zr(c, function(g) {
          return !f.includes(g);
        }));
        var d = rD.get(i), y = this.hot.runHooks(d.beforeHook, c, h, s);
        if (y === !1) {
          I(u, function(g) {
            g();
          });
          return;
        }
        this.hot.batchExecution(function() {
          I(f, function(g) {
            tD(a, bl).setValueAtIndex(a.hot.toPhysicalColumn(g), d.hideColumn);
          });
        }, !0);
        var p = this.getCollapsedColumns().length !== c.length;
        this.hot.runHooks(d.afterHook, c, h, s, p), this.hot.render(), this.hot.view.adjustElementsSize(!0);
      }
    }
    /**
     * Gets an array of physical indexes of collapsed columns.
     *
     * @private
     * @returns {number[]}
     */
  }, {
    key: "getCollapsedColumns",
    value: function() {
      return tD(this, bl).getHiddenIndexes();
    }
    /**
     * Adds the indicator to the headers.
     *
     * @private
     * @param {number} column Column index.
     * @param {HTMLElement} TH TH element.
     * @param {number} headerLevel The index of header level counting from the top (positive
     *                             values counting from 0 to N).
     */
  }, {
    key: "onAfterGetColHeader",
    value: function(o, i, a) {
      var l, s = (l = this.headerStateManager.getHeaderSettings(a, o)) !== null && l !== void 0 ? l : {}, u = s.collapsible, f = s.origColspan, c = s.isCollapsed, h = u && f > 1 && o >= this.hot.getSettings().fixedColumnsStart, d = i.querySelector(".".concat(gl));
      if (h)
        d || (d = this.hot.rootDocument.createElement("div"), ae(d, gl), i.querySelector("div:first-child").appendChild(d)), Le(d, ["collapsed", "expanded"]), c ? (ae(d, "collapsed"), xa(d, "+")) : (ae(d, "expanded"), xa(d, "-"));
      else {
        var y;
        (y = d) === null || y === void 0 || y.remove();
      }
    }
    /**
     * Indicator mouse event callback.
     *
     * @private
     * @param {object} event Mouse event.
     * @param {object} coords Event coordinates.
     */
  }, {
    key: "onBeforeOnCellMouseDown",
    value: function(o, i) {
      Me(o.target, gl) && (Me(o.target, "expanded") ? (this.eventManager.fireEvent(o.target, "mouseup"), this.toggleCollapsibleSection([i], "collapse")) : Me(o.target, "collapsed") && (this.eventManager.fireEvent(o.target, "mouseup"), this.toggleCollapsibleSection([i], "expand")), Fn(o));
    }
    /**
     * Updates the plugin state after HoT initialization.
     *
     * @private
     */
  }, {
    key: "onInit",
    value: function() {
      this.updatePlugin();
    }
    /**
     * Updates the plugin state after new dataset load.
     *
     * @private
     * @param {Array[]} sourceData Array of arrays or array of objects containing data.
     * @param {boolean} initialLoad Flag that determines whether the data has been loaded
     *                              during the initialization.
     */
  }, {
    key: "onAfterLoadData",
    value: function(o, i) {
      i || this.updatePlugin();
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      Zw(this, bl, null), aa(vo(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return Qw;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return lke;
    }
  }, {
    key: "PLUGIN_DEPS",
    get: function() {
      return ["plugin:NestedHeaders"];
    }
  }, {
    key: "SETTING_KEYS",
    get: function() {
      return [Qw].concat(ske);
    }
  }]), r;
}(ft);
function Xh(e) {
  "@babel/helpers - typeof";
  return Xh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Xh(e);
}
function nD(e, t) {
  var r = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    t && (n = n.filter(function(o) {
      return Object.getOwnPropertyDescriptor(e, o).enumerable;
    })), r.push.apply(r, n);
  }
  return r;
}
function fke(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? nD(Object(r), !0).forEach(function(n) {
      cke(e, n, r[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : nD(Object(r)).forEach(function(n) {
      Object.defineProperty(e, n, Object.getOwnPropertyDescriptor(r, n));
    });
  }
  return e;
}
function cke(e, t, r) {
  return t = cU(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function oD(e, t) {
  return yke(e) || vke(e, t) || dke(e, t) || hke();
}
function hke() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function dke(e, t) {
  if (e) {
    if (typeof e == "string")
      return iD(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return iD(e, t);
  }
}
function iD(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function vke(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function yke(e) {
  if (Array.isArray(e))
    return e;
}
function pke(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function aD(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, cU(n.key), n);
  }
}
function mke(e, t, r) {
  return t && aD(e.prototype, t), r && aD(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function cU(e) {
  var t = gke(e, "string");
  return Xh(t) === "symbol" ? t : String(t);
}
function gke(e, t) {
  if (Xh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Xh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var bke = ["sortEmptyCells", "indicator", "headerAction", "compareFunctionFactory"], wke = !1, Ske = !0, Cke = !0, _ke = /* @__PURE__ */ function() {
  function e(t, r) {
    pke(this, e), this.hot = t, this.sortingStates = new Mg(), this.sortEmptyCells = wke, this.indicator = Ske, this.headerAction = Cke, this.compareFunctionFactory = void 0, this.mapName = r, this.hot.columnIndexMapper.registerMap(r, this.sortingStates);
  }
  return mke(e, [{
    key: "updateAllColumnsProperties",
    value: function(r) {
      var n = this;
      ze(r) && Ye(r, function(o, i) {
        bke.includes(i) && (n[i] = o);
      });
    }
    /**
     * Get all column properties which affect the sorting result.
     *
     * @returns {object}
     */
  }, {
    key: "getAllColumnsProperties",
    value: function() {
      var r = {
        sortEmptyCells: this.sortEmptyCells,
        indicator: this.indicator,
        headerAction: this.headerAction
      };
      return typeof this.compareFunctionFactory == "function" && (r.compareFunctionFactory = this.compareFunctionFactory), r;
    }
    /**
     * Get sort order of column.
     *
     * @param {number} searchedColumn Visual column index.
     * @returns {string|undefined} Sort order (`asc` for ascending, `desc` for descending and undefined for not sorted).
     */
  }, {
    key: "getSortOrderOfColumn",
    value: function(r) {
      var n;
      return (n = this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(r))) === null || n === void 0 ? void 0 : n.sortOrder;
    }
    /**
     * Get order of particular column in the states queue.
     *
     * @param {number} column Visual column index.
     * @returns {number}
     */
  }, {
    key: "getIndexOfColumnInSortQueue",
    value: function(r) {
      return r = this.hot.toPhysicalColumn(r), this.sortingStates.getEntries().findIndex(function(n) {
        var o = oD(n, 1), i = o[0];
        return i === r;
      });
    }
    /**
     * Get number of sorted columns.
     *
     * @returns {number}
     */
  }, {
    key: "getNumberOfSortedColumns",
    value: function() {
      return this.sortingStates.getLength();
    }
    /**
     * Get if list of sorted columns is empty.
     *
     * @returns {boolean}
     */
  }, {
    key: "isListOfSortedColumnsEmpty",
    value: function() {
      return this.getNumberOfSortedColumns() === 0;
    }
    /**
     * Get if particular column is sorted.
     *
     * @param {number} column Visual column index.
     * @returns {boolean}
     */
  }, {
    key: "isColumnSorted",
    value: function(r) {
      return ze(this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(r)));
    }
    /**
     * Queue of sort states containing sorted columns and their orders (Array of objects containing `column` and `sortOrder` properties).
     *
     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.
     *
     * @returns {Array<object>}
     */
  }, {
    key: "getSortStates",
    value: function() {
      var r = this;
      if (this.sortingStates === null)
        return [];
      var n = this.sortingStates.getEntries();
      return n.map(function(o) {
        var i = oD(o, 2), a = i[0], l = i[1];
        return fke({
          column: r.hot.toVisualColumn(a)
        }, l);
      });
    }
    /**
     * Get sort state for particular column. Object contains `column` and `sortOrder` properties.
     *
     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.
     *
     * @param {number} column Visual column index.
     * @returns {object|undefined}
     */
  }, {
    key: "getColumnSortState",
    value: function(r) {
      var n = this.getSortOrderOfColumn(r);
      if (be(n))
        return {
          column: r,
          sortOrder: n
        };
    }
    /**
     * Set all column states.
     *
     * @param {Array} sortStates Sort states.
     */
  }, {
    key: "setSortStates",
    value: function(r) {
      this.sortingStates.clear();
      for (var n = 0; n < r.length; n += 1)
        this.sortingStates.setValueAtIndex(this.hot.toPhysicalColumn(r[n].column), {
          sortOrder: r[n].sortOrder
        });
    }
    /**
     * Destroy the state manager.
     */
  }, {
    key: "destroy",
    value: function() {
      this.hot.columnIndexMapper.unregisterMap(this.mapName), this.sortingStates = null;
    }
  }]), e;
}(), Am = "asc", Im = "desc", Oke = "colHeader";
function Rke(e) {
  if (ze(e) === !1)
    return !1;
  var t = e.column, r = e.sortOrder;
  return Number.isInteger(t) && [Am, Im].includes(r);
}
function Eke(e) {
  if (e.some(function(r) {
    return Rke(r) === !1;
  }))
    return !1;
  var t = e.map(function(r) {
    var n = r.column;
    return n;
  });
  return new Set(t).size === t.length;
}
function lD(e) {
  if (e !== Im)
    return e === Am ? Im : Am;
}
function sD(e) {
  var t = e.querySelector(".".concat(Oke));
  return t;
}
function uD(e, t) {
  if (e < 0 || !t.parentNode)
    return !1;
  var r = t.parentNode.parentNode.childNodes, n = Array.from(r).indexOf(t.parentNode) - r.length;
  return n === -1;
}
function wO(e, t, r) {
  return e === -1 && t >= 0 && Na(r) === !1;
}
var Tke = "ascending", Pke = "descending", hU = "indicatorDisabled", dU = "columnSorting", vU = "sortAction", yU = /* @__PURE__ */ new Map([[Am, Tke], [Im, Pke]]);
function kke(e, t, r, n) {
  var o = [dU];
  if (n && o.push(vU), r === !1)
    return o.push(hU), o;
  var i = e.getSortOrderOfColumn(t);
  return be(i) && o.push(yU.get(i)), o;
}
function $ke() {
  return Array.from(yU.values()).concat(vU, hU, dU);
}
function pU(e, t, r) {
  var n = t.locale;
  return function(o, i) {
    var a = r.sortEmptyCells;
    return typeof o == "string" && (o = o.toLocaleLowerCase(n)), typeof i == "string" && (i = i.toLocaleLowerCase(n)), o === i ? Hn : Xt(o) ? Xt(i) ? Hn : a && e === "asc" ? Pt : kt : Xt(i) ? a && e === "asc" ? kt : Pt : isNaN(o) && !isNaN(i) ? e === "asc" ? kt : Pt : !isNaN(o) && isNaN(i) || (isNaN(o) || isNaN(i) || (o = parseFloat(o), i = parseFloat(i)), o < i) ? e === "asc" ? Pt : kt : o > i ? e === "asc" ? kt : Pt : Hn;
  };
}
var mU = "default";
function Ake(e, t, r) {
  return function(n, o) {
    var i = parseFloat(n), a = parseFloat(o), l = r.sortEmptyCells;
    if (i === a || isNaN(i) && isNaN(a))
      return Hn;
    if (l) {
      if (Xt(n))
        return e === "asc" ? Pt : kt;
      if (Xt(o))
        return e === "asc" ? kt : Pt;
    }
    return isNaN(i) ? kt : isNaN(a) ? Pt : i < a ? e === "asc" ? Pt : kt : i > a ? e === "asc" ? kt : Pt : Hn;
  };
}
var Ike = "numeric";
function Mke(e, t, r) {
  var n = t.checkedTemplate, o = t.uncheckedTemplate, i = r.sortEmptyCells;
  return function(a, l) {
    var s = Xt(a), u = Xt(l), f = s ? o : a, c = u ? o : l, h = f === o || f === n, d = c === o || c === n;
    if (i === !1) {
      if (s && u === !1)
        return kt;
      if (s === !1 && u)
        return Pt;
    }
    return h === !1 && d ? e === "asc" ? Pt : kt : h && d === !1 ? e === "asc" ? kt : Pt : h === !1 && d === !1 ? pU(e, t, r)(a, l) : f === o && c === n ? e === "asc" ? Pt : kt : f === n && c === o ? e === "asc" ? kt : Pt : Hn;
  };
}
var xke = "checkbox";
function Dke(e, t, r) {
  return function(n, o) {
    var i = r.sortEmptyCells;
    if (n === o)
      return Hn;
    if (Xt(n))
      return Xt(o) ? Hn : i && e === "asc" ? Pt : kt;
    if (Xt(o))
      return i && e === "asc" ? kt : Pt;
    var a = t.dateFormat, l = ne(n, a), s = ne(o, a);
    return l.isValid() ? s.isValid() ? s.isAfter(l) ? e === "asc" ? Pt : kt : s.isBefore(l) ? e === "asc" ? kt : Pt : Hn : Pt : kt;
  };
}
var Nke = "date", OP = nn("sorting.compareFunctionFactory"), Jg = OP.register, fD = OP.getItem, Hke = OP.hasItem, gU = nn("sorting.mainSortComparator"), bU = gU.register, Lke = gU.getItem;
function wU(e) {
  return Hke(e) ? fD(e) : fD(mU);
}
Jg(Ike, Ake);
Jg(xke, Mke);
Jg(Nke, Dke);
Jg(mU, pU);
var Hn = 0, Pt = -1, kt = 1;
function jke(e, t) {
  for (var r = Lke(t), n = arguments.length, o = new Array(n > 2 ? n - 2 : 0), i = 2; i < n; i++)
    o[i - 2] = arguments[i];
  e.sort(r.apply(void 0, o));
}
function cD(e) {
  return Wke(e) || Vke(e) || Bke(e) || Fke();
}
function Fke() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Bke(e, t) {
  if (e) {
    if (typeof e == "string")
      return hD(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return hD(e, t);
  }
}
function hD(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function Vke(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function Wke(e) {
  if (Array.isArray(e))
    return e;
}
function Uke(e, t) {
  return function(r, n) {
    var o = cD(r), i = o.slice(1), a = cD(n), l = a.slice(1);
    return function(u) {
      var f = e[u], c = t[u], h = i[u], d = l[u], y = c.columnSorting, p = y.compareFunctionFactory ? y.compareFunctionFactory : wU(c.type), g = p(f, c, y)(h, d);
      return g;
    }(0);
  };
}
function hu(e) {
  "@babel/helpers - typeof";
  return hu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, hu(e);
}
var zke = ["column"], Yke = ["column"];
function wl(e) {
  return Xke(e) || qke(e) || Kke(e) || Gke();
}
function Gke() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Kke(e, t) {
  if (e) {
    if (typeof e == "string")
      return SO(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return SO(e, t);
  }
}
function qke(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function Xke(e) {
  if (Array.isArray(e))
    return SO(e);
}
function SO(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function dD(e, t) {
  var r = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    t && (n = n.filter(function(o) {
      return Object.getOwnPropertyDescriptor(e, o).enumerable;
    })), r.push.apply(r, n);
  }
  return r;
}
function vD(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? dD(Object(r), !0).forEach(function(n) {
      Zke(e, n, r[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : dD(Object(r)).forEach(function(n) {
      Object.defineProperty(e, n, Object.getOwnPropertyDescriptor(r, n));
    });
  }
  return e;
}
function Zke(e, t, r) {
  return t = SU(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function yD(e, t) {
  if (e == null)
    return {};
  var r = Qke(e, t), n, o;
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(e);
    for (o = 0; o < i.length; o++)
      n = i[o], !(t.indexOf(n) >= 0) && Object.prototype.propertyIsEnumerable.call(e, n) && (r[n] = e[n]);
  }
  return r;
}
function Qke(e, t) {
  if (e == null)
    return {};
  var r = {}, n = Object.keys(e), o, i;
  for (i = 0; i < n.length; i++)
    o = n[i], !(t.indexOf(o) >= 0) && (r[o] = e[o]);
  return r;
}
function Jke(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function pD(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, SU(n.key), n);
  }
}
function e$e(e, t, r) {
  return t && pD(e.prototype, t), r && pD(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function SU(e) {
  var t = t$e(e, "string");
  return hu(t) === "symbol" ? t : String(t);
}
function t$e(e, t) {
  if (hu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (hu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function la() {
  return typeof Reflect < "u" && Reflect.get ? la = Reflect.get.bind() : la = function(t, r, n) {
    var o = r$e(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, la.apply(this, arguments);
}
function r$e(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = yo(e), e !== null); )
    ;
  return e;
}
function n$e(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && CO(e, t);
}
function CO(e, t) {
  return CO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, CO(e, t);
}
function o$e(e) {
  var t = l$e();
  return function() {
    var n = yo(e), o;
    if (t) {
      var i = yo(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return i$e(this, o);
  };
}
function i$e(e, t) {
  if (t && (hu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return a$e(e);
}
function a$e(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function l$e() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function yo(e) {
  return yo = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, yo(e);
}
var _O = "columnSorting", s$e = 50, mD = "append", u$e = "replace";
bU(_O, Uke);
we.getSingleton().register("beforeColumnSort");
we.getSingleton().register("afterColumnSort");
var CU = /* @__PURE__ */ function(e) {
  n$e(r, e);
  var t = o$e(r);
  function r(n) {
    var o;
    return Jke(this, r), o = t.call(this, n), o.columnStatesManager = null, o.columnMetaCache = null, o.pluginKey = _O, o.indexesSequenceCache = null, o;
  }
  return e$e(r, [{
    key: "isEnabled",
    value: function() {
      return !!this.hot.getSettings()[this.pluginKey];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      this.enabled || (this.columnStatesManager = new _ke(this.hot, "".concat(this.pluginKey, ".sortingStates")), this.columnMetaCache = new Ai(function(i) {
        var a = o.hot.toVisualColumn(i);
        return a === null && (a = i), o.getMergedPluginSettings(a);
      }), this.hot.columnIndexMapper.registerMap("".concat(this.pluginKey, ".columnMeta"), this.columnMetaCache), this.addHook("afterGetColHeader", function(i, a) {
        return o.onAfterGetColHeader(i, a);
      }), this.addHook("beforeOnCellMouseDown", function() {
        return o.onBeforeOnCellMouseDown.apply(o, arguments);
      }), this.addHook("afterOnCellMouseDown", function(i, a) {
        return o.onAfterOnCellMouseDown(i, a);
      }), this.addHook("afterInit", function() {
        return o.loadOrSortBySettings();
      }), this.addHook("afterLoadData", function() {
        return o.onAfterLoadData.apply(o, arguments);
      }), this.hot.view && this.loadOrSortBySettings(), la(yo(r.prototype), "enablePlugin", this).call(this));
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      var o = this, i = function(l, s) {
        var u = sD(s);
        uD(l, s) === !1 || u === null || o.updateHeaderClasses(u);
      };
      this.hot.addHook("afterGetColHeader", i), this.hot.addHookOnce("afterViewRender", function() {
        o.hot.removeHook("afterGetColHeader", i);
      }), this.hot.batchExecution(function() {
        o.indexesSequenceCache !== null && (o.hot.rowIndexMapper.setIndexesSequence(o.indexesSequenceCache.getValues()), o.hot.rowIndexMapper.unregisterMap(o.pluginKey));
      }, !0), this.hot.columnIndexMapper.unregisterMap("".concat(this.pluginKey, ".columnMeta")), this.columnStatesManager.destroy(), this.columnMetaCache = null, this.columnStatesManager = null, la(yo(r.prototype), "disablePlugin", this).call(this);
    }
    // DIFF - MultiColumnSorting & ColumnSorting: changed function documentation.
    /**
     * Sorts the table by chosen columns and orders.
     *
     * @param {undefined|object} sortConfig Single column sort configuration. The configuration object contains `column` and `sortOrder` properties.
     * First of them contains visual column index, the second one contains sort order (`asc` for ascending, `desc` for descending).
     *
     * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.
     *
     * @example
     * ```js
     * // sort ascending first visual column
     * hot.getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });
     * ```
     *
     * @fires Hooks#beforeColumnSort
     * @fires Hooks#afterColumnSort
     */
  }, {
    key: "sort",
    value: function(o) {
      var i = this.getSortConfig(), a = this.getNormalizedSortConfigs(o), l = this.areValidSortConfigs(a), s = this.hot.runHooks("beforeColumnSort", i, a, l);
      s !== !1 && (i.length === 0 && this.indexesSequenceCache === null && (this.indexesSequenceCache = this.hot.rowIndexMapper.registerMap(this.pluginKey, new QW()), this.indexesSequenceCache.setValues(this.hot.rowIndexMapper.getIndexesSequence())), l && (this.columnStatesManager.setSortStates(a), this.sortByPresetSortStates(a), this.saveAllSortSettings(a)), this.hot.runHooks("afterColumnSort", i, l ? a : i, l), l && (this.hot.render(), this.hot.forceFullRender = !1, this.hot.view.render()));
    }
    /**
     * Clear the sort performed on the table.
     */
  }, {
    key: "clearSort",
    value: function() {
      this.sort([]);
    }
    /**
     * Checks if the table is sorted (any column have to be sorted).
     *
     * @returns {boolean}
     */
  }, {
    key: "isSorted",
    value: function() {
      return this.enabled && !this.columnStatesManager.isListOfSortedColumnsEmpty();
    }
    /**
     * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.
     *
     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.
     *
     * @param {number} [column] Visual column index.
     * @returns {undefined|object|Array}
     */
  }, {
    key: "getSortConfig",
    value: function(o) {
      return be(o) ? this.columnStatesManager.getColumnSortState(o) : this.columnStatesManager.getSortStates();
    }
    /**
     * @description
     * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.
     * Note: Please keep in mind that this method doesn't re-render the table.
     *
     * @example
     * ```js
     * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {
     *   const columnSortPlugin = this.getPlugin('columnSorting');
     *
     *   columnSortPlugin.setSortConfig(destinationSortConfigs);
     *
     *   // const newData = ... // Calculated data set, ie. from an AJAX call.
     *
     *   this.loadData(newData); // Load new data set and re-render the table.
     *
     *   return false; // The blockade for the default sort action.
     * }
     * ```
     *
     * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).
     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
     * sort order (`asc` for ascending, `desc` for descending).
     */
  }, {
    key: "setSortConfig",
    value: function(o) {
      var i = this.getNormalizedSortConfigs(o);
      this.areValidSortConfigs(i) && this.columnStatesManager.setSortStates(i);
    }
    /**
     * Get normalized sort configs.
     *
     * @private
     * @param {object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).
     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
     * sort order (`asc` for ascending, `desc` for descending).
     * @returns {Array}
     */
  }, {
    key: "getNormalizedSortConfigs",
    value: function() {
      var o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      return Array.isArray(o) ? o.slice(0, 1) : [o];
    }
    /**
     * Get if sort configs are valid.
     *
     * @private
     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.
     * @returns {boolean}
     */
  }, {
    key: "areValidSortConfigs",
    value: function(o) {
      var i = this.hot.countCols();
      return Eke(o) && o.every(function(a) {
        var l = a.column;
        return l <= i && l >= 0;
      });
    }
    /**
     * Saves all sorting settings. Saving works only when {@link Options#persistentState} option is enabled.
     *
     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.
     *
     * @private
     * @fires Hooks#persistentStateSave
     */
  }, {
    key: "saveAllSortSettings",
    value: function(o) {
      var i = this, a = this.columnStatesManager.getAllColumnsProperties(), l = function(u) {
        var f = u.column, c = yD(u, zke);
        return vD({
          column: i.hot.toPhysicalColumn(f)
        }, c);
      };
      a.initialConfig = Ue(o, l), this.hot.runHooks("persistentStateSave", "columnSorting", a);
    }
    /**
     * Get all saved sorting settings. Loading works only when {@link Options#persistentState} option is enabled.
     *
     * @private
     * @returns {object} Previously saved sort settings.
     *
     * @fires Hooks#persistentStateLoad
     */
  }, {
    key: "getAllSavedSortSettings",
    value: function() {
      var o = this, i = {};
      this.hot.runHooks("persistentStateLoad", "columnSorting", i);
      var a = i.value, l = function(u) {
        var f = u.column, c = yD(u, Yke);
        return vD({
          column: o.hot.toVisualColumn(f)
        }, c);
      };
      return be(a) && Array.isArray(a.initialConfig) && (a.initialConfig = Ue(a.initialConfig, l)), a;
    }
    /**
     * Get next sort configuration for particular column. Object contain `column` and `sortOrder` properties.
     *
     * **Note**: Please keep in mind that returned object expose **visual** column index under the `column` key.
     *
     * @private
     * @param {number} column Visual column index.
     * @returns {undefined|object}
     */
  }, {
    key: "getColumnNextConfig",
    value: function(o) {
      var i = this.columnStatesManager.getSortOrderOfColumn(o);
      if (be(i)) {
        var a = lD(i);
        return be(a) ? {
          column: o,
          sortOrder: a
        } : void 0;
      }
      var l = this.hot.countCols();
      if (Number.isInteger(o) && o >= 0 && o < l)
        return {
          column: o,
          sortOrder: lD()
        };
    }
    /**
     * Get sort configuration with "next order" for particular column.
     *
     * @private
     * @param {number} columnToChange Visual column index of column which order will be changed.
     * @param {string} strategyId ID of strategy. Possible values: 'append' and 'replace'. The first one
     * change order of particular column and change it's position in the sort queue to the last one. The second one
     * just change order of particular column.
     *
     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.
     *
     * @returns {Array}
     */
  }, {
    key: "getNextSortConfig",
    value: function(o) {
      var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : mD, a = this.columnStatesManager.getIndexOfColumnInSortQueue(o), l = a !== -1, s = this.getSortConfig(), u = this.getColumnNextConfig(o);
      if (l) {
        if (gt(u))
          return [].concat(wl(s.slice(0, a)), wl(s.slice(a + 1)));
        if (i === mD)
          return [].concat(wl(s.slice(0, a)), wl(s.slice(a + 1)), [u]);
        if (i === u$e)
          return [].concat(wl(s.slice(0, a)), [u], wl(s.slice(a + 1)));
      }
      return be(u) ? s.concat(u) : s;
    }
    /**
     * Get plugin's column config for the specified column index.
     *
     * @private
     * @param {object} columnConfig Configuration inside `columns` property for the specified column index.
     * @returns {object}
     */
  }, {
    key: "getPluginColumnConfig",
    value: function(o) {
      if (ze(o)) {
        var i = o[this.pluginKey];
        if (ze(i))
          return i;
      }
      return {};
    }
    /**
     * Get plugin settings related properties, properly merged from cascade settings.
     *
     * @private
     * @param {number} column Visual column index.
     * @returns {object}
     */
  }, {
    key: "getMergedPluginSettings",
    value: function(o) {
      var i = this.hot.getSettings()[this.pluginKey], a = this.columnStatesManager.getAllColumnsProperties(), l = this.hot.getCellMeta(0, o), s = Object.getPrototypeOf(l);
      return Array.isArray(s.columns) ? Object.assign(a, i, this.getPluginColumnConfig(s.columns[o])) : wt(s.columns) ? Object.assign(a, i, this.getPluginColumnConfig(s.columns(o))) : Object.assign(a, i);
    }
    /**
     * Get copy of settings for first cell in the column.
     *
     * @private
     * @param {number} column Visual column index.
     * @returns {object}
     */
    // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. Instead of getting properties from column meta we call this function.
    // TODO: Remove test named: "should not break the dataset when inserted new row" (#5431).
  }, {
    key: "getFirstCellSettings",
    value: function(o) {
      var i = this.hot.getCellMeta(0, o), a = Object.create(i);
      return a[this.pluginKey] = this.columnMetaCache.getValueAtIndex(this.hot.toPhysicalColumn(o)), a;
    }
    /**
     * Get number of rows which should be sorted.
     *
     * @private
     * @param {number} numberOfRows Total number of displayed rows.
     * @returns {number}
     */
  }, {
    key: "getNumberOfRowsToSort",
    value: function(o) {
      var i = this.hot.getSettings();
      return i.maxRows <= o ? i.maxRows : o - i.minSpareRows;
    }
    /**
     * Performs the sorting using a stable sort function basing on internal state of sorting.
     *
     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.
     * @private
     */
  }, {
    key: "sortByPresetSortStates",
    value: function(o) {
      var i = this;
      if (o.length === 0) {
        this.hot.rowIndexMapper.setIndexesSequence(this.indexesSequenceCache.getValues());
        return;
      }
      for (var a = [], l = this.hot.countRows(), s = function(g) {
        return Ue(o, function(w) {
          return i.hot.getDataAtCell(g, w.column);
        });
      }, u = 0; u < this.getNumberOfRowsToSort(l); u += 1)
        a.push([this.hot.toPhysicalRow(u)].concat(s(u)));
      var f = Ue(a, function(p) {
        return p[0];
      });
      jke(a, this.pluginKey, Ue(o, function(p) {
        return p.sortOrder;
      }), Ue(o, function(p) {
        return i.getFirstCellSettings(p.column);
      }));
      for (var c = a.length; c < l; c += 1)
        a.push([c].concat(s(c)));
      var h = Ue(a, function(p) {
        return p[0];
      }), d = new Map(Ue(f, function(p, g) {
        return [p, h[g]];
      })), y = Ue(this.hot.rowIndexMapper.getIndexesSequence(), function(p) {
        return d.has(p) ? d.get(p) : p;
      });
      this.hot.rowIndexMapper.setIndexesSequence(y);
    }
    /**
     * Load saved settings or sort by predefined plugin configuration.
     *
     * @private
     */
  }, {
    key: "loadOrSortBySettings",
    value: function() {
      var o = this.getAllSavedSortSettings();
      if (ze(o))
        this.sortBySettings(o);
      else {
        var i = this.hot.getSettings()[this.pluginKey];
        this.sortBySettings(i);
      }
    }
    /**
     * Sort the table by provided configuration.
     *
     * @private
     * @param {object} allSortSettings All sort config settings. Object may contain `initialConfig`, `indicator`,
     * `sortEmptyCells`, `headerAction` and `compareFunctionFactory` properties.
     */
  }, {
    key: "sortBySettings",
    value: function(o) {
      if (ze(o)) {
        this.columnStatesManager.updateAllColumnsProperties(o);
        var i = o.initialConfig;
        (Array.isArray(i) || ze(i)) && this.sort(i);
      } else
        this.hot.render();
    }
    /**
     * Callback for the `onAfterGetColHeader` hook. Adds column sorting CSS classes.
     *
     * @private
     * @param {number} column Visual column index.
     * @param {Element} TH TH HTML element.
     */
  }, {
    key: "onAfterGetColHeader",
    value: function(o, i) {
      var a = sD(i);
      if (!(uD(o, i) === !1 || a === null)) {
        var l = this.getFirstCellSettings(o)[this.pluginKey], s = l.indicator, u = l.headerAction;
        this.updateHeaderClasses(a, this.columnStatesManager, o, s, u);
      }
    }
    /**
     * Update header classes.
     *
     * @private
     * @param {HTMLElement} headerSpanElement Header span element.
     * @param {...*} args Extra arguments for helpers.
     */
  }, {
    key: "updateHeaderClasses",
    value: function(o) {
      if (Le(o, $ke()), this.enabled !== !1) {
        for (var i = arguments.length, a = new Array(i > 1 ? i - 1 : 0), l = 1; l < i; l++)
          a[l - 1] = arguments[l];
        ae(o, kke.apply(void 0, a));
      }
    }
    /**
     * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called
     * for `updateSettings` in specific situations.
     *
     * @private
     * @param {object} newSettings New settings object.
     */
  }, {
    key: "onUpdateSettings",
    value: function(o) {
      la(yo(r.prototype), "onUpdateSettings", this).call(this), this.columnMetaCache !== null && this.columnMetaCache.init(this.hot.columnIndexMapper.getNumberOfIndexes()), be(o[this.pluginKey]) && this.sortBySettings(o[this.pluginKey]);
    }
    /**
     * Callback for the `afterLoadData` hook.
     *
     * @private
     * @param {boolean} initialLoad Flag that determines whether the data has been loaded during the initialization.
     */
  }, {
    key: "onAfterLoadData",
    value: function(o) {
      o === !0 && this.hot.view && this.loadOrSortBySettings();
    }
    /**
     * Indicates if clickable header was clicked.
     *
     * @private
     * @param {MouseEvent} event The `mousedown` event.
     * @param {number} column Visual column index.
     * @returns {boolean}
     */
  }, {
    key: "wasClickableHeaderClicked",
    value: function(o, i) {
      var a = this.getFirstCellSettings(i)[this.pluginKey], l = a.headerAction;
      return l && o.target.nodeName === "SPAN";
    }
    /**
     * Changes the behavior of selection / dragging.
     *
     * @private
     * @param {MouseEvent} event The `mousedown` event.
     * @param {CellCoords} coords Visual coordinates.
     * @param {HTMLElement} TD The cell element.
     * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
     *                            a boolean value that allows or disallows changing the selection for that particular area.
     */
  }, {
    key: "onBeforeOnCellMouseDown",
    value: function(o, i, a, l) {
      wO(i.row, i.col, o) !== !1 && this.wasClickableHeaderClicked(o, i.col) && this.hot.getShortcutManager().isCtrlPressed() && (l.column = !0);
    }
    /**
     * Callback for the `onAfterOnCellMouseDown` hook.
     *
     * @private
     * @param {Event} event Event which are provided by hook.
     * @param {CellCoords} coords Visual coords of the selected cell.
     */
  }, {
    key: "onAfterOnCellMouseDown",
    value: function(o, i) {
      wO(i.row, i.col, o) !== !1 && this.wasClickableHeaderClicked(o, i.col) && (this.hot.getShortcutManager().isCtrlPressed() && (this.hot.deselectCell(), this.hot.selectColumns(i.col)), this.sort(this.getColumnNextConfig(i.col)));
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      var o;
      (o = this.columnStatesManager) === null || o === void 0 || o.destroy(), la(yo(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return _O;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return s$e;
    }
  }]), r;
}(ft), f$e = Ie, RP = Be, c$e = ki, h$e = jF, d$e = zE, gD = Fe, v$e = RangeError, _U = String, OU = Math.floor, OO = RP(d$e), bD = RP("".slice), Kf = RP(1 .toFixed), zl = function(e, t, r) {
  return t === 0 ? r : t % 2 === 1 ? zl(e, t - 1, r * e) : zl(e * e, t / 2, r);
}, y$e = function(e) {
  for (var t = 0, r = e; r >= 4096; )
    t += 12, r /= 4096;
  for (; r >= 2; )
    t += 1, r /= 2;
  return t;
}, Sl = function(e, t, r) {
  for (var n = -1, o = r; ++n < 6; )
    o += t * e[n], e[n] = o % 1e7, o = OU(o / 1e7);
}, Jw = function(e, t) {
  for (var r = 6, n = 0; --r >= 0; )
    n += e[r], e[r] = OU(n / t), n = n % t * 1e7;
}, wD = function(e) {
  for (var t = 6, r = ""; --t >= 0; )
    if (r !== "" || t === 0 || e[t] !== 0) {
      var n = _U(e[t]);
      r = r === "" ? n : r + OO("0", 7 - n.length) + n;
    }
  return r;
}, p$e = gD(function() {
  return Kf(8e-5, 3) !== "0.000" || Kf(0.9, 0) !== "1" || Kf(1.255, 2) !== "1.25" || Kf(1000000000000000100, 0) !== "1000000000000000128";
}) || !gD(function() {
  Kf({});
});
f$e({ target: "Number", proto: !0, forced: p$e }, {
  toFixed: function(t) {
    var r = h$e(this), n = c$e(t), o = [0, 0, 0, 0, 0, 0], i = "", a = "0", l, s, u, f;
    if (n < 0 || n > 20)
      throw v$e("Incorrect fraction digits");
    if (r != r)
      return "NaN";
    if (r <= -1e21 || r >= 1e21)
      return _U(r);
    if (r < 0 && (i = "-", r = -r), r > 1e-21)
      if (l = y$e(r * zl(2, 69, 1)) - 69, s = l < 0 ? r * zl(2, -l, 1) : r / zl(2, l, 1), s *= 4503599627370496, l = 52 - l, l > 0) {
        for (Sl(o, 0, s), u = n; u >= 7; )
          Sl(o, 1e7, 0), u -= 7;
        for (Sl(o, zl(10, u, 1), 0), u = l - 1; u >= 23; )
          Jw(o, 1 << 23), u -= 23;
        Jw(o, 1 << u), Sl(o, 1, 1), Jw(o, 2), a = wD(o);
      } else
        Sl(o, 0, s), Sl(o, 1 << -l, 0), a = wD(o) + OO("0", n);
    return n > 0 ? (f = a.length, a = i + (f <= n ? "0." + OO("0", n - f) + a : bD(a, 0, f - n) + "." + bD(a, f - n))) : a = i + a, a;
  }
});
function Zh(e) {
  "@babel/helpers - typeof";
  return Zh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Zh(e);
}
function m$e(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function SD(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, b$e(n.key), n);
  }
}
function g$e(e, t, r) {
  return t && SD(e.prototype, t), r && SD(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function b$e(e) {
  var t = w$e(e, "string");
  return Zh(t) === "symbol" ? t : String(t);
}
function w$e(e, t) {
  if (Zh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Zh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var S$e = /* @__PURE__ */ function() {
  function e(t, r) {
    m$e(this, e), this.plugin = t, this.hot = this.plugin.hot, this.endpoints = [], this.settings = r, this.settingsType = "array", this.currentEndpoint = null, this.cellsToSetCache = [];
  }
  return g$e(e, [{
    key: "getEndpoint",
    value: function(r) {
      return this.settingsType === "function" ? this.fillMissingEndpointData(this.settings)[r] : this.endpoints[r];
    }
    /**
     * Get an array with all the endpoints.
     *
     * @returns {Array}
     */
  }, {
    key: "getAllEndpoints",
    value: function() {
      return this.settingsType === "function" ? this.fillMissingEndpointData(this.settings) : this.endpoints;
    }
    /**
     * Used to fill the blanks in the endpoint data provided by a settings function.
     *
     * @private
     * @param {Function} func Function provided in the HOT settings.
     * @returns {Array} An array of endpoints.
     */
  }, {
    key: "fillMissingEndpointData",
    value: function(r) {
      return this.parseSettings(r.call(this));
    }
    /**
     * Parse plugin's settings.
     *
     * @param {Array} settings The settings array.
     * @returns {object[]}
     */
  }, {
    key: "parseSettings",
    value: function(r) {
      var n = this, o = [], i = r;
      if (!i && typeof this.settings == "function") {
        this.settingsType = "function";
        return;
      }
      return i || (i = this.settings), I(i, function(a) {
        var l = {};
        n.assignSetting(a, l, "ranges", [[0, n.hot.countRows() - 1]]), n.assignSetting(a, l, "reversedRowCoords", !1), n.assignSetting(a, l, "destinationRow", new Error(`
        You must provide a destination row for the Column Summary plugin in order to work properly!
      `)), n.assignSetting(a, l, "destinationColumn", new Error(`
        You must provide a destination column for the Column Summary plugin in order to work properly!
      `)), n.assignSetting(a, l, "sourceColumn", a.destinationColumn), n.assignSetting(a, l, "type", "sum"), n.assignSetting(a, l, "forceNumeric", !1), n.assignSetting(a, l, "suppressDataTypeErrors", !0), n.assignSetting(a, l, "suppressDataTypeErrors", !0), n.assignSetting(a, l, "customFunction", null), n.assignSetting(a, l, "readOnly", !0), n.assignSetting(a, l, "roundFloat", !1), o.push(l);
      }), o;
    }
    /**
     * Setter for the internal setting objects.
     *
     * @param {object} settings Object with the settings.
     * @param {object} endpoint Contains information about the endpoint for the the calculation.
     * @param {string} name Settings name.
     * @param {object} defaultValue Default value for the settings.
     */
  }, {
    key: "assignSetting",
    value: function(r, n, o, i) {
      if (o === "ranges" && r[o] === void 0) {
        n[o] = i;
        return;
      } else if (o === "ranges" && r[o].length === 0)
        return;
      if (r[o] === void 0) {
        if (i instanceof Error)
          throw i;
        n[o] = i;
      } else
        o === "destinationRow" && n.reversedRowCoords ? n[o] = this.hot.countRows() - r[o] - 1 : n[o] = r[o];
    }
    /**
     * Resets the endpoint setup before the structure alteration (like inserting or removing rows/columns). Used for settings provided as a function.
     *
     * @private
     * @param {string} action Type of the action performed.
     * @param {number} index Row/column index.
     * @param {number} number Number of rows/columns added/removed.
     */
  }, {
    key: "resetSetupBeforeStructureAlteration",
    value: function(r, n, o) {
      if (this.settingsType === "function") {
        var i = r.indexOf("row") > -1 ? "row" : "col", a = this.getAllEndpoints();
        I(a, function(l) {
          i === "row" && l.destinationRow >= n && (r === "insert_row" ? l.alterRowOffset = o : r === "remove_row" && (l.alterRowOffset = -1 * o)), i === "col" && l.destinationColumn >= n && (r === "insert_col" ? l.alterColumnOffset = o : r === "remove_col" && (l.alterColumnOffset = -1 * o));
        }), this.resetAllEndpoints(a, !1);
      }
    }
    /**
     * AfterCreateRow/afterCreateRow/afterRemoveRow/afterRemoveCol hook callback. Reset and reenables the summary functionality
     * after changing the table structure.
     *
     * @private
     * @param {string} action Type of the action performed.
     * @param {number} index Row/column index.
     * @param {number} number Number of rows/columns added/removed.
     * @param {Array} [logicRows] Array of the logical indexes.
     * @param {string} [source] Source of change.
     * @param {boolean} [forceRefresh] `true` of the endpoints should refresh after completing the function.
     */
  }, {
    key: "resetSetupAfterStructureAlteration",
    value: function(r, n, o, i, a) {
      var l = this, s = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : !0;
      if (this.settingsType === "function") {
        var u = function p() {
          return l.hot.removeHook("beforeViewRender", p), l.refreshAllEndpoints();
        };
        this.hot.addHookOnce("beforeViewRender", u);
        return;
      }
      var f = r.indexOf("row") > -1 ? "row" : "col", c = r.indexOf("remove") > -1 ? -1 : 1, h = this.getAllEndpoints(), d = r.indexOf("move_row") === 0, y = n;
      I(h, function(p) {
        f === "row" && p.destinationRow >= y && (p.alterRowOffset = c * o), f === "col" && p.destinationColumn >= y && (p.alterColumnOffset = c * o);
      }), this.resetAllEndpoints(h, !d), d ? I(h, function(p) {
        l.extendEndpointRanges(p, y, i[0], i.length), l.recreatePhysicalRanges(p), l.clearOffsetInformation(p);
      }) : I(h, function(p) {
        l.shiftEndpointCoordinates(p, y);
      }), s && this.refreshAllEndpoints();
    }
    /**
     * Clear the offset information from the endpoint object.
     *
     * @private
     * @param {object} endpoint And endpoint object.
     */
  }, {
    key: "clearOffsetInformation",
    value: function(r) {
      r.alterRowOffset = void 0, r.alterColumnOffset = void 0;
    }
    /**
     * Extend the row ranges for the provided endpoint.
     *
     * @private
     * @param {object} endpoint The endpoint object.
     * @param {number} placeOfAlteration Index of the row where the alteration takes place.
     * @param {number} previousPosition Previous endpoint result position.
     * @param {number} offset Offset generated by the alteration.
     */
  }, {
    key: "extendEndpointRanges",
    value: function(r, n, o, i) {
      I(r.ranges, function(a) {
        a[1] && (n >= a[0] && n <= a[1] ? o > a[1] ? a[1] += i : o < a[0] && (a[0] -= i) : o >= a[0] && o <= a[1] && (a[1] -= i, n <= a[0] && (a[0] += 1, a[1] += 1)));
      });
    }
    /**
     * Recreate the physical ranges for the provided endpoint. Used (for example) when a row gets moved and extends an existing range.
     *
     * @private
     * @param {object} endpoint An endpoint object.
     */
  }, {
    key: "recreatePhysicalRanges",
    value: function(r) {
      var n = this, o = r.ranges, i = [], a = [];
      I(o, function(l) {
        var s = [];
        if (l[1])
          for (var u = l[0]; u <= l[1]; u++)
            s.push(n.hot.toPhysicalRow(u));
        else
          s.push(n.hot.toPhysicalRow(l[0]));
        a.push(s);
      }), I(a, function(l) {
        var s = [];
        I(l, function(u, f) {
          f === 0 ? s.push(u) : l[f] !== l[f - 1] + 1 && (s.push(l[f - 1]), i.push(s), s = [], s.push(u)), f === l.length - 1 && (s.push(u), i.push(s));
        });
      }), r.ranges = i;
    }
    /**
     * Shifts the endpoint coordinates by the defined offset.
     *
     * @private
     * @param {object} endpoint Endpoint object.
     * @param {number} offsetStartIndex Index of the performed change (if the change is located after the endpoint, nothing about the endpoint has to be changed.
     */
  }, {
    key: "shiftEndpointCoordinates",
    value: function(r, n) {
      r.alterRowOffset && r.alterRowOffset !== 0 ? (r.destinationRow += r.alterRowOffset || 0, I(r.ranges, function(o) {
        I(o, function(i, a) {
          i >= n && (o[a] += r.alterRowOffset || 0);
        });
      })) : r.alterColumnOffset && r.alterColumnOffset !== 0 && (r.destinationColumn += r.alterColumnOffset || 0, r.sourceColumn += r.alterColumnOffset || 0);
    }
    /**
     * Resets (removes) the endpoints from the table.
     *
     * @param {Array} [endpoints] Array containing the endpoints.
     * @param {boolean} [useOffset=true] Use the cell offset value.
     */
  }, {
    key: "resetAllEndpoints",
    value: function() {
      var r = this, n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getAllEndpoints(), o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, i = n.some(function(a) {
        var l = a.alterRowOffset || 0, s = a.alterColumnOffset || 0;
        return a.destinationRow + l >= r.hot.countRows() || a.destinationColumn + s >= r.hot.countCols();
      });
      i || (this.cellsToSetCache = [], I(n, function(a) {
        r.resetEndpointValue(a, o);
      }), this.hot.setDataAtCell(this.cellsToSetCache, "ColumnSummary.reset"), this.cellsToSetCache = []);
    }
    /**
     * Calculate and refresh all defined endpoints.
     */
  }, {
    key: "refreshAllEndpoints",
    value: function() {
      var r = this;
      this.cellsToSetCache = [], I(this.getAllEndpoints(), function(n) {
        r.currentEndpoint = n, r.plugin.calculate(n), r.setEndpointValue(n, "init");
      }), this.currentEndpoint = null, this.hot.setDataAtCell(this.cellsToSetCache, "ColumnSummary.reset"), this.cellsToSetCache = [];
    }
    /**
     * Calculate and refresh endpoints only in the changed columns.
     *
     * @param {Array} changes Array of changes from the `afterChange` hook.
     */
  }, {
    key: "refreshChangedEndpoints",
    value: function(r) {
      var n = this, o = [];
      this.cellsToSetCache = [], I(r, function(i, a, l) {
        "".concat(i[2] || "") !== "".concat(i[3]) && I(n.getAllEndpoints(), function(s, u) {
          n.hot.propToCol(l[a][1]) === s.sourceColumn && o.indexOf(u) === -1 && o.push(u);
        });
      }), I(o, function(i) {
        n.refreshEndpoint(n.getEndpoint(i));
      }), this.hot.setDataAtCell(this.cellsToSetCache, "ColumnSummary.reset"), this.cellsToSetCache = [];
    }
    /**
     * Calculate and refresh a single endpoint.
     *
     * @param {object} endpoint Contains the endpoint information.
     */
  }, {
    key: "refreshEndpoint",
    value: function(r) {
      this.currentEndpoint = r, this.plugin.calculate(r), this.setEndpointValue(r), this.currentEndpoint = null;
    }
    /**
     * Reset the endpoint value.
     *
     * @param {object} endpoint Contains the endpoint information.
     * @param {boolean} [useOffset=true] Use the cell offset value.
     */
  }, {
    key: "resetEndpointValue",
    value: function(r) {
      var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, o = r.alterRowOffset || 0, i = r.alterColumnOffset || 0;
      this.cellsToSetCache.push([this.hot.toVisualRow(r.destinationRow + (n ? o : 0)), this.hot.toVisualColumn(r.destinationColumn + (n ? i : 0)), ""]);
    }
    /**
     * Set the endpoint value.
     *
     * @param {object} endpoint Contains the endpoint information.
     * @param {string} [source] Source of the call information.
     * @param {boolean} [render=false] `true` if it needs to render the table afterwards.
     */
  }, {
    key: "setEndpointValue",
    value: function(r, n) {
      var o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, i = this.hot.toVisualRow(r.destinationRow);
      if (r.destinationRow >= this.hot.countRows() || r.destinationColumn >= this.hot.countCols()) {
        this.throwOutOfBoundsWarning();
        return;
      }
      var a = this.hot.toVisualRow(r.destinationRow);
      if (a !== null) {
        var l = this.hot.getCellMeta(a, r.destinationColumn);
        (n === "init" || l.readOnly !== r.readOnly) && (l.readOnly = r.readOnly, l.className = "columnSummaryResult");
      }
      r.roundFloat && !isNaN(r.result) && (r.result = r.result.toFixed(r.roundFloat)), o ? this.hot.setDataAtCell(i, r.destinationColumn, r.result, "ColumnSummary.set") : this.cellsToSetCache.push([i, r.destinationColumn, r.result]), r.alterRowOffset = void 0, r.alterColumnOffset = void 0;
    }
    /**
     * Throw an error for the calculation range being out of boundaries.
     *
     * @private
     */
  }, {
    key: "throwOutOfBoundsWarning",
    value: function() {
      ht("One of the Column Summary plugins' destination points you provided is beyond the table boundaries!");
    }
  }]), e;
}();
const C$e = S$e;
function eS(e) {
  return e == null || isNaN(e);
}
function du(e) {
  "@babel/helpers - typeof";
  return du = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, du(e);
}
var CD;
function _$e(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } }));
}
function O$e(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function _D(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, E$e(n.key), n);
  }
}
function R$e(e, t, r) {
  return t && _D(e.prototype, t), r && _D(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function E$e(e) {
  var t = T$e(e, "string");
  return du(t) === "symbol" ? t : String(t);
}
function T$e(e, t) {
  if (du(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (du(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function pp() {
  return typeof Reflect < "u" && Reflect.get ? pp = Reflect.get.bind() : pp = function(t, r, n) {
    var o = P$e(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, pp.apply(this, arguments);
}
function P$e(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = vu(e), e !== null); )
    ;
  return e;
}
function k$e(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && RO(e, t);
}
function RO(e, t) {
  return RO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, RO(e, t);
}
function $$e(e) {
  var t = M$e();
  return function() {
    var n = vu(e), o;
    if (t) {
      var i = vu(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return A$e(this, o);
  };
}
function A$e(e, t) {
  if (t && (du(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return I$e(e);
}
function I$e(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function M$e() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function vu(e) {
  return vu = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, vu(e);
}
var tS = "columnSummary", x$e = 220, D$e = /* @__PURE__ */ function(e) {
  k$e(r, e);
  var t = $$e(r);
  function r(n) {
    var o;
    return O$e(this, r), o = t.call(this, n), o.endpoints = null, o;
  }
  return R$e(r, [{
    key: "isEnabled",
    value: function() {
      return !!this.hot.getSettings()[tS];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      this.enabled || (this.settings = this.hot.getSettings()[tS], this.endpoints = new C$e(this, this.settings), this.addHook("afterInit", function() {
        return o.onAfterInit.apply(o, arguments);
      }), this.addHook("afterChange", function() {
        return o.onAfterChange.apply(o, arguments);
      }), this.addHook("beforeCreateRow", function(i, a, l) {
        return o.endpoints.resetSetupBeforeStructureAlteration("insert_row", i, a, null, l);
      }), this.addHook("beforeCreateCol", function(i, a, l) {
        return o.endpoints.resetSetupBeforeStructureAlteration("insert_col", i, a, null, l);
      }), this.addHook("beforeRemoveRow", function() {
        for (var i, a = arguments.length, l = new Array(a), s = 0; s < a; s++)
          l[s] = arguments[s];
        return (i = o.endpoints).resetSetupBeforeStructureAlteration.apply(i, ["remove_row"].concat(l));
      }), this.addHook("beforeRemoveCol", function() {
        for (var i, a = arguments.length, l = new Array(a), s = 0; s < a; s++)
          l[s] = arguments[s];
        return (i = o.endpoints).resetSetupBeforeStructureAlteration.apply(i, ["remove_col"].concat(l));
      }), this.addHook("afterCreateRow", function(i, a, l) {
        return o.endpoints.resetSetupAfterStructureAlteration("insert_row", i, a, null, l);
      }), this.addHook("afterCreateCol", function(i, a, l) {
        return o.endpoints.resetSetupAfterStructureAlteration("insert_col", i, a, null, l);
      }), this.addHook("afterRemoveRow", function() {
        for (var i, a = arguments.length, l = new Array(a), s = 0; s < a; s++)
          l[s] = arguments[s];
        return (i = o.endpoints).resetSetupAfterStructureAlteration.apply(i, ["remove_row"].concat(l));
      }), this.addHook("afterRemoveCol", function() {
        for (var i, a = arguments.length, l = new Array(a), s = 0; s < a; s++)
          l[s] = arguments[s];
        return (i = o.endpoints).resetSetupAfterStructureAlteration.apply(i, ["remove_col"].concat(l));
      }), this.addHook("afterRowMove", function() {
        return o.onAfterRowMove.apply(o, arguments);
      }), pp(vu(r.prototype), "enablePlugin", this).call(this));
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      this.endpoints = null, this.settings = null, this.currentEndpoint = null;
    }
    /**
     * Calculates math for a single endpoint.
     *
     * @private
     * @param {object} endpoint Contains information about the endpoint.
     */
  }, {
    key: "calculate",
    value: function(o) {
      switch (o.type.toLowerCase()) {
        case "sum":
          o.result = this.calculateSum(o);
          break;
        case "min":
          o.result = this.calculateMinMax(o, o.type);
          break;
        case "max":
          o.result = this.calculateMinMax(o, o.type);
          break;
        case "count":
          o.result = this.countEntries(o);
          break;
        case "average":
          o.result = this.calculateAverage(o);
          break;
        case "custom":
          o.result = o.customFunction.call(this, o);
          break;
      }
    }
    /**
     * Calculates sum of the values contained in ranges provided in the plugin config.
     *
     * @private
     * @param {object} endpoint Contains the endpoint information.
     * @returns {number} Sum for the selected range.
     */
  }, {
    key: "calculateSum",
    value: function(o) {
      var i = this, a = 0;
      return Ye(o.ranges, function(l) {
        a += i.getPartialSum(l, o.sourceColumn);
      }), a;
    }
    /**
     * Returns partial sum of values from a single row range.
     *
     * @private
     * @param {Array} rowRange Range for the sum.
     * @param {number} col Column index.
     * @returns {number} The partial sum.
     */
  }, {
    key: "getPartialSum",
    value: function(o, i) {
      var a = 0, l = o[1] || o[0], s = null, u = 0;
      do {
        if (s = this.getCellValue(l, i), s = eS(s) ? null : s, s !== null) {
          var f = ("".concat(s).split(".")[1] || []).length || 1;
          f > u && (u = f);
        }
        a += s || 0, l -= 1;
      } while (l >= o[0]);
      return Math.round(a * Math.pow(10, u)) / Math.pow(10, u);
    }
    /**
     * Calculates the minimal value for the selected ranges.
     *
     * @private
     * @param {object} endpoint Contains the endpoint information.
     * @param {string} type `'min'` or `'max'`.
     * @returns {number} Min or Max value.
     */
  }, {
    key: "calculateMinMax",
    value: function(o, i) {
      var a = this, l = null;
      return Ye(o.ranges, function(s) {
        var u = a.getPartialMinMax(s, o.sourceColumn, i);
        if (l === null && u !== null && (l = u), u !== null)
          switch (i) {
            case "min":
              l = Math.min(l, u);
              break;
            case "max":
              l = Math.max(l, u);
              break;
          }
      }), l === null ? "Not enough data" : l;
    }
    /**
     * Returns a local minimum of the provided sub-range.
     *
     * @private
     * @param {Array} rowRange Range for the calculation.
     * @param {number} col Column index.
     * @param {string} type `'min'` or `'max'`.
     * @returns {number|null} Min or max value.
     */
  }, {
    key: "getPartialMinMax",
    value: function(o, i, a) {
      var l = null, s = o[1] || o[0], u;
      do {
        if (u = this.getCellValue(s, i), u = eS(u) ? null : u, l === null)
          l = u;
        else if (u !== null)
          switch (a) {
            case "min":
              l = Math.min(l, u);
              break;
            case "max":
              l = Math.max(l, u);
              break;
          }
        s -= 1;
      } while (s >= o[0]);
      return l;
    }
    /**
     * Counts empty cells in the provided row range.
     *
     * @private
     * @param {Array} rowRange Row range for the calculation.
     * @param {number} col Column index.
     * @returns {number} Empty cells count.
     */
  }, {
    key: "countEmpty",
    value: function(o, i) {
      var a, l = 0, s = o[1] || o[0];
      do
        a = this.getCellValue(s, i), a = eS(a) ? null : a, a === null && (l += 1), s -= 1;
      while (s >= o[0]);
      return l;
    }
    /**
     * Counts non-empty cells in the provided row range.
     *
     * @private
     * @param {object} endpoint Contains the endpoint information.
     * @returns {number} Entry count.
     */
  }, {
    key: "countEntries",
    value: function(o) {
      var i = this, a = 0, l = o.ranges;
      return Ye(l, function(s) {
        var u = s[1] === void 0 ? 1 : s[1] - s[0] + 1, f = i.countEmpty(s, o.sourceColumn);
        a += u, a -= f;
      }), a;
    }
    /**
     * Calculates the average value from the cells in the range.
     *
     * @private
     * @param {object} endpoint Contains the endpoint information.
     * @returns {number} Avarage value.
     */
  }, {
    key: "calculateAverage",
    value: function(o) {
      var i = this.calculateSum(o), a = this.countEntries(o);
      return i / a;
    }
    /**
     * Returns a cell value, taking into consideration a basic validation.
     *
     * @private
     * @param {number} row Row index.
     * @param {number} col Column index.
     * @returns {string} The cell value.
     */
  }, {
    key: "getCellValue",
    value: function(o, i) {
      var a = this.hot.toVisualRow(o), l = this.hot.toVisualColumn(i), s = this.hot.getSourceDataAtCell(o, i), u = "";
      if (a !== null && l !== null && (u = this.hot.getCellMeta(a, l).className || ""), u.indexOf("columnSummaryResult") > -1)
        return null;
      if (this.endpoints.currentEndpoint.forceNumeric && (typeof s == "string" && (s = s.replace(/,/, ".")), s = parseFloat(s)), isNaN(s) && !this.endpoints.currentEndpoint.suppressDataTypeErrors)
        throw new Error(ut(CD || (CD = _$e(["ColumnSummary plugin: cell at (", ", ", `) is not in a 
          numeric format. Cannot do the calculation.`], ["ColumnSummary plugin: cell at (", ", ", `) is not in a\\x20
          numeric format. Cannot do the calculation.`])), o, i));
      return s;
    }
    /**
     * `afterInit` hook callback.
     *
     * @private
     */
  }, {
    key: "onAfterInit",
    value: function() {
      this.endpoints.endpoints = this.endpoints.parseSettings(), this.endpoints.refreshAllEndpoints(!0);
    }
    /**
     * `afterChange` hook callback.
     *
     * @private
     * @param {Array} changes 2D array containing information about each of the edited cells.
     * @param {string} source The string that identifies source of changes.
     */
  }, {
    key: "onAfterChange",
    value: function(o, i) {
      o && i !== "ColumnSummary.reset" && i !== "ColumnSummary.set" && i !== "loadData" && this.endpoints.refreshChangedEndpoints(o);
    }
    /**
     * `beforeRowMove` hook callback.
     *
     * @private
     * @param {Array} rows Array of visual row indexes to be moved.
     * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
     * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving.md).
     */
  }, {
    key: "onAfterRowMove",
    value: function(o, i) {
      this.endpoints.resetSetupBeforeStructureAlteration("move_row", o[0], o.length, o, this.pluginName), this.endpoints.resetSetupAfterStructureAlteration("move_row", i, o.length, o, this.pluginName);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return tS;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return x$e;
    }
  }]), r;
}(ft);
function Qh(e) {
  "@babel/helpers - typeof";
  return Qh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Qh(e);
}
function N$e(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function OD(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, L$e(n.key), n);
  }
}
function H$e(e, t, r) {
  return t && OD(e.prototype, t), r && OD(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function L$e(e) {
  var t = j$e(e, "string");
  return Qh(t) === "symbol" ? t : String(t);
}
function j$e(e, t) {
  if (Qh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Qh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var F$e = /* @__PURE__ */ function() {
  function e(t, r) {
    N$e(this, e), this.rootDocument = t, this.isRtl = r, this.container = null, this.editor = this.createEditor(), this.editorStyle = this.editor.style, this.hidden = !0, this.hide();
  }
  return H$e(e, [{
    key: "setPosition",
    value: function(r, n) {
      this.editorStyle.left = "".concat(r, "px"), this.editorStyle.top = "".concat(n, "px");
    }
    /**
     * Set the editor size according to the provided arguments.
     *
     * @param {number} width Width in pixels.
     * @param {number} height Height in pixels.
     */
  }, {
    key: "setSize",
    value: function(r, n) {
      if (r && n) {
        var o = this.getInputElement();
        o.style.width = "".concat(r, "px"), o.style.height = "".concat(n, "px");
      }
    }
    /**
     * Returns the size of the comments editor.
     *
     * @returns {{ width: number, height: number }}
     */
  }, {
    key: "getSize",
    value: function() {
      return {
        width: yt(this.getInputElement()),
        height: $t(this.getInputElement())
      };
    }
    /**
     * Reset the editor size to its initial state.
     */
  }, {
    key: "resetSize",
    value: function() {
      var r = this.getInputElement();
      r.style.width = "", r.style.height = "";
    }
    /**
     * Set the read-only state for the comments editor.
     *
     * @param {boolean} state The new read only state.
     */
  }, {
    key: "setReadOnlyState",
    value: function(r) {
      var n = this.getInputElement();
      n.readOnly = r;
    }
    /**
     * Show the comments editor.
     */
  }, {
    key: "show",
    value: function() {
      this.editorStyle.display = "block", this.hidden = !1;
    }
    /**
     * Hide the comments editor.
     */
  }, {
    key: "hide",
    value: function() {
      this.hidden || (this.editorStyle.display = "none"), this.hidden = !0;
    }
    /**
     * Checks if the editor is visible.
     *
     * @returns {boolean}
     */
  }, {
    key: "isVisible",
    value: function() {
      return this.editorStyle.display === "block";
    }
    /**
     * Set the comment value.
     *
     * @param {string} [value] The value to use.
     */
  }, {
    key: "setValue",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "", n = r || "";
      this.getInputElement().value = n;
    }
    /**
     * Get the comment value.
     *
     * @returns {string}
     */
  }, {
    key: "getValue",
    value: function() {
      return this.getInputElement().value;
    }
    /**
     * Checks if the comment input element is focused.
     *
     * @returns {boolean}
     */
  }, {
    key: "isFocused",
    value: function() {
      return this.rootDocument.activeElement === this.getInputElement();
    }
    /**
     * Focus the comments input element.
     */
  }, {
    key: "focus",
    value: function() {
      this.getInputElement().focus();
    }
    /**
     * Create the `textarea` to be used as a comments editor.
     *
     * @returns {HTMLElement}
     */
  }, {
    key: "createEditor",
    value: function() {
      var r = this.rootDocument.createElement("div"), n = this.rootDocument.createElement("textarea");
      return r.style.display = "none", this.container = this.rootDocument.createElement("div"), this.container.setAttribute("dir", this.isRtl ? "rtl" : "ltr"), ae(this.container, e.CLASS_EDITOR_CONTAINER), this.rootDocument.body.appendChild(this.container), ae(r, e.CLASS_EDITOR), ae(n, e.CLASS_INPUT), r.appendChild(n), this.container.appendChild(r), r;
    }
    /**
     * Get the input element.
     *
     * @returns {HTMLElement}
     */
  }, {
    key: "getInputElement",
    value: function() {
      return this.editor.querySelector(".".concat(e.CLASS_INPUT));
    }
    /**
     * Destroy the comments editor.
     */
  }, {
    key: "destroy",
    value: function() {
      var r = this.container ? this.container.parentNode : null;
      this.editor.parentNode.removeChild(this.editor), this.editor = null, this.editorStyle = null, r && r.removeChild(this.container);
    }
  }], [{
    key: "CLASS_EDITOR_CONTAINER",
    get: function() {
      return "htCommentsContainer";
    }
  }, {
    key: "CLASS_EDITOR",
    get: function() {
      return "htComments";
    }
  }, {
    key: "CLASS_INPUT",
    get: function() {
      return "htCommentTextArea";
    }
  }, {
    key: "CLASS_CELL",
    get: function() {
      return "htCommentCell";
    }
  }]), e;
}();
const B$e = F$e;
var We = "---------";
function V$e() {
  return {
    name: We
  };
}
function W$e(e) {
  return Ue(e, function(t) {
    return {
      start: t.getTopStartCorner(),
      end: t.getBottomEndCorner()
    };
  });
}
function hy(e) {
  return Me(e, "htSeparator");
}
function U$e(e) {
  return Me(e, "htSubmenu");
}
function dy(e) {
  return Me(e, "htDisabled");
}
function vy(e) {
  return Me(e, "htSelectionDisabled");
}
function ol(e) {
  var t = e.getSelected();
  return !t || t[0] < 0 ? null : t;
}
function z$e(e, t) {
  if (e.indexOf(t) !== -1)
    return e;
  var r = e.replace("htTop", "").replace("htMiddle", "").replace("htBottom", "").replace("  ", "");
  return "".concat(r, " ").concat(t);
}
function Y$e(e, t) {
  if (e.indexOf(t) !== -1)
    return e;
  var r = e.replace("htLeft", "").replace("htCenter", "").replace("htRight", "").replace("htJustify", "").replace("  ", "");
  return "".concat(r, " ").concat(t);
}
function Ui(e, t) {
  var r = {};
  return I(e, function(n) {
    n.forAll(function(o, i) {
      o >= 0 && i >= 0 && (r[o] || (r[o] = []), r[o][i] = t(o, i));
    });
  }), r;
}
function oi(e, t, r, n, o) {
  I(e, function(i) {
    i.forAll(function(a, l) {
      a >= 0 && l >= 0 && G$e(a, l, t, r, n, o);
    });
  });
}
function G$e(e, t, r, n, o, i) {
  var a = o(e, t), l = n;
  a.className && (r === "vertical" ? l = z$e(a.className, n) : l = Y$e(a.className, n)), i(e, t, "className", l);
}
function Mn(e, t) {
  var r = !1;
  return Array.isArray(e) && I(e, function(n) {
    return n.forAll(function(o, i) {
      if (o >= 0 && i >= 0 && t(o, i))
        return r = !0, !1;
    }), r;
  }), r;
}
function io(e) {
  return '<span class="selected">'.concat(String.fromCharCode(10003), "</span>").concat(e);
}
function K$e(e, t) {
  return !e.hidden || !(typeof e.hidden == "function" && e.hidden.call(t));
}
function RU(e, t) {
  for (var r = e.slice(0), n = 0; n < r.length && r[n].name === t; )
    r.shift();
  return r;
}
function q$e(e, t) {
  var r = e.slice(0);
  return r.reverse(), r = RU(r, t), r.reverse(), r;
}
function X$e(e) {
  var t = [];
  return I(e, function(r, n) {
    n > 0 ? t[t.length - 1].name !== r.name && t.push(r) : t.push(r);
  }), t;
}
function Z$e(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : We, r = e.slice(0);
  return r = RU(r, t), r = q$e(r, t), r = X$e(r), r;
}
function Jh(e) {
  "@babel/helpers - typeof";
  return Jh = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Jh(e);
}
function Q$e(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function RD(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, eAe(n.key), n);
  }
}
function J$e(e, t, r) {
  return t && RD(e.prototype, t), r && RD(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function eAe(e) {
  var t = tAe(e, "string");
  return Jh(t) === "symbol" ? t : String(t);
}
function tAe(e, t) {
  if (Jh(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Jh(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var rAe = 250, nAe = 250, EU = /* @__PURE__ */ function() {
  function e(t) {
    Q$e(this, e), this.wasLastActionShow = !0, this.showDebounced = null, this.hidingTimer = null, this.updateDelay(t);
  }
  return J$e(e, [{
    key: "hide",
    value: function() {
      var r = this;
      this.wasLastActionShow = !1, this.hidingTimer = setTimeout(function() {
        r.wasLastActionShow === !1 && r.runLocalHooks("hide");
      }, nAe);
    }
    /**
     * Responsible for showing comment after proper delay.
     *
     * @param {object} range Coordinates of selected cell.
     */
  }, {
    key: "show",
    value: function(r) {
      this.wasLastActionShow = !0, this.showDebounced(r);
    }
    /**
     * Cancel hiding comment.
     */
  }, {
    key: "cancelHiding",
    value: function() {
      this.wasLastActionShow = !0, clearTimeout(this.hidingTimer), this.hidingTimer = null;
    }
    /**
     * Update the switch settings.
     *
     * @param {number} displayDelay Delay of showing the comments (in milliseconds).
     */
  }, {
    key: "updateDelay",
    value: function() {
      var r = this, n = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : rAe;
      this.showDebounced = OV(function(o) {
        r.wasLastActionShow && r.runLocalHooks("show", o.from.row, o.from.col);
      }, n);
    }
    /**
     * Destroy the switcher.
     */
  }, {
    key: "destroy",
    value: function() {
      this.clearLocalHooks();
    }
  }]), e;
}();
bt(EU, $r);
const oAe = EU;
function yu(e) {
  "@babel/helpers - typeof";
  return yu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, yu(e);
}
function rS(e, t, r) {
  return t = TU(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function iAe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function ED(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, TU(n.key), n);
  }
}
function aAe(e, t, r) {
  return t && ED(e.prototype, t), r && ED(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function TU(e) {
  var t = lAe(e, "string");
  return yu(t) === "symbol" ? t : String(t);
}
function lAe(e, t) {
  if (yu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (yu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function sa() {
  return typeof Reflect < "u" && Reflect.get ? sa = Reflect.get.bind() : sa = function(t, r, n) {
    var o = sAe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, sa.apply(this, arguments);
}
function sAe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = po(e), e !== null); )
    ;
  return e;
}
function uAe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && EO(e, t);
}
function EO(e, t) {
  return EO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, EO(e, t);
}
function fAe(e) {
  var t = hAe();
  return function() {
    var n = po(e), o;
    if (t) {
      var i = po(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return cAe(this, o);
  };
}
function cAe(e, t) {
  if (t && (yu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return PU(e);
}
function PU(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function hAe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function po(e) {
  return po = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, po(e);
}
var nS = "comments", dAe = 60, yy = /* @__PURE__ */ new WeakMap(), Rn = "comment", Cl = "value", TD = "style", py = "readOnly", vAe = /* @__PURE__ */ function(e) {
  uAe(r, e);
  var t = fAe(r);
  function r(n) {
    var o;
    return iAe(this, r), o = t.call(this, n), o.editor = null, o.displaySwitch = null, o.eventManager = null, o.range = {}, o.preventEditorAutoSwitch = !1, yy.set(PU(o), {
      tempEditorDimensions: {},
      cellBelowCursor: null
    }), o;
  }
  return aAe(r, [{
    key: "isEnabled",
    value: function() {
      return !!this.hot.getSettings()[nS];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      this.enabled || (this.editor || (this.editor = new B$e(this.hot.rootDocument, this.hot.isRtl())), this.eventManager || (this.eventManager = new It(this)), this.displaySwitch || (this.displaySwitch = new oAe(this.getDisplayDelaySetting())), this.addHook("afterContextMenuDefaultOptions", function(i) {
        return o.addToContextMenu(i);
      }), this.addHook("afterRenderer", function(i, a, l, s, u, f) {
        return o.onAfterRenderer(i, f);
      }), this.addHook("afterScrollHorizontally", function() {
        return o.hide();
      }), this.addHook("afterScrollVertically", function() {
        return o.hide();
      }), this.addHook("afterBeginEditing", function() {
        return o.hide();
      }), this.displaySwitch.addLocalHook("hide", function() {
        return o.hide();
      }), this.displaySwitch.addLocalHook("show", function(i, a) {
        return o.showAtCell(i, a);
      }), this.registerListeners(), sa(po(r.prototype), "enablePlugin", this).call(this));
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *   - [`comments`](@/api/options.md#comments)
     */
  }, {
    key: "updatePlugin",
    value: function() {
      this.disablePlugin(), this.enablePlugin(), sa(po(r.prototype), "updatePlugin", this).call(this), this.displaySwitch.updateDelay(this.getDisplayDelaySetting());
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      sa(po(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Registers all necessary DOM listeners.
     *
     * @private
     */
  }, {
    key: "registerListeners",
    value: function() {
      var o = this, i = this.hot.rootDocument;
      this.eventManager.addEventListener(i, "mouseover", function(a) {
        return o.onMouseOver(a);
      }), this.eventManager.addEventListener(i, "mousedown", function(a) {
        return o.onMouseDown(a);
      }), this.eventManager.addEventListener(i, "mouseup", function() {
        return o.onMouseUp();
      }), this.eventManager.addEventListener(this.editor.getInputElement(), "blur", function() {
        return o.onEditorBlur();
      }), this.eventManager.addEventListener(this.editor.getInputElement(), "mousedown", function(a) {
        return o.onEditorMouseDown(a);
      }), this.eventManager.addEventListener(this.editor.getInputElement(), "mouseup", function(a) {
        return o.onEditorMouseUp(a);
      });
    }
    /**
     * Sets the current cell range to be able to use general methods like {@link Comments#setComment}, {@link Comments#removeComment}, {@link Comments#show}.
     *
     * @param {object} range Object with `from` property, each with `row` and `col` properties.
     */
  }, {
    key: "setRange",
    value: function(o) {
      this.range = o;
    }
    /**
     * Clears the currently selected cell.
     */
  }, {
    key: "clearRange",
    value: function() {
      this.range = {};
    }
    /**
     * Checks if the event target is a cell containing a comment.
     *
     * @private
     * @param {Event} event DOM event.
     * @returns {boolean}
     */
  }, {
    key: "targetIsCellWithComment",
    value: function(o) {
      var i = Aa(o.target, "TD", "TBODY");
      return !!(i && Me(i, "htCommentCell") && Aa(i, [this.hot.rootElement]));
    }
    /**
     * Checks if the event target is a comment textarea.
     *
     * @private
     * @param {Event} event DOM event.
     * @returns {boolean}
     */
  }, {
    key: "targetIsCommentTextArea",
    value: function(o) {
      return this.editor.getInputElement() === o.target;
    }
    /**
     * Sets a comment for a cell according to the previously set range (see {@link Comments#setRange}).
     *
     * @param {string} value Comment contents.
     */
  }, {
    key: "setComment",
    value: function(o) {
      if (!this.range.from)
        throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
      var i = this.editor.getValue(), a = "";
      o != null ? a = o : i != null && (a = i);
      var l = this.range.from.row, s = this.range.from.col;
      this.updateCommentMeta(l, s, rS({}, Cl, a)), this.hot.render();
    }
    /**
     * Sets a comment for a specified cell.
     *
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {string} value Comment contents.
     */
  }, {
    key: "setCommentAtCell",
    value: function(o, i, a) {
      this.setRange({
        from: this.hot._createCellCoords(o, i)
      }), this.setComment(a);
    }
    /**
     * Removes a comment from a cell according to previously set range (see {@link Comments#setRange}).
     *
     * @param {boolean} [forceRender=true] If set to `true`, the table will be re-rendered at the end of the operation.
     */
  }, {
    key: "removeComment",
    value: function() {
      var o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
      if (!this.range.from)
        throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
      this.hot.setCellMeta(this.range.from.row, this.range.from.col, Rn), o && this.hot.render(), this.hide();
    }
    /**
     * Removes a comment from a specified cell.
     *
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {boolean} [forceRender=true] If `true`, the table will be re-rendered at the end of the operation.
     */
  }, {
    key: "removeCommentAtCell",
    value: function(o, i) {
      var a = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;
      this.setRange({
        from: this.hot._createCellCoords(o, i)
      }), this.removeComment(a);
    }
    /**
     * Gets comment from a cell according to previously set range (see {@link Comments#setRange}).
     *
     * @returns {string|undefined} Returns a content of the comment.
     */
  }, {
    key: "getComment",
    value: function() {
      var o = this.range.from.row, i = this.range.from.col;
      return this.getCommentMeta(o, i, Cl);
    }
    /**
     * Gets comment from a cell at the provided coordinates.
     *
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @returns {string|undefined} Returns a content of the comment.
     */
  }, {
    key: "getCommentAtCell",
    value: function(o, i) {
      return this.getCommentMeta(o, i, Cl);
    }
    /**
     * Shows the comment editor accordingly to the previously set range (see {@link Comments#setRange}).
     *
     * @returns {boolean} Returns `true` if comment editor was shown.
     */
  }, {
    key: "show",
    value: function() {
      if (!this.range.from)
        throw new Error('Before using this method, first set cell range (hot.getPlugin("comment").setRange())');
      var o = this.range.from, i = o.row, a = o.col;
      if (i < 0 || i > this.hot.countSourceRows() - 1 || a < 0 || a > this.hot.countSourceCols() - 1)
        return !1;
      var l = this.hot.getCellMeta(this.range.from.row, this.range.from.col);
      return this.editor.setValue(l[Rn] ? l[Rn][Cl] : ""), this.editor.show(), this.refreshEditor(!0), !0;
    }
    /**
     * Shows comment editor according to cell coordinates.
     *
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @returns {boolean} Returns `true` if comment editor was shown.
     */
  }, {
    key: "showAtCell",
    value: function(o, i) {
      return this.setRange({
        from: this.hot._createCellCoords(o, i)
      }), this.show();
    }
    /**
     * Hides the comment editor.
     */
  }, {
    key: "hide",
    value: function() {
      this.editor.hide();
    }
    /**
     * Refreshes comment editor position and styling.
     *
     * @param {boolean} [force=false] If `true` then recalculation will be forced.
     */
  }, {
    key: "refreshEditor",
    value: function() {
      var o, i, a = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      if (!(!a && (!this.range.from || !this.editor.isVisible()))) {
        var l = this.hot, s = l.rowIndexMapper, u = l.columnIndexMapper, f = this.range.from, c = f.row, h = f.col, d = s.getRenderableFromVisualIndex(c), y = u.getRenderableFromVisualIndex(h), p = d === null;
        this.editor.setPosition(0, 0), d === null && (d = s.getRenderableFromVisualIndex(s.getNearestNotHiddenIndex(c, -1))), y === null && (y = u.getRenderableFromVisualIndex(u.getNearestNotHiddenIndex(h, -1)));
        var g = d === null, w = y === null;
        d = (o = d) !== null && o !== void 0 ? o : 0, y = (i = y) !== null && i !== void 0 ? i : 0;
        var C = this.hot, _ = C.rootWindow, k = C.view._wt, E = k.wtTable, j = k.getCell({
          row: d,
          col: y
        }, !0), Y = this.getCommentMeta(c, h, TD);
        Y ? this.editor.setSize(Y.width, Y.height) : this.editor.resetSize();
        var Q = w ? 0 : E.getStretchedColumnWidth(y), X = p && !g ? $t(j) : 0, q = j.getBoundingClientRect(), J = q.left, le = q.top, ee = q.width, U = q.height, Z = this.editor.getSize(), oe = Z.width, ie = Z.height, T = this.hot.rootWindow, v = T.innerWidth, m = T.innerHeight, b = this.hot.rootDocument.documentElement, S = J + _.scrollX + Q, R = le + _.scrollY + X;
        this.hot.isRtl() && (S -= oe + Q), this.hot.isLtr() && J + ee + oe > v ? S = J + _.scrollX - oe - 1 : this.hot.isRtl() && S < -(b.scrollWidth - b.clientWidth) && (S = J + _.scrollX + Q + 1), le + ie > m && (R -= ie - U + 1), this.editor.setPosition(S, R), this.editor.setReadOnlyState(this.getCommentMeta(c, h, py));
      }
    }
    /**
     * Checks if there is a comment for selected range.
     *
     * @private
     * @returns {boolean}
     */
  }, {
    key: "checkSelectionCommentsConsistency",
    value: function() {
      var o = this.hot.getSelectedRangeLast();
      if (!o)
        return !1;
      var i = !1, a = o.getTopStartCorner();
      return this.getCommentMeta(a.row, a.col, Cl) && (i = !0), i;
    }
    /**
     * Sets or update the comment-related cell meta.
     *
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {object} metaObject Object defining all the comment-related meta information.
     */
  }, {
    key: "updateCommentMeta",
    value: function(o, i, a) {
      var l = this.hot.getCellMeta(o, i)[Rn], s;
      l ? (s = mr(l), yg(s, a)) : s = a, this.hot.setCellMeta(o, i, Rn, s);
    }
    /**
     * Gets the comment related meta information.
     *
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {string} property Cell meta property.
     * @returns {Mixed}
     */
  }, {
    key: "getCommentMeta",
    value: function(o, i, a) {
      var l = this.hot.getCellMeta(o, i);
      if (l[Rn])
        return l[Rn][a];
    }
    /**
     * `mousedown` event callback.
     *
     * @private
     * @param {MouseEvent} event The `mousedown` event.
     */
  }, {
    key: "onMouseDown",
    value: function(o) {
      if (!(!this.hot.view || !this.hot.view._wt) && !this.preventEditorAutoSwitch && !this.targetIsCommentTextArea(o)) {
        var i = Aa(o.target, "TD", "TBODY"), a = null;
        i && (a = this.hot.getCoords(i)), (!i || this.range.from && a && (this.range.from.row !== a.row || this.range.from.col !== a.col)) && this.hide();
      }
    }
    /**
     * `mouseover` event callback.
     *
     * @private
     * @param {MouseEvent} event The `mouseover` event.
     */
  }, {
    key: "onMouseOver",
    value: function(o) {
      var i = yy.get(this), a = this.hot.rootDocument;
      if (!(this.preventEditorAutoSwitch || this.editor.isFocused() || Me(o.target, "wtBorder") || i.cellBelowCursor === o.target || !this.editor))
        if (i.cellBelowCursor = a.elementFromPoint(o.clientX, o.clientY), this.targetIsCellWithComment(o)) {
          var l = this.hot._createCellRange(this.hot.getCoords(o.target));
          this.displaySwitch.show(l);
        } else
          Ia(o.target, a) && !this.targetIsCommentTextArea(o) && this.displaySwitch.hide();
    }
    /**
     * `mouseup` event callback.
     *
     * @private
     */
  }, {
    key: "onMouseUp",
    value: function() {
      this.preventEditorAutoSwitch = !1;
    }
    /**
     * The `afterRenderer` hook callback.
     *
     * @private
     * @param {HTMLTableCellElement} TD The rendered `TD` element.
     * @param {object} cellProperties The rendered cell's property object.
     */
  }, {
    key: "onAfterRenderer",
    value: function(o, i) {
      i[Rn] && i[Rn][Cl] && ae(o, i.commentedCellClassName);
    }
    /**
     * `blur` event callback for the comment editor.
     *
     * @private
     */
  }, {
    key: "onEditorBlur",
    value: function() {
      this.setComment();
    }
    /**
     * `mousedown` hook. Along with `onEditorMouseUp` used to simulate the textarea resizing event.
     *
     * @private
     * @param {MouseEvent} event The `mousedown` event.
     */
  }, {
    key: "onEditorMouseDown",
    value: function(o) {
      var i = yy.get(this);
      i.tempEditorDimensions = {
        width: yt(o.target),
        height: $t(o.target)
      };
    }
    /**
     * `mouseup` hook. Along with `onEditorMouseDown` used to simulate the textarea resizing event.
     *
     * @private
     * @param {MouseEvent} event The `mouseup` event.
     */
  }, {
    key: "onEditorMouseUp",
    value: function(o) {
      var i = yy.get(this), a = yt(o.target), l = $t(o.target);
      (a !== i.tempEditorDimensions.width + 1 || l !== i.tempEditorDimensions.height + 2) && this.updateCommentMeta(this.range.from.row, this.range.from.col, rS({}, TD, {
        width: a,
        height: l
      }));
    }
    /**
     * Context Menu's "Add comment" callback. Results in showing the comment editor.
     *
     * @private
     */
  }, {
    key: "onContextMenuAddComment",
    value: function() {
      var o = this.hot.getSelectedRangeLast();
      this.preventEditorAutoSwitch = !0, this.displaySwitch.cancelHiding(), this.setRange({
        from: o.highlight
      }), this.show(), this.hot.deselectCell(), this.editor.focus();
    }
    /**
     * Context Menu's "remove comment" callback.
     *
     * @private
     */
  }, {
    key: "onContextMenuRemoveComment",
    value: function() {
      var o = this, i = this.hot.getSelectedRangeLast();
      this.preventEditorAutoSwitch = !0, i.forAll(function(a, l) {
        a >= 0 && l >= 0 && o.removeCommentAtCell(a, l, !1);
      }), this.hot.render();
    }
    /**
     * Context Menu's "make comment read-only" callback.
     *
     * @private
     */
  }, {
    key: "onContextMenuMakeReadOnly",
    value: function() {
      var o = this, i = this.hot.getSelectedRangeLast();
      this.preventEditorAutoSwitch = !0, i.forAll(function(a, l) {
        if (a >= 0 && l >= 0) {
          var s = !!o.getCommentMeta(a, l, py);
          o.updateCommentMeta(a, l, rS({}, py, !s));
        }
      });
    }
    /**
     * Add Comments plugin options to the Context Menu.
     *
     * @private
     * @param {object} defaultOptions The menu options.
     */
  }, {
    key: "addToContextMenu",
    value: function(o) {
      var i = this, a = function() {
        return i.hot.rowIndexMapper.getRenderableIndexesLength() > 0 && i.hot.columnIndexMapper.getRenderableIndexesLength() > 0;
      };
      o.items.push({
        name: "---------"
      }, {
        key: "commentsAddEdit",
        name: function() {
          return i.checkSelectionCommentsConsistency() ? i.hot.getTranslatedPhrase(i0) : i.hot.getTranslatedPhrase(o0);
        },
        callback: function() {
          return i.onContextMenuAddComment();
        },
        disabled: function() {
          return a() ? !(i.hot.getSelectedLast() && !i.hot.selection.isSelectedByCorner()) : !0;
        }
      }, {
        key: "commentsRemove",
        name: function() {
          return this.getTranslatedPhrase(a0);
        },
        callback: function() {
          return i.onContextMenuRemoveComment();
        },
        disabled: function() {
          return a() ? !(i.hot.getSelectedLast() && !i.hot.selection.isSelectedByCorner()) : !0;
        }
      }, {
        key: "commentsReadOnly",
        name: function() {
          var s = this, u = this.getTranslatedPhrase(l0), f = Mn(this.getSelectedRangeLast(), function(c, h) {
            var d = s.getCellMeta(c, h)[Rn];
            if (d && (d = d[py]), d)
              return !0;
          });
          return f && (u = io(u)), u;
        },
        callback: function() {
          return i.onContextMenuMakeReadOnly();
        },
        disabled: function() {
          return a() ? !(i.hot.getSelectedLast() && !i.hot.selection.isSelectedByCorner()) || !i.checkSelectionCommentsConsistency() : !0;
        }
      });
    }
    /**
     * Get `displayDelay` setting of comment plugin.
     *
     * @private
     * @returns {number|undefined}
     */
  }, {
    key: "getDisplayDelaySetting",
    value: function() {
      var o = this.hot.getSettings()[nS];
      if (ze(o))
        return o.displayDelay;
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      this.editor && this.editor.destroy(), this.displaySwitch && this.displaySwitch.destroy(), sa(po(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return nS;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return dAe;
    }
  }]), r;
}(ft);
function ed(e) {
  "@babel/helpers - typeof";
  return ed = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, ed(e);
}
function yAe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function PD(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, mAe(n.key), n);
  }
}
function pAe(e, t, r) {
  return t && PD(e.prototype, t), r && PD(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function mAe(e) {
  var t = gAe(e, "string");
  return ed(t) === "symbol" ? t : String(t);
}
function gAe(e, t) {
  if (ed(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (ed(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var bAe = /* @__PURE__ */ function() {
  function e(t) {
    yAe(this, e), this.hot = t, this.commands = {}, this.commonCallback = null;
  }
  return pAe(e, [{
    key: "registerCommand",
    value: function(r, n) {
      this.commands[r] = n;
    }
    /**
     * Set common callback which will be trigger on every executed command.
     *
     * @param {Function} callback Function which will be fired on every command execute.
     */
  }, {
    key: "setCommonCallback",
    value: function(r) {
      this.commonCallback = r;
    }
    /**
     * Execute command by its name.
     *
     * @param {string} commandName Command id.
     * @param {*} params Arguments passed to command task.
     */
  }, {
    key: "execute",
    value: function(r) {
      for (var n = this, o = arguments.length, i = new Array(o > 1 ? o - 1 : 0), a = 1; a < o; a++)
        i[a - 1] = arguments[a];
      var l = r.split(":"), s = l[0], u = l.length === 2 ? l[1] : null, f = this.commands[s];
      if (!f)
        throw new Error("Menu command '".concat(s, "' not exists."));
      if (u && f.submenu && (f = wAe(u, f.submenu.items)), f.disabled !== !0 && !(typeof f.disabled == "function" && f.disabled.call(this.hot) === !0) && !Dt(f, "submenu")) {
        var c = [];
        typeof f.callback == "function" && c.push(f.callback), typeof this.commonCallback == "function" && c.push(this.commonCallback), i.unshift(l.join(":")), I(c, function(h) {
          return h.apply(n.hot, i);
        });
      }
    }
  }]), e;
}();
function wAe(e, t) {
  var r;
  return I(t, function(n) {
    var o = n.key ? n.key.split(":") : null;
    if (Array.isArray(o) && o[1] === e)
      return r = n, !1;
  }), r;
}
const kU = bAe;
var Kr = "alignment";
function SAe() {
  return {
    key: Kr,
    name: function() {
      return this.getTranslatedPhrase(s0);
    },
    disabled: function() {
      return this.countRows() === 0 || this.countCols() === 0 ? !0 : !(this.getSelectedRange() && !this.selection.isSelectedByCorner());
    },
    submenu: {
      items: [{
        key: "".concat(Kr, ":left"),
        name: function() {
          var t = this, r = this.getTranslatedPhrase(u0), n = Mn(this.getSelectedRange(), function(o, i) {
            var a = t.getCellMeta(o, i).className;
            if (a && a.indexOf("htLeft") !== -1)
              return !0;
          });
          return n && (r = io(r)), r;
        },
        callback: function() {
          var t = this, r = this.getSelectedRange(), n = Ui(r, function(a, l) {
            return t.getCellMeta(a, l).className;
          }), o = "horizontal", i = "htLeft";
          this.runHooks("beforeCellAlignment", n, r, o, i), oi(r, o, i, function(a, l) {
            return t.getCellMeta(a, l);
          }, function(a, l, s, u) {
            return t.setCellMeta(a, l, s, u);
          }), this.render();
        },
        disabled: !1
      }, {
        key: "".concat(Kr, ":center"),
        name: function() {
          var t = this, r = this.getTranslatedPhrase(f0), n = Mn(this.getSelectedRange(), function(o, i) {
            var a = t.getCellMeta(o, i).className;
            if (a && a.indexOf("htCenter") !== -1)
              return !0;
          });
          return n && (r = io(r)), r;
        },
        callback: function() {
          var t = this, r = this.getSelectedRange(), n = Ui(r, function(a, l) {
            return t.getCellMeta(a, l).className;
          }), o = "horizontal", i = "htCenter";
          this.runHooks("beforeCellAlignment", n, r, o, i), oi(r, o, i, function(a, l) {
            return t.getCellMeta(a, l);
          }, function(a, l, s, u) {
            return t.setCellMeta(a, l, s, u);
          }), this.render();
        },
        disabled: !1
      }, {
        key: "".concat(Kr, ":right"),
        name: function() {
          var t = this, r = this.getTranslatedPhrase(c0), n = Mn(this.getSelectedRange(), function(o, i) {
            var a = t.getCellMeta(o, i).className;
            if (a && a.indexOf("htRight") !== -1)
              return !0;
          });
          return n && (r = io(r)), r;
        },
        callback: function() {
          var t = this, r = this.getSelectedRange(), n = Ui(r, function(a, l) {
            return t.getCellMeta(a, l).className;
          }), o = "horizontal", i = "htRight";
          this.runHooks("beforeCellAlignment", n, r, o, i), oi(r, o, i, function(a, l) {
            return t.getCellMeta(a, l);
          }, function(a, l, s, u) {
            return t.setCellMeta(a, l, s, u);
          }), this.render();
        },
        disabled: !1
      }, {
        key: "".concat(Kr, ":justify"),
        name: function() {
          var t = this, r = this.getTranslatedPhrase(h0), n = Mn(this.getSelectedRange(), function(o, i) {
            var a = t.getCellMeta(o, i).className;
            if (a && a.indexOf("htJustify") !== -1)
              return !0;
          });
          return n && (r = io(r)), r;
        },
        callback: function() {
          var t = this, r = this.getSelectedRange(), n = Ui(r, function(a, l) {
            return t.getCellMeta(a, l).className;
          }), o = "horizontal", i = "htJustify";
          this.runHooks("beforeCellAlignment", n, r, o, i), oi(r, o, i, function(a, l) {
            return t.getCellMeta(a, l);
          }, function(a, l, s, u) {
            return t.setCellMeta(a, l, s, u);
          }), this.render();
        },
        disabled: !1
      }, {
        name: We
      }, {
        key: "".concat(Kr, ":top"),
        name: function() {
          var t = this, r = this.getTranslatedPhrase(d0), n = Mn(this.getSelectedRange(), function(o, i) {
            var a = t.getCellMeta(o, i).className;
            if (a && a.indexOf("htTop") !== -1)
              return !0;
          });
          return n && (r = io(r)), r;
        },
        callback: function() {
          var t = this, r = this.getSelectedRange(), n = Ui(r, function(a, l) {
            return t.getCellMeta(a, l).className;
          }), o = "vertical", i = "htTop";
          this.runHooks("beforeCellAlignment", n, r, o, i), oi(r, o, i, function(a, l) {
            return t.getCellMeta(a, l);
          }, function(a, l, s, u) {
            return t.setCellMeta(a, l, s, u);
          }), this.render();
        },
        disabled: !1
      }, {
        key: "".concat(Kr, ":middle"),
        name: function() {
          var t = this, r = this.getTranslatedPhrase(v0), n = Mn(this.getSelectedRange(), function(o, i) {
            var a = t.getCellMeta(o, i).className;
            if (a && a.indexOf("htMiddle") !== -1)
              return !0;
          });
          return n && (r = io(r)), r;
        },
        callback: function() {
          var t = this, r = this.getSelectedRange(), n = Ui(r, function(a, l) {
            return t.getCellMeta(a, l).className;
          }), o = "vertical", i = "htMiddle";
          this.runHooks("beforeCellAlignment", n, r, o, i), oi(r, o, i, function(a, l) {
            return t.getCellMeta(a, l);
          }, function(a, l, s, u) {
            return t.setCellMeta(a, l, s, u);
          }), this.render();
        },
        disabled: !1
      }, {
        key: "".concat(Kr, ":bottom"),
        name: function() {
          var t = this, r = this.getTranslatedPhrase(y0), n = Mn(this.getSelectedRange(), function(o, i) {
            var a = t.getCellMeta(o, i).className;
            if (a && a.indexOf("htBottom") !== -1)
              return !0;
          });
          return n && (r = io(r)), r;
        },
        callback: function() {
          var t = this, r = this.getSelectedRange(), n = Ui(r, function(a, l) {
            return t.getCellMeta(a, l).className;
          }), o = "vertical", i = "htBottom";
          this.runHooks("beforeCellAlignment", n, r, o, i), oi(r, o, i, function(a, l) {
            return t.getCellMeta(a, l);
          }, function(a, l, s, u) {
            return t.setCellMeta(a, l, s, u);
          }), this.render();
        },
        disabled: !1
      }]
    }
  };
}
var eb = "clear_column";
function CAe() {
  return {
    key: eb,
    name: function() {
      return this.getTranslatedPhrase(KT);
    },
    callback: function(t, r) {
      var n = r[0].start.col, o = r[0].end.col;
      this.countRows() && this.populateFromArray(0, n, [[null]], Math.max(r[0].start.row, r[0].end.row), o, "ContextMenu.clearColumn");
    },
    disabled: function() {
      var t = ol(this);
      return t ? !this.selection.isSelectedByColumnHeader() : !0;
    }
  };
}
var Cv = "col_left";
function _Ae() {
  return {
    key: Cv,
    name: function() {
      return this.getTranslatedPhrase(BT);
    },
    callback: function() {
      var t = this.getSelectedRangeLast().getTopLeftCorner(), r = this.isRtl() ? "insert_col_end" : "insert_col_start";
      this.alter(r, t.col, 1, "ContextMenu.columnLeft");
    },
    disabled: function() {
      if (!this.isColumnModificationAllowed())
        return !0;
      var t = ol(this);
      if (!t)
        return !0;
      if (this.selection.isSelectedByCorner()) {
        var r = this.countCols();
        return r === 0;
      }
      return this.selection.isSelectedByRowHeader() || this.countCols() >= this.getSettings().maxCols;
    },
    hidden: function() {
      return !this.getSettings().allowInsertColumn;
    }
  };
}
var _v = "col_right";
function OAe() {
  return {
    key: _v,
    name: function() {
      return this.getTranslatedPhrase(VT);
    },
    callback: function() {
      var t = this.getSelectedRangeLast().getTopRightCorner(), r = this.isRtl() ? "insert_col_start" : "insert_col_end";
      this.alter(r, t.col, 1, "ContextMenu.columnRight");
    },
    disabled: function() {
      if (!this.isColumnModificationAllowed())
        return !0;
      var t = ol(this);
      return t ? this.selection.isSelectedByCorner() ? !1 : this.selection.isSelectedByRowHeader() || this.countCols() >= this.getSettings().maxCols : !0;
    },
    hidden: function() {
      return !this.getSettings().allowInsertColumn;
    }
  };
}
var Ov = "make_read_only";
function RAe() {
  return {
    key: Ov,
    name: function() {
      var t = this, r = this.getTranslatedPhrase(GT), n = Mn(this.getSelectedRange(), function(o, i) {
        return t.getCellMeta(o, i).readOnly;
      });
      return n && (r = io(r)), r;
    },
    callback: function() {
      var t = this, r = this.getSelectedRange(), n = Mn(r, function(o, i) {
        return t.getCellMeta(o, i).readOnly;
      });
      I(r, function(o) {
        o.forAll(function(i, a) {
          i >= 0 && a >= 0 && t.setCellMeta(i, a, "readOnly", !n);
        });
      }), this.render();
    },
    disabled: function() {
      return !!(this.selection.isSelectedByCorner() || this.countRows() === 0 || this.countCols() === 0 || !this.getSelectedRange() || this.getSelectedRange().length === 0);
    }
  };
}
var tb = "redo";
function EAe() {
  return {
    key: tb,
    name: function() {
      return this.getTranslatedPhrase(YT);
    },
    callback: function() {
      this.redo();
    },
    hidden: function() {
      var t = this.getPlugin("undoRedo");
      return !t || !t.isEnabled();
    },
    disabled: function() {
      return !this.getPlugin("undoRedo").isRedoAvailable();
    }
  };
}
function TAe(e, t) {
  return AAe(e) || $Ae(e, t) || kAe(e, t) || PAe();
}
function PAe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function kAe(e, t) {
  if (e) {
    if (typeof e == "string")
      return kD(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return kD(e, t);
  }
}
function kD(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function $Ae(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function AAe(e) {
  if (Array.isArray(e))
    return e;
}
var Rv = "remove_col";
function IAe() {
  return {
    key: Rv,
    name: function() {
      var t = this.getSelected(), r = 0;
      if (t)
        if (t.length > 1)
          r = 1;
        else {
          var n = TAe(t[0], 4), o = n[1], i = n[3];
          o - i !== 0 && (r = 1);
        }
      return this.getTranslatedPhrase(UT, r);
    },
    callback: function() {
      this.alter("remove_col", Wwe(this.getSelected()), null, "ContextMenu.removeColumn");
    },
    disabled: function() {
      if (!this.isColumnModificationAllowed())
        return !0;
      var t = ol(this);
      if (!t)
        return !0;
      var r = this.countCols();
      return this.selection.isSelectedByCorner() ? r === 0 : this.selection.isSelectedByRowHeader() || r === 0;
    },
    hidden: function() {
      return !this.getSettings().allowRemoveColumn;
    }
  };
}
function MAe(e, t) {
  return HAe(e) || NAe(e, t) || DAe(e, t) || xAe();
}
function xAe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function DAe(e, t) {
  if (e) {
    if (typeof e == "string")
      return $D(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return $D(e, t);
  }
}
function $D(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function NAe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function HAe(e) {
  if (Array.isArray(e))
    return e;
}
var rb = "remove_row";
function LAe() {
  return {
    key: rb,
    name: function() {
      var t = this.getSelected(), r = 0;
      if (t)
        if (t.length > 1)
          r = 1;
        else {
          var n = MAe(t[0], 3), o = n[0], i = n[2];
          o - i !== 0 && (r = 1);
        }
      return this.getTranslatedPhrase(WT, r);
    },
    callback: function() {
      this.alter("remove_row", Uwe(this.getSelected()), 1, "ContextMenu.removeRow");
    },
    disabled: function() {
      var t = ol(this);
      if (!t)
        return !0;
      var r = this.countRows();
      return this.selection.isSelectedByCorner() ? r === 0 : this.selection.isSelectedByColumnHeader() || r === 0;
    },
    hidden: function() {
      return !this.getSettings().allowRemoveRow;
    }
  };
}
var nb = "row_above";
function jAe() {
  return {
    key: nb,
    name: function() {
      return this.getTranslatedPhrase(jT);
    },
    callback: function() {
      var t = this.getSelectedRangeLast().getTopLeftCorner();
      this.alter("insert_row_above", t.row, 1, "ContextMenu.rowAbove");
    },
    disabled: function() {
      var t = ol(this);
      if (!t)
        return !0;
      if (this.selection.isSelectedByCorner()) {
        var r = this.countRows();
        return r === 0;
      }
      return this.selection.isSelectedByColumnHeader() || this.countRows() >= this.getSettings().maxRows;
    },
    hidden: function() {
      return !this.getSettings().allowInsertRow;
    }
  };
}
var ob = "row_below";
function FAe() {
  return {
    key: ob,
    name: function() {
      return this.getTranslatedPhrase(FT);
    },
    callback: function() {
      var t = this.getSelectedRangeLast().getBottomRightCorner();
      this.alter("insert_row_below", t.row, 1, "ContextMenu.rowBelow");
    },
    disabled: function() {
      var t = ol(this);
      return t ? this.selection.isSelectedByCorner() ? !1 : this.selection.isSelectedByColumnHeader() || this.countRows() >= this.getSettings().maxRows : !0;
    },
    hidden: function() {
      return !this.getSettings().allowInsertRow;
    }
  };
}
var td = "no_items";
function BAe() {
  return {
    key: td,
    name: function() {
      return this.getTranslatedPhrase(LT);
    },
    disabled: !0,
    isCommand: !1
  };
}
var ib = "undo";
function VAe() {
  return {
    key: ib,
    name: function() {
      return this.getTranslatedPhrase(zT);
    },
    callback: function() {
      this.undo();
    },
    hidden: function() {
      var t = this.getPlugin("undoRedo");
      return !t || !t.isEnabled();
    },
    disabled: function() {
      return !this.getPlugin("undoRedo").isUndoAvailable();
    }
  };
}
function rd(e) {
  "@babel/helpers - typeof";
  return rd = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, rd(e);
}
var hr;
function Ar(e, t, r) {
  return t = WAe(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function WAe(e) {
  var t = UAe(e, "string");
  return rd(t) === "symbol" ? t : String(t);
}
function UAe(e, t) {
  if (rd(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (rd(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var zAe = [nb, ob, Cv, _v, eb, rb, Rv, ib, tb, Ov, Kr, We, td], YAe = (hr = {}, Ar(hr, We, V$e), Ar(hr, td, BAe), Ar(hr, nb, jAe), Ar(hr, ob, FAe), Ar(hr, Cv, _Ae), Ar(hr, _v, OAe), Ar(hr, eb, CAe), Ar(hr, rb, LAe), Ar(hr, Rv, IAe), Ar(hr, ib, VAe), Ar(hr, tb, EAe), Ar(hr, Ov, RAe), Ar(hr, Kr, SAe), hr);
function $U() {
  var e = {};
  return Ye(YAe, function(t, r) {
    e[r] = t();
  }), e;
}
function nd(e) {
  "@babel/helpers - typeof";
  return nd = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, nd(e);
}
function GAe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function AD(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, qAe(n.key), n);
  }
}
function KAe(e, t, r) {
  return t && AD(e.prototype, t), r && AD(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function qAe(e) {
  var t = XAe(e, "string");
  return nd(t) === "symbol" ? t : String(t);
}
function XAe(e, t) {
  if (nd(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (nd(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var ZAe = /* @__PURE__ */ function() {
  function e(t) {
    var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
    GAe(this, e), this.hot = t, this.predefinedItems = $U(), this.defaultOrderPattern = r;
  }
  return KAe(e, [{
    key: "setPredefinedItems",
    value: function(r) {
      var n = this, o = {};
      this.defaultOrderPattern.length = 0, Ye(r, function(i, a) {
        var l = "";
        i.name === We ? (o[We] = i, l = We) : isNaN(parseInt(a, 10)) ? (i.key = i.key === void 0 ? a : i.key, o[a] = i, l = i.key) : (o[i.key] = i, l = i.key), n.defaultOrderPattern.push(l);
      }), this.predefinedItems = o;
    }
    /**
     * Get all menu items based on pattern.
     *
     * @param {Array|object|boolean} pattern Pattern which you can define by displaying menu items order. If `true` default
     *                                       pattern will be used.
     * @returns {Array}
     */
  }, {
    key: "getItems",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      return QAe(r, this.defaultOrderPattern, this.predefinedItems);
    }
  }]), e;
}();
function QAe() {
  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, n = [], o = e;
  return o && o.items ? o = o.items : Array.isArray(o) || (o = t), ze(o) ? Ye(o, function(i, a) {
    var l = r[typeof i == "string" ? i : a];
    l || (l = i), ze(i) ? Gt(l, i) : typeof l == "string" && (l = {
      name: l
    }), l.key === void 0 && (l.key = a), n.push(l);
  }) : I(o, function(i, a) {
    var l = r[i];
    !l && zAe.indexOf(i) >= 0 || (l || (l = {
      name: i,
      key: "".concat(a)
    }), ze(i) && Gt(l, i), l.key === void 0 && (l.key = a), n.push(l));
  }), n;
}
const AU = ZAe;
function od(e) {
  "@babel/helpers - typeof";
  return od = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, od(e);
}
function JAe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function ID(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, tIe(n.key), n);
  }
}
function eIe(e, t, r) {
  return t && ID(e.prototype, t), r && ID(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function tIe(e) {
  var t = rIe(e, "string");
  return od(t) === "symbol" ? t : String(t);
}
function rIe(e, t) {
  if (od(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (od(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var nIe = /* @__PURE__ */ function() {
  function e(t, r) {
    JAe(this, e);
    var n = Lc(r), o = us(r), i, a, l, s, u, f;
    this.rootWindow = r, this.type = this.getSourceType(t), this.type === "literal" ? (i = parseInt(t.top, 10), l = parseInt(t.left, 10), u = t.height || 0, f = t.width || 0, a = i, s = l, i += n, l += o) : this.type === "event" && (i = parseInt(t.pageY, 10), l = parseInt(t.pageX, 10), u = t.target.clientHeight, f = t.target.clientWidth, a = i - n, s = l - o), this.top = i, this.topRelative = a, this.left = l, this.leftRelative = s, this.scrollTop = n, this.scrollLeft = o, this.cellHeight = u, this.cellWidth = f;
  }
  return eIe(e, [{
    key: "getSourceType",
    value: function(r) {
      var n = "literal";
      return r instanceof Event && (n = "event"), n;
    }
    /**
     * Checks if element can be placed above the cursor.
     *
     * @param {HTMLElement} element Element to check if it's size will fit above the cursor.
     * @returns {boolean}
     */
  }, {
    key: "fitsAbove",
    value: function(r) {
      return this.topRelative >= r.offsetHeight;
    }
    /**
     * Checks if element can be placed below the cursor.
     *
     * @param {HTMLElement} element Element to check if it's size will fit below the cursor.
     * @param {number} [viewportHeight] The viewport height.
     * @returns {boolean}
     */
  }, {
    key: "fitsBelow",
    value: function(r) {
      var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.rootWindow.innerHeight;
      return this.topRelative + r.offsetHeight <= n;
    }
    /**
     * Checks if element can be placed on the right of the cursor.
     *
     * @param {HTMLElement} element Element to check if it's size will fit on the right of the cursor.
     * @param {number} [viewportWidth] The viewport width.
     * @returns {boolean}
     */
  }, {
    key: "fitsOnRight",
    value: function(r) {
      var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.rootWindow.innerWidth;
      return this.leftRelative + this.cellWidth + r.offsetWidth <= n;
    }
    /**
     * Checks if element can be placed on the left on the cursor.
     *
     * @param {HTMLElement} element Element to check if it's size will fit on the left of the cursor.
     * @returns {boolean}
     */
  }, {
    key: "fitsOnLeft",
    value: function(r) {
      return this.leftRelative >= r.offsetWidth;
    }
  }]), e;
}();
const oIe = nIe;
function id(e) {
  "@babel/helpers - typeof";
  return id = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, id(e);
}
function MD(e, t) {
  var r = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    t && (n = n.filter(function(o) {
      return Object.getOwnPropertyDescriptor(e, o).enumerable;
    })), r.push.apply(r, n);
  }
  return r;
}
function xD(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? MD(Object(r), !0).forEach(function(n) {
      iIe(e, n, r[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : MD(Object(r)).forEach(function(n) {
      Object.defineProperty(e, n, Object.getOwnPropertyDescriptor(r, n));
    });
  }
  return e;
}
function iIe(e, t, r) {
  return t = IU(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function aIe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function DD(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, IU(n.key), n);
  }
}
function lIe(e, t, r) {
  return t && DD(e.prototype, t), r && DD(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function IU(e) {
  var t = sIe(e, "string");
  return id(t) === "symbol" ? t : String(t);
}
function sIe(e, t) {
  if (id(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (id(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var ND = 215, MU = "menu", uIe = MU, xU = /* @__PURE__ */ function() {
  function e(t, r) {
    aIe(this, e), this.hot = t, this.options = r || {
      parent: null,
      name: null,
      className: "",
      keepInViewport: !0,
      standalone: !1,
      minWidth: ND,
      container: this.hot.rootDocument.documentElement
    }, this.eventManager = new It(this), this.container = this.createContainer(this.options.name), this.hotMenu = null, this.hotSubMenus = {}, this.parentMenu = this.options.parent || null, this.menuItems = null, this.origOutsideClickDeselects = null, this.keyEvent = !1, this.offset = {
      above: 0,
      below: 0,
      left: 0,
      right: 0
    }, this._afterScrollCallback = null, this.registerEvents();
  }
  return lIe(e, [{
    key: "registerEvents",
    value: function() {
      for (var r = this, n = this.hot.rootWindow; n; )
        this.eventManager.addEventListener(n.document, "mousedown", function(o) {
          return r.onDocumentMouseDown(o);
        }), this.eventManager.addEventListener(n.document, "contextmenu", function(o) {
          return r.onDocumentContextMenu(o);
        }), n = Up(n);
    }
    /**
     * Set array of objects which defines menu items.
     *
     * @param {Array} menuItems Menu items to display.
     */
  }, {
    key: "setMenuItems",
    value: function(r) {
      this.menuItems = r;
    }
    /**
     * Returns currently selected menu item. Returns `null` if no item was selected.
     *
     * @returns {object|null}
     */
  }, {
    key: "getSelectedItem",
    value: function() {
      return this.hasSelectedItem() ? this.hotMenu.getSourceDataAtRow(this.hotMenu.getSelectedLast()[0]) : null;
    }
    /**
     * Checks if the menu has selected (highlighted) any item from the menu list.
     *
     * @returns {boolean}
     */
  }, {
    key: "hasSelectedItem",
    value: function() {
      return Array.isArray(this.hotMenu.getSelectedLast());
    }
    /**
     * Set offset menu position for specified area (`above`, `below`, `left` or `right`).
     *
     * @param {string} area Specified area name (`above`, `below`, `left` or `right`).
     * @param {number} offset Offset value.
     */
  }, {
    key: "setOffset",
    value: function(r) {
      var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      this.offset[r] = n;
    }
    /**
     * Check if menu is using as sub-menu.
     *
     * @returns {boolean}
     */
  }, {
    key: "isSubMenu",
    value: function() {
      return this.parentMenu !== null;
    }
    /**
     * Open menu.
     *
     * @fires Hooks#beforeContextMenuShow
     * @fires Hooks#afterContextMenuShow
     */
  }, {
    key: "open",
    value: function() {
      var r = this;
      this.runLocalHooks("beforeOpen"), this.container.removeAttribute("style"), this.container.style.display = "block";
      var n = OV(function(d) {
        return r.openSubMenu(d);
      }, 300), o = this.options.minWidth || ND, i = !1, a = Zr(this.menuItems, function(d) {
        return d.key === td && (i = !0), K$e(d, r.hot);
      });
      if (a.length < 1 && !i)
        a.push($U()[td]);
      else if (a.length === 0)
        return;
      a = Z$e(a, We);
      var l = !1, s = {
        data: a,
        colHeaders: !1,
        autoColumnSize: !0,
        autoWrapRow: !1,
        modifyColWidth: function(y) {
          return be(y) && y < o ? o : y;
        },
        autoRowSize: !1,
        readOnly: !0,
        editor: !1,
        copyPaste: !1,
        maxCols: 1,
        columns: [{
          data: "name",
          renderer: function(y, p, g, w, C, _) {
            return r.menuItemRenderer(y, p, g, w, C, _);
          }
        }],
        renderAllRows: !0,
        fragmentSelection: !1,
        outsideClickDeselects: !1,
        disableVisualSelection: "area",
        layoutDirection: this.hot.isRtl() ? "rtl" : "ltr",
        afterOnCellMouseOver: function(y, p) {
          r.isAllSubMenusClosed() ? n(p.row) : r.openSubMenu(p.row);
        },
        rowHeights: function(y) {
          return a[y].name === We ? 1 : 23;
        },
        afterOnCellContextMenu: function(y) {
          y.preventDefault(), PA() && l && r.hasSelectedItem() && r.close(!0);
        },
        beforeOnCellMouseUp: function(y) {
          r.hasSelectedItem() && (l = !r.isCommandPassive(r.getSelectedItem()), r.executeCommand(y));
        },
        afterOnCellMouseUp: function(y) {
          (!PA() || !Na(y)) && l && r.hasSelectedItem() && (Nn() || _B() ? setTimeout(function() {
            return r.close(!0);
          }, 325) : r.close(!0));
        },
        afterUnlisten: function() {
          !r.hasSelectedItem() && r.isOpened() && r.hotMenu.listen();
        }
      };
      this.origOutsideClickDeselects = this.hot.getSettings().outsideClickDeselects, this.hot.getSettings().outsideClickDeselects = !1, this.hotMenu = new lP(this.container, s), this.hotMenu.addHook("afterInit", function() {
        return r.onAfterInit();
      }), this.hotMenu.addHook("afterSelection", function() {
        return r.onAfterSelection.apply(r, arguments);
      }), this.hotMenu.init(), this.hotMenu.listen();
      var u = this.hotMenu.getShortcutManager(), f = u.addContext(uIe), c = {
        group: MU
      }, h = xD(xD({}, c), {}, {
        runOnlyIf: function(y) {
          return Gp(y.target) === !1 || r.container.contains(y.target) === !1;
        }
      });
      u.setActiveContextName("menu"), f.addShortcuts([{
        keys: [["Escape"]],
        callback: function() {
          r.keyEvent = !0, r.close(), r.keyEvent = !1;
        }
      }, {
        keys: [["ArrowDown"]],
        callback: function() {
          var y = r.hotMenu.getSelectedLast();
          r.keyEvent = !0, y ? r.selectNextCell(y[0], y[1]) : r.selectFirstCell(), r.keyEvent = !1;
        }
      }, {
        keys: [["ArrowUp"]],
        callback: function() {
          var y = r.hotMenu.getSelectedLast();
          r.keyEvent = !0, y ? r.selectPrevCell(y[0], y[1]) : r.selectLastCell(), r.keyEvent = !1;
        }
      }, {
        keys: [["ArrowRight"]],
        callback: function() {
          var y = r.hotMenu.getSelectedLast();
          if (r.keyEvent = !0, y) {
            var p = r.openSubMenu(y[0]);
            p && p.selectFirstCell();
          }
          r.keyEvent = !1;
        }
      }, {
        keys: [["ArrowLeft"]],
        callback: function() {
          var y = r.hotMenu.getSelectedLast();
          r.keyEvent = !0, y && r.isSubMenu() && (r.close(), r.parentMenu && r.parentMenu.hotMenu.listen()), r.keyEvent = !1;
        }
      }, {
        keys: [["Enter"]],
        callback: function(y) {
          var p = r.hotMenu.getSelectedLast();
          r.keyEvent = !0, r.hotMenu.getSourceDataAtRow(p[0]).submenu || (r.executeCommand(y), r.close(!0)), r.keyEvent = !1;
        }
      }, {
        keys: [["PageUp"]],
        callback: function() {
          var y = r.hotMenu.getSelectedLast();
          r.keyEvent = !0, y ? r.hotMenu.selection.transformStart(-r.hotMenu.countVisibleRows(), 0) : r.selectFirstCell(), r.keyEvent = !1;
        }
      }, {
        keys: [["PageDown"]],
        callback: function() {
          var y = r.hotMenu.getSelectedLast();
          r.keyEvent = !0, y ? r.hotMenu.selection.transformStart(r.hotMenu.countVisibleRows(), 0) : r.selectLastCell(), r.keyEvent = !1;
        }
      }], h), this.blockMainTableCallbacks(), this.runLocalHooks("afterOpen");
    }
    /**
     * Close menu.
     *
     * @param {boolean} [closeParent=false] If `true` try to close parent menu if exists.
     */
  }, {
    key: "close",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
      this.isOpened() && (r && this.parentMenu ? this.parentMenu.close() : (this.closeAllSubMenus(), this.container.style.display = "none", this.releaseMainTableCallbacks(), this.hotMenu.destroy(), this.hotMenu = null, this.hot.getSettings().outsideClickDeselects = this.origOutsideClickDeselects, this.runLocalHooks("afterClose"), this.parentMenu && this.parentMenu.hotMenu.listen()));
    }
    /**
     * Open sub menu at the provided row index.
     *
     * @param {number} row Row index.
     * @returns {Menu|boolean} Returns created menu or `false` if no one menu was created.
     */
  }, {
    key: "openSubMenu",
    value: function(r) {
      if (!this.hotMenu)
        return !1;
      var n = this.hotMenu.getCell(r, 0);
      if (this.closeAllSubMenus(), !n || !U$e(n))
        return !1;
      var o = this.hotMenu.getSourceDataAtRow(r), i = new e(this.hot, {
        parent: this,
        name: o.name,
        className: this.options.className,
        keepInViewport: !0,
        container: this.options.container
      });
      return i.setMenuItems(o.submenu.items), i.open(), i.setPosition(n.getBoundingClientRect()), this.hotSubMenus[o.key] = i, i;
    }
    /**
     * Close sub menu at row index.
     *
     * @param {number} row Row index.
     */
  }, {
    key: "closeSubMenu",
    value: function(r) {
      var n = this.hotMenu.getSourceDataAtRow(r), o = this.hotSubMenus[n.key];
      o && (o.destroy(), delete this.hotSubMenus[n.key]);
    }
    /**
     * Close all opened sub menus.
     */
  }, {
    key: "closeAllSubMenus",
    value: function() {
      var r = this;
      I(this.hotMenu.getData(), function(n, o) {
        return r.closeSubMenu(o);
      });
    }
    /**
     * Checks if all created and opened sub menus are closed.
     *
     * @returns {boolean}
     */
  }, {
    key: "isAllSubMenusClosed",
    value: function() {
      return Object.keys(this.hotSubMenus).length === 0;
    }
    /**
     * Destroy instance.
     */
  }, {
    key: "destroy",
    value: function() {
      var r = this.container.parentNode;
      this.clearLocalHooks(), this.close(), this.parentMenu = null, this.eventManager.destroy(), r && r.removeChild(this.container);
    }
    /**
     * Checks if menu was opened.
     *
     * @returns {boolean} Returns `true` if menu was opened.
     */
  }, {
    key: "isOpened",
    value: function() {
      return this.hotMenu !== null;
    }
    /**
     * Execute menu command.
     *
     * The `executeCommand()` method works only for selected cells.
     *
     * When no cells are selected, `executeCommand()` doesn't do anything.
     *
     * @param {Event} [event] The mouse event object.
     */
  }, {
    key: "executeCommand",
    value: function(r) {
      if (!(!this.isOpened() || !this.hasSelectedItem())) {
        var n = this.getSelectedItem();
        if (this.runLocalHooks("select", n, r), !this.isCommandPassive(n)) {
          var o = this.hot.getSelectedRange(), i = o ? W$e(o) : [];
          this.runLocalHooks("executeCommand", n.key, i, r), this.isSubMenu() && this.parentMenu.runLocalHooks("executeCommand", n.key, i, r);
        }
      }
    }
    /**
     * Checks if the passed command is passive or not. The command is passive when it's marked as
     * disabled, the descriptor object contains `isCommand` property set to `false`, command
     * is a separator, or the item is recognized as submenu. For passive items the menu is not
     * closed automatically after the user trigger the command through the UI.
     *
     * @param {object} commandDescriptor Selected menu item from the menu data source.
     * @returns {boolean}
     */
  }, {
    key: "isCommandPassive",
    value: function(r) {
      var n = r.isCommand, o = r.name, i = r.disabled, a = r.submenu, l = i === !0 || typeof i == "function" && i.call(this.hot) === !0;
      return n === !1 || o === We || l === !0 || a;
    }
    /**
     * Set menu position based on dom event or based on literal object.
     *
     * @param {Event|object} coords Event or literal Object with coordinates.
     */
  }, {
    key: "setPosition",
    value: function(r) {
      var n = new oIe(r, this.container.ownerDocument.defaultView);
      this.options.keepInViewport ? (n.fitsBelow(this.container) ? this.setPositionBelowCursor(n) : n.fitsAbove(this.container) ? this.setPositionAboveCursor(n) : this.setPositionBelowCursor(n), this.hot.isLtr() ? this.setHorizontalPositionForLtr(n) : this.setHorizontalPositionForRtl(n)) : (this.setPositionBelowCursor(n), this.setPositionOnRightOfCursor(n));
    }
    /**
     * Set menu horizontal position for RTL mode.
     *
     * @param {Cursor} cursor `Cursor` object.
     */
  }, {
    key: "setHorizontalPositionForRtl",
    value: function(r) {
      r.fitsOnLeft(this.container) ? this.setPositionOnLeftOfCursor(r) : this.setPositionOnRightOfCursor(r);
    }
    /**
     * Set menu horizontal position for LTR mode.
     *
     * @param {Cursor} cursor `Cursor` object.
     */
  }, {
    key: "setHorizontalPositionForLtr",
    value: function(r) {
      r.fitsOnRight(this.container) ? this.setPositionOnRightOfCursor(r) : this.setPositionOnLeftOfCursor(r);
    }
    /**
     * Set menu position above cursor object.
     *
     * @param {Cursor} cursor `Cursor` object.
     */
  }, {
    key: "setPositionAboveCursor",
    value: function(r) {
      var n = this.offset.above + r.top - this.container.offsetHeight;
      this.isSubMenu() && (n = r.top + r.cellHeight - this.container.offsetHeight + 3), this.container.style.top = "".concat(n, "px");
    }
    /**
     * Set menu position below cursor object.
     *
     * @param {Cursor} cursor `Cursor` object.
     */
  }, {
    key: "setPositionBelowCursor",
    value: function(r) {
      var n = this.offset.below + r.top + 1;
      this.isSubMenu() && (n = r.top - 1), this.container.style.top = "".concat(n, "px");
    }
    /**
     * Set menu position on the right of cursor object.
     *
     * @param {Cursor} cursor `Cursor` object.
     */
  }, {
    key: "setPositionOnRightOfCursor",
    value: function(r) {
      var n = r.left;
      if (this.isSubMenu()) {
        var o = this.parentMenu.container.getBoundingClientRect(), i = o.right;
        n += r.cellWidth + i - (r.left + r.cellWidth);
      } else
        n += this.offset.right;
      this.container.style.left = "".concat(n, "px");
    }
    /**
     * Set menu position on the left of cursor object.
     *
     * @param {Cursor} cursor `Cursor` object.
     */
  }, {
    key: "setPositionOnLeftOfCursor",
    value: function(r) {
      var n = this.offset.left + r.left - this.container.offsetWidth;
      if (this.isSubMenu()) {
        var o = this.parentMenu.container.getBoundingClientRect(), i = o.left;
        n -= r.left - i;
      }
      this.container.style.left = "".concat(n, "px");
    }
    /**
     * Select first cell in opened menu.
     */
  }, {
    key: "selectFirstCell",
    value: function() {
      var r = this.hotMenu.getCell(0, 0);
      hy(r) || dy(r) || vy(r) ? this.selectNextCell(0, 0) : this.hotMenu.selectCell(0, 0);
    }
    /**
     * Select last cell in opened menu.
     */
  }, {
    key: "selectLastCell",
    value: function() {
      var r = this.hotMenu.countRows() - 1, n = this.hotMenu.getCell(r, 0);
      hy(n) || dy(n) || vy(n) ? this.selectPrevCell(r, 0) : (this.hotMenu.selectCell(r, 0, void 0, void 0, !1), this.hotMenu.scrollViewportTo(r, 0, !0, !1));
    }
    /**
     * Select next cell in opened menu.
     *
     * @param {number} row Row index.
     * @param {number} col Column index.
     */
  }, {
    key: "selectNextCell",
    value: function(r, n) {
      var o = r + 1, i = o < this.hotMenu.countRows() ? this.hotMenu.getCell(o, n) : null;
      i && (hy(i) || dy(i) || vy(i) ? this.selectNextCell(o, n) : this.hotMenu.selectCell(o, n));
    }
    /**
     * Select previous cell in opened menu.
     *
     * @param {number} row Row index.
     * @param {number} col Column index.
     */
  }, {
    key: "selectPrevCell",
    value: function(r, n) {
      var o = r - 1, i = o >= 0 ? this.hotMenu.getCell(o, n) : null;
      i && (hy(i) || dy(i) || vy(i) ? this.selectPrevCell(o, n) : this.hotMenu.selectCell(o, n));
    }
    /**
     * Menu item renderer.
     *
     * @private
     * @param {Core} hot The Handsontable instance.
     * @param {HTMLCellElement} TD The rendered cell element.
     * @param {number} row The visual index.
     * @param {number} col The visual index.
     * @param {string} prop The column property if used.
     * @param {string} value The cell value.
     */
  }, {
    key: "menuItemRenderer",
    value: function(r, n, o, i, a, l) {
      var s = this, u = r.getSourceDataAtRow(o), f = this.hot.rootDocument.createElement("div"), c = function(w) {
        return Dt(w, "submenu");
      }, h = function(w) {
        return new RegExp(We, "i").test(w.name);
      }, d = function(w) {
        return w.disabled === !0 || typeof w.disabled == "function" && w.disabled.call(s.hot) === !0;
      }, y = function(w) {
        return w.disableSelection;
      }, p = l;
      typeof p == "function" && (p = p.call(this.hot)), jn(n), ae(f, "htItemWrapper"), n.appendChild(f), h(u) ? ae(n, "htSeparator") : typeof u.renderer == "function" ? (ae(n, "htCustomMenuRenderer"), n.appendChild(u.renderer(r, f, o, i, a, p))) : _f(f, p), d(u) ? (ae(n, "htDisabled"), this.eventManager.addEventListener(n, "mouseenter", function() {
        return r.deselectCell();
      })) : y(u) ? (ae(n, "htSelectionDisabled"), this.eventManager.addEventListener(n, "mouseenter", function() {
        return r.deselectCell();
      })) : c(u) ? (ae(n, "htSubmenu"), y(u) ? this.eventManager.addEventListener(n, "mouseenter", function() {
        return r.deselectCell();
      }) : this.eventManager.addEventListener(n, "mouseenter", function() {
        return r.selectCell(o, i, void 0, void 0, !1, !1);
      })) : (Le(n, ["htSubmenu", "htDisabled"]), y(u) ? this.eventManager.addEventListener(n, "mouseenter", function() {
        return r.deselectCell();
      }) : this.eventManager.addEventListener(n, "mouseenter", function() {
        return r.selectCell(o, i, void 0, void 0, !1, !1);
      }));
    }
    /**
     * Create container/wrapper for handsontable.
     *
     * @private
     * @param {string} [name] Class name.
     * @returns {HTMLElement}
     */
  }, {
    key: "createContainer",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null, n = this.options.container.ownerDocument, o = r, i;
      return o && (wt(o) && (o = o.call(this.hot), o === null || gt(o) ? o = "" : o = o.toString()), o = o.replace(/[^A-z0-9]/g, "_"), o = "".concat(this.options.className, "Sub_").concat(o), i = n.querySelector(".".concat(this.options.className, ".").concat(o))), i || (i = n.createElement("div"), ae(i, "htMenu ".concat(this.options.className)), o && ae(i, o), this.options.container.appendChild(i)), i;
    }
    /**
     * @private
     */
  }, {
    key: "blockMainTableCallbacks",
    value: function() {
      this._afterScrollCallback = function() {
      }, this.hot.addHook("afterScrollVertically", this._afterScrollCallback), this.hot.addHook("afterScrollHorizontally", this._afterScrollCallback);
    }
    /**
     * @private
     */
  }, {
    key: "releaseMainTableCallbacks",
    value: function() {
      this._afterScrollCallback && (this.hot.removeHook("afterScrollVertically", this._afterScrollCallback), this.hot.removeHook("afterScrollHorizontally", this._afterScrollCallback), this._afterScrollCallback = null);
    }
    /**
     * On after init listener.
     *
     * @private
     */
  }, {
    key: "onAfterInit",
    value: function() {
      var r = this.hotMenu.view._wt.wtTable, n = this.hotMenu.getSettings().data, o = r.hider.style, i = r.holder.style, a = parseInt(o.width, 10), l = sr(n, function(s, u) {
        return s + (u.name === We ? 1 : 26);
      }, 0);
      i.width = "".concat(a + 3, "px"), i.height = "".concat(l + 3, "px"), o.height = i.height;
    }
    /**
     * On after selection listener.
     *
     * @param {number} r Selection start row index.
     * @param {number} c Selection start column index.
     * @param {number} r2 Selection end row index.
     * @param {number} c2 Selection end column index.
     * @param {object} preventScrolling Object with `value` property where its value change will be observed.
     */
  }, {
    key: "onAfterSelection",
    value: function(r, n, o, i, a) {
      this.keyEvent === !1 && (a.value = !0);
    }
    /**
     * Document mouse down listener.
     *
     * @private
     * @param {Event} event The mouse event object.
     */
  }, {
    key: "onDocumentMouseDown",
    value: function(r) {
      this.isOpened() && (this.options.standalone && this.hotMenu && !Ia(r.target, this.hotMenu.rootElement) ? this.close(!0) : (this.isAllSubMenusClosed() || this.isSubMenu()) && !Ia(r.target, ".htMenu") && this.close(!0));
    }
    /**
     * Document's contextmenu listener.
     *
     * @private
     * @param {MouseEvent} event The mouse event object.
     */
  }, {
    key: "onDocumentContextMenu",
    value: function(r) {
      this.isOpened() && Me(r.target, "htCore") && Ia(r.target, this.hotMenu.rootElement) && r.preventDefault();
    }
  }]), e;
}();
bt(xU, $r);
const EP = xU;
function pu(e) {
  "@babel/helpers - typeof";
  return pu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, pu(e);
}
function fIe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function HD(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, hIe(n.key), n);
  }
}
function cIe(e, t, r) {
  return t && HD(e.prototype, t), r && HD(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function hIe(e) {
  var t = dIe(e, "string");
  return pu(t) === "symbol" ? t : String(t);
}
function dIe(e, t) {
  if (pu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (pu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function ua() {
  return typeof Reflect < "u" && Reflect.get ? ua = Reflect.get.bind() : ua = function(t, r, n) {
    var o = vIe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, ua.apply(this, arguments);
}
function vIe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = mo(e), e !== null); )
    ;
  return e;
}
function yIe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && TO(e, t);
}
function TO(e, t) {
  return TO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, TO(e, t);
}
function pIe(e) {
  var t = gIe();
  return function() {
    var n = mo(e), o;
    if (t) {
      var i = mo(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return mIe(this, o);
  };
}
function mIe(e, t) {
  if (t && (pu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return DU(e);
}
function DU(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function gIe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function mo(e) {
  return mo = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, mo(e);
}
var my = "contextMenu", bIe = 70;
we.getSingleton().register("afterContextMenuDefaultOptions");
we.getSingleton().register("beforeContextMenuShow");
we.getSingleton().register("afterContextMenuShow");
we.getSingleton().register("afterContextMenuHide");
we.getSingleton().register("afterContextMenuExecute");
var NU = /* @__PURE__ */ function(e) {
  yIe(r, e);
  var t = pIe(r);
  function r(n) {
    var o;
    return fIe(this, r), o = t.call(this, n), o.eventManager = new It(DU(o)), o.commandExecutor = new kU(o.hot), o.itemsFactory = null, o.menu = null, o;
  }
  return cIe(r, [{
    key: "isEnabled",
    value: function() {
      return !!this.hot.getSettings()[my];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      if (!this.enabled) {
        var i = this.hot.getSettings()[my];
        typeof i.callback == "function" && this.commandExecutor.setCommonCallback(i.callback), this.menu = new EP(this.hot, {
          className: "htContextMenu",
          keepInViewport: !0,
          container: i.uiContainer || this.hot.rootDocument.body
        }), this.menu.addLocalHook("beforeOpen", function() {
          return o.onMenuBeforeOpen();
        }), this.menu.addLocalHook("afterOpen", function() {
          return o.onMenuAfterOpen();
        }), this.menu.addLocalHook("afterClose", function() {
          return o.onMenuAfterClose();
        }), this.menu.addLocalHook("executeCommand", function() {
          for (var a, l = arguments.length, s = new Array(l), u = 0; u < l; u++)
            s[u] = arguments[u];
          return (a = o.executeCommand).call.apply(a, [o].concat(s));
        }), this.addHook("afterOnCellContextMenu", function(a) {
          return o.onAfterOnCellContextMenu(a);
        }), ua(mo(r.prototype), "enablePlugin", this).call(this);
      }
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`contextMenu`](@/api/options.md#contextmenu)
     */
  }, {
    key: "updatePlugin",
    value: function() {
      this.disablePlugin(), this.enablePlugin(), ua(mo(r.prototype), "updatePlugin", this).call(this);
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      this.close(), this.menu && (this.menu.destroy(), this.menu = null), ua(mo(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Opens menu and re-position it based on the passed coordinates.
     *
     * @param {Event} event The mouse event object.
     */
  }, {
    key: "open",
    value: function(o) {
      if (this.menu && (this.prepareMenuItems(), this.menu.open(), !!this.menu.isOpened())) {
        var i = 0, a = 0;
        if (this.hot.rootDocument !== this.menu.container.ownerDocument) {
          var l = this.hot.rootWindow.frameElement, s = l.getBoundingClientRect(), u = s.top, f = s.left;
          i = u - Lc(o.view), a = f - us(o.view);
        } else
          i = -1 * Lc(this.menu.hotMenu.rootWindow), a = -1 * us(this.menu.hotMenu.rootWindow);
        this.menu.setPosition({
          top: parseInt(o.pageY, 10) + i,
          left: parseInt(o.pageX, 10) + a
        });
      }
    }
    /**
     * Closes the menu.
     */
  }, {
    key: "close",
    value: function() {
      this.menu && (this.menu.close(), this.itemsFactory = null);
    }
    /**
     * Execute context menu command.
     *
     * The `executeCommand()` method works only for selected cells.
     *
     * When no cells are selected, `executeCommand()` doesn't do anything.
     *
     * You can execute all predefined commands:
     *  * `'row_above'` - Insert row above
     *  * `'row_below'` - Insert row below
     *  * `'col_left'` - Insert column left
     *  * `'col_right'` - Insert column right
     *  * `'clear_column'` - Clear selected column
     *  * `'remove_row'` - Remove row
     *  * `'remove_col'` - Remove column
     *  * `'undo'` - Undo last action
     *  * `'redo'` - Redo last action
     *  * `'make_read_only'` - Make cell read only
     *  * `'alignment:left'` - Alignment to the left
     *  * `'alignment:top'` - Alignment to the top
     *  * `'alignment:right'` - Alignment to the right
     *  * `'alignment:bottom'` - Alignment to the bottom
     *  * `'alignment:middle'` - Alignment to the middle
     *  * `'alignment:center'` - Alignment to the center (justify).
     *
     * Or you can execute command registered in settings where `key` is your command name.
     *
     * @param {string} commandName The command name to be executed.
     * @param {*} params Additional parameters passed to command executor module.
     */
  }, {
    key: "executeCommand",
    value: function(o) {
      var i;
      this.itemsFactory === null && this.prepareMenuItems();
      for (var a = arguments.length, l = new Array(a > 1 ? a - 1 : 0), s = 1; s < a; s++)
        l[s - 1] = arguments[s];
      (i = this.commandExecutor).execute.apply(i, [o].concat(l));
    }
    /**
     * Prepares available contextMenu's items list and registers them in commandExecutor.
     *
     * @private
     * @fires Hooks#afterContextMenuDefaultOptions
     * @fires Hooks#beforeContextMenuSetItems
     */
  }, {
    key: "prepareMenuItems",
    value: function() {
      var o = this;
      this.itemsFactory = new AU(this.hot, r.DEFAULT_ITEMS);
      var i = this.hot.getSettings()[my], a = {
        items: this.itemsFactory.getItems(i)
      };
      this.hot.runHooks("afterContextMenuDefaultOptions", a), this.itemsFactory.setPredefinedItems(a.items);
      var l = this.itemsFactory.getItems(i);
      this.hot.runHooks("beforeContextMenuSetItems", l), this.menu.setMenuItems(l), I(l, function(s) {
        return o.commandExecutor.registerCommand(s.key, s);
      });
    }
    /**
     * On contextmenu listener.
     *
     * @private
     * @param {Event} event The mouse event object.
     */
  }, {
    key: "onAfterOnCellContextMenu",
    value: function(o) {
      var i = this.hot.getSettings(), a = i.rowHeaders, l = i.colHeaders;
      function s(f) {
        return f.nodeName === "TD" || f.parentNode.nodeName === "TD";
      }
      var u = o.target;
      this.close(), !Me(u, "handsontableInput") && (o.preventDefault(), o.stopPropagation(), !(!(a || l) && !s(u) && !(Me(u, "current") && Me(u, "wtBorder"))) && this.open(o));
    }
    /**
     * On menu before open listener.
     *
     * @private
     */
  }, {
    key: "onMenuBeforeOpen",
    value: function() {
      this.hot.runHooks("beforeContextMenuShow", this);
    }
    /**
     * On menu after open listener.
     *
     * @private
     */
  }, {
    key: "onMenuAfterOpen",
    value: function() {
      this.hot.runHooks("afterContextMenuShow", this);
    }
    /**
     * On menu after close listener.
     *
     * @private
     */
  }, {
    key: "onMenuAfterClose",
    value: function() {
      this.hot.listen(), this.hot.runHooks("afterContextMenuHide", this);
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      this.close(), this.menu && this.menu.destroy(), ua(mo(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return my;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return bIe;
    }
  }, {
    key: "PLUGIN_DEPS",
    get: function() {
      return ["plugin:AutoColumnSize"];
    }
    /**
     * Context menu default items order when `contextMenu` options is set as `true`.
     *
     * @returns {string[]}
     */
  }, {
    key: "DEFAULT_ITEMS",
    get: function() {
      return [nb, ob, We, Cv, _v, We, rb, Rv, We, ib, tb, We, Ov, We, Kr];
    }
  }]), r;
}(ft);
NU.SEPARATOR = {
  name: We
};
function wIe(e) {
  return {
    key: "copy",
    name: function() {
      return this.getTranslatedPhrase(qT);
    },
    callback: function() {
      e.copyCellsOnly();
    },
    disabled: function() {
      if (this.countRows() === 0 || this.countCols() === 0)
        return !0;
      var r = this.getSelected();
      return !r || r.length > 1;
    },
    hidden: !1
  };
}
function SIe(e) {
  return {
    key: "copy_column_headers_only",
    name: function() {
      var r = this.getSelectedRangeLast(), n = r ? Math.min(r.getWidth() - 1, 1) : 0;
      return this.getTranslatedPhrase(QT, n);
    },
    callback: function() {
      e.copyColumnHeadersOnly();
    },
    disabled: function() {
      if (!this.hasColHeaders())
        return !0;
      var r = this.getSelected();
      return !r || r.length > 1;
    },
    hidden: !1
  };
}
function CIe(e) {
  return {
    key: "copy_with_column_group_headers",
    name: function() {
      var r = this.getSelectedRangeLast(), n = r ? Math.min(r.getWidth() - 1, 1) : 0;
      return this.getTranslatedPhrase(ZT, n);
    },
    callback: function() {
      e.copyWithAllColumnHeaders();
    },
    disabled: function() {
      if (!this.hasColHeaders() || !this.getSettings().nestedHeaders)
        return !0;
      var r = this.getSelected();
      return !r || r.length > 1;
    },
    hidden: !1
  };
}
function _Ie(e) {
  return {
    key: "copy_with_column_headers",
    name: function() {
      var r = this.getSelectedRangeLast(), n = r ? Math.min(r.getWidth() - 1, 1) : 0;
      return this.getTranslatedPhrase(XT, n);
    },
    callback: function() {
      e.copyWithColumnHeaders();
    },
    disabled: function() {
      if (!this.hasColHeaders())
        return !0;
      var r = this.getSelected();
      return !r || r.length > 1;
    },
    hidden: !1
  };
}
function OIe(e) {
  return {
    key: "cut",
    name: function() {
      return this.getTranslatedPhrase(JT);
    },
    callback: function() {
      e.cut();
    },
    disabled: function() {
      if (this.countRows() === 0 || this.countCols() === 0)
        return !0;
      var r = this.getSelected();
      return !r || r.length > 1;
    },
    hidden: !1
  };
}
function ad(e) {
  "@babel/helpers - typeof";
  return ad = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, ad(e);
}
function RIe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function LD(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, TIe(n.key), n);
  }
}
function EIe(e, t, r) {
  return t && LD(e.prototype, t), r && LD(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function TIe(e) {
  var t = PIe(e, "string");
  return ad(t) === "symbol" ? t : String(t);
}
function PIe(e, t) {
  if (ad(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (ad(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var kIe = /* @__PURE__ */ function() {
  function e() {
    RIe(this, e), this.data = {};
  }
  return EIe(e, [{
    key: "setData",
    value: function(r, n) {
      this.data[r] = n;
    }
  }, {
    key: "getData",
    value: function(r) {
      return this.data[r] || void 0;
    }
  }]), e;
}();
function ld(e) {
  "@babel/helpers - typeof";
  return ld = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, ld(e);
}
function jD(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, AIe(n.key), n);
  }
}
function $Ie(e, t, r) {
  return t && jD(e.prototype, t), r && jD(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function AIe(e) {
  var t = IIe(e, "string");
  return ld(t) === "symbol" ? t : String(t);
}
function IIe(e, t) {
  if (ld(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (ld(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function MIe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
var xIe = /* @__PURE__ */ $Ie(function e() {
  MIe(this, e), this.clipboardData = new kIe();
});
function sd(e) {
  "@babel/helpers - typeof";
  return sd = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, sd(e);
}
function DIe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function FD(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, HIe(n.key), n);
  }
}
function NIe(e, t, r) {
  return t && FD(e.prototype, t), r && FD(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function HIe(e) {
  var t = LIe(e, "string");
  return sd(t) === "symbol" ? t : String(t);
}
function LIe(e, t) {
  if (sd(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (sd(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var TP = /* @__PURE__ */ function() {
  function e(t) {
    DIe(this, e), this.rootDocument = t.defaultView ? t : t.ownerDocument, this.mainElement = null, this.eventManager = new It(this), this.listenersCount = /* @__PURE__ */ new WeakSet(), this.container = t;
  }
  return NIe(e, [{
    key: "useSecondaryElement",
    value: function() {
      var r = BIe(this.container);
      this.listenersCount.has(r) || (this.listenersCount.add(r), BD(this.eventManager, r, this)), this.mainElement = r;
    }
    /**
     * Switch to the main focusable element.
     *
     * @param {HTMLElement} element The DOM element.
     */
  }, {
    key: "setFocusableElement",
    value: function(r) {
      this.listenersCount.has(r) || (this.listenersCount.add(r), BD(this.eventManager, r, this)), this.mainElement = r;
    }
    /**
     * Get currently set focusable element.
     *
     * @returns {HTMLElement}
     */
  }, {
    key: "getFocusableElement",
    value: function() {
      return this.mainElement;
    }
    /**
     * Set focus to the focusable element.
     */
  }, {
    key: "focus",
    value: function() {
      this.mainElement.value = " ", Nn() || yae(this.mainElement);
    }
  }]), e;
}();
bt(TP, $r);
var Mm = /* @__PURE__ */ new WeakMap();
function jIe(e) {
  var t = new TP(e), r = Mm.get(e);
  return r = isNaN(r) ? 0 : r, Mm.set(e, r + 1), t;
}
function FIe(e) {
  e.eventManager.clear();
}
var oS = function(t, r) {
  return function(n) {
    return r.runLocalHooks(t, n);
  };
};
function BD(e, t, r) {
  e.addEventListener(t, "copy", oS("copy", r)), e.addEventListener(t, "cut", oS("cut", r)), e.addEventListener(t, "paste", oS("paste", r));
}
var xm = /* @__PURE__ */ new WeakMap();
function BIe(e) {
  var t = xm.get(e);
  if (t)
    return t.parentElement || e.appendChild(t), t;
  var r = e.defaultView ? e : e.ownerDocument, n = r.createElement("textarea");
  return xm.set(e, n), n.setAttribute("data-hot-input", ""), n.className = "HandsontableCopyPaste", n.tabIndex = -1, n.autocomplete = "off", n.wrap = "hard", n.value = " ", e.appendChild(n), n;
}
function VD(e) {
  if (e instanceof TP) {
    var t = Mm.get(e.container);
    if (t = isNaN(t) ? 0 : t, t > 0 && (t -= 1), FIe(e), t <= 0) {
      t = 0;
      var r = xm.get(e.container);
      r && r.parentNode && (r.parentNode.removeChild(r), xm.delete(e.container)), e.mainElement = null;
    }
    Mm.set(e.container, t);
  }
}
function ud(e) {
  "@babel/helpers - typeof";
  return ud = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, ud(e);
}
function VIe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function WD(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, UIe(n.key), n);
  }
}
function WIe(e, t, r) {
  return t && WD(e.prototype, t), r && WD(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function UIe(e) {
  var t = zIe(e, "string");
  return ud(t) === "symbol" ? t : String(t);
}
function zIe(e, t) {
  if (ud(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (ud(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function UD(e, t) {
  HU(e, t), t.add(e);
}
function _l(e, t, r) {
  HU(e, t), t.set(e, r);
}
function HU(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function gy(e, t, r) {
  if (!t.has(e))
    throw new TypeError("attempted to get private field on non-instance");
  return r;
}
function yr(e, t) {
  var r = LU(e, t, "get");
  return YIe(e, r);
}
function YIe(e, t) {
  return t.get ? t.get.call(e) : t.value;
}
function Ol(e, t, r) {
  var n = LU(e, t, "set");
  return GIe(e, n, r), r;
}
function LU(e, t, r) {
  if (!t.has(e))
    throw new TypeError("attempted to " + r + " private field on non-instance");
  return t.get(e);
}
function GIe(e, t, r) {
  if (t.set)
    t.set.call(e, r);
  else {
    if (!t.writable)
      throw new TypeError("attempted to set read only private field");
    t.value = r;
  }
}
var Zo = /* @__PURE__ */ new WeakMap(), iS = /* @__PURE__ */ new WeakMap(), qf = /* @__PURE__ */ new WeakMap(), PO = /* @__PURE__ */ new WeakMap(), kO = /* @__PURE__ */ new WeakMap(), Xf = /* @__PURE__ */ new WeakMap(), by = /* @__PURE__ */ new WeakSet(), zD = /* @__PURE__ */ new WeakSet(), KIe = /* @__PURE__ */ function() {
  function e(t) {
    var r = t.countRows, n = t.countColumns, o = t.rowsLimit, i = t.columnsLimit, a = t.countColumnHeaders;
    VIe(this, e), UD(this, zD), UD(this, by), _l(this, Zo, {
      writable: !0,
      value: void 0
    }), _l(this, iS, {
      writable: !0,
      value: void 0
    }), _l(this, qf, {
      writable: !0,
      value: void 0
    }), _l(this, PO, {
      writable: !0,
      value: void 0
    }), _l(this, kO, {
      writable: !0,
      value: void 0
    }), _l(this, Xf, {
      writable: !0,
      value: void 0
    }), Ol(this, iS, r), Ol(this, qf, n), Ol(this, PO, o), Ol(this, kO, i), Ol(this, Xf, a);
  }
  return WIe(e, [{
    key: "setSelectedRange",
    value: function(r) {
      Ol(this, Zo, r);
    }
    /**
     * Returns a new coords object within the dataset range (cells) with `startRow`, `startCol`, `endRow`
     * and `endCol` keys.
     *
     * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}
     */
  }, {
    key: "getCellsRange",
    value: function() {
      if (yr(this, iS).call(this) === 0 || yr(this, qf).call(this) === 0)
        return null;
      var r = yr(this, Zo).getTopStartCorner(), n = r.row, o = r.col, i = yr(this, Zo).getBottomEndCorner(), a = i.row, l = i.col, s = gy(this, zD, qIe).call(this, n, a), u = gy(this, by, aS).call(this, o, l), f = a !== s || l !== u;
      return {
        isRangeTrimmed: f,
        startRow: n,
        startCol: o,
        endRow: s,
        endCol: u
      };
    }
    /**
     * Returns a new coords object within the most-bottom column headers range with `startRow`,
     * `startCol`, `endRow` and `endCol` keys.
     *
     * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}
     */
  }, {
    key: "getMostBottomColumnHeadersRange",
    value: function() {
      if (yr(this, qf).call(this) === 0 || yr(this, Xf).call(this) === 0)
        return null;
      var r = yr(this, Zo).getTopStartCorner(), n = r.col, o = yr(this, Zo).getBottomEndCorner(), i = o.col, a = gy(this, by, aS).call(this, n, i), l = i !== a;
      return {
        isRangeTrimmed: l,
        startRow: -1,
        startCol: n,
        endRow: -1,
        endCol: a
      };
    }
    /**
     * Returns a new coords object within all column headers layers (including nested headers) range with
     * `startRow`, `startCol`, `endRow` and `endCol` keys.
     *
     * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}
     */
  }, {
    key: "getAllColumnHeadersRange",
    value: function() {
      if (yr(this, qf).call(this) === 0 || yr(this, Xf).call(this) === 0)
        return null;
      var r = yr(this, Zo).getTopStartCorner(), n = r.col, o = yr(this, Zo).getBottomEndCorner(), i = o.col, a = gy(this, by, aS).call(this, n, i), l = i !== a;
      return {
        isRangeTrimmed: l,
        startRow: -yr(this, Xf).call(this),
        startCol: n,
        endRow: -1,
        endCol: a
      };
    }
  }]), e;
}();
function aS(e, t) {
  return Math.min(t, Math.max(e + yr(this, kO).call(this) - 1, e));
}
function qIe(e, t) {
  return Math.min(t, Math.max(e + yr(this, PO).call(this) - 1, e));
}
function jU(e) {
  var t = [], r = [];
  return I(e, function(n) {
    var o = Math.min(n.startRow, n.endRow), i = Math.max(n.startRow, n.endRow);
    _e(o, i, function(s) {
      t.indexOf(s) === -1 && t.push(s);
    });
    var a = Math.min(n.startCol, n.endCol), l = Math.max(n.startCol, n.endCol);
    _e(a, l, function(s) {
      r.indexOf(s) === -1 && r.push(s);
    });
  }), {
    rows: t,
    columns: r
  };
}
function XIe(e, t) {
  return e1e(e) || JIe(e, t) || QIe(e, t) || ZIe();
}
function ZIe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function QIe(e, t) {
  if (e) {
    if (typeof e == "string")
      return YD(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return YD(e, t);
  }
}
function YD(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function JIe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function e1e(e) {
  if (Array.isArray(e))
    return e;
}
function Ya(e) {
  "@babel/helpers - typeof";
  return Ya = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Ya(e);
}
function t1e(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function GD(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, BU(n.key), n);
  }
}
function r1e(e, t, r) {
  return t && GD(e.prototype, t), r && GD(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function fa() {
  return typeof Reflect < "u" && Reflect.get ? fa = Reflect.get.bind() : fa = function(t, r, n) {
    var o = n1e(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, fa.apply(this, arguments);
}
function n1e(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = go(e), e !== null); )
    ;
  return e;
}
function o1e(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && $O(e, t);
}
function $O(e, t) {
  return $O = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, $O(e, t);
}
function i1e(e) {
  var t = l1e();
  return function() {
    var n = go(e), o;
    if (t) {
      var i = go(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return a1e(this, o);
  };
}
function a1e(e, t) {
  if (t && (Ya(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return vr(e);
}
function vr(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function l1e() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function go(e) {
  return go = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, go(e);
}
function s1e(e, t) {
  FU(e, t), t.add(e);
}
function zi(e, t, r) {
  FU(e, t), t.set(e, r);
}
function FU(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Rl(e, t, r) {
  return t = BU(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function BU(e) {
  var t = u1e(e, "string");
  return Ya(t) === "symbol" ? t : String(t);
}
function u1e(e, t) {
  if (Ya(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Ya(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function f1e(e, t, r) {
  if (!t.has(e))
    throw new TypeError("attempted to get private field on non-instance");
  return r;
}
function Ir(e, t) {
  var r = VU(e, t, "get");
  return c1e(e, r);
}
function c1e(e, t) {
  return t.get ? t.get.call(e) : t.value;
}
function Xn(e, t, r) {
  var n = VU(e, t, "set");
  return h1e(e, n, r), r;
}
function VU(e, t, r) {
  if (!t.has(e))
    throw new TypeError("attempted to " + r + " private field on non-instance");
  return t.get(e);
}
function h1e(e, t, r) {
  if (t.set)
    t.set.call(e, r);
  else {
    if (!t.writable)
      throw new TypeError("attempted to set read only private field");
    t.value = r;
  }
}
we.getSingleton().register("afterCopyLimit");
we.getSingleton().register("modifyCopyableRange");
we.getSingleton().register("beforeCut");
we.getSingleton().register("afterCut");
we.getSingleton().register("beforePaste");
we.getSingleton().register("afterPaste");
we.getSingleton().register("beforeCopy");
we.getSingleton().register("afterCopy");
var wy = "copyPaste", d1e = 80, v1e = ["fragmentSelection"], KD = ['<meta name="generator" content="Handsontable"/>', '<style type="text/css">td{white-space:normal}br{mso-data-placement:same-cell}</style>'].join(""), lS = /* @__PURE__ */ new WeakMap(), sS = /* @__PURE__ */ new WeakMap(), uS = /* @__PURE__ */ new WeakMap(), El = /* @__PURE__ */ new WeakMap(), Sy = /* @__PURE__ */ new WeakMap(), Cy = /* @__PURE__ */ new WeakMap(), Tl = /* @__PURE__ */ new WeakMap(), qD = /* @__PURE__ */ new WeakSet(), y1e = /* @__PURE__ */ function(e) {
  o1e(r, e);
  var t = i1e(r);
  function r() {
    var n;
    t1e(this, r);
    for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
      i[a] = arguments[a];
    return n = t.call.apply(t, [this].concat(i)), s1e(vr(n), qD), Rl(vr(n), "columnsLimit", 1 / 0), Rl(vr(n), "rowsLimit", 1 / 0), Rl(vr(n), "pasteMode", "overwrite"), Rl(vr(n), "uiContainer", n.hot.rootDocument.body), zi(vr(n), lS, {
      writable: !0,
      value: !1
    }), zi(vr(n), sS, {
      writable: !0,
      value: !1
    }), zi(vr(n), uS, {
      writable: !0,
      value: !1
    }), zi(vr(n), El, {
      writable: !0,
      value: "cells-only"
    }), zi(vr(n), Sy, {
      writable: !0,
      value: !1
    }), zi(vr(n), Cy, {
      writable: !0,
      value: !1
    }), zi(vr(n), Tl, {
      writable: !0,
      value: new KIe({
        countRows: function() {
          return n.hot.countRows();
        },
        countColumns: function() {
          return n.hot.countCols();
        },
        rowsLimit: function() {
          return n.rowsLimit;
        },
        columnsLimit: function() {
          return n.columnsLimit;
        },
        countColumnHeaders: function() {
          return n.hot.view.getColumnHeadersCount();
        }
      })
    }), Rl(vr(n), "copyableRanges", []), Rl(vr(n), "focusableElement", void 0), n;
  }
  return r1e(r, [{
    key: "isEnabled",
    value: (
      /**
       * Checks if the [`CopyPaste`](#copypaste) plugin is enabled.
       *
       * This method gets called by Handsontable's [`beforeInit`](@/api/hooks.md#beforeinit) hook.
       * If it returns `true`, the [`enablePlugin()`](#enableplugin) method gets called.
       *
       * @returns {boolean}
       */
      function() {
        return !!this.hot.getSettings()[wy];
      }
    )
    /**
     * Enables the [`CopyPaste`](#copypaste) plugin for your Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      if (!this.enabled) {
        var i = this.hot.getSettings(), a = i[wy];
        if (Ya(a) === "object") {
          var l, s;
          this.pasteMode = (l = a.pasteMode) !== null && l !== void 0 ? l : this.pasteMode, this.rowsLimit = isNaN(a.rowsLimit) ? this.rowsLimit : a.rowsLimit, this.columnsLimit = isNaN(a.columnsLimit) ? this.columnsLimit : a.columnsLimit, Xn(this, lS, !!a.copyColumnHeaders), Xn(this, sS, !!a.copyColumnGroupHeaders), Xn(this, uS, !!a.copyColumnHeadersOnly), this.uiContainer = (s = a.uiContainer) !== null && s !== void 0 ? s : this.uiContainer;
        }
        this.addHook("afterContextMenuDefaultOptions", function(u) {
          return o.onAfterContextMenuDefaultOptions(u);
        }), this.addHook("afterOnCellMouseUp", function() {
          return o.onAfterOnCellMouseUp();
        }), this.addHook("afterSelectionEnd", function() {
          return o.onAfterSelectionEnd();
        }), this.addHook("beforeKeyDown", function() {
          return o.onBeforeKeyDown();
        }), this.focusableElement = jIe(this.uiContainer), this.focusableElement.addLocalHook("copy", function(u) {
          return o.onCopy(u);
        }).addLocalHook("cut", function(u) {
          return o.onCut(u);
        }).addLocalHook("paste", function(u) {
          return o.onPaste(u);
        }), fa(go(r.prototype), "enablePlugin", this).call(this);
      }
    }
    /**
     * Updates the state of the [`CopyPaste`](#copypaste) plugin.
     *
     * Gets called when [`updateSettings()`](@/api/core.md#updatesettings)
     * is invoked with any of the following configuration options:
     *  - [`copyPaste`](@/api/options.md#copypaste)
     *  - [`fragmentSelection`](@/api/options.md#fragmentselection)
     */
  }, {
    key: "updatePlugin",
    value: function() {
      this.disablePlugin(), this.enablePlugin(), this.getOrCreateFocusableElement(), fa(go(r.prototype), "updatePlugin", this).call(this);
    }
    /**
     * Disables the [`CopyPaste`](#copypaste) plugin for your Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      this.focusableElement && VD(this.focusableElement), fa(go(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Copies the contents of the selected cells (and/or their related column headers) to the system clipboard.
     *
     * Takes an optional parameter (`copyMode`) that defines the scope of copying:
     *
     * | `copyMode` value            | Description                                                     |
     * | --------------------------- | --------------------------------------------------------------- |
     * | `'cells-only'` (default)    | Copy the selected cells                                         |
     * | `'with-column-headers'`     | - Copy the selected cells<br>- Copy the nearest column headers  |
     * | `'with-all-column-headers'` | - Copy the selected cells<br>- Copy all related columns headers |
     * | `'column-headers-only'`     | Copy the nearest column headers (without copying cells)         |
     *
     * @param {string} [copyMode='cells-only'] Copy mode.
     */
  }, {
    key: "copy",
    value: function() {
      var o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "cells-only";
      Xn(this, El, o), Xn(this, Sy, !0), this.getOrCreateFocusableElement(), this.focusableElement.focus(), this.hot.rootDocument.execCommand("copy");
    }
    /**
     * Copies the contents of the selected cells.
     */
  }, {
    key: "copyCellsOnly",
    value: function() {
      this.copy("cells-only");
    }
    /**
     * Copies the contents of column headers that are nearest to the selected cells.
     */
  }, {
    key: "copyColumnHeadersOnly",
    value: function() {
      this.copy("column-headers-only");
    }
    /**
     * Copies the contents of the selected cells and all their related column headers.
     */
  }, {
    key: "copyWithAllColumnHeaders",
    value: function() {
      this.copy("with-column-group-headers");
    }
    /**
     * Copies the contents of the selected cells and their nearest column headers.
     */
  }, {
    key: "copyWithColumnHeaders",
    value: function() {
      this.copy("with-column-headers");
    }
    /**
     * Cuts the contents of the selected cells to the system clipboard.
     */
  }, {
    key: "cut",
    value: function() {
      Xn(this, Cy, !0), this.getOrCreateFocusableElement(), this.focusableElement.focus(), this.hot.rootDocument.execCommand("cut");
    }
    /**
     * Converts the contents of multiple ranges (`ranges`) into a single string.
     *
     * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges Array of objects with properties `startRow`, `endRow`, `startCol` and `endCol`.
     * @returns {string} A string that will be copied to the clipboard.
     */
  }, {
    key: "getRangedCopyableData",
    value: function(o) {
      return Cc(this.getRangedData(o));
    }
    /**
     * Converts the contents of multiple ranges (`ranges`) into an array of arrays.
     *
     * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.
     * @returns {Array[]} An array of arrays that will be copied to the clipboard.
     */
  }, {
    key: "getRangedData",
    value: function(o) {
      var i = this, a = [], l = jU(o), s = l.rows, u = l.columns;
      return I(s, function(f) {
        var c = [];
        I(u, function(h) {
          f < 0 ? c.push(i.hot.getColHeader(h, f)) : c.push(i.hot.getCopyableData(f, h));
        }), a.push(c);
      }), a;
    }
    /**
     * Simulates the paste action.
     *
     * For security reasons, modern browsers don't allow reading from the system clipboard.
     *
     * @param {string} pastableText The value to paste, as a raw string.
     * @param {string} [pastableHtml=''] The value to paste, as HTML.
     */
  }, {
    key: "paste",
    value: function() {
      var o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "", i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : o;
      if (!(!o && !i)) {
        var a = new xIe();
        o && a.clipboardData.setData("text/plain", o), i && a.clipboardData.setData("text/html", i), this.getOrCreateFocusableElement(), this.onPaste(a);
      }
    }
    /**
     * Prepares copyable text from the cells selection in the invisible textarea.
     */
  }, {
    key: "setCopyableText",
    value: function() {
      var o = this.hot.getSelectedRangeLast();
      if (o) {
        Ir(this, Tl).setSelectedRange(o);
        var i = /* @__PURE__ */ new Map([["headers", null], ["cells", null]]);
        Ir(this, El) === "column-headers-only" ? i.set("headers", Ir(this, Tl).getMostBottomColumnHeadersRange()) : (Ir(this, El) === "with-column-headers" ? i.set("headers", Ir(this, Tl).getMostBottomColumnHeadersRange()) : Ir(this, El) === "with-column-group-headers" && i.set("headers", Ir(this, Tl).getAllColumnHeadersRange()), i.set("cells", Ir(this, Tl).getCellsRange())), this.copyableRanges = Array.from(i.values()).filter(function(c) {
          return c !== null;
        }).map(function(c) {
          var h = c.startRow, d = c.startCol, y = c.endRow, p = c.endCol;
          return {
            startRow: h,
            startCol: d,
            endRow: y,
            endCol: p
          };
        }), this.copyableRanges = this.hot.runHooks("modifyCopyableRange", this.copyableRanges);
        var a = i.get("cells");
        if (a !== null && a.isRangeTrimmed) {
          var l = a.startRow, s = a.startCol, u = a.endRow, f = a.endCol;
          this.hot.runHooks("afterCopyLimit", u - l + 1, f - s + 1, this.rowsLimit, this.columnsLimit);
        }
      }
    }
    /**
     * Force focus on editable element.
     *
     * @private
     */
  }, {
    key: "getOrCreateFocusableElement",
    value: function() {
      var o, i = (o = this.hot.getActiveEditor()) === null || o === void 0 ? void 0 : o.TEXTAREA;
      i ? this.focusableElement.setFocusableElement(i) : this.focusableElement.useSecondaryElement();
    }
    /**
     * Verifies if editor exists and is open.
     *
     * @private
     * @returns {boolean}
     */
  }, {
    key: "isEditorOpened",
    value: function() {
      var o;
      return (o = this.hot.getActiveEditor()) === null || o === void 0 ? void 0 : o.isOpened();
    }
  }, {
    key: "populateValues",
    value: (
      /**
       * Prepares new values to populate them into datasource.
       *
       * @private
       * @param {Array} inputArray An array of the data to populate.
       * @param {Array} [selection] The selection which indicates from what position the data will be populated.
       * @returns {Array} Range coordinates after populate data.
       */
      function(o) {
        var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.hot.getSelectedRangeLast();
        if (o.length) {
          for (var a = o.length, l = o[0].length, s = [], u = i.getTopStartCorner(), f = u.row, c = u.col, h = i.getBottomEndCorner(), d = h.row, y = h.col, p = f, g = c, w = f, C = c; s.length < a || p <= d; ) {
            var _ = this.hot.getCellMeta(p, c), k = _.skipRowOnPaste, E = _.visualRow;
            if (p = E + 1, k !== !0) {
              w = E, g = c;
              for (var j = [], Y = s.length % a; j.length < l || g <= y; ) {
                var Q = this.hot.getCellMeta(f, g), X = Q.skipColumnOnPaste, q = Q.visualCol;
                if (g = q + 1, X !== !0) {
                  C = q;
                  var J = j.length % l;
                  j.push(o[Y][J]);
                }
              }
              s.push(j);
            }
          }
          return this.hot.populateFromArray(f, c, s, void 0, void 0, "CopyPaste.paste", this.pasteMode), [f, c, w, C];
        }
      }
    )
    /**
     * `copy` event callback on textarea element.
     *
     * @param {Event} event ClipboardEvent.
     * @private
     */
  }, {
    key: "onCopy",
    value: function(o) {
      if (!(!this.hot.isListening() && !Ir(this, Sy) || this.isEditorOpened())) {
        this.setCopyableText(), Xn(this, Sy, !1);
        var i = this.getRangedData(this.copyableRanges), a = f1e(this, qD, p1e).call(this, this.copyableRanges), l = !!this.hot.runHooks("beforeCopy", i, this.copyableRanges, a);
        if (l) {
          var s = Cc(i);
          if (o && o.clipboardData) {
            var u = OI(i, this.hot.rootDocument);
            o.clipboardData.setData("text/plain", s), o.clipboardData.setData("text/html", [KD, u].join(""));
          } else
            typeof ClipboardEvent > "u" && this.hot.rootWindow.clipboardData.setData("Text", s);
          this.hot.runHooks("afterCopy", i, this.copyableRanges, a);
        }
        Xn(this, El, "cells-only"), o.preventDefault();
      }
    }
    /**
     * `cut` event callback on textarea element.
     *
     * @param {Event} event ClipboardEvent.
     * @private
     */
  }, {
    key: "onCut",
    value: function(o) {
      if (!(!this.hot.isListening() && !Ir(this, Cy) || this.isEditorOpened())) {
        this.setCopyableText(), Xn(this, Cy, !1);
        var i = this.getRangedData(this.copyableRanges), a = !!this.hot.runHooks("beforeCut", i, this.copyableRanges);
        if (a) {
          var l = Cc(i);
          if (o && o.clipboardData) {
            var s = OI(i, this.hot.rootDocument);
            o.clipboardData.setData("text/plain", l), o.clipboardData.setData("text/html", [KD, s].join(""));
          } else
            typeof ClipboardEvent > "u" && this.hot.rootWindow.clipboardData.setData("Text", l);
          this.hot.emptySelectedCells("CopyPaste.cut"), this.hot.runHooks("afterCut", i, this.copyableRanges);
        }
        o.preventDefault();
      }
    }
    /**
     * `paste` event callback on textarea element.
     *
     * @param {Event} event ClipboardEvent or pseudo ClipboardEvent, if paste was called manually.
     * @private
     */
  }, {
    key: "onPaste",
    value: function(o) {
      if (!(!this.hot.isListening() || this.isEditorOpened())) {
        o && o.preventDefault && o.preventDefault();
        var i;
        if (o && typeof o.clipboardData < "u") {
          var a = hT(o.clipboardData.getData("text/html"), {
            ADD_TAGS: ["meta"],
            ADD_ATTR: ["content"],
            FORCE_BODY: !0
          });
          if (a && /(<table)|(<TABLE)/g.test(a)) {
            var l = use(a, this.hot.rootDocument);
            i = l.data;
          } else
            i = o.clipboardData.getData("text/plain");
        } else
          typeof ClipboardEvent > "u" && typeof this.hot.rootWindow.clipboardData < "u" && (i = this.hot.rootWindow.clipboardData.getData("Text"));
        if (typeof i == "string" && (i = cSe(i)), !(i && i.length === 0) && this.hot.runHooks("beforePaste", i, this.copyableRanges) !== !1) {
          var s = this.populateValues(i), u = XIe(s, 4), f = u[0], c = u[1], h = u[2], d = u[3];
          this.hot.selectCell(f, c, Math.min(this.hot.countRows() - 1, h), Math.min(this.hot.countCols() - 1, d)), this.hot.runHooks("afterPaste", i, this.copyableRanges);
        }
      }
    }
    /**
     * Add copy and cut options to the Context Menu.
     *
     * @private
     * @param {object} options Contains default added options of the Context Menu.
     */
  }, {
    key: "onAfterContextMenuDefaultOptions",
    value: function(o) {
      o.items.push({
        name: "---------"
      }, wIe(this)), Ir(this, lS) && o.items.push(_Ie(this)), Ir(this, sS) && o.items.push(CIe(this)), Ir(this, uS) && o.items.push(SIe(this)), o.items.push(OIe(this));
    }
    /**
     * Force focus on focusableElement.
     *
     * @private
     */
  }, {
    key: "onAfterOnCellMouseUp",
    value: function() {
      !this.hot.isListening() || this.isEditorOpened() || this.hot.getSettings().fragmentSelection || (this.getOrCreateFocusableElement(), this.focusableElement.focus());
    }
    /**
     * Force focus on focusableElement after end of the selection.
     *
     * @private
     */
  }, {
    key: "onAfterSelectionEnd",
    value: function() {
      this.isEditorOpened() || (this.getOrCreateFocusableElement(), !(this.hot.getSettings().fragmentSelection && this.focusableElement.getFocusableElement() !== this.hot.rootDocument.activeElement && cae()) && (this.setCopyableText(), this.focusableElement.focus()));
    }
    /**
     * `beforeKeyDown` listener to force focus of focusableElement.
     *
     * @private
     */
  }, {
    key: "onBeforeKeyDown",
    value: function() {
      if (!(!this.hot.isListening() || this.isEditorOpened())) {
        var o = this.hot.rootDocument.activeElement, i = this.hot.getActiveEditor();
        !i || o !== this.focusableElement.getFocusableElement() && o !== i.select || (this.getOrCreateFocusableElement(), this.focusableElement.focus());
      }
    }
    /**
     * Destroys the `CopyPaste` plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      this.focusableElement && (VD(this.focusableElement), this.focusableElement = null), fa(go(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return wy;
    }
  }, {
    key: "SETTING_KEYS",
    get: function() {
      return [wy].concat(v1e);
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return d1e;
    }
  }]), r;
}(ft);
function p1e(e) {
  for (var t = jU(e), r = t.rows, n = 0, o = 0; o < r.length && !(r[o] >= 0); o++)
    n += 1;
  return {
    columnHeadersCount: n
  };
}
function WU(e, t) {
  return "border_row".concat(e, "col").concat(t);
}
function cc() {
  return {
    width: 1,
    color: "#000"
  };
}
function bo() {
  return {
    hide: !0
  };
}
function m1e() {
  return {
    width: 1,
    color: "#000",
    cornerVisible: !1
  };
}
function fS(e) {
  if (be(e.start) || be(e.left)) {
    var t;
    e.start = (t = e.start) !== null && t !== void 0 ? t : e.left;
  }
  if (be(e.end) || be(e.right)) {
    var r;
    e.end = (r = e.end) !== null && r !== void 0 ? r : e.right;
  }
  return delete e.left, delete e.right, e;
}
function Zf(e) {
  return be(e.start) && (e.left = e.start), be(e.end) && (e.right = e.end), e;
}
function cS(e, t) {
  return {
    id: WU(e, t),
    border: m1e(),
    row: e,
    col: t,
    top: bo(),
    bottom: bo(),
    start: bo(),
    end: bo()
  };
}
function g1e(e, t) {
  return Dt(t, "border") && t.border && (e.border = t.border), Dt(t, "top") && be(t.top) && (t.top ? (ze(t.top) || (t.top = cc()), e.top = t.top) : (t.top = bo(), e.top = t.top)), Dt(t, "bottom") && be(t.bottom) && (t.bottom ? (ze(t.bottom) || (t.bottom = cc()), e.bottom = t.bottom) : (t.bottom = bo(), e.bottom = t.bottom)), Dt(t, "start") && be(t.start) && (t.start ? (ze(t.start) || (t.start = cc()), e.start = t.start) : (t.start = bo(), e.start = t.start)), Dt(t, "end") && be(t.end) && (t.end ? (ze(t.end) || (t.end = cc()), e.end = t.end) : (t.end = bo(), e.end = t.end)), e;
}
function Fo(e, t) {
  var r = !1;
  return I(e.getSelectedRange(), function(n) {
    n.forAll(function(o, i) {
      if (!(o < 0 || i < 0)) {
        var a = e.getCellMeta(o, i).borders;
        if (a)
          if (t) {
            if (!Dt(a[t], "hide") || a[t].hide === !1)
              return r = !0, !1;
          } else
            return r = !0, !1;
      }
    });
  }), r;
}
function ab(e) {
  return '<span class="selected">'.concat(String.fromCharCode(10003), "</span>").concat(e);
}
function b1e(e) {
  return e.some(function(t) {
    return be(t.left) || be(t.right);
  });
}
function w1e(e) {
  return e.some(function(t) {
    return be(t.start) || be(t.end);
  });
}
var S1e = /* @__PURE__ */ new Map([["left", "start"], ["right", "end"]]);
function C1e(e) {
  var t;
  return (t = S1e.get(e)) !== null && t !== void 0 ? t : e;
}
function _1e(e) {
  return {
    key: "borders:bottom",
    name: function() {
      var r = this.getTranslatedPhrase(b0), n = Fo(this, "bottom");
      return n && (r = ab(r)), r;
    },
    callback: function(r, n) {
      var o = Fo(this, "bottom");
      e.prepareBorder(n, "bottom", o);
    }
  };
}
function O1e(e) {
  var t = e.hot.isRtl() ? "end" : "start";
  return {
    key: "borders:left",
    name: function() {
      var n = this.getTranslatedPhrase(w0), o = Fo(this, t);
      return o && (n = ab(n)), n;
    },
    callback: function(n, o) {
      var i = Fo(this, t);
      e.prepareBorder(o, t, i);
    }
  };
}
function R1e(e) {
  return {
    key: "borders:no_borders",
    name: function() {
      return this.getTranslatedPhrase(S0);
    },
    callback: function(r, n) {
      e.prepareBorder(n, "noBorders");
    },
    disabled: function() {
      return !Fo(this);
    }
  };
}
function E1e(e) {
  var t = e.hot.isRtl() ? "start" : "end";
  return {
    key: "borders:right",
    name: function() {
      var n = this.getTranslatedPhrase(g0), o = Fo(this, t);
      return o && (n = ab(n)), n;
    },
    callback: function(n, o) {
      var i = Fo(this, t);
      e.prepareBorder(o, t, i);
    }
  };
}
function T1e(e) {
  return {
    key: "borders:top",
    name: function() {
      var r = this.getTranslatedPhrase(m0), n = Fo(this, "top");
      return n && (r = ab(r)), r;
    },
    callback: function(r, n) {
      var o = Fo(this, "top");
      e.prepareBorder(n, "top", o);
    }
  };
}
function mu(e) {
  "@babel/helpers - typeof";
  return mu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, mu(e);
}
function XD(e, t) {
  return A1e(e) || $1e(e, t) || k1e(e, t) || P1e();
}
function P1e() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function k1e(e, t) {
  if (e) {
    if (typeof e == "string")
      return ZD(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return ZD(e, t);
  }
}
function ZD(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function $1e(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function A1e(e) {
  if (Array.isArray(e))
    return e;
}
function I1e(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function QD(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, zU(n.key), n);
  }
}
function M1e(e, t, r) {
  return t && QD(e.prototype, t), r && QD(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function ca() {
  return typeof Reflect < "u" && Reflect.get ? ca = Reflect.get.bind() : ca = function(t, r, n) {
    var o = x1e(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, ca.apply(this, arguments);
}
function x1e(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = wo(e), e !== null); )
    ;
  return e;
}
function D1e(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && AO(e, t);
}
function AO(e, t) {
  return AO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, AO(e, t);
}
function N1e(e) {
  var t = L1e();
  return function() {
    var n = wo(e), o;
    if (t) {
      var i = wo(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return H1e(this, o);
  };
}
function H1e(e, t) {
  if (t && (mu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return UU(e);
}
function UU(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function L1e() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function wo(e) {
  return wo = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, wo(e);
}
function j1e(e, t, r) {
  return t = zU(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function zU(e) {
  var t = F1e(e, "string");
  return mu(t) === "symbol" ? t : String(t);
}
function F1e(e, t) {
  if (mu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (mu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var _y = "customBorders", B1e = 90, V1e = /* @__PURE__ */ function(e) {
  D1e(r, e);
  var t = N1e(r);
  function r() {
    var n;
    I1e(this, r);
    for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
      i[a] = arguments[a];
    return n = t.call.apply(t, [this].concat(i)), j1e(UU(n), "savedBorders", []), n;
  }
  return M1e(r, [{
    key: "isEnabled",
    value: (
      /**
       * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
       * hook and if it returns `true` then the {@link CustomBorders#enablePlugin} method is called.
       *
       * @returns {boolean}
       */
      function() {
        return !!this.hot.getSettings()[_y];
      }
    )
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      this.enabled || (this.addHook("afterContextMenuDefaultOptions", function(i) {
        return o.onAfterContextMenuDefaultOptions(i);
      }), this.addHook("init", function() {
        return o.onAfterInit();
      }), ca(wo(r.prototype), "enablePlugin", this).call(this));
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      this.hideBorders(), ca(wo(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`customBorders`](@/api/options.md#customborders)
     */
  }, {
    key: "updatePlugin",
    value: function() {
      this.disablePlugin(), this.enablePlugin(), this.changeBorderSettings(), ca(wo(r.prototype), "updatePlugin", this).call(this);
    }
    /**
     * Set custom borders.
     *
     * @example
     * ```js
     * const customBordersPlugin = hot.getPlugin('customBorders');
     *
     * // Using an array of arrays (produced by `.getSelected()` method).
     * customBordersPlugin.setBorders([[1, 1, 2, 2], [6, 2, 0, 2]], {start: {width: 2, color: 'blue'}});
     *
     * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).
     * //  Selecting a cell range.
     * hot.selectCell(0, 0, 2, 2);
     * // Returning selected cells' range with the getSelectedRange method.
     * customBordersPlugin.setBorders(hot.getSelectedRange(), {start: {hide: false, width: 2, color: 'blue'}});
     * ```
     *
     * @param {Array[]|CellRange[]} selectionRanges Array of selection ranges.
     * @param {object} borderObject Object with `top`, `right`, `bottom` and `start` properties.
     */
  }, {
    key: "setBorders",
    value: function(o, i) {
      var a = this, l = ["top", "bottom", "start", "end"], s = null;
      i && (this.checkSettingsCohesion([i]), l = Object.keys(i), s = fS(i));
      var u = js(o), f = Dh(u);
      I(o, function(c) {
        for (var h = f(c), d = XD(h, 4), y = d[0], p = d[1], g = d[2], w = d[3], C = function(E) {
          for (var j = function(X) {
            I(l, function(q) {
              a.prepareBorderFromCustomAdded(E, X, s, C1e(q));
            });
          }, Y = p; Y <= w; Y += 1)
            j(Y);
        }, _ = y; _ <= g; _ += 1)
          C(_);
      }), this.hot.view.render();
    }
    /**
     * Get custom borders.
     *
     * @example
     * ```js
     * const customBordersPlugin = hot.getPlugin('customBorders');
     *
     * // Using an array of arrays (produced by `.getSelected()` method).
     * customBordersPlugin.getBorders([[1, 1, 2, 2], [6, 2, 0, 2]]);
     * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).
     * customBordersPlugin.getBorders(hot.getSelectedRange());
     * // Using without param - return all customBorders.
     * customBordersPlugin.getBorders();
     * ```
     *
     * @param {Array[]|CellRange[]} selectionRanges Array of selection ranges.
     * @returns {object[]} Returns array of border objects.
     */
  }, {
    key: "getBorders",
    value: function(o) {
      var i = this;
      if (!Array.isArray(o))
        return this.savedBorders;
      var a = js(o), l = Dh(a), s = [];
      return I(o, function(u) {
        for (var f = l(u), c = XD(f, 4), h = c[0], d = c[1], y = c[2], p = c[3], g = function(_) {
          for (var k = function(Y) {
            I(i.savedBorders, function(Q) {
              Q.row === _ && Q.col === Y && s.push(Zf(Q));
            });
          }, E = d; E <= p; E += 1)
            k(E);
        }, w = h; w <= y; w += 1)
          g(w);
      }), s;
    }
    /**
     * Clear custom borders.
     *
     * @example
     * ```js
     * const customBordersPlugin = hot.getPlugin('customBorders');
     *
     * // Using an array of arrays (produced by `.getSelected()` method).
     * customBordersPlugin.clearBorders([[1, 1, 2, 2], [6, 2, 0, 2]]);
     * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).
     * customBordersPlugin.clearBorders(hot.getSelectedRange());
     * // Using without param - clear all customBorders.
     * customBordersPlugin.clearBorders();
     * ```
     *
     * @param {Array[]|CellRange[]} selectionRanges Array of selection ranges.
     */
  }, {
    key: "clearBorders",
    value: function(o) {
      var i = this;
      o ? this.setBorders(o) : (I(this.savedBorders, function(a) {
        i.clearBordersFromSelectionSettings(a.id), i.clearNullCellRange(), i.hot.removeCellMeta(a.row, a.col, "borders");
      }), this.savedBorders.length = 0);
    }
    /**
     * Insert WalkontableSelection instance into Walkontable settings.
     *
     * @private
     * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
     * @param {string} [place] Coordinate where add/remove border - `top`, `bottom`, `start`, `end`.
     */
  }, {
    key: "insertBorderIntoSettings",
    value: function(o, i) {
      var a = this.checkSavedBorders(o);
      a || this.savedBorders.push(o);
      var l = this.hot._createCellRange(this.hot._createCellCoords(o.row, o.col)), s = this.checkCustomSelections(o, l, i);
      s || this.hot.selection.highlight.addCustomSelection({
        border: o,
        visualCellRange: l
      });
    }
    /**
     * Prepare borders from setting (single cell).
     *
     * @private
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {object} borderDescriptor Object with `row` and `col`, `start`, `end`, `top` and `bottom` properties.
     * @param {string} [place] Coordinate where add/remove border - `top`, `bottom`, `start`, `end`.
     */
  }, {
    key: "prepareBorderFromCustomAdded",
    value: function(o, i, a, l) {
      var s = this.hot.countRows(), u = this.hot.countCols();
      if (!(o >= s || i >= u)) {
        var f = cS(o, i);
        a && (f = g1e(f, a), I(this.hot.selection.highlight.customSelections, function(c) {
          if (f.id === c.settings.id)
            return Object.assign(c.settings, a), f.id = c.settings.id, f.top = c.settings.top, f.bottom = c.settings.bottom, f.start = c.settings.start, f.end = c.settings.end, !1;
        })), this.hot.setCellMeta(o, i, "borders", Zf(f)), this.insertBorderIntoSettings(f, l);
      }
    }
    /**
     * Prepare borders from setting (object).
     *
     * @private
     * @param {object} range {CellRange} The CellRange object.
     * @param {object} customBorder Object with `start`, `end`, `top` and `bottom` properties.
     */
  }, {
    key: "prepareBorderFromCustomAddedRange",
    value: function(o, i) {
      var a = this, l = Math.min(o.to.row, this.hot.countRows() - 1), s = Math.min(o.to.col, this.hot.countCols() - 1);
      _e(o.from.row, l, function(u) {
        _e(o.from.col, s, function(f) {
          var c = cS(u, f), h = 0;
          u === o.from.row && Dt(i, "top") && (h += 1, c.top = i.top), u === o.to.row && Dt(i, "bottom") && (h += 1, c.bottom = i.bottom), f === o.from.col && Dt(i, "start") && (h += 1, c.start = i.start), f === o.to.col && Dt(i, "end") && (h += 1, c.end = i.end), h > 0 && (a.hot.setCellMeta(u, f, "borders", Zf(c)), a.insertBorderIntoSettings(c));
        });
      });
    }
    /**
     * Remove border (triggered from context menu).
     *
     * @private
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     */
  }, {
    key: "removeAllBorders",
    value: function(o, i) {
      var a = WU(o, i);
      this.spliceBorder(a), this.clearBordersFromSelectionSettings(a), this.clearNullCellRange(), this.hot.removeCellMeta(o, i, "borders");
    }
    /**
     * Set borders for each cell re. To border position.
     *
     * @private
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {string} place Coordinate where add/remove border - `top`, `bottom`, `start`, `end` and `noBorders`.
     * @param {boolean} remove True when remove borders, and false when add borders.
     */
  }, {
    key: "setBorder",
    value: function(o, i, a, l) {
      var s = this.hot.getCellMeta(o, i).borders;
      if (!s || s.border === void 0 ? s = cS(o, i) : s = fS(s), l) {
        s[a] = bo();
        var u = this.countHide(s);
        if (u === 4)
          this.removeAllBorders(o, i);
        else {
          var f = this.checkCustomSelectionsFromContextMenu(s, a, l);
          f || this.insertBorderIntoSettings(s), this.hot.setCellMeta(o, i, "borders", Zf(s));
        }
      } else {
        s[a] = cc();
        var c = this.checkCustomSelectionsFromContextMenu(s, a, l);
        c || this.insertBorderIntoSettings(s), this.hot.setCellMeta(o, i, "borders", Zf(s));
      }
    }
    /**
     * Prepare borders based on cell and border position.
     *
     * @private
     * @param {CellRange[]} selected An array of CellRange objects.
     * @param {string} place Coordinate where add/remove border - `top`, `bottom`, `left`, `right` and `noBorders`.
     * @param {boolean} remove True when remove borders, and false when add borders.
     */
  }, {
    key: "prepareBorder",
    value: function(o, i, a) {
      var l = this;
      I(o, function(s) {
        var u = s.start, f = s.end;
        if (u.row === f.row && u.col === f.col)
          i === "noBorders" ? l.removeAllBorders(u.row, u.col) : l.setBorder(u.row, u.col, i, a);
        else
          switch (i) {
            case "noBorders":
              _e(u.col, f.col, function(c) {
                _e(u.row, f.row, function(h) {
                  l.removeAllBorders(h, c);
                });
              });
              break;
            case "top":
              _e(u.col, f.col, function(c) {
                l.setBorder(u.row, c, i, a);
              });
              break;
            case "bottom":
              _e(u.col, f.col, function(c) {
                l.setBorder(f.row, c, i, a);
              });
              break;
            case "start":
              _e(u.row, f.row, function(c) {
                l.setBorder(c, u.col, i, a);
              });
              break;
            case "end":
              _e(u.row, f.row, function(c) {
                l.setBorder(c, f.col, i, a);
              });
              break;
          }
      });
    }
    /**
     * Create borders from settings.
     *
     * @private
     * @param {Array} customBorders Object with `row` and `col`, `start`, `end`, `top` and `bottom` properties.
     */
  }, {
    key: "createCustomBorders",
    value: function(o) {
      var i = this;
      I(o, function(a) {
        var l = fS(a);
        a.range ? i.prepareBorderFromCustomAddedRange(a.range, l) : i.prepareBorderFromCustomAdded(a.row, a.col, l);
      });
    }
    /**
     * Count hide property in border object.
     *
     * @private
     * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and
     *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
     * @returns {number}
     */
  }, {
    key: "countHide",
    value: function(o) {
      var i = o.top, a = o.bottom, l = o.start, s = o.end, u = [i, a, l, s];
      return sr(u, function(f, c) {
        var h = f;
        return c && c.hide && (h += 1), h;
      }, 0);
    }
    /**
     * Clear borders settings from custom selections.
     *
     * @private
     * @param {string} borderId Border id name as string.
     */
  }, {
    key: "clearBordersFromSelectionSettings",
    value: function(o) {
      var i = Ue(this.hot.selection.highlight.customSelections, function(a) {
        return a.settings.id;
      }).indexOf(o);
      i > -1 && this.hot.selection.highlight.customSelections[i].clear();
    }
    /**
     * Clear cellRange with null value.
     *
     * @private
     */
  }, {
    key: "clearNullCellRange",
    value: function() {
      var o = this;
      I(this.hot.selection.highlight.customSelections, function(i, a) {
        if (i.cellRange === null)
          return o.hot.selection.highlight.customSelections[a].destroy(), o.hot.selection.highlight.customSelections.splice(a, 1), !1;
      });
    }
    /**
     * Hide custom borders.
     *
     * @private
     */
  }, {
    key: "hideBorders",
    value: function() {
      var o = this;
      I(this.savedBorders, function(i) {
        o.clearBordersFromSelectionSettings(i.id), o.clearNullCellRange();
      });
    }
    /**
     * Splice border from savedBorders.
     *
     * @private
     * @param {string} borderId Border id name as string.
     */
  }, {
    key: "spliceBorder",
    value: function(o) {
      var i = Ue(this.savedBorders, function(a) {
        return a.id;
      }).indexOf(o);
      i > -1 && this.savedBorders.splice(i, 1);
    }
    /**
     * Check if an border already exists in the savedBorders array, and if true update border in savedBorders.
     *
     * @private
     * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and
     *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
     *
     * @returns {boolean}
     */
  }, {
    key: "checkSavedBorders",
    value: function(o) {
      var i = this, a = !1, l = this.countHide(o);
      return l === 4 ? (this.spliceBorder(o.id), a = !0) : I(this.savedBorders, function(s, u) {
        if (o.id === s.id)
          return i.savedBorders[u] = o, a = !0, !1;
      }), a;
    }
    /**
     * Check if an border already exists in the customSelections, and if true call toggleHiddenClass method.
     *
     * @private
     * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and
     *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
     * @param {string} place Coordinate where add/remove border - `top`, `bottom`, `start`, `end` and `noBorders`.
     * @param {boolean} remove True when remove borders, and false when add borders.
     *
     * @returns {boolean}
     */
  }, {
    key: "checkCustomSelectionsFromContextMenu",
    value: function(o, i, a) {
      var l = !1;
      return I(this.hot.selection.highlight.customSelections, function(s) {
        if (o.id === s.settings.id)
          return Ye(s.instanceBorders, function(u) {
            u.toggleHiddenClass(i, a);
          }), l = !0, !1;
      }), l;
    }
    /**
     * Check if an border already exists in the customSelections, and if true reset cellRange.
     *
     * @private
     * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and
     *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.
     * @param {CellRange} cellRange The selection range to check.
     * @param {string} [place] Coordinate where add/remove border - `top`, `bottom`, `start`, `end`.
     * @returns {boolean}
     */
  }, {
    key: "checkCustomSelections",
    value: function(o, i, a) {
      var l = this.countHide(o), s = !1;
      return l === 4 ? (this.removeAllBorders(o.row, o.col), s = !0) : I(this.hot.selection.highlight.customSelections, function(u) {
        if (o.id === u.settings.id)
          return u.visualCellRange = i, u.commit(), a && Ye(u.instanceBorders, function(f) {
            f.changeBorderStyle(a, o);
          }), s = !0, !1;
      }), s;
    }
    /**
     * Change borders from settings.
     *
     * @private
     */
  }, {
    key: "changeBorderSettings",
    value: function() {
      var o = this.hot.getSettings()[_y];
      if (Array.isArray(o)) {
        var i = mr(o);
        this.checkSettingsCohesion(i), i.length || (this.savedBorders = i), this.createCustomBorders(i);
      } else
        o !== void 0 && this.createCustomBorders(this.savedBorders);
    }
    /**
     * Checks the settings cohesion. The properties such like "left"/"right" are supported only
     * in the LTR mode and the "left"/"right" options can not be used together with "start"/"end" properties.
     *
     * @private
     * @param {object[]} customBorders The user defined custom border objects array.
     */
  }, {
    key: "checkSettingsCohesion",
    value: function(o) {
      var i = b1e(o), a = w1e(o);
      if (i && a)
        throw new Error('The "left"/"right" and "start"/"end" options should not be used together. Please use only the option "start"/"end".');
      if (this.hot.isRtl() && i)
        throw new Error('The "left"/"right" properties are not supported for RTL. Please use option "start"/"end".');
    }
    /**
     * Add border options to context menu.
     *
     * @private
     * @param {object} defaultOptions Context menu items.
     */
  }, {
    key: "onAfterContextMenuDefaultOptions",
    value: function(o) {
      this.hot.getSettings()[_y] && o.items.push({
        name: "---------"
      }, {
        key: "borders",
        name: function() {
          return this.getTranslatedPhrase(p0);
        },
        disabled: function() {
          return this.selection.isSelectedByCorner();
        },
        submenu: {
          items: [T1e(this), E1e(this), _1e(this), O1e(this), R1e(this)]
        }
      });
    }
    /**
     * `afterInit` hook callback.
     *
     * @private
     */
  }, {
    key: "onAfterInit",
    value: function() {
      this.changeBorderSettings();
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      ca(wo(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return _y;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return B1e;
    }
  }]), r;
}(ft);
function gu(e) {
  "@babel/helpers - typeof";
  return gu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, gu(e);
}
function W1e(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function JD(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, z1e(n.key), n);
  }
}
function U1e(e, t, r) {
  return t && JD(e.prototype, t), r && JD(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function z1e(e) {
  var t = Y1e(e, "string");
  return gu(t) === "symbol" ? t : String(t);
}
function Y1e(e, t) {
  if (gu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (gu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function ha() {
  return typeof Reflect < "u" && Reflect.get ? ha = Reflect.get.bind() : ha = function(t, r, n) {
    var o = G1e(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, ha.apply(this, arguments);
}
function G1e(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = So(e), e !== null); )
    ;
  return e;
}
function K1e(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && IO(e, t);
}
function IO(e, t) {
  return IO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, IO(e, t);
}
function q1e(e) {
  var t = Z1e();
  return function() {
    var n = So(e), o;
    if (t) {
      var i = So(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return X1e(this, o);
  };
}
function X1e(e, t) {
  if (t && (gu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return YU(e);
}
function YU(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function Z1e() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function So(e) {
  return So = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, So(e);
}
var eN = "dragToScroll", Q1e = 100, J1e = /* @__PURE__ */ function(e) {
  K1e(r, e);
  var t = q1e(r);
  function r(n) {
    var o;
    return W1e(this, r), o = t.call(this, n), o.eventManager = new It(YU(o)), o.boundaries = null, o.callback = null, o.listening = !1, o;
  }
  return U1e(r, [{
    key: "isEnabled",
    value: function() {
      return !!this.hot.getSettings()[eN];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      this.enabled || (this.addHook("afterOnCellMouseDown", function(i) {
        return o.setupListening(i);
      }), this.addHook("afterOnCellCornerMouseDown", function(i) {
        return o.setupListening(i);
      }), this.registerEvents(), ha(So(r.prototype), "enablePlugin", this).call(this));
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`dragToScroll`](@/api/options.md#dragtoscroll)
     */
  }, {
    key: "updatePlugin",
    value: function() {
      this.disablePlugin(), this.enablePlugin(), ha(So(r.prototype), "updatePlugin", this).call(this);
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      this.unregisterEvents(), ha(So(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Sets the value of the visible element.
     *
     * @param {DOMRect} boundaries An object with coordinates compatible with DOMRect.
     */
  }, {
    key: "setBoundaries",
    value: function(o) {
      this.boundaries = o;
    }
    /**
     * Changes callback function.
     *
     * @param {Function} callback The callback function.
     */
  }, {
    key: "setCallback",
    value: function(o) {
      this.callback = o;
    }
    /**
     * Checks if the mouse position (X, Y) is outside of the viewport and fires a callback with calculated X an Y diffs
     * between passed boundaries.
     *
     * @param {number} x Mouse X coordinate to check.
     * @param {number} y Mouse Y coordinate to check.
     */
  }, {
    key: "check",
    value: function(o, i) {
      var a = 0, l = 0;
      i < this.boundaries.top ? l = i - this.boundaries.top : i > this.boundaries.bottom && (l = i - this.boundaries.bottom), o < this.boundaries.left ? a = o - this.boundaries.left : o > this.boundaries.right && (a = o - this.boundaries.right), this.callback(a, l);
    }
    /**
     * Enables listening on `mousemove` event.
     *
     * @private
     */
  }, {
    key: "listen",
    value: function() {
      this.listening = !0;
    }
    /**
     * Disables listening on `mousemove` event.
     *
     * @private
     */
  }, {
    key: "unlisten",
    value: function() {
      this.listening = !1;
    }
    /**
     * Returns current state of listening.
     *
     * @private
     * @returns {boolean}
     */
  }, {
    key: "isListening",
    value: function() {
      return this.listening;
    }
    /**
     * Registers dom listeners.
     *
     * @private
     */
  }, {
    key: "registerEvents",
    value: function() {
      for (var o = this, i = this.hot.rootWindow, a = i; a; )
        this.eventManager.addEventListener(a.document, "contextmenu", function() {
          return o.unlisten();
        }), this.eventManager.addEventListener(a.document, "mouseup", function() {
          return o.unlisten();
        }), this.eventManager.addEventListener(a.document, "mousemove", function(l) {
          return o.onMouseMove(l);
        }), a = Up(a);
    }
    /**
     * Unbinds the events used by the plugin.
     *
     * @private
     */
  }, {
    key: "unregisterEvents",
    value: function() {
      this.eventManager.clear();
    }
    /**
     * On after on cell/cellCorner mouse down listener.
     *
     * @private
     * @param {MouseEvent} event The mouse event object.
     */
  }, {
    key: "setupListening",
    value: function(o) {
      if (!Na(o)) {
        var i = this.hot.view._wt.wtTable.holder;
        i !== this.hot.rootWindow && (this.setBoundaries(i.getBoundingClientRect()), this.setCallback(function(a, l) {
          a < 0 ? i.scrollLeft -= 50 : a > 0 && (i.scrollLeft += 50), l < 0 ? i.scrollTop -= 20 : l > 0 && (i.scrollTop += 20);
        }), this.listen());
      }
    }
    /**
     * 'mouseMove' event callback.
     *
     * @private
     * @param {MouseEvent} event `mousemove` event properties.
     */
  }, {
    key: "onMouseMove",
    value: function(o) {
      this.isListening() && this.check(o.clientX, o.clientY);
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      ha(So(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return eN;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return Q1e;
    }
  }]), r;
}(ft);
function bu(e) {
  "@babel/helpers - typeof";
  return bu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, bu(e);
}
function eMe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function tN(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, rMe(n.key), n);
  }
}
function tMe(e, t, r) {
  return t && tN(e.prototype, t), r && tN(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function rMe(e) {
  var t = nMe(e, "string");
  return bu(t) === "symbol" ? t : String(t);
}
function nMe(e, t) {
  if (bu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (bu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function da() {
  return typeof Reflect < "u" && Reflect.get ? da = Reflect.get.bind() : da = function(t, r, n) {
    var o = oMe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, da.apply(this, arguments);
}
function oMe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Co(e), e !== null); )
    ;
  return e;
}
function iMe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && MO(e, t);
}
function MO(e, t) {
  return MO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, MO(e, t);
}
function aMe(e) {
  var t = sMe();
  return function() {
    var n = Co(e), o;
    if (t) {
      var i = Co(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return lMe(this, o);
  };
}
function lMe(e, t) {
  if (t && (bu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return GU(e);
}
function GU(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function sMe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Co(e) {
  return Co = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Co(e);
}
we.getSingleton().register("afterDropdownMenuDefaultOptions");
we.getSingleton().register("beforeDropdownMenuShow");
we.getSingleton().register("afterDropdownMenuShow");
we.getSingleton().register("afterDropdownMenuHide");
we.getSingleton().register("afterDropdownMenuExecute");
var hS = "dropdownMenu", uMe = 230, dS = "changeType", KU = /* @__PURE__ */ function(e) {
  iMe(r, e);
  var t = aMe(r);
  function r(n) {
    var o;
    return eMe(this, r), o = t.call(this, n), o.eventManager = new It(GU(o)), o.commandExecutor = new kU(o.hot), o.itemsFactory = null, o.menu = null, o.hot.addHook("afterGetColHeader", function(i, a) {
      return o.onAfterGetColHeader(i, a);
    }), o;
  }
  return tMe(r, [{
    key: "isEnabled",
    value: function() {
      return this.hot.getSettings()[hS];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     *
     * @fires Hooks#afterDropdownMenuDefaultOptions
     * @fires Hooks#beforeDropdownMenuSetItems
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      if (!this.enabled) {
        this.itemsFactory = new AU(this.hot, r.DEFAULT_ITEMS);
        var i = this.hot.getSettings()[hS], a = {
          items: this.itemsFactory.getItems(i)
        };
        this.registerEvents(), typeof i.callback == "function" && this.commandExecutor.setCommonCallback(i.callback), da(Co(r.prototype), "enablePlugin", this).call(this), this.callOnPluginsReady(function() {
          o.hot.runHooks("afterDropdownMenuDefaultOptions", a), o.itemsFactory.setPredefinedItems(a.items);
          var l = o.itemsFactory.getItems(i);
          o.menu && o.menu.destroy(), o.menu = new EP(o.hot, {
            className: "htDropdownMenu",
            keepInViewport: !0,
            container: i.uiContainer || o.hot.rootDocument.body
          }), o.hot.runHooks("beforeDropdownMenuSetItems", l), o.menu.setMenuItems(l), o.menu.addLocalHook("beforeOpen", function() {
            return o.onMenuBeforeOpen();
          }), o.menu.addLocalHook("afterOpen", function() {
            return o.onMenuAfterOpen();
          }), o.menu.addLocalHook("afterClose", function() {
            return o.onMenuAfterClose();
          }), o.menu.addLocalHook("executeCommand", function() {
            for (var s, u = arguments.length, f = new Array(u), c = 0; c < u; c++)
              f[c] = arguments[c];
            return (s = o.executeCommand).call.apply(s, [o].concat(f));
          }), I(l, function(s) {
            return o.commandExecutor.registerCommand(s.key, s);
          });
        });
      }
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`dropdownMenu`](@/api/options.md#dropdownmenu)
     */
  }, {
    key: "updatePlugin",
    value: function() {
      this.disablePlugin(), this.enablePlugin(), da(Co(r.prototype), "updatePlugin", this).call(this);
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      this.close(), this.menu && this.menu.destroy(), da(Co(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Registers the DOM listeners.
     *
     * @private
     */
  }, {
    key: "registerEvents",
    value: function() {
      var o = this;
      this.eventManager.addEventListener(this.hot.rootElement, "click", function(i) {
        return o.onTableClick(i);
      });
    }
    /**
     * Opens menu and re-position it based on the passed coordinates.
     *
     * @param {object|Event} position An object with `pageX` and `pageY` properties which contains values relative to
     *                                the top left of the fully rendered content area in the browser or with `clientX`
     *                                and `clientY`  properties which contains values relative to the upper left edge
     *                                of the content area (the viewport) of the browser window. This object is structurally
     *                                compatible with native mouse event so it can be used either.
     * @fires Hooks#beforeDropdownMenuShow
     * @fires Hooks#afterDropdownMenuShow
     */
  }, {
    key: "open",
    value: function(o) {
      this.menu && (this.menu.open(), o.width && this.menu.setOffset("left", o.width), this.menu.setPosition(o));
    }
    /**
     * Closes dropdown menu.
     */
  }, {
    key: "close",
    value: function() {
      this.menu && this.menu.close();
    }
    /**
     * Executes context menu command.
     *
     * The `executeCommand()` method works only for selected cells.
     *
     * When no cells are selected, `executeCommand()` doesn't do anything.
     *
     * You can execute all predefined commands:
     *  * `'row_above'` - Insert row above
     *  * `'row_below'` - Insert row below
     *  * `'col_left'` - Insert column left
     *  * `'col_right'` - Insert column right
     *  * `'clear_column'` - Clear selected column
     *  * `'remove_row'` - Remove row
     *  * `'remove_col'` - Remove column
     *  * `'undo'` - Undo last action
     *  * `'redo'` - Redo last action
     *  * `'make_read_only'` - Make cell read only
     *  * `'alignment:left'` - Alignment to the left
     *  * `'alignment:top'` - Alignment to the top
     *  * `'alignment:right'` - Alignment to the right
     *  * `'alignment:bottom'` - Alignment to the bottom
     *  * `'alignment:middle'` - Alignment to the middle
     *  * `'alignment:center'` - Alignment to the center (justify).
     *
     * Or you can execute command registered in settings where `key` is your command name.
     *
     * @param {string} commandName Command name to execute.
     * @param {*} params Additional parameters passed to the command executor.
     */
  }, {
    key: "executeCommand",
    value: function(o) {
      for (var i, a = arguments.length, l = new Array(a > 1 ? a - 1 : 0), s = 1; s < a; s++)
        l[s - 1] = arguments[s];
      (i = this.commandExecutor).execute.apply(i, [o].concat(l));
    }
    /**
     * Turns on / off listening on dropdown menu.
     *
     * @private
     * @param {boolean} listen Turn on listening when value is set to true, otherwise turn it off.
     */
  }, {
    key: "setListening",
    value: function() {
      var o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
      this.menu.isOpened() && (o ? this.menu.hotMenu.listen() : this.menu.hotMenu.unlisten());
    }
    /**
     * Table click listener.
     *
     * @private
     * @param {Event} event The mouse event object.
     */
  }, {
    key: "onTableClick",
    value: function(o) {
      if (o.stopPropagation(), Me(o.target, dS) && !this.menu.isOpened()) {
        var i = 0, a = 0;
        if (this.hot.rootDocument !== this.menu.container.ownerDocument) {
          var l = this.hot.rootWindow.frameElement, s = l.getBoundingClientRect(), u = s.top, f = s.left;
          i = u, a = f;
        }
        var c = o.target.getBoundingClientRect();
        this.open({
          left: c.left + a,
          top: c.top + o.target.offsetHeight + 3 + i,
          width: c.width,
          height: c.height
        });
      }
    }
    /**
     * On after get column header listener.
     *
     * @private
     * @param {number} col Visual column index.
     * @param {HTMLTableCellElement} TH Header's TH element.
     */
  }, {
    key: "onAfterGetColHeader",
    value: function(o, i) {
      var a = i.parentNode;
      if (a) {
        var l = a.parentNode.childNodes, s = Array.prototype.indexOf.call(l, a);
        if (!(o < 0 || s !== l.length - 1)) {
          var u = i.querySelector(".".concat(dS));
          if (!(this.enabled && u)) {
            if (!this.enabled) {
              u && u.parentNode.removeChild(u);
              return;
            }
            var f = this.hot.rootDocument.createElement("button");
            f.className = dS, f.type = "button", f.onclick = function() {
              return !1;
            }, i.firstChild.insertBefore(f, i.firstChild.firstChild);
          }
        }
      }
    }
    /**
     * On menu before open listener.
     *
     * @private
     * @fires Hooks#beforeDropdownMenuShow
     */
  }, {
    key: "onMenuBeforeOpen",
    value: function() {
      this.hot.runHooks("beforeDropdownMenuShow", this);
    }
    /**
     * On menu after open listener.
     *
     * @private
     * @fires Hooks#afterDropdownMenuShow
     */
  }, {
    key: "onMenuAfterOpen",
    value: function() {
      this.hot.runHooks("afterDropdownMenuShow", this);
    }
    /**
     * On menu after close listener.
     *
     * @private
     * @fires Hooks#afterDropdownMenuHide
     */
  }, {
    key: "onMenuAfterClose",
    value: function() {
      this.hot.listen(), this.hot.runHooks("afterDropdownMenuHide", this);
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      this.close(), this.menu && this.menu.destroy(), da(Co(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return hS;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return uMe;
    }
  }, {
    key: "PLUGIN_DEPS",
    get: function() {
      return ["plugin:AutoColumnSize"];
    }
    /**
     * Default menu items order when `dropdownMenu` is enabled by setting the config item to `true`.
     *
     * @returns {Array}
     */
  }, {
    key: "DEFAULT_ITEMS",
    get: function() {
      return [Cv, _v, We, Rv, We, eb, We, Ov, We, Kr];
    }
  }]), r;
}(ft);
KU.SEPARATOR = {
  name: We
};
function fd(e) {
  "@babel/helpers - typeof";
  return fd = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, fd(e);
}
function fMe(e, t) {
  return vMe(e) || dMe(e, t) || hMe(e, t) || cMe();
}
function cMe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function hMe(e, t) {
  if (e) {
    if (typeof e == "string")
      return rN(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return rN(e, t);
  }
}
function rN(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function dMe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function vMe(e) {
  if (Array.isArray(e))
    return e;
}
function yMe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function nN(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, mMe(n.key), n);
  }
}
function pMe(e, t, r) {
  return t && nN(e.prototype, t), r && nN(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function mMe(e) {
  var t = gMe(e, "string");
  return fd(t) === "symbol" ? t : String(t);
}
function gMe(e, t) {
  if (fd(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (fd(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var bMe = /* @__PURE__ */ function() {
  function e(t) {
    yMe(this, e), this.hot = t, this.options = {};
  }
  return pMe(e, [{
    key: "setOptions",
    value: function(r) {
      this.options = r;
    }
    /**
     * Get table data based on provided settings to the class constructor.
     *
     * @returns {Array}
     */
  }, {
    key: "getData",
    value: function() {
      var r = this, n = this._getDataRange(), o = n.startRow, i = n.startCol, a = n.endRow, l = n.endCol, s = this.options, u = [];
      return _e(o, a, function(f) {
        var c = [];
        !s.exportHiddenRows && r._isHiddenRow(f) || (_e(i, l, function(h) {
          !s.exportHiddenColumns && r._isHiddenColumn(h) || c.push(r.hot.getDataAtCell(f, h));
        }), u.push(c));
      }), u;
    }
    /**
     * Gets list of row headers.
     *
     * @returns {Array}
     */
  }, {
    key: "getRowHeaders",
    value: function() {
      var r = this, n = [];
      if (this.options.rowHeaders) {
        var o = this._getDataRange(), i = o.startRow, a = o.endRow, l = this.hot.getRowHeader();
        _e(i, a, function(s) {
          !r.options.exportHiddenRows && r._isHiddenRow(s) || n.push(l[s]);
        });
      }
      return n;
    }
    /**
     * Gets list of columns headers.
     *
     * @returns {Array}
     */
  }, {
    key: "getColumnHeaders",
    value: function() {
      var r = this, n = [];
      if (this.options.columnHeaders) {
        var o = this._getDataRange(), i = o.startCol, a = o.endCol, l = this.hot.getColHeader();
        _e(i, a, function(s) {
          !r.options.exportHiddenColumns && r._isHiddenColumn(s) || n.push(l[s]);
        });
      }
      return n;
    }
    /**
     * Get data range object based on settings provided in the class constructor.
     *
     * @private
     * @returns {object} Returns object with keys `startRow`, `startCol`, `endRow` and `endCol`.
     */
  }, {
    key: "_getDataRange",
    value: function() {
      var r = this.hot.countCols() - 1, n = this.hot.countRows() - 1, o = fMe(this.options.range, 4), i = o[0], a = i === void 0 ? 0 : i, l = o[1], s = l === void 0 ? 0 : l, u = o[2], f = u === void 0 ? n : u, c = o[3], h = c === void 0 ? r : c;
      return a = Math.max(a, 0), s = Math.max(s, 0), f = Math.min(f, n), h = Math.min(h, r), {
        startRow: a,
        startCol: s,
        endRow: f,
        endCol: h
      };
    }
    /**
     * Check if row at specified row index is hidden.
     *
     * @private
     * @param {number} row Row index.
     * @returns {boolean}
     */
  }, {
    key: "_isHiddenRow",
    value: function(r) {
      return this.hot.rowIndexMapper.isHidden(this.hot.toPhysicalRow(r));
    }
    /**
     * Check if column at specified column index is hidden.
     *
     * @private
     * @param {number} column Visual column index.
     * @returns {boolean}
     */
  }, {
    key: "_isHiddenColumn",
    value: function(r) {
      return this.hot.columnIndexMapper.isHidden(this.hot.toPhysicalColumn(r));
    }
  }]), e;
}();
const wMe = bMe;
function cd(e) {
  "@babel/helpers - typeof";
  return cd = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, cd(e);
}
function SMe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function oN(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, _Me(n.key), n);
  }
}
function CMe(e, t, r) {
  return t && oN(e.prototype, t), r && oN(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function _Me(e) {
  var t = OMe(e, "string");
  return cd(t) === "symbol" ? t : String(t);
}
function OMe(e, t) {
  if (cd(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (cd(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var RMe = /* @__PURE__ */ function() {
  function e(t, r) {
    SMe(this, e), this.dataProvider = t, this.options = this._mergeOptions(r), this.dataProvider.setOptions(this.options);
  }
  return CMe(e, [{
    key: "_mergeOptions",
    value: function(r) {
      var n = Tr(this.constructor.DEFAULT_OPTIONS), o = /* @__PURE__ */ new Date();
      return n = Gt(Tr(e.DEFAULT_OPTIONS), n), n = Gt(n, r), n.filename = wV(n.filename, {
        YYYY: o.getFullYear(),
        MM: "".concat(o.getMonth() + 1).padStart(2, "0"),
        DD: "".concat(o.getDate()).padStart(2, "0")
      }), n;
    }
  }], [{
    key: "DEFAULT_OPTIONS",
    get: (
      /**
       * Default options.
       *
       * @returns {object}
       */
      function() {
        return {
          mimeType: "text/plain",
          fileExtension: "txt",
          filename: "Handsontable [YYYY]-[MM]-[DD]",
          encoding: "utf-8",
          bom: !1,
          columnHeaders: !1,
          rowHeaders: !1,
          exportHiddenColumns: !1,
          exportHiddenRows: !1,
          range: []
        };
      }
    )
  }]), e;
}();
const EMe = RMe;
function wu(e) {
  "@babel/helpers - typeof";
  return wu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, wu(e);
}
function TMe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function iN(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, kMe(n.key), n);
  }
}
function PMe(e, t, r) {
  return t && iN(e.prototype, t), r && iN(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function kMe(e) {
  var t = $Me(e, "string");
  return wu(t) === "symbol" ? t : String(t);
}
function $Me(e, t) {
  if (wu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (wu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function AMe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && xO(e, t);
}
function xO(e, t) {
  return xO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, xO(e, t);
}
function IMe(e) {
  var t = DMe();
  return function() {
    var n = Dm(e), o;
    if (t) {
      var i = Dm(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return MMe(this, o);
  };
}
function MMe(e, t) {
  if (t && (wu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return xMe(e);
}
function xMe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function DMe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Dm(e) {
  return Dm = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Dm(e);
}
var NMe = String.fromCharCode(13), HMe = String.fromCharCode(34), LMe = String.fromCharCode(10), jMe = /* @__PURE__ */ function(e) {
  AMe(r, e);
  var t = IMe(r);
  function r() {
    return TMe(this, r), t.apply(this, arguments);
  }
  return PMe(r, [{
    key: "export",
    value: (
      /**
       * Create string body in desired format.
       *
       * @returns {string}
       */
      function() {
        var o = this, i = this.options, a = this.dataProvider.getData(), l = this.dataProvider.getColumnHeaders(), s = l.length > 0, u = this.dataProvider.getRowHeaders(), f = u.length > 0, c = i.bom ? String.fromCharCode(65279) : "";
        return s && (l = Ue(l, function(h) {
          return o._escapeCell(h, !0);
        }), f && (c += i.columnDelimiter), c += l.join(i.columnDelimiter), c += i.rowDelimiter), I(a, function(h, d) {
          d > 0 && (c += i.rowDelimiter), f && (c += o._escapeCell(u[d]) + i.columnDelimiter), c += h.map(function(y) {
            return o._escapeCell(y);
          }).join(i.columnDelimiter);
        }), c;
      }
    )
    /**
     * Escape cell value.
     *
     * @param {*} value Cell value.
     * @param {boolean} [force=false] Indicates if cell value will be escaped forcefully.
     * @returns {string}
     */
  }, {
    key: "_escapeCell",
    value: function(o) {
      var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, a = Ft(o);
      return a !== "" && (i || a.indexOf(NMe) >= 0 || a.indexOf(HMe) >= 0 || a.indexOf(LMe) >= 0 || a.indexOf(this.options.columnDelimiter) >= 0) && (a = a.replace(new RegExp('"', "g"), '""'), a = '"'.concat(a, '"')), a;
    }
  }], [{
    key: "DEFAULT_OPTIONS",
    get: (
      /**
       * Default options for exporting CSV format.
       *
       * @returns {object}
       */
      function() {
        return {
          mimeType: "text/csv",
          fileExtension: "csv",
          bom: !0,
          columnDelimiter: ",",
          rowDelimiter: `\r
`
        };
      }
    )
  }]), r;
}(EMe);
const FMe = jMe;
function hd(e) {
  "@babel/helpers - typeof";
  return hd = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, hd(e);
}
function BMe(e, t, r) {
  return t = VMe(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function VMe(e) {
  var t = WMe(e, "string");
  return hd(t) === "symbol" ? t : String(t);
}
function WMe(e, t) {
  if (hd(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (hd(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var UMe = "csv", DO = BMe({}, UMe, FMe);
function zMe(e, t, r) {
  return typeof DO[e] == "function" ? new DO[e](t, r) : null;
}
function Su(e) {
  "@babel/helpers - typeof";
  return Su = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Su(e);
}
function YMe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function aN(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, KMe(n.key), n);
  }
}
function GMe(e, t, r) {
  return t && aN(e.prototype, t), r && aN(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function KMe(e) {
  var t = qMe(e, "string");
  return Su(t) === "symbol" ? t : String(t);
}
function qMe(e, t) {
  if (Su(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Su(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function XMe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && NO(e, t);
}
function NO(e, t) {
  return NO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, NO(e, t);
}
function ZMe(e) {
  var t = exe();
  return function() {
    var n = Nm(e), o;
    if (t) {
      var i = Nm(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return QMe(this, o);
  };
}
function QMe(e, t) {
  if (t && (Su(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return JMe(e);
}
function JMe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function exe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Nm(e) {
  return Nm = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Nm(e);
}
var txe = "exportFile", rxe = 240, nxe = /* @__PURE__ */ function(e) {
  XMe(r, e);
  var t = ZMe(r);
  function r() {
    return YMe(this, r), t.apply(this, arguments);
  }
  return GMe(r, [{
    key: "isEnabled",
    value: (
      /**
       * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
       * hook and if it returns `true` then the {@link ExportFile#enablePlugin} method is called.
       *
       * @returns {boolean}
       */
      function() {
        return !0;
      }
    )
    /**
     * @typedef ExportOptions
     * @memberof ExportFile
     * @type {object}
     * @property {boolean} [exportHiddenRows=false] Include hidden rows in the exported file.
     * @property {boolean} [exportHiddenColumns=false] Include hidden columns in the exported file.
     * @property {boolean} [columnHeaders=false] Include column headers in the exported file.
     * @property {boolean} [rowHeaders=false] Include row headers in the exported file.
     * @property {string} [columnDelimiter=','] Column delimiter.
     * @property {string} [range=[]] Cell range that will be exported to file.
     */
    /**
     * Exports table data as a string.
     *
     * @param {string} format Export format type eq. `'csv'`.
     * @param {ExportOptions} options Export options.
     * @returns {string}
     */
  }, {
    key: "exportAsString",
    value: function(o) {
      var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      return this._createTypeFormatter(o, i).export();
    }
    /**
     * Exports table data as a blob object.
     *
     * @param {string} format Export format type eq. `'csv'`.
     * @param {ExportOptions} options Export options.
     * @returns {Blob}
     */
  }, {
    key: "exportAsBlob",
    value: function(o) {
      var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      return this._createBlob(this._createTypeFormatter(o, i));
    }
    /**
     * Exports table data as a downloadable file.
     *
     * @param {string} format Export format type eq. `'csv'`.
     * @param {ExportOptions} options Export options.
     */
  }, {
    key: "downloadFile",
    value: function(o) {
      var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, a = this.hot, l = a.rootDocument, s = a.rootWindow, u = this._createTypeFormatter(o, i), f = this._createBlob(u), c = s.URL || s.webkitURL, h = l.createElement("a"), d = "".concat(u.options.filename, ".").concat(u.options.fileExtension);
      if (h.download !== void 0) {
        var y = c.createObjectURL(f);
        h.style.display = "none", h.setAttribute("href", y), h.setAttribute("download", d), l.body.appendChild(h), h.dispatchEvent(new MouseEvent("click")), l.body.removeChild(h), setTimeout(function() {
          c.revokeObjectURL(y);
        }, 100);
      } else
        navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob(f, d);
    }
    /**
     * Creates and returns class formatter for specified export type.
     *
     * @private
     * @param {string} format Export format type eq. `'csv'`.
     * @param {ExportOptions} options Export options.
     * @returns {BaseType}
     */
  }, {
    key: "_createTypeFormatter",
    value: function(o) {
      var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (!DO[o])
        throw new Error('Export format type "'.concat(o, '" is not supported.'));
      return zMe(o, new wMe(this.hot), i);
    }
    /**
     * Creates blob object based on provided type formatter class.
     *
     * @private
     * @param {BaseType} typeFormatter The instance of the specyfic formatter/exporter.
     * @returns {Blob}
     */
  }, {
    key: "_createBlob",
    value: function(o) {
      var i = null;
      return typeof Blob < "u" && (i = new Blob([o.export()], {
        type: "".concat(o.options.mimeType, ";charset=").concat(o.options.encoding)
      })), i;
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return txe;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return rxe;
    }
  }]), r;
}(ft);
function dd(e) {
  "@babel/helpers - typeof";
  return dd = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, dd(e);
}
function oxe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function lN(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, axe(n.key), n);
  }
}
function ixe(e, t, r) {
  return t && lN(e.prototype, t), r && lN(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function axe(e) {
  var t = lxe(e, "string");
  return dd(t) === "symbol" ? t : String(t);
}
function lxe(e, t) {
  if (dd(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (dd(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var qU = /* @__PURE__ */ function() {
  function e(t, r) {
    var n = r.id, o = r.stateless, i = o === void 0 ? !0 : o;
    oxe(this, e), this.hot = t, this.id = n, this.elements = [], this.hidden = !1, this.stateId = "Filters.component.".concat(this.id), this.state = i ? null : this.hot.columnIndexMapper.registerMap(this.stateId, new Mg());
  }
  return ixe(e, [{
    key: "reset",
    value: function() {
      I(this.elements, function(r) {
        return r.reset();
      });
    }
    /**
     * Hide component.
     */
  }, {
    key: "hide",
    value: function() {
      this.hidden = !0;
    }
    /**
     * Show component.
     */
  }, {
    key: "show",
    value: function() {
      this.hidden = !1;
    }
    /**
     * Check if component is hidden.
     *
     * @returns {boolean}
     */
  }, {
    key: "isHidden",
    value: function() {
      return this.hot === null || this.hidden;
    }
    /**
     * Restores the component state from the given physical column index. The method
     * internally calls the `setState` method. The state then is individually processed
     * by each component.
     *
     * @param {number} physicalColumn The physical column index.
     */
  }, {
    key: "restoreState",
    value: function(r) {
      this.state && this.setState(this.state.getValueAtIndex(r));
    }
    /**
     * The custom logic for component state restoring.
     */
  }, {
    key: "setState",
    value: function() {
      throw new Error("The state setting logic is not implemented");
    }
    /**
     * Saves the component state to the given physical column index. The method
     * internally calls the `getState` method, which returns the current state of
     * the component.
     *
     * @param {number} physicalColumn The physical column index.
     */
  }, {
    key: "saveState",
    value: function(r) {
      this.state && this.state.setValueAtIndex(r, this.getState());
    }
    /**
     * The custom logic for component state gathering (for stateful components).
     */
  }, {
    key: "getState",
    value: function() {
      throw new Error("The state gathering logic is not implemented");
    }
    /**
     * Destroy element.
     */
  }, {
    key: "destroy",
    value: function() {
      this.hot.columnIndexMapper.unregisterMap(this.stateId), this.clearLocalHooks(), I(this.elements, function(r) {
        return r.destroy();
      }), this.state = null, this.elements = null, this.hot = null;
    }
  }]), e;
}();
bt(qU, $r);
const lb = qU;
var vd = {};
function Ei(e, t) {
  if (!vd[e])
    throw Error('Filter condition "'.concat(e, '" does not exist.'));
  var r = vd[e], n = r.condition, o = r.descriptor, i = t;
  return o.inputValuesDecorator && (i = o.inputValuesDecorator(i)), function(a) {
    return n.apply(a.meta.instance, [].concat([a], [i]));
  };
}
function va(e) {
  if (!vd[e])
    throw Error('Filter condition "'.concat(e, '" does not exist.'));
  return vd[e].descriptor;
}
function Ut(e, t, r) {
  r.key = e, vd[e] = {
    condition: t,
    descriptor: r
  };
}
var Jt = "none";
function sxe() {
  return !0;
}
Ut(Jt, sxe, {
  name: xg,
  inputsCount: 0,
  showOperators: !1
});
var Ec = "empty";
function uxe(e) {
  return Xt(e.value);
}
Ut(Ec, uxe, {
  name: P0,
  inputsCount: 0,
  showOperators: !0
});
var mp = "not_empty";
function fxe(e, t) {
  return !Ei(Ec, t)(e);
}
Ut(mp, fxe, {
  name: k0,
  inputsCount: 0,
  showOperators: !0
});
function cxe(e, t) {
  return yxe(e) || vxe(e, t) || dxe(e, t) || hxe();
}
function hxe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function dxe(e, t) {
  if (e) {
    if (typeof e == "string")
      return sN(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return sN(e, t);
  }
}
function sN(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function vxe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function yxe(e) {
  if (Array.isArray(e))
    return e;
}
var Tc = "eq";
function pxe(e, t) {
  var r = cxe(t, 1), n = r[0];
  return Ft(e.value).toLocaleLowerCase(e.meta.locale) === Ft(n);
}
Ut(Tc, pxe, {
  name: $0,
  inputsCount: 1,
  showOperators: !0
});
var gp = "neq";
function mxe(e, t) {
  return !Ei(Tc, t)(e);
}
Ut(gp, mxe, {
  name: A0,
  inputsCount: 1,
  showOperators: !0
});
function gxe(e, t) {
  return Cxe(e) || Sxe(e, t) || wxe(e, t) || bxe();
}
function bxe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function wxe(e, t) {
  if (e) {
    if (typeof e == "string")
      return uN(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return uN(e, t);
  }
}
function uN(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function Sxe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function Cxe(e) {
  if (Array.isArray(e))
    return e;
}
var XU = "gt";
function _xe(e, t) {
  var r = gxe(t, 1), n = r[0], o = n;
  return e.meta.type === "numeric" && (o = parseFloat(o, 10)), e.value > o;
}
Ut(XU, _xe, {
  name: N0,
  inputsCount: 1,
  showOperators: !0
});
function Oxe(e, t) {
  return Pxe(e) || Txe(e, t) || Exe(e, t) || Rxe();
}
function Rxe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Exe(e, t) {
  if (e) {
    if (typeof e == "string")
      return fN(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return fN(e, t);
  }
}
function fN(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function Txe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function Pxe(e) {
  if (Array.isArray(e))
    return e;
}
var ZU = "gte";
function kxe(e, t) {
  var r = Oxe(t, 1), n = r[0], o = n;
  return e.meta.type === "numeric" && (o = parseFloat(o, 10)), e.value >= o;
}
Ut(ZU, kxe, {
  name: H0,
  inputsCount: 1,
  showOperators: !0
});
function $xe(e, t) {
  return xxe(e) || Mxe(e, t) || Ixe(e, t) || Axe();
}
function Axe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Ixe(e, t) {
  if (e) {
    if (typeof e == "string")
      return cN(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return cN(e, t);
  }
}
function cN(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function Mxe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function xxe(e) {
  if (Array.isArray(e))
    return e;
}
var QU = "lt";
function Dxe(e, t) {
  var r = $xe(t, 1), n = r[0], o = n;
  return e.meta.type === "numeric" && (o = parseFloat(o, 10)), e.value < o;
}
Ut(QU, Dxe, {
  name: L0,
  inputsCount: 1,
  showOperators: !0
});
function Nxe(e, t) {
  return Fxe(e) || jxe(e, t) || Lxe(e, t) || Hxe();
}
function Hxe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Lxe(e, t) {
  if (e) {
    if (typeof e == "string")
      return hN(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return hN(e, t);
  }
}
function hN(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function jxe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function Fxe(e) {
  if (Array.isArray(e))
    return e;
}
var JU = "lte";
function Bxe(e, t) {
  var r = Nxe(t, 1), n = r[0], o = n;
  return e.meta.type === "numeric" && (o = parseFloat(o, 10)), e.value <= o;
}
Ut(JU, Bxe, {
  name: j0,
  inputsCount: 1,
  showOperators: !0
});
function Vxe(e, t) {
  return Yxe(e) || zxe(e, t) || Uxe(e, t) || Wxe();
}
function Wxe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Uxe(e, t) {
  if (e) {
    if (typeof e == "string")
      return dN(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return dN(e, t);
  }
}
function dN(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function zxe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function Yxe(e) {
  if (Array.isArray(e))
    return e;
}
var PP = "date_after";
function Gxe(e, t) {
  var r = Vxe(t, 1), n = r[0], o = ne(e.value, e.meta.dateFormat), i = ne(n, e.meta.dateFormat);
  return !o.isValid() || !i.isValid() ? !1 : o.diff(i) >= 0;
}
Ut(PP, Gxe, {
  name: V0,
  inputsCount: 1,
  showOperators: !0
});
function Kxe(e, t) {
  return Qxe(e) || Zxe(e, t) || Xxe(e, t) || qxe();
}
function qxe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Xxe(e, t) {
  if (e) {
    if (typeof e == "string")
      return vN(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return vN(e, t);
  }
}
function vN(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function Zxe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function Qxe(e) {
  if (Array.isArray(e))
    return e;
}
var kP = "date_before";
function Jxe(e, t) {
  var r = Kxe(t, 1), n = r[0], o = ne(e.value, e.meta.dateFormat), i = ne(n, e.meta.dateFormat);
  return !o.isValid() || !i.isValid() ? !1 : o.diff(i) <= 0;
}
Ut(kP, Jxe, {
  name: W0,
  inputsCount: 1,
  showOperators: !0
});
function eDe(e, t) {
  return oDe(e) || nDe(e, t) || rDe(e, t) || tDe();
}
function tDe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function rDe(e, t) {
  if (e) {
    if (typeof e == "string")
      return yN(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return yN(e, t);
  }
}
function yN(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function nDe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function oDe(e) {
  if (Array.isArray(e))
    return e;
}
var Hm = "between";
function iDe(e, t) {
  var r = eDe(t, 2), n = r[0], o = r[1], i = n, a = o;
  if (e.meta.type === "numeric") {
    var l = parseFloat(i, 10), s = parseFloat(a, 10);
    i = Math.min(l, s), a = Math.max(l, s);
  } else if (e.meta.type === "date") {
    var u = Ei(kP, [a]), f = Ei(PP, [i]);
    return u(e) && f(e);
  }
  return e.value >= i && e.value <= a;
}
Ut(Hm, iDe, {
  name: F0,
  inputsCount: 2,
  showOperators: !0
});
var ez = "not_between";
function aDe(e, t) {
  return !Ei(Hm, t)(e);
}
Ut(ez, aDe, {
  name: B0,
  inputsCount: 2,
  showOperators: !0
});
function lDe(e, t) {
  return cDe(e) || fDe(e, t) || uDe(e, t) || sDe();
}
function sDe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function uDe(e, t) {
  if (e) {
    if (typeof e == "string")
      return pN(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return pN(e, t);
  }
}
function pN(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function fDe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function cDe(e) {
  if (Array.isArray(e))
    return e;
}
var tz = "begins_with";
function hDe(e, t) {
  var r = lDe(t, 1), n = r[0];
  return Ft(e.value).toLocaleLowerCase(e.meta.locale).startsWith(Ft(n));
}
Ut(tz, hDe, {
  name: I0,
  inputsCount: 1,
  showOperators: !0
});
var dDe = Ie, rz = Zd, vDe = Bn.f, yDe = Qa, mN = Wt, pDe = HE, mDe = Pr, gDe = LE, gN = rz("".endsWith), bDe = rz("".slice), wDe = Math.min, nz = gDe("endsWith"), SDe = !nz && !!function() {
  var e = vDe(String.prototype, "endsWith");
  return e && !e.writable;
}();
dDe({ target: "String", proto: !0, forced: !SDe && !nz }, {
  endsWith: function(t) {
    var r = mN(mDe(this));
    pDe(t);
    var n = arguments.length > 1 ? arguments[1] : void 0, o = r.length, i = n === void 0 ? o : wDe(yDe(n), o), a = mN(t);
    return gN ? gN(r, a, i) : bDe(r, i - a.length, i) === a;
  }
});
function CDe(e, t) {
  return EDe(e) || RDe(e, t) || ODe(e, t) || _De();
}
function _De() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function ODe(e, t) {
  if (e) {
    if (typeof e == "string")
      return bN(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return bN(e, t);
  }
}
function bN(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function RDe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function EDe(e) {
  if (Array.isArray(e))
    return e;
}
var oz = "ends_with";
function TDe(e, t) {
  var r = CDe(t, 1), n = r[0];
  return Ft(e.value).toLocaleLowerCase(e.meta.locale).endsWith(Ft(n));
}
Ut(oz, TDe, {
  name: M0,
  inputsCount: 1,
  showOperators: !0
});
function PDe(e, t) {
  return IDe(e) || ADe(e, t) || $De(e, t) || kDe();
}
function kDe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function $De(e, t) {
  if (e) {
    if (typeof e == "string")
      return wN(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return wN(e, t);
  }
}
function wN(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function ADe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function IDe(e) {
  if (Array.isArray(e))
    return e;
}
var $P = "contains";
function MDe(e, t) {
  var r = PDe(t, 1), n = r[0];
  return Ft(e.value).toLocaleLowerCase(e.meta.locale).indexOf(Ft(n)) >= 0;
}
Ut($P, MDe, {
  name: x0,
  inputsCount: 1,
  showOperators: !0
});
var iz = "not_contains";
function xDe(e, t) {
  return !Ei($P, t)(e);
}
Ut(iz, xDe, {
  name: D0,
  inputsCount: 1,
  showOperators: !0
});
var az = "date_tomorrow";
function DDe(e) {
  var t = ne(e.value, e.meta.dateFormat);
  return t.isValid() ? t.isSame(ne().subtract(-1, "days").startOf("day"), "d") : !1;
}
Ut(az, DDe, {
  name: z0,
  inputsCount: 0
});
var lz = "date_today";
function NDe(e) {
  var t = ne(e.value, e.meta.dateFormat);
  return t.isValid() ? t.isSame(ne().startOf("day"), "d") : !1;
}
Ut(lz, NDe, {
  name: U0,
  inputsCount: 0
});
var sz = "date_yesterday";
function HDe(e) {
  var t = ne(e.value, e.meta.dateFormat);
  return t.isValid() ? t.isSame(ne().subtract(1, "days").startOf("day"), "d") : !1;
}
Ut(sz, HDe, {
  name: Y0,
  inputsCount: 0
});
fee();
function LDe(e, t) {
  var r = e;
  return r === "" && (r = "(".concat(t, ")")), r;
}
var HO = (/* @__PURE__ */ new Set([1])).has(1), jDe = HO && typeof Array.from == "function";
function Ev(e) {
  var t = e;
  return HO && (t = new Set(t)), function(r) {
    var n;
    return HO ? n = t.has(r) : n = !!~t.indexOf(r), n;
  };
}
function uz(e) {
  return e ?? "";
}
function LO(e) {
  var t = e;
  return jDe ? t = Array.from(new Set(t)) : t = wB(t), t = t.sort(function(r, n) {
    return typeof r == "number" && typeof n == "number" ? r - n : r === n ? 0 : r > n ? 1 : -1;
  }), t;
}
function SN(e, t, r, n) {
  var o = [], i = e === t, a;
  return i || (a = Ev(t)), I(e, function(l) {
    var s = !1;
    (i || a(l)) && (s = !0);
    var u = {
      checked: s,
      value: l,
      visualValue: LDe(l, r)
    };
    n && n(u), o.push(u);
  }), o;
}
function fz(e, t) {
  return WDe(e) || VDe(e, t) || BDe(e, t) || FDe();
}
function FDe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function BDe(e, t) {
  if (e) {
    if (typeof e == "string")
      return CN(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return CN(e, t);
  }
}
function CN(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function VDe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function WDe(e) {
  if (Array.isArray(e))
    return e;
}
var ya = "by_value";
function UDe(e, t) {
  var r = fz(t, 1), n = r[0];
  return n(e.value);
}
Ut(ya, UDe, {
  name: "By value",
  inputsCount: 0,
  inputValuesDecorator: function(t) {
    var r = fz(t, 1), n = r[0];
    return [Ev(n)];
  },
  showOperators: !1
});
var yd = {};
function zDe(e) {
  if (!yd[e])
    throw Error('Operation with id "'.concat(e, '" does not exist.'));
  var t = yd[e].func;
  return function(r, n) {
    return t(r, n);
  };
}
function YDe(e) {
  return yd[e].name;
}
function AP(e, t, r) {
  yd[e] = {
    name: t,
    func: r
  };
}
var gi = "conjunction", GDe = q0;
function KDe(e, t) {
  return e.every(function(r) {
    return r.func(t);
  });
}
AP(gi, GDe, KDe);
var Lm = "disjunction", qDe = Dg;
function XDe(e, t) {
  return e.some(function(r) {
    return r.func(t);
  });
}
AP(Lm, qDe, XDe);
var IP = "disjunctionWithExtraCondition", ZDe = Dg;
function QDe(e, t) {
  if (e.length < 3)
    throw Error("Operation doesn't work on less then three conditions.");
  return e.slice(0, e.length - 1).some(function(r) {
    return r.func(t);
  }) && e[e.length - 1].func(t);
}
AP(IP, ZDe, QDe);
function pd(e) {
  "@babel/helpers - typeof";
  return pd = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, pd(e);
}
var Qf;
function vS(e, t, r) {
  return t = JDe(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function JDe(e) {
  var t = eNe(e, "string");
  return pd(t) === "symbol" ? t : String(t);
}
function eNe(e, t) {
  if (pd(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (pd(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var tNe = "numeric", cz = "text", rNe = "date", _N = (Qf = {}, vS(Qf, tNe, [Jt, We, Ec, mp, We, Tc, gp, We, XU, ZU, QU, JU, Hm, ez]), vS(Qf, cz, [Jt, We, Ec, mp, We, Tc, gp, We, tz, oz, We, $P, iz]), vS(Qf, rNe, [Jt, We, Ec, mp, We, Tc, gp, We, kP, PP, Hm, We, az, lz, sz]), Qf);
function nNe(e) {
  var t = [], r = e;
  return _N[r] || (r = cz), I(_N[r], function(n) {
    var o;
    n === We ? o = {
      name: We
    } : o = Tr(va(n)), t.push(o);
  }), t;
}
function md(e) {
  "@babel/helpers - typeof";
  return md = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, md(e);
}
function oNe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function ON(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, aNe(n.key), n);
  }
}
function iNe(e, t, r) {
  return t && ON(e.prototype, t), r && ON(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function aNe(e) {
  var t = lNe(e, "string");
  return md(t) === "symbol" ? t : String(t);
}
function lNe(e, t) {
  if (md(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (md(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var yS = "built", pS = "building", RN = ["click", "input", "keydown", "keypress", "keyup", "focus", "blur", "change"], hz = /* @__PURE__ */ function() {
  function e(t, r) {
    oNe(this, e), this.hot = t, this.eventManager = new It(this), this.options = Gt(e.DEFAULTS, r), this._element = this.hot.rootDocument.createElement(this.options.wrapIt ? "div" : this.options.tagName), this.buildState = null;
  }
  return iNe(e, [{
    key: "setValue",
    value: function(r) {
      this.options.value = r, this.update();
    }
    /**
     * Get the element value.
     *
     * @returns {*}
     */
  }, {
    key: "getValue",
    value: function() {
      return this.options.value;
    }
    /**
     * Get element as a DOM object.
     *
     * @returns {Element}
     */
  }, {
    key: "element",
    get: function() {
      return this.buildState === pS ? this._element : this.buildState === yS ? (this.update(), this._element) : (this.buildState = pS, this.build(), this.buildState = yS, this._element);
    }
    /**
     * Check if element was built (built whole DOM structure).
     *
     * @returns {boolean}
     */
  }, {
    key: "isBuilt",
    value: function() {
      return this.buildState === yS;
    }
    /**
     * Translate value if it is possible. It's checked if value belongs to namespace of translated phrases.
     *
     * @param {*} value Value which will may be translated.
     * @returns {*} Translated value if translation was possible, original value otherwise.
     */
  }, {
    key: "translateIfPossible",
    value: function(r) {
      return typeof r == "string" && r.startsWith(wr) ? this.hot.getTranslatedPhrase(r) : r;
    }
    /**
     * Build DOM structure.
     */
  }, {
    key: "build",
    value: function() {
      var r = this, n = function(a, l) {
        r.eventManager.addEventListener(a, l, function(s) {
          return r.runLocalHooks(l, s, r);
        });
      };
      if (this.buildState || (this.buildState = pS), this.options.className && ae(this._element, this.options.className), this.options.children.length)
        I(this.options.children, function(i) {
          return r._element.appendChild(i.element);
        });
      else if (this.options.wrapIt) {
        var o = this.hot.rootDocument.createElement(this.options.tagName);
        Ye(this.options, function(i, a) {
          o[a] !== void 0 && a !== "className" && a !== "tagName" && a !== "children" && (o[a] = r.translateIfPossible(i));
        }), this._element.appendChild(o), I(RN, function(i) {
          return n(o, i);
        });
      } else
        I(RN, function(i) {
          return n(r._element, i);
        });
    }
    /**
     * Update DOM structure.
     */
  }, {
    key: "update",
    value: function() {
    }
    /**
     * Reset to initial state.
     */
  }, {
    key: "reset",
    value: function() {
      this.options.value = "", this.update();
    }
    /**
     * Show element.
     */
  }, {
    key: "show",
    value: function() {
      this.element.style.display = "";
    }
    /**
     * Hide element.
     */
  }, {
    key: "hide",
    value: function() {
      this.element.style.display = "none";
    }
    /**
     * Focus element.
     */
  }, {
    key: "focus",
    value: function() {
    }
  }, {
    key: "destroy",
    value: function() {
      this.eventManager.destroy(), this.eventManager = null, this.hot = null, this._element.parentNode && this._element.parentNode.removeChild(this._element), this._element = null;
    }
  }], [{
    key: "DEFAULTS",
    get: function() {
      return Tr({
        className: "",
        value: "",
        tagName: "div",
        children: [],
        wrapIt: !0
      });
    }
  }]), e;
}();
bt(hz, $r);
const bi = hz;
function Cu(e) {
  "@babel/helpers - typeof";
  return Cu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Cu(e);
}
function sNe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function EN(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, fNe(n.key), n);
  }
}
function uNe(e, t, r) {
  return t && EN(e.prototype, t), r && EN(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function fNe(e) {
  var t = cNe(e, "string");
  return Cu(t) === "symbol" ? t : String(t);
}
function cNe(e, t) {
  if (Cu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Cu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function bp() {
  return typeof Reflect < "u" && Reflect.get ? bp = Reflect.get.bind() : bp = function(t, r, n) {
    var o = hNe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, bp.apply(this, arguments);
}
function hNe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = _u(e), e !== null); )
    ;
  return e;
}
function dNe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && jO(e, t);
}
function jO(e, t) {
  return jO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, jO(e, t);
}
function vNe(e) {
  var t = pNe();
  return function() {
    var n = _u(e), o;
    if (t) {
      var i = _u(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return yNe(this, o);
  };
}
function yNe(e, t) {
  if (t && (Cu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return dz(e);
}
function dz(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function pNe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function _u(e) {
  return _u = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, _u(e);
}
var Oy = /* @__PURE__ */ new WeakMap(), mNe = /* @__PURE__ */ function(e) {
  dNe(r, e);
  var t = vNe(r);
  function r(n, o) {
    var i;
    return sNe(this, r), i = t.call(this, n, Gt(r.DEFAULTS, o)), Oy.set(dz(i), {}), i.registerHooks(), i;
  }
  return uNe(r, [{
    key: "registerHooks",
    value: function() {
      var o = this;
      this.addLocalHook("click", function() {
        return o.onClick();
      }), this.addLocalHook("keyup", function(i) {
        return o.onKeyup(i);
      });
    }
    /**
     * Build DOM structure.
     */
  }, {
    key: "build",
    value: function() {
      bp(_u(r.prototype), "build", this).call(this);
      var o = Oy.get(this), i = this.hot.rootDocument.createElement("div");
      o.input = this._element.firstChild, ae(this._element, "htUIInput"), ae(i, "htUIInputIcon"), this._element.appendChild(i), this.update();
    }
    /**
     * Update element.
     */
  }, {
    key: "update",
    value: function() {
      if (this.isBuilt()) {
        var o = Oy.get(this).input;
        o.type = this.options.type, o.placeholder = this.translateIfPossible(this.options.placeholder), o.value = this.translateIfPossible(this.options.value);
      }
    }
    /**
     * Focus element.
     */
  }, {
    key: "focus",
    value: function() {
      this.isBuilt() && Oy.get(this).input.focus();
    }
    /**
     * OnClick listener.
     */
  }, {
    key: "onClick",
    value: function() {
    }
    /**
     * OnKeyup listener.
     *
     * @param {Event} event The mouse event object.
     */
  }, {
    key: "onKeyup",
    value: function(o) {
      this.options.value = o.target.value;
    }
  }], [{
    key: "DEFAULTS",
    get: function() {
      return Tr({
        placeholder: "",
        type: "text",
        tagName: "input"
      });
    }
  }]), r;
}(bi);
const Jl = mNe;
function Ou(e) {
  "@babel/helpers - typeof";
  return Ou = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Ou(e);
}
function gNe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function TN(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, wNe(n.key), n);
  }
}
function bNe(e, t, r) {
  return t && TN(e.prototype, t), r && TN(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function wNe(e) {
  var t = SNe(e, "string");
  return Ou(t) === "symbol" ? t : String(t);
}
function SNe(e, t) {
  if (Ou(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Ou(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function es() {
  return typeof Reflect < "u" && Reflect.get ? es = Reflect.get.bind() : es = function(t, r, n) {
    var o = CNe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, es.apply(this, arguments);
}
function CNe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = wi(e), e !== null); )
    ;
  return e;
}
function _Ne(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && FO(e, t);
}
function FO(e, t) {
  return FO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, FO(e, t);
}
function ONe(e) {
  var t = ENe();
  return function() {
    var n = wi(e), o;
    if (t) {
      var i = wi(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return RNe(this, o);
  };
}
function RNe(e, t) {
  if (t && (Ou(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return vz(e);
}
function vz(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function ENe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function wi(e) {
  return wi = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, wi(e);
}
var Ry = /* @__PURE__ */ new WeakMap(), TNe = /* @__PURE__ */ function(e) {
  _Ne(r, e);
  var t = ONe(r);
  function r(n, o) {
    var i;
    return gNe(this, r), i = t.call(this, n, Gt(r.DEFAULTS, o)), Ry.set(vz(i), {}), i.menu = null, i.items = [], i.registerHooks(), i;
  }
  return bNe(r, [{
    key: "registerHooks",
    value: function() {
      var o = this;
      this.addLocalHook("click", function() {
        return o.onClick();
      });
    }
    /**
     * Set options which can be selected in the list.
     *
     * @param {Array} items Array of objects with required keys `key` and `name`.
     */
  }, {
    key: "setItems",
    value: function(o) {
      this.items = this.translateNames(o), this.menu && this.menu.setMenuItems(this.items);
    }
    /**
     * Translate names of menu items.
     *
     * @param {Array} items Array of objects with required keys `key` and `name`.
     * @returns {Array} Items with translated `name` keys.
     */
  }, {
    key: "translateNames",
    value: function(o) {
      var i = this;
      return I(o, function(a) {
        a.name = i.translateIfPossible(a.name);
      }), o;
    }
    /**
     * Build DOM structure.
     */
  }, {
    key: "build",
    value: function() {
      var o = this;
      es(wi(r.prototype), "build", this).call(this), this.menu = new EP(this.hot, {
        className: "htSelectUI htFiltersConditionsMenu",
        keepInViewport: !1,
        standalone: !0,
        container: this.options.menuContainer
      }), this.menu.setMenuItems(this.items);
      var i = new bi(this.hot, {
        className: "htUISelectCaption"
      }), a = new bi(this.hot, {
        className: "htUISelectDropdown"
      }), l = Ry.get(this);
      l.caption = i, l.captionElement = i.element, l.dropdown = a, I([i, a], function(s) {
        return o._element.appendChild(s.element);
      }), this.menu.addLocalHook("select", function(s) {
        return o.onMenuSelect(s);
      }), this.menu.addLocalHook("afterClose", function() {
        return o.onMenuClosed();
      }), this.update();
    }
    /**
     * Update DOM structure.
     */
  }, {
    key: "update",
    value: function() {
      if (this.isBuilt()) {
        var o;
        this.options.value ? o = this.options.value.name : o = this.menu.hot.getTranslatedPhrase(xg), Ry.get(this).captionElement.textContent = o, es(wi(r.prototype), "update", this).call(this);
      }
    }
    /**
     * Open select dropdown menu with available options.
     */
  }, {
    key: "openOptions",
    value: function() {
      var o = this.element.getBoundingClientRect();
      this.menu && (this.menu.open(), this.menu.setPosition({
        left: this.hot.isLtr() ? o.left - 5 : o.left - 31,
        top: o.top - 1,
        width: o.width,
        height: o.height
      }));
    }
    /**
     * Close select dropdown menu.
     */
  }, {
    key: "closeOptions",
    value: function() {
      this.menu && this.menu.close();
    }
    /**
     * On menu selected listener.
     *
     * @private
     * @param {object} command Selected item.
     */
  }, {
    key: "onMenuSelect",
    value: function(o) {
      o.name !== We && (this.options.value = o, this.update(), this.runLocalHooks("select", this.options.value));
    }
    /**
     * On menu closed listener.
     *
     * @private
     */
  }, {
    key: "onMenuClosed",
    value: function() {
      this.runLocalHooks("afterClose");
    }
    /**
     * On element click listener.
     *
     * @private
     */
  }, {
    key: "onClick",
    value: function() {
      this.openOptions();
    }
    /**
     * Destroy instance.
     */
  }, {
    key: "destroy",
    value: function() {
      this.menu && (this.menu.destroy(), this.menu = null);
      var o = Ry.get(this), i = o.caption, a = o.dropdown;
      i && i.destroy(), a && a.destroy(), es(wi(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "DEFAULTS",
    get: function() {
      return Tr({
        className: "htUISelect",
        wrapIt: !1
      });
    }
  }]), r;
}(bi);
const PN = TNe;
function Ru(e) {
  "@babel/helpers - typeof";
  return Ru = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Ru(e);
}
function PNe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function kN(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, $Ne(n.key), n);
  }
}
function kNe(e, t, r) {
  return t && kN(e.prototype, t), r && kN(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function $Ne(e) {
  var t = ANe(e, "string");
  return Ru(t) === "symbol" ? t : String(t);
}
function ANe(e, t) {
  if (Ru(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Ru(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function wp() {
  return typeof Reflect < "u" && Reflect.get ? wp = Reflect.get.bind() : wp = function(t, r, n) {
    var o = INe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, wp.apply(this, arguments);
}
function INe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Eu(e), e !== null); )
    ;
  return e;
}
function MNe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && BO(e, t);
}
function BO(e, t) {
  return BO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, BO(e, t);
}
function xNe(e) {
  var t = HNe();
  return function() {
    var n = Eu(e), o;
    if (t) {
      var i = Eu(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return DNe(this, o);
  };
}
function DNe(e, t) {
  if (t && (Ru(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return NNe(e);
}
function NNe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function HNe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Eu(e) {
  return Eu = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Eu(e);
}
var LNe = /* @__PURE__ */ function(e) {
  MNe(r, e);
  var t = xNe(r);
  function r(n, o) {
    var i;
    return PNe(this, r), i = t.call(this, n, {
      id: o.id,
      stateless: !1
    }), i.name = o.name, i.addSeparator = o.addSeparator, i.elements.push(new PN(i.hot, {
      menuContainer: o.menuContainer
    })), i.elements.push(new Jl(i.hot, {
      placeholder: tP
    })), i.elements.push(new Jl(i.hot, {
      placeholder: rP
    })), i.registerHooks(), i;
  }
  return kNe(r, [{
    key: "registerHooks",
    value: function() {
      var o = this;
      this.getSelectElement().addLocalHook("select", function(i) {
        return o.onConditionSelect(i);
      }), this.getSelectElement().addLocalHook("afterClose", function() {
        return o.onSelectUIClosed();
      }), I(this.getInputElements(), function(i) {
        i.addLocalHook("keydown", function(a) {
          return o.onInputKeyDown(a);
        });
      });
    }
    /**
     * Set state of the component.
     *
     * @param {object} value State to restore.
     */
  }, {
    key: "setState",
    value: function(o) {
      var i = this;
      if (this.reset(), !!o) {
        var a = Tr(o.command);
        a.name.startsWith(Mt) && (a.name = this.hot.getTranslatedPhrase(a.name)), this.getSelectElement().setValue(a), I(o.args, function(l, s) {
          if (s > a.inputsCount - 1)
            return !1;
          var u = i.getInputElement(s);
          u.setValue(l), u[a.inputsCount > s ? "show" : "hide"](), s || setTimeout(function() {
            return u.focus();
          }, 10);
        });
      }
    }
    /**
     * Export state of the component (get selected filter and filter arguments).
     *
     * @returns {object} Returns object where `command` key keeps used condition filter and `args` key its arguments.
     */
  }, {
    key: "getState",
    value: function() {
      var o = this.getSelectElement().getValue() || va(Jt), i = [];
      return I(this.getInputElements(), function(a, l) {
        o.inputsCount > l && i.push(a.getValue());
      }), {
        command: o,
        args: i
      };
    }
    /**
     * Update state of component.
     *
     * @param {object} condition The condition object.
     * @param {object} condition.command The command object with condition name as `key` property.
     * @param {Array} condition.args An array of values to compare.
     * @param {number} column Physical column index.
     */
  }, {
    key: "updateState",
    value: function(o, i) {
      var a = va(o ? o.name : Jt);
      this.state.setValueAtIndex(i, {
        command: a,
        args: o ? o.args : []
      }), o || I(this.getInputElements(), function(l) {
        return l.setValue(null);
      });
    }
    /**
     * Get select element.
     *
     * @returns {SelectUI}
     */
  }, {
    key: "getSelectElement",
    value: function() {
      return this.elements.filter(function(o) {
        return o instanceof PN;
      })[0];
    }
    /**
     * Get input element.
     *
     * @param {number} index Index an array of elements.
     * @returns {InputUI}
     */
  }, {
    key: "getInputElement",
    value: function() {
      var o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
      return this.getInputElements()[o];
    }
    /**
     * Get input elements.
     *
     * @returns {Array}
     */
  }, {
    key: "getInputElements",
    value: function() {
      return this.elements.filter(function(o) {
        return o instanceof Jl;
      });
    }
    /**
     * Get menu object descriptor.
     *
     * @returns {object}
     */
  }, {
    key: "getMenuItemDescriptor",
    value: function() {
      var o = this;
      return {
        key: this.id,
        name: this.name,
        isCommand: !1,
        disableSelection: !0,
        hidden: function() {
          return o.isHidden();
        },
        renderer: function(a, l, s, u, f, c) {
          ae(l.parentNode, "htFiltersMenuCondition"), o.addSeparator && ae(l.parentNode, "border");
          var h = o.hot.rootDocument.createElement("div");
          return ae(h, "htFiltersMenuLabel"), h.textContent = c, l.appendChild(h), l.parentNode.hasAttribute("ghost-table") || I(o.elements, function(d) {
            return l.appendChild(d.element);
          }), l;
        }
      };
    }
    /**
     * Reset elements to their initial state.
     */
  }, {
    key: "reset",
    value: function() {
      var o = this.hot.getPlugin("filters").getSelectedColumn(), i = [va(Jt)];
      if (o !== null) {
        var a = o.visualIndex;
        i = nNe(this.hot.getDataType(0, a, this.hot.countRows(), a));
      }
      I(this.getInputElements(), function(l) {
        return l.hide();
      }), this.getSelectElement().setItems(i), wp(Eu(r.prototype), "reset", this).call(this), this.getSelectElement().setValue(i[0]);
    }
    /**
     * On condition select listener.
     *
     * @private
     * @param {object} command Menu item object (command).
     */
  }, {
    key: "onConditionSelect",
    value: function(o) {
      I(this.getInputElements(), function(i, a) {
        i[o.inputsCount > a ? "show" : "hide"](), a === 0 && setTimeout(function() {
          return i.focus();
        }, 10);
      }), this.runLocalHooks("change", o);
    }
    /**
     * On component SelectUI closed listener.
     *
     * @private
     */
  }, {
    key: "onSelectUIClosed",
    value: function() {
      this.runLocalHooks("afterClose");
    }
    /**
     * Key down listener.
     *
     * @private
     * @param {Event} event The DOM event object.
     */
  }, {
    key: "onInputKeyDown",
    value: function(o) {
      Fc(o.keyCode, "ENTER") ? (this.runLocalHooks("accept"), Fn(o)) : Fc(o.keyCode, "ESCAPE") && (this.runLocalHooks("cancel"), Fn(o));
    }
  }]), r;
}(lb);
const mS = LNe;
function Tu(e) {
  "@babel/helpers - typeof";
  return Tu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Tu(e);
}
function jNe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function $N(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, BNe(n.key), n);
  }
}
function FNe(e, t, r) {
  return t && $N(e.prototype, t), r && $N(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function BNe(e) {
  var t = VNe(e, "string");
  return Tu(t) === "symbol" ? t : String(t);
}
function VNe(e, t) {
  if (Tu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Tu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Sp() {
  return typeof Reflect < "u" && Reflect.get ? Sp = Reflect.get.bind() : Sp = function(t, r, n) {
    var o = WNe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, Sp.apply(this, arguments);
}
function WNe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Pu(e), e !== null); )
    ;
  return e;
}
function UNe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && VO(e, t);
}
function VO(e, t) {
  return VO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, VO(e, t);
}
function zNe(e) {
  var t = GNe();
  return function() {
    var n = Pu(e), o;
    if (t) {
      var i = Pu(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return YNe(this, o);
  };
}
function YNe(e, t) {
  if (t && (Tu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return yz(e);
}
function yz(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function GNe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Pu(e) {
  return Pu = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Pu(e);
}
var Ey = /* @__PURE__ */ new WeakMap(), KNe = /* @__PURE__ */ function(e) {
  UNe(r, e);
  var t = zNe(r);
  function r(n, o) {
    var i;
    return jNe(this, r), i = t.call(this, n, Gt(r.DEFAULTS, o)), Ey.set(yz(i), {}), i;
  }
  return FNe(r, [{
    key: "build",
    value: function() {
      Sp(Pu(r.prototype), "build", this).call(this);
      var o = Ey.get(this);
      o.input = this._element.firstChild;
      var i = this.hot.rootDocument.createElement("label");
      i.textContent = this.translateIfPossible(this.options.label.textContent), i.htmlFor = this.translateIfPossible(this.options.label.htmlFor), o.label = i, this._element.appendChild(i), this.update();
    }
    /**
     * Update element.
     */
  }, {
    key: "update",
    value: function() {
      if (this.isBuilt()) {
        var o = Ey.get(this);
        o.input.checked = this.options.checked, o.label.textContent = this.translateIfPossible(this.options.label.textContent);
      }
    }
    /**
     * Check if radio button is checked.
     *
     * @returns {boolean}
     */
  }, {
    key: "isChecked",
    value: function() {
      return this.options.checked;
    }
    /**
     * Set input checked attribute.
     *
     * @param {boolean} value Set the component state.
     */
  }, {
    key: "setChecked",
    value: function() {
      var o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
      this.options.checked = o, this.update();
    }
    /**
     * Focus element.
     */
  }, {
    key: "focus",
    value: function() {
      this.isBuilt() && Ey.get(this).input.focus();
    }
  }], [{
    key: "DEFAULTS",
    get: function() {
      return Tr({
        type: "radio",
        tagName: "input",
        className: "htUIRadio",
        label: {}
      });
    }
  }]), r;
}(bi);
const AN = KNe;
function ku(e) {
  "@babel/helpers - typeof";
  return ku = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, ku(e);
}
var IN;
function qNe(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } }));
}
function XNe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function MN(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, QNe(n.key), n);
  }
}
function ZNe(e, t, r) {
  return t && MN(e.prototype, t), r && MN(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function QNe(e) {
  var t = JNe(e, "string");
  return ku(t) === "symbol" ? t : String(t);
}
function JNe(e, t) {
  if (ku(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (ku(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function eHe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && WO(e, t);
}
function WO(e, t) {
  return WO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, WO(e, t);
}
function tHe(e) {
  var t = oHe();
  return function() {
    var n = jm(e), o;
    if (t) {
      var i = jm(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return rHe(this, o);
  };
}
function rHe(e, t) {
  if (t && (ku(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return nHe(e);
}
function nHe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function oHe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function jm(e) {
  return jm = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, jm(e);
}
var xN = 0, iHe = /* @__PURE__ */ function(e) {
  eHe(r, e);
  var t = tHe(r);
  function r(n, o) {
    var i;
    return XNe(this, r), i = t.call(this, n, {
      id: o.id,
      stateless: !1
    }), i.name = o.name, i.buildOperatorsElement(), i;
  }
  return ZNe(r, [{
    key: "getMenuItemDescriptor",
    value: function() {
      var o = this;
      return {
        key: this.id,
        name: this.name,
        isCommand: !1,
        disableSelection: !0,
        hidden: function() {
          return o.isHidden();
        },
        renderer: function(a, l) {
          return ae(l.parentNode, "htFiltersMenuOperators"), l.parentNode.hasAttribute("ghost-table") || I(o.elements, function(s) {
            return l.appendChild(s.element);
          }), l;
        }
      };
    }
    /**
     * Add RadioInputUI elements to component.
     *
     * @private
     */
  }, {
    key: "buildOperatorsElement",
    value: function() {
      var o = this, i = [gi, Lm];
      I(i, function(a) {
        var l = new AN(o.hot, {
          name: "operator",
          label: {
            htmlFor: a,
            textContent: YDe(a)
          },
          value: a,
          checked: a === i[xN],
          id: a
        });
        l.addLocalHook("change", function(s) {
          return o.onRadioInputChange(s);
        }), o.elements.push(l);
      });
    }
    /**
     * Set state of operators component to check radio input at specific `index`.
     *
     * @param {number} searchedIndex Index of radio input to check.
     */
  }, {
    key: "setChecked",
    value: function(o) {
      if (this.elements.length < o)
        throw Error(ut(IN || (IN = qNe(["Radio button with index ", " doesn't exist."])), o));
      I(this.elements, function(i, a) {
        i.setChecked(a === o);
      });
    }
    /**
     * Get `id` of active operator.
     *
     * @returns {string}
     */
  }, {
    key: "getActiveOperationId",
    value: function() {
      var o = this.elements.find(function(i) {
        return i instanceof AN && i.isChecked();
      });
      return o ? o.getValue() : gi;
    }
    /**
     * Export state of the component (get selected operator).
     *
     * @returns {string} Returns `id` of selected operator.
     */
  }, {
    key: "getState",
    value: function() {
      return this.getActiveOperationId();
    }
    /**
     * Set state of the component.
     *
     * @param {object} value State to restore.
     */
  }, {
    key: "setState",
    value: function(o) {
      this.reset(), o && this.getActiveOperationId() !== o && I(this.elements, function(i) {
        i.setChecked(i.getValue() === o);
      });
    }
    /**
     * Update state of component.
     *
     * @param {string} [operationId='conjunction'] Id of selected operation.
     * @param {number} column Physical column index.
     */
  }, {
    key: "updateState",
    value: function() {
      var o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : gi, i = arguments.length > 1 ? arguments[1] : void 0, a = o;
      a === IP && (a = Lm), this.state.setValueAtIndex(i, a);
    }
    /**
     * Reset elements to their initial state.
     */
  }, {
    key: "reset",
    value: function() {
      this.setChecked(xN);
    }
    /**
     * OnChange listener.
     *
     * @private
     * @param {Event} event The DOM event object.
     */
  }, {
    key: "onRadioInputChange",
    value: function(o) {
      this.setState(o.target.value);
    }
  }]), r;
}(lb);
const aHe = iHe;
var lHe = Be, sHe = Pr, DN = Wt, uHe = /"/g, fHe = lHe("".replace), cHe = function(e, t, r, n) {
  var o = DN(sHe(e)), i = "<" + t;
  return r !== "" && (i += " " + r + '="' + fHe(DN(n), uHe, "&quot;") + '"'), i + ">" + o + "</" + t + ">";
}, hHe = Fe, dHe = function(e) {
  return hHe(function() {
    var t = ""[e]('"');
    return t !== t.toLowerCase() || t.split('"').length > 3;
  });
}, vHe = Ie, yHe = cHe, pHe = dHe;
vHe({ target: "String", proto: !0, forced: pHe("link") }, {
  link: function(t) {
    return yHe(this, "a", "href", t);
  }
});
function $u(e) {
  "@babel/helpers - typeof";
  return $u = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, $u(e);
}
function mHe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function NN(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, bHe(n.key), n);
  }
}
function gHe(e, t, r) {
  return t && NN(e.prototype, t), r && NN(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function bHe(e) {
  var t = wHe(e, "string");
  return $u(t) === "symbol" ? t : String(t);
}
function wHe(e, t) {
  if ($u(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if ($u(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Cp() {
  return typeof Reflect < "u" && Reflect.get ? Cp = Reflect.get.bind() : Cp = function(t, r, n) {
    var o = SHe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, Cp.apply(this, arguments);
}
function SHe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Au(e), e !== null); )
    ;
  return e;
}
function CHe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && UO(e, t);
}
function UO(e, t) {
  return UO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, UO(e, t);
}
function _He(e) {
  var t = RHe();
  return function() {
    var n = Au(e), o;
    if (t) {
      var i = Au(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return OHe(this, o);
  };
}
function OHe(e, t) {
  if (t && ($u(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return pz(e);
}
function pz(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function RHe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Au(e) {
  return Au = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Au(e);
}
var gS = /* @__PURE__ */ new WeakMap(), EHe = /* @__PURE__ */ function(e) {
  CHe(r, e);
  var t = _He(r);
  function r(n, o) {
    var i;
    return mHe(this, r), i = t.call(this, n, Gt(r.DEFAULTS, o)), gS.set(pz(i), {}), i;
  }
  return gHe(r, [{
    key: "build",
    value: function() {
      Cp(Au(r.prototype), "build", this).call(this);
      var o = gS.get(this);
      o.link = this._element.firstChild;
    }
    /**
     * Update element.
     */
  }, {
    key: "update",
    value: function() {
      this.isBuilt() && (gS.get(this).link.textContent = this.translateIfPossible(this.options.textContent));
    }
  }], [{
    key: "DEFAULTS",
    get: function() {
      return Tr({
        href: "#",
        tagName: "a"
      });
    }
  }]), r;
}(bi);
const HN = EHe;
function Iu(e) {
  "@babel/helpers - typeof";
  return Iu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Iu(e);
}
function LN(e) {
  return $He(e) || kHe(e) || PHe(e) || THe();
}
function THe() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function PHe(e, t) {
  if (e) {
    if (typeof e == "string")
      return zO(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return zO(e, t);
  }
}
function kHe(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function $He(e) {
  if (Array.isArray(e))
    return zO(e);
}
function zO(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function AHe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function jN(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, MHe(n.key), n);
  }
}
function IHe(e, t, r) {
  return t && jN(e.prototype, t), r && jN(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function MHe(e) {
  var t = xHe(e, "string");
  return Iu(t) === "symbol" ? t : String(t);
}
function xHe(e, t) {
  if (Iu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Iu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function ts() {
  return typeof Reflect < "u" && Reflect.get ? ts = Reflect.get.bind() : ts = function(t, r, n) {
    var o = DHe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, ts.apply(this, arguments);
}
function DHe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Si(e), e !== null); )
    ;
  return e;
}
function NHe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && YO(e, t);
}
function YO(e, t) {
  return YO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, YO(e, t);
}
function HHe(e) {
  var t = jHe();
  return function() {
    var n = Si(e), o;
    if (t) {
      var i = Si(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return LHe(this, o);
  };
}
function LHe(e, t) {
  if (t && (Iu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return mz(e);
}
function mz(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function jHe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Si(e) {
  return Si = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Si(e);
}
var FHe = /* @__PURE__ */ new WeakMap(), BHe = "multipleSelect.itemBox", VHe = /* @__PURE__ */ function(e) {
  NHe(r, e);
  var t = HHe(r);
  function r(n, o) {
    var i;
    return AHe(this, r), i = t.call(this, n, Gt(r.DEFAULTS, o)), FHe.set(mz(i), {}), i.searchInput = new Jl(i.hot, {
      placeholder: eP,
      className: "htUIMultipleSelectSearch"
    }), i.selectAllUI = new HN(i.hot, {
      textContent: X0,
      className: "htUISelectAll"
    }), i.clearAllUI = new HN(i.hot, {
      textContent: Z0,
      className: "htUIClearAll"
    }), i.items = [], i.itemsBox = null, i.registerHooks(), i;
  }
  return IHe(r, [{
    key: "registerHooks",
    value: function() {
      var o = this;
      this.searchInput.addLocalHook("keydown", function(i) {
        return o.onInputKeyDown(i);
      }), this.searchInput.addLocalHook("input", function(i) {
        return o.onInput(i);
      }), this.selectAllUI.addLocalHook("click", function(i) {
        return o.onSelectAllClick(i);
      }), this.clearAllUI.addLocalHook("click", function(i) {
        return o.onClearAllClick(i);
      });
    }
    /**
     * Set available options.
     *
     * @param {Array} items Array of objects with `checked` and `label` property.
     */
  }, {
    key: "setItems",
    value: function(o) {
      this.items = o, this.itemsBox && this.itemsBox.loadData(this.items);
    }
    /**
     * Set a locale for the component.
     *
     * @param {string} locale Locale used for filter actions performed on data, ie. `en-US`.
     */
  }, {
    key: "setLocale",
    value: function(o) {
      this.locale = o;
    }
    /**
     * Get a locale for the component.
     *
     * @returns {string}
     */
  }, {
    key: "getLocale",
    value: function() {
      return this.locale;
    }
    /**
     * Get all available options.
     *
     * @returns {Array}
     */
  }, {
    key: "getItems",
    value: function() {
      return LN(this.items);
    }
    /**
     * Get element value.
     *
     * @returns {Array} Array of selected values.
     */
  }, {
    key: "getValue",
    value: function() {
      return UHe(this.items);
    }
    /**
     * Check if all values listed in element are selected.
     *
     * @returns {boolean}
     */
  }, {
    key: "isSelectedAllValues",
    value: function() {
      return this.items.length === this.getValue().length;
    }
    /**
     * Build DOM structure.
     */
  }, {
    key: "build",
    value: function() {
      var o = this;
      ts(Si(r.prototype), "build", this).call(this);
      var i = this.hot.rootDocument, a = i.createElement("div"), l = new bi(this.hot, {
        className: "htUISelectionControls",
        children: [this.selectAllUI, this.clearAllUI]
      });
      this._element.appendChild(this.searchInput.element), this._element.appendChild(l.element), this._element.appendChild(a);
      var s = function(f) {
        if (o._element) {
          o.itemsBox && o.itemsBox.destroy(), ae(f, "htUIMultipleSelectHot"), o.itemsBox = new o.hot.constructor(f, {
            data: o.items,
            columns: [{
              data: "checked",
              type: "checkbox",
              label: {
                property: "visualValue",
                position: "after"
              }
            }],
            beforeRenderer: function(y, p, g, w, C, _) {
              y.title = _.instance.getDataAtRowProp(p, _.label.property);
            },
            maxCols: 1,
            autoWrapCol: !0,
            height: 110,
            // Workaround for #151.
            colWidths: function() {
              return o.itemsBox.container.scrollWidth - tr(i);
            },
            copyPaste: !1,
            disableVisualSelection: "area",
            fillHandle: !1,
            fragmentSelection: "cell",
            tabMoves: {
              row: 1,
              col: 0
            },
            layoutDirection: o.hot.isRtl() ? "rtl" : "ltr"
          }), o.itemsBox.init();
          var c = o.itemsBox.getShortcutManager(), h = c.getContext("grid");
          h.addShortcut({
            // TODO: Is this shortcut really needed? We have one test for that case, but focus is performed programmatically.
            keys: [["Escape"]],
            callback: function(y) {
              o.runLocalHooks("keydown", y, o);
            },
            group: BHe
          });
        }
      };
      s(a), setTimeout(function() {
        return s(a);
      }, 100);
    }
    /**
     * Reset DOM structure.
     */
  }, {
    key: "reset",
    value: function() {
      this.searchInput.reset(), this.selectAllUI.reset(), this.clearAllUI.reset();
    }
    /**
     * Update DOM structure.
     */
  }, {
    key: "update",
    value: function() {
      this.isBuilt() && (this.itemsBox.loadData(WHe(this.items, this.options.value)), ts(Si(r.prototype), "update", this).call(this));
    }
    /**
     * Destroy instance.
     */
  }, {
    key: "destroy",
    value: function() {
      this.itemsBox && this.itemsBox.destroy(), this.searchInput.destroy(), this.clearAllUI.destroy(), this.selectAllUI.destroy(), this.searchInput = null, this.clearAllUI = null, this.selectAllUI = null, this.itemsBox = null, this.items = null, ts(Si(r.prototype), "destroy", this).call(this);
    }
    /**
     * 'input' event listener for input element.
     *
     * @private
     * @param {Event} event DOM event.
     */
  }, {
    key: "onInput",
    value: function(o) {
      var i = this, a = o.target.value.toLocaleLowerCase(this.getLocale()), l;
      a === "" ? l = LN(this.items) : l = Zr(this.items, function(s) {
        return "".concat(s.value).toLocaleLowerCase(i.getLocale()).indexOf(a) >= 0;
      }), this.itemsBox.loadData(l);
    }
    /**
     * 'keydown' event listener for input element.
     *
     * @private
     * @param {Event} event DOM event.
     */
  }, {
    key: "onInputKeyDown",
    value: function(o) {
      this.runLocalHooks("keydown", o, this);
      var i = RV(Fc, o.keyCode);
      i("ARROW_DOWN|TAB") && !this.itemsBox.isListening() && (Fn(o), this.itemsBox.listen(), this.itemsBox.selectCell(0, 0));
    }
    /**
     * On click listener for "Select all" link.
     *
     * @private
     * @param {DOMEvent} event The mouse event object.
     */
  }, {
    key: "onSelectAllClick",
    value: function(o) {
      var i = [];
      o.preventDefault(), I(this.itemsBox.getSourceData(), function(a, l) {
        a.checked = !0, i.push(W1(a, l)[0]);
      }), this.itemsBox.setSourceDataAtCell(i);
    }
    /**
     * On click listener for "Clear" link.
     *
     * @private
     * @param {DOMEvent} event The mouse event object.
     */
  }, {
    key: "onClearAllClick",
    value: function(o) {
      var i = [];
      o.preventDefault(), I(this.itemsBox.getSourceData(), function(a, l) {
        a.checked = !1, i.push(W1(a, l)[0]);
      }), this.itemsBox.setSourceDataAtCell(i);
    }
  }], [{
    key: "DEFAULTS",
    get: function() {
      return Tr({
        className: "htUIMultipleSelect",
        value: []
      });
    }
  }]), r;
}(bi);
const FN = VHe;
function WHe(e, t) {
  var r = Ev(t);
  return Ue(e, function(n) {
    return n.checked = r(n.value), n;
  });
}
function UHe(e) {
  var t = [];
  return I(e, function(r) {
    r.checked && t.push(r.value);
  }), t;
}
function Mu(e) {
  "@babel/helpers - typeof";
  return Mu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Mu(e);
}
function zHe(e, t) {
  return qHe(e) || KHe(e, t) || GHe(e, t) || YHe();
}
function YHe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function GHe(e, t) {
  if (e) {
    if (typeof e == "string")
      return BN(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return BN(e, t);
  }
}
function BN(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function KHe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function qHe(e) {
  if (Array.isArray(e))
    return e;
}
function XHe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function VN(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, QHe(n.key), n);
  }
}
function ZHe(e, t, r) {
  return t && VN(e.prototype, t), r && VN(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function QHe(e) {
  var t = JHe(e, "string");
  return Mu(t) === "symbol" ? t : String(t);
}
function JHe(e, t) {
  if (Mu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Mu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function _p() {
  return typeof Reflect < "u" && Reflect.get ? _p = Reflect.get.bind() : _p = function(t, r, n) {
    var o = eLe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, _p.apply(this, arguments);
}
function eLe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = xu(e), e !== null); )
    ;
  return e;
}
function tLe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && GO(e, t);
}
function GO(e, t) {
  return GO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, GO(e, t);
}
function rLe(e) {
  var t = iLe();
  return function() {
    var n = xu(e), o;
    if (t) {
      var i = xu(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return nLe(this, o);
  };
}
function nLe(e, t) {
  if (t && (Mu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return oLe(e);
}
function oLe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function iLe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function xu(e) {
  return xu = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, xu(e);
}
var aLe = /* @__PURE__ */ function(e) {
  tLe(r, e);
  var t = rLe(r);
  function r(n, o) {
    var i;
    return XHe(this, r), i = t.call(this, n, {
      id: o.id,
      stateless: !1
    }), i.name = o.name, i.elements.push(new FN(i.hot)), i.registerHooks(), i;
  }
  return ZHe(r, [{
    key: "registerHooks",
    value: function() {
      var o = this;
      this.getMultipleSelectElement().addLocalHook("keydown", function(i) {
        return o.onInputKeyDown(i);
      });
    }
    /**
     * Set state of the component.
     *
     * @param {object} value The component value.
     */
  }, {
    key: "setState",
    value: function(o) {
      if (this.reset(), o && o.command.key === ya) {
        var i = this.getMultipleSelectElement();
        i.setItems(o.itemsSnapshot), i.setValue(o.args[0]), i.setLocale(o.locale);
      }
    }
    /**
     * Export state of the component (get selected filter and filter arguments).
     *
     * @returns {object} Returns object where `command` key keeps used condition filter and `args` key its arguments.
     */
  }, {
    key: "getState",
    value: function() {
      var o = this.getMultipleSelectElement(), i = o.getItems();
      return {
        command: {
          key: o.isSelectedAllValues() || !i.length ? Jt : ya
        },
        args: [o.getValue()],
        itemsSnapshot: i
      };
    }
    /**
     * Update state of component.
     *
     * @param {object} stateInfo Information about state containing stack of edited column,
     * stack of dependent conditions, data factory and optional condition arguments change. It's described by object containing keys:
     * `editedConditionStack`, `dependentConditionStacks`, `visibleDataFactory` and `conditionArgsChange`.
     */
  }, {
    key: "updateState",
    value: function(o) {
      var i = this, a = function(s, u, f, c, h) {
        var d = Zr(u, function(j) {
          return j.name === ya;
        }), y = zHe(d, 1), p = y[0], g = {}, w = i.hot.getTranslatedPhrase(Om);
        if (p) {
          var C = LO(Ue(c(s, h), function(j) {
            return j.value;
          }));
          f && (p.args[0] = f);
          var _ = [], k = SN(C, p.args[0], w, function(j) {
            j.checked && _.push(j.value);
          }), E = o.editedConditionStack.column;
          g.locale = i.hot.getCellMeta(0, E).locale, g.args = [_], g.command = va(ya), g.itemsSnapshot = k;
        } else
          g.args = [], g.command = va(Jt);
        i.state.setValueAtIndex(s, g);
      };
      a(o.editedConditionStack.column, o.editedConditionStack.conditions, o.conditionArgsChange, o.filteredRowsFactory), o.dependentConditionStacks.length && a(o.dependentConditionStacks[0].column, o.dependentConditionStacks[0].conditions, o.conditionArgsChange, o.filteredRowsFactory, o.editedConditionStack);
    }
    /**
     * Get multiple select element.
     *
     * @returns {MultipleSelectUI}
     */
  }, {
    key: "getMultipleSelectElement",
    value: function() {
      return this.elements.filter(function(o) {
        return o instanceof FN;
      })[0];
    }
    /**
     * Get object descriptor for menu item entry.
     *
     * @returns {object}
     */
  }, {
    key: "getMenuItemDescriptor",
    value: function() {
      var o = this;
      return {
        key: this.id,
        name: this.name,
        isCommand: !1,
        disableSelection: !0,
        hidden: function() {
          return o.isHidden();
        },
        renderer: function(a, l, s, u, f, c) {
          ae(l.parentNode, "htFiltersMenuValue");
          var h = o.hot.rootDocument.createElement("div");
          return ae(h, "htFiltersMenuLabel"), h.textContent = c, l.appendChild(h), l.parentNode.hasAttribute("ghost-table") || I(o.elements, function(d) {
            return l.appendChild(d.element);
          }), l;
        }
      };
    }
    /**
     * Reset elements to their initial state.
     */
  }, {
    key: "reset",
    value: function() {
      var o = this.hot.getTranslatedPhrase(Om), i = LO(this._getColumnVisibleValues()), a = SN(i, i, o);
      this.getMultipleSelectElement().setItems(a), _p(xu(r.prototype), "reset", this).call(this), this.getMultipleSelectElement().setValue(i);
      var l = this.hot.getPlugin("filters").getSelectedColumn();
      l !== null && this.getMultipleSelectElement().setLocale(this.hot.getCellMeta(0, l.visualIndex).locale);
    }
    /**
     * Key down listener.
     *
     * @private
     * @param {Event} event The DOM event object.
     */
  }, {
    key: "onInputKeyDown",
    value: function(o) {
      Fc(o.keyCode, "ESCAPE") && (this.runLocalHooks("cancel"), Fn(o));
    }
    /**
     * Get data for currently selected column.
     *
     * @returns {Array}
     * @private
     */
  }, {
    key: "_getColumnVisibleValues",
    value: function() {
      var o = this.hot.getPlugin("filters").getSelectedColumn();
      return o === null ? [] : Ue(this.hot.getDataAtCol(o.visualIndex), function(i) {
        return uz(i);
      });
    }
  }]), r;
}(lb);
const lLe = aLe;
function Du(e) {
  "@babel/helpers - typeof";
  return Du = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Du(e);
}
function sLe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function WN(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, fLe(n.key), n);
  }
}
function uLe(e, t, r) {
  return t && WN(e.prototype, t), r && WN(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function fLe(e) {
  var t = cLe(e, "string");
  return Du(t) === "symbol" ? t : String(t);
}
function cLe(e, t) {
  if (Du(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Du(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function hLe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && KO(e, t);
}
function KO(e, t) {
  return KO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, KO(e, t);
}
function dLe(e) {
  var t = pLe();
  return function() {
    var n = Fm(e), o;
    if (t) {
      var i = Fm(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return vLe(this, o);
  };
}
function vLe(e, t) {
  if (t && (Du(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return yLe(e);
}
function yLe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function pLe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Fm(e) {
  return Fm = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Fm(e);
}
var mLe = /* @__PURE__ */ function(e) {
  hLe(r, e);
  var t = dLe(r);
  function r(n, o) {
    var i;
    return sLe(this, r), i = t.call(this, n, {
      id: o.id,
      stateless: !0
    }), i.name = o.name, i.elements.push(new Jl(i.hot, {
      type: "button",
      value: Q0,
      className: "htUIButton htUIButtonOK",
      identifier: r.BUTTON_OK
    })), i.elements.push(new Jl(i.hot, {
      type: "button",
      value: J0,
      className: "htUIButton htUIButtonCancel",
      identifier: r.BUTTON_CANCEL
    })), i.registerHooks(), i;
  }
  return uLe(r, [{
    key: "registerHooks",
    value: function() {
      var o = this;
      I(this.elements, function(i) {
        i.addLocalHook("click", function(a, l) {
          return o.onButtonClick(a, l);
        });
      });
    }
    /**
     * Get menu object descriptor.
     *
     * @returns {object}
     */
  }, {
    key: "getMenuItemDescriptor",
    value: function() {
      var o = this;
      return {
        key: this.id,
        name: this.name,
        isCommand: !1,
        disableSelection: !0,
        hidden: function() {
          return o.isHidden();
        },
        renderer: function(a, l) {
          return ae(l.parentNode, "htFiltersMenuActionBar"), l.parentNode.hasAttribute("ghost-table") || I(o.elements, function(s) {
            return l.appendChild(s.element);
          }), l;
        }
      };
    }
    /**
     * Fire accept event.
     */
  }, {
    key: "accept",
    value: function() {
      this.runLocalHooks("accept");
    }
    /**
     * Fire cancel event.
     */
  }, {
    key: "cancel",
    value: function() {
      this.runLocalHooks("cancel");
    }
    /**
     * On button click listener.
     *
     * @private
     * @param {Event} event DOM event.
     * @param {InputUI} button InputUI object.
     */
  }, {
    key: "onButtonClick",
    value: function(o, i) {
      i.options.identifier === r.BUTTON_OK ? this.accept() : this.cancel();
    }
  }], [{
    key: "BUTTON_OK",
    get: function() {
      return "ok";
    }
  }, {
    key: "BUTTON_CANCEL",
    get: function() {
      return "cancel";
    }
  }]), r;
}(lb);
const gLe = mLe;
function gd(e) {
  "@babel/helpers - typeof";
  return gd = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, gd(e);
}
var UN, zN;
function YN(e, t) {
  return CLe(e) || SLe(e, t) || wLe(e, t) || bLe();
}
function bLe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function wLe(e, t) {
  if (e) {
    if (typeof e == "string")
      return GN(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return GN(e, t);
  }
}
function GN(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function SLe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function CLe(e) {
  if (Array.isArray(e))
    return e;
}
function KN(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } }));
}
function _Le(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function qN(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, RLe(n.key), n);
  }
}
function OLe(e, t, r) {
  return t && qN(e.prototype, t), r && qN(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function RLe(e) {
  var t = ELe(e, "string");
  return gd(t) === "symbol" ? t : String(t);
}
function ELe(e, t) {
  if (gd(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (gd(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var XN = "ConditionCollection.filteringStates", gz = /* @__PURE__ */ function() {
  function e(t) {
    var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
    _Le(this, e), this.hot = t, this.isMapRegistrable = r, this.filteringStates = new Mg(), this.isMapRegistrable === !0 ? this.hot.columnIndexMapper.registerMap(XN, this.filteringStates) : this.filteringStates.init(this.hot.columnIndexMapper.getNumberOfIndexes());
  }
  return OLe(e, [{
    key: "isEmpty",
    value: function() {
      return this.getFilteredColumns().length === 0;
    }
    /**
     * Check if value is matched to the criteria of conditions chain.
     *
     * @param {object} value Object with `value` and `meta` keys.
     * @param {number} column The physical column index.
     * @returns {boolean}
     */
  }, {
    key: "isMatch",
    value: function(r, n) {
      var o, i = this.filteringStates.getValueAtIndex(n), a = (o = i == null ? void 0 : i.conditions) !== null && o !== void 0 ? o : [], l = i == null ? void 0 : i.operation;
      return this.isMatchInConditions(a, r, l);
    }
    /**
     * Check if the value is matches the conditions.
     *
     * @param {Array} conditions List of conditions.
     * @param {object} value Object with `value` and `meta` keys.
     * @param {string} [operationType='conjunction'] Type of conditions operation.
     * @returns {boolean}
     */
  }, {
    key: "isMatchInConditions",
    value: function(r, n) {
      var o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : gi;
      return r.length ? zDe(o)(r, n) : !0;
    }
    /**
     * Add condition to the collection.
     *
     * @param {number} column The physical column index.
     * @param {object} conditionDefinition Object with keys:
     *  * `command` Object, Command object with condition name as `key` property.
     *  * `args` Array, Condition arguments.
     * @param {string} [operation='conjunction'] Type of conditions operation.
     * @param {number} [position] Position to which condition will be added. When argument is undefined
     * the condition will be processed as the last condition.
     * @fires ConditionCollection#beforeAdd
     * @fires ConditionCollection#afterAdd
     */
  }, {
    key: "addCondition",
    value: function(r, n) {
      var o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : gi, i = arguments.length > 3 ? arguments[3] : void 0, a = this.hot.getCellMeta(0, r).locale, l = Ue(n.args, function(c) {
        return typeof c == "string" ? c.toLocaleLowerCase(a) : c;
      }), s = n.name || n.command.key;
      this.runLocalHooks("beforeAdd", r);
      var u = this.getOperation(r);
      if (u) {
        if (u !== o)
          throw Error(ut(UN || (UN = KN(["The column of index ", " has been already applied with a `", "` \n        filter operation. Use `removeConditions` to clear the current conditions and then add new ones. \n        Mind that you cannot mix different types of operations (for instance, if you use `conjunction`, \n        use it consequently for a particular column)."], ["The column of index ", " has been already applied with a \\`", "\\`\\x20\n        filter operation. Use \\`removeConditions\\` to clear the current conditions and then add new ones.\\x20\n        Mind that you cannot mix different types of operations (for instance, if you use \\`conjunction\\`,\\x20\n        use it consequently for a particular column)."])), r, u));
      } else if (gt(yd[o]))
        throw new Error(ut(zN || (zN = KN(["Unexpected operation named `", "`. Possible ones are \n        `disjunction` and `conjunction`."], ["Unexpected operation named \\`", "\\`. Possible ones are\\x20\n        \\`disjunction\\` and \\`conjunction\\`."])), o));
      var f = this.getConditions(r);
      f.length === 0 ? this.filteringStates.setValueAtIndex(r, {
        operation: o,
        conditions: [{
          name: s,
          args: l,
          func: Ei(s, l)
        }]
      }, i) : f.push({
        name: s,
        args: l,
        func: Ei(s, l)
      }), this.runLocalHooks("afterAdd", r);
    }
    /**
     * Get all added conditions from the collection at specified column index.
     *
     * @param {number} column The physical column index.
     * @returns {Array} Returns conditions collection as an array.
     */
  }, {
    key: "getConditions",
    value: function(r) {
      var n, o;
      return (n = (o = this.filteringStates.getValueAtIndex(r)) === null || o === void 0 ? void 0 : o.conditions) !== null && n !== void 0 ? n : [];
    }
    /**
     * Get operation for particular column.
     *
     * @param {number} column The physical column index.
     * @returns {string|undefined}
     */
  }, {
    key: "getOperation",
    value: function(r) {
      var n;
      return (n = this.filteringStates.getValueAtIndex(r)) === null || n === void 0 ? void 0 : n.operation;
    }
    /**
     * Get all filtered physical columns in the order in which actions are performed.
     *
     * @returns {Array}
     */
  }, {
    key: "getFilteredColumns",
    value: function() {
      return this.filteringStates.getEntries().map(function(r) {
        var n = YN(r, 1), o = n[0];
        return o;
      });
    }
    /**
     * Gets position in the filtering states stack for the specific column.
     *
     * @param {number} column The physical column index.
     * @returns {number} Returns -1 when the column doesn't exist in the stack.
     */
  }, {
    key: "getColumnStackPosition",
    value: function(r) {
      return this.getFilteredColumns().indexOf(r);
    }
    /**
     * Export all previously added conditions.
     *
     * @returns {Array}
     */
  }, {
    key: "exportAllConditions",
    value: function() {
      return sr(this.filteringStates.getEntries(), function(r, n) {
        var o = YN(n, 2), i = o[0], a = o[1], l = a.operation, s = a.conditions;
        return r.push({
          column: i,
          operation: l,
          conditions: Ue(s, function(u) {
            var f = u.name, c = u.args;
            return {
              name: f,
              args: c
            };
          })
        }), r;
      }, []);
    }
    /**
     * Import conditions to the collection.
     *
     * @param {Array} conditions The collection of the conditions.
     */
  }, {
    key: "importAllConditions",
    value: function(r) {
      var n = this;
      this.clean(), I(r, function(o) {
        I(o.conditions, function(i) {
          return n.addCondition(o.column, i);
        });
      });
    }
    /**
     * Remove conditions at given column index.
     *
     * @param {number} column The physical column index.
     * @fires ConditionCollection#beforeRemove
     * @fires ConditionCollection#afterRemove
     */
  }, {
    key: "removeConditions",
    value: function(r) {
      this.runLocalHooks("beforeRemove", r), this.filteringStates.clearValue(r), this.runLocalHooks("afterRemove", r);
    }
    /**
     * Clean all conditions collection and reset order stack.
     *
     * @fires ConditionCollection#beforeClean
     * @fires ConditionCollection#afterClean
     */
  }, {
    key: "clean",
    value: function() {
      this.runLocalHooks("beforeClean"), this.filteringStates.clear(), this.runLocalHooks("afterClean");
    }
    /**
     * Check if at least one condition was added at specified column index. And if second parameter is passed then additionally
     * check if condition exists under its name.
     *
     * @param {number} column The physical column index.
     * @param {string} [name] Condition name.
     * @returns {boolean}
     */
  }, {
    key: "hasConditions",
    value: function(r, n) {
      var o = this.getConditions(r);
      return n ? o.some(function(i) {
        return i.name === n;
      }) : o.length > 0;
    }
    /**
     * Destroy object.
     */
  }, {
    key: "destroy",
    value: function() {
      this.isMapRegistrable && this.hot.columnIndexMapper.unregisterMap(XN), this.filteringStates = null, this.clearLocalHooks();
    }
  }]), e;
}();
bt(gz, $r);
const bz = gz;
function bd(e) {
  "@babel/helpers - typeof";
  return bd = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, bd(e);
}
function TLe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function ZN(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, kLe(n.key), n);
  }
}
function PLe(e, t, r) {
  return t && ZN(e.prototype, t), r && ZN(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function kLe(e) {
  var t = $Le(e, "string");
  return bd(t) === "symbol" ? t : String(t);
}
function $Le(e, t) {
  if (bd(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (bd(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var ALe = /* @__PURE__ */ function() {
  function e(t) {
    var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
      return [];
    };
    TLe(this, e), this.conditionCollection = t, this.columnDataFactory = r;
  }
  return PLe(e, [{
    key: "filter",
    value: function() {
      var r = this, n = [];
      return I(this.conditionCollection.getFilteredColumns(), function(o, i) {
        var a = r.columnDataFactory(o);
        i && (a = r._getIntersectData(a, n)), n = r.filterByColumn(o, a);
      }), n;
    }
    /**
     * Filter data based on specified physical column index.
     *
     * @param {number} column The physical column index.
     * @param {Array} [dataSource] Data source as array of objects with `value` and `meta` keys (e.g. `{value: 'foo', meta: {}}`).
     * @returns {Array} Returns filtered data.
     */
  }, {
    key: "filterByColumn",
    value: function(r) {
      var n = this, o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], i = [];
      return I(o, function(a) {
        a !== void 0 && n.conditionCollection.isMatch(a, r) && i.push(a);
      }), i;
    }
    /**
     * Intersect data.
     *
     * @private
     * @param {Array} data The data to intersect.
     * @param {Array} needles The collection intersected rows with the data.
     * @returns {Array}
     */
  }, {
    key: "_getIntersectData",
    value: function(r, n) {
      var o = [];
      return I(n, function(i) {
        var a = i.meta.visualRow;
        r[a] !== void 0 && (o[a] = r[a]);
      }), o;
    }
  }]), e;
}();
const wz = ALe;
function wd(e) {
  "@babel/helpers - typeof";
  return wd = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, wd(e);
}
function ILe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function QN(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, xLe(n.key), n);
  }
}
function MLe(e, t, r) {
  return t && QN(e.prototype, t), r && QN(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function xLe(e) {
  var t = DLe(e, "string");
  return wd(t) === "symbol" ? t : String(t);
}
function DLe(e, t) {
  if (wd(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (wd(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var Sz = /* @__PURE__ */ function() {
  function e(t, r) {
    var n = this, o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
      return [];
    };
    ILe(this, e), this.hot = t, this.conditionCollection = r, this.columnDataFactory = o, this.changes = [], this.grouping = !1, this.latestEditedColumnPosition = -1, this.latestOrderStack = [], this.conditionCollection.addLocalHook("beforeRemove", function(i) {
      return n._onConditionBeforeModify(i);
    }), this.conditionCollection.addLocalHook("afterRemove", function(i) {
      return n.updateStatesAtColumn(i);
    }), this.conditionCollection.addLocalHook("afterAdd", function(i) {
      return n.updateStatesAtColumn(i);
    }), this.conditionCollection.addLocalHook("beforeClean", function() {
      return n._onConditionBeforeClean();
    }), this.conditionCollection.addLocalHook("afterClean", function() {
      return n._onConditionAfterClean();
    });
  }
  return MLe(e, [{
    key: "groupChanges",
    value: function() {
      this.grouping = !0;
    }
    /**
     * Flush all collected changes. This trigger `update` hook for every previously collected change from condition collection.
     */
  }, {
    key: "flush",
    value: function() {
      var r = this;
      this.grouping = !1, I(this.changes, function(n) {
        r.updateStatesAtColumn(n);
      }), this.changes.length = 0;
    }
    /**
     * On before modify condition (add or remove from collection),.
     *
     * @param {number} column Column index.
     * @private
     */
  }, {
    key: "_onConditionBeforeModify",
    value: function(r) {
      this.latestEditedColumnPosition = this.conditionCollection.getColumnStackPosition(r);
    }
    /**
     * Update all related states which should be changed after invoking changes applied to current column.
     *
     * @param {number} column The column index.
     * @param {object} conditionArgsChange Object describing condition changes which can be handled by filters on `update` hook.
     * It contains keys `conditionKey` and `conditionValue` which refers to change specified key of condition to specified value
     * based on referred keys.
     */
  }, {
    key: "updateStatesAtColumn",
    value: function(r, n) {
      var o = this;
      if (this.grouping) {
        this.changes.indexOf(r) === -1 && this.changes.push(r);
        return;
      }
      var i = this.conditionCollection.exportAllConditions(), a = this.conditionCollection.getColumnStackPosition(r);
      a === -1 && (a = this.latestEditedColumnPosition);
      var l = i.slice(0, a), s = i.slice(a);
      s.length && s[0].column === r && s.shift();
      var u = mae(function(c, h) {
        var d = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [], y = new bz(o.hot, !1), p = [].concat(c, d);
        y.importAllConditions(p);
        var g = o.columnDataFactory(h), w;
        y.isEmpty() ? w = g : w = new wz(y, function(_) {
          return o.columnDataFactory(_);
        }).filter(), w = Ue(w, function(_) {
          return _.meta.visualRow;
        });
        var C = Ev(w);
        return y.destroy(), Zr(g, function(_) {
          return C(_.meta.visualRow);
        });
      })(l), f = [].concat(this.conditionCollection.getConditions(r));
      this.runLocalHooks("update", {
        editedConditionStack: {
          column: r,
          conditions: f
        },
        dependentConditionStacks: s,
        filteredRowsFactory: u,
        conditionArgsChange: n
      });
    }
    /**
     * On before conditions clean listener.
     *
     * @private
     */
  }, {
    key: "_onConditionBeforeClean",
    value: function() {
      this.latestOrderStack = this.conditionCollection.getFilteredColumns();
    }
    /**
     * On after conditions clean listener.
     *
     * @private
     */
  }, {
    key: "_onConditionAfterClean",
    value: function() {
      var r = this;
      I(this.latestOrderStack, function(n) {
        r.updateStatesAtColumn(n);
      });
    }
    /**
     * Destroy instance.
     */
  }, {
    key: "destroy",
    value: function() {
      var r = this;
      this.clearLocalHooks(), Ye(this, function(n, o) {
        r[o] = null;
      });
    }
  }]), e;
}();
bt(Sz, $r);
const NLe = Sz;
function Nu(e) {
  "@babel/helpers - typeof";
  return Nu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Nu(e);
}
var JN;
function HLe(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } }));
}
function LLe(e, t) {
  return VLe(e) || BLe(e, t) || FLe(e, t) || jLe();
}
function jLe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function FLe(e, t) {
  if (e) {
    if (typeof e == "string")
      return eH(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return eH(e, t);
  }
}
function eH(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function BLe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function VLe(e) {
  if (Array.isArray(e))
    return e;
}
function WLe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function tH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, zLe(n.key), n);
  }
}
function ULe(e, t, r) {
  return t && tH(e.prototype, t), r && tH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function zLe(e) {
  var t = YLe(e, "string");
  return Nu(t) === "symbol" ? t : String(t);
}
function YLe(e, t) {
  if (Nu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Nu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function rs() {
  return typeof Reflect < "u" && Reflect.get ? rs = Reflect.get.bind() : rs = function(t, r, n) {
    var o = GLe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, rs.apply(this, arguments);
}
function GLe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Ci(e), e !== null); )
    ;
  return e;
}
function KLe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && qO(e, t);
}
function qO(e, t) {
  return qO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, qO(e, t);
}
function qLe(e) {
  var t = ZLe();
  return function() {
    var n = Ci(e), o;
    if (t) {
      var i = Ci(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return XLe(this, o);
  };
}
function XLe(e, t) {
  if (t && (Nu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return Cz(e);
}
function Cz(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function ZLe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Ci(e) {
  return Ci = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Ci(e);
}
var rH = "filters", QLe = 250, JLe = /* @__PURE__ */ function(e) {
  KLe(r, e);
  var t = qLe(r);
  function r(n) {
    var o;
    return WLe(this, r), o = t.call(this, n), o.eventManager = new It(Cz(o)), o.dropdownMenuPlugin = null, o.conditionCollection = null, o.conditionUpdateObserver = null, o.components = /* @__PURE__ */ new Map([["filter_by_condition", null], ["filter_operators", null], ["filter_by_condition2", null], ["filter_by_value", null], ["filter_action_bar", null]]), o.filtersRowsMap = null, o.hot.addHook("afterGetColHeader", function(i, a) {
      return o.onAfterGetColHeader(i, a);
    }), o;
  }
  return ULe(r, [{
    key: "isEnabled",
    value: function() {
      return !!this.hot.getSettings()[rH];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      if (!this.enabled) {
        this.filtersRowsMap = this.hot.rowIndexMapper.registerMap(this.pluginName, new gv()), this.dropdownMenuPlugin = this.hot.getPlugin("dropdownMenu");
        var i = this.hot.getSettings().dropdownMenu, a = i && i.uiContainer || this.hot.rootDocument.body, l = function(d) {
          return d.addLocalHook("accept", function() {
            return o.onActionBarSubmit("accept");
          }), d.addLocalHook("cancel", function() {
            return o.onActionBarSubmit("cancel");
          }), d.addLocalHook("change", function(y) {
            return o.onComponentChange(d, y);
          }), d;
        }, s = function() {
          return "".concat(o.hot.getTranslatedPhrase(G0), ":");
        }, u = function() {
          return "".concat(o.hot.getTranslatedPhrase(K0), ":");
        };
        if (!this.components.get("filter_by_condition")) {
          var f = new mS(this.hot, {
            id: "filter_by_condition",
            name: s,
            addSeparator: !1,
            menuContainer: a
          });
          f.addLocalHook("afterClose", function() {
            return o.onSelectUIClosed();
          }), this.components.set("filter_by_condition", l(f));
        }
        if (this.components.get("filter_operators") || this.components.set("filter_operators", new aHe(this.hot, {
          id: "filter_operators",
          name: "Operators"
        })), !this.components.get("filter_by_condition2")) {
          var c = new mS(this.hot, {
            id: "filter_by_condition2",
            name: "",
            addSeparator: !0,
            menuContainer: a
          });
          c.addLocalHook("afterClose", function() {
            return o.onSelectUIClosed();
          }), this.components.set("filter_by_condition2", l(c));
        }
        this.components.get("filter_by_value") || this.components.set("filter_by_value", l(new lLe(this.hot, {
          id: "filter_by_value",
          name: u
        }))), this.components.get("filter_action_bar") || this.components.set("filter_action_bar", l(new gLe(this.hot, {
          id: "filter_action_bar",
          name: "Action bar"
        }))), this.conditionCollection || (this.conditionCollection = new bz(this.hot)), this.conditionUpdateObserver || (this.conditionUpdateObserver = new NLe(this.hot, this.conditionCollection, function(h) {
          return o.getDataMapAtColumn(h);
        }), this.conditionUpdateObserver.addLocalHook("update", function(h) {
          return o.updateComponents(h);
        })), this.components.forEach(function(h) {
          return h.show();
        }), this.addHook("beforeDropdownMenuSetItems", function(h) {
          return o.onBeforeDropdownMenuSetItems(h);
        }), this.addHook("afterDropdownMenuDefaultOptions", function(h) {
          return o.onAfterDropdownMenuDefaultOptions(h);
        }), this.addHook("afterDropdownMenuShow", function() {
          return o.onAfterDropdownMenuShow();
        }), this.addHook("afterDropdownMenuHide", function() {
          return o.onAfterDropdownMenuHide();
        }), this.addHook("afterChange", function(h) {
          return o.onAfterChange(h);
        }), this.hot.getSettings().dropdownMenu && this.dropdownMenuPlugin && (this.dropdownMenuPlugin.disablePlugin(), this.dropdownMenuPlugin.enablePlugin()), rs(Ci(r.prototype), "enablePlugin", this).call(this);
      }
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      var o = this;
      if (this.enabled) {
        var i;
        (i = this.dropdownMenuPlugin) !== null && i !== void 0 && i.enabled && this.dropdownMenuPlugin.menu.clearLocalHooks(), this.components.forEach(function(a, l) {
          a.destroy(), o.components.set(l, null);
        }), this.conditionCollection.destroy(), this.conditionCollection = null, this.hot.rowIndexMapper.unregisterMap(this.pluginName);
      }
      rs(Ci(r.prototype), "disablePlugin", this).call(this);
    }
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * @memberof Filters#
     * @function addCondition
     * @description
     * Adds condition to the conditions collection at specified column index.
     *
     * Possible predefined conditions:
     *  * `begins_with` - Begins with
     *  * `between` - Between
     *  * `by_value` - By value
     *  * `contains` - Contains
     *  * `date_after` - After a date
     *  * `date_before` - Before a date
     *  * `date_today` - Today
     *  * `date_tomorrow` - Tomorrow
     *  * `date_yesterday` - Yesterday
     *  * `empty` - Empty
     *  * `ends_with` - Ends with
     *  * `eq` - Equal
     *  * `gt` - Greater than
     *  * `gte` - Greater than or equal
     *  * `lt` - Less than
     *  * `lte` - Less than or equal
     *  * `none` - None (no filter)
     *  * `not_between` - Not between
     *  * `not_contains` - Not contains
     *  * `not_empty` - Not empty
     *  * `neq` - Not equal.
     *
     * Possible operations on collection of conditions:
     *  * `conjunction` - [**Conjunction**](https://en.wikipedia.org/wiki/Logical_conjunction) on conditions collection (by default), i.e. for such operation: <br/> c1 AND c2 AND c3 AND c4 ... AND cn === TRUE, where c1 ... cn are conditions.
     *  * `disjunction` - [**Disjunction**](https://en.wikipedia.org/wiki/Logical_disjunction) on conditions collection, i.e. for such operation: <br/> c1 OR c2 OR c3 OR c4 ... OR cn === TRUE, where c1, c2, c3, c4 ... cn are conditions.
     *  * `disjunctionWithExtraCondition` - **Disjunction** on first `n - 1`\* conditions from collection with an extra requirement computed from the last condition, i.e. for such operation: <br/> c1 OR c2 OR c3 OR c4 ... OR cn-1 AND cn === TRUE, where c1, c2, c3, c4 ... cn are conditions.
     *
     * \* when `n` is collection size; it's used i.e. for one operation introduced from UI (when choosing from filter's drop-down menu two conditions with OR operator between them, mixed with choosing values from the multiple choice select)
     *
     * **Note**: Mind that you cannot mix different types of operations (for instance, if you use `conjunction`, use it consequently for a particular column).
     *
     * @example
     * ::: only-for javascript
     * ```js
     * const container = document.getElementById('example');
     * const hot = new Handsontable(container, {
     *   data: getData(),
     *   filters: true
     * });
     *
     * // access to filters plugin instance
     * const filtersPlugin = hot.getPlugin('filters');
     *
     * // add filter "Greater than" 95 to column at index 1
     * filtersPlugin.addCondition(1, 'gt', [95]);
     * filtersPlugin.filter();
     *
     * // add filter "By value" to column at index 1
     * // in this case all value's that don't match will be filtered.
     * filtersPlugin.addCondition(1, 'by_value', [['ing', 'ed', 'as', 'on']]);
     * filtersPlugin.filter();
     *
     * // add filter "Begins with" with value "de" AND "Not contains" with value "ing"
     * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'conjunction');
     * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'conjunction');
     * filtersPlugin.filter();
     *
     * // add filter "Begins with" with value "de" OR "Not contains" with value "ing"
     * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'disjunction');
     * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'disjunction');
     * filtersPlugin.filter();
     * ```
     * :::
     *
     * ::: only-for react
     * ```jsx
     * const hotRef = useRef(null);
     *
     * ...
     *
     * <HotTable
     *   ref={hotRef}
     *   data={getData()}
     *   filters={true}
     * />
     *
     * // access to filters plugin instance
     * const hot = hotRef.current.hotInstance;
     * const filtersPlugin = hot.getPlugin('filters');
     *
     * // add filter "Greater than" 95 to column at index 1
     * filtersPlugin.addCondition(1, 'gt', [95]);
     * filtersPlugin.filter();
     *
     * // add filter "By value" to column at index 1
     * // in this case all value's that don't match will be filtered.
     * filtersPlugin.addCondition(1, 'by_value', [['ing', 'ed', 'as', 'on']]);
     * filtersPlugin.filter();
     *
     * // add filter "Begins with" with value "de" AND "Not contains" with value "ing"
     * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'conjunction');
     * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'conjunction');
     * filtersPlugin.filter();
     *
     * // add filter "Begins with" with value "de" OR "Not contains" with value "ing"
     * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'disjunction');
     * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'disjunction');
     * filtersPlugin.filter();
     * ```
     * :::
     *
     * @param {number} column Visual column index.
     * @param {string} name Condition short name.
     * @param {Array} args Condition arguments.
     * @param {string} [operationId=conjunction] `id` of operation which is performed on the column.
     */
    /* eslint-enable jsdoc/require-description-complete-sentence */
  }, {
    key: "addCondition",
    value: function(o, i, a) {
      var l = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : gi, s = this.hot.toPhysicalColumn(o);
      this.conditionCollection.addCondition(s, {
        command: {
          key: i
        },
        args: a
      }, l);
    }
    /**
     * Removes conditions at specified column index.
     *
     * @param {number} column Visual column index.
     */
  }, {
    key: "removeConditions",
    value: function(o) {
      var i = this.hot.toPhysicalColumn(o);
      this.conditionCollection.removeConditions(i);
    }
    /**
     * Clears all conditions previously added to the collection for the specified column index or, if the column index
     * was not passed, clear the conditions for all columns.
     *
     * @param {number} [column] Visual column index.
     */
  }, {
    key: "clearConditions",
    value: function(o) {
      if (o === void 0)
        this.conditionCollection.clean();
      else {
        var i = this.hot.toPhysicalColumn(o);
        this.conditionCollection.removeConditions(i);
      }
    }
    /**
     * Filters data based on added filter conditions.
     *
     * @fires Hooks#beforeFilter
     * @fires Hooks#afterFilter
     */
  }, {
    key: "filter",
    value: function() {
      var o = this, i = this._createDataFilter(), a = !this.conditionCollection.isEmpty(), l = [], s = this.conditionCollection.exportAllConditions(), u = this.hot.runHooks("beforeFilter", s);
      if (u !== !1)
        if (a) {
          var f = [];
          this.hot.batchExecution(function() {
            o.filtersRowsMap.clear(), l = Ue(i.filter(), function(h) {
              return h.meta.visualRow;
            });
            var c = Ev(l);
            _e(o.hot.countSourceRows() - 1, function(h) {
              c(h) || f.push(h);
            }), I(f, function(h) {
              o.filtersRowsMap.setValueAtIndex(h, !0);
            });
          }, !0), l.length || this.hot.deselectCell();
        } else
          this.filtersRowsMap.clear();
      this.hot.runHooks("afterFilter", s), this.hot.view.adjustElementsSize(!0), this.hot.render(), this.clearColumnSelection();
    }
    /**
     * Gets last selected column index.
     *
     * @returns {{visualIndex: number, physicalIndex: number} | null} Returns `null` when a column is
     * not selected. Otherwise, returns an object with `visualIndex` and `physicalIndex` properties containing
     * the index of the column.
     */
  }, {
    key: "getSelectedColumn",
    value: function() {
      var o, i = (o = this.hot.getSelectedRangeLast()) === null || o === void 0 ? void 0 : o.highlight;
      return i ? {
        visualIndex: i.col,
        physicalIndex: this.hot.toPhysicalColumn(i.col)
      } : null;
    }
    /**
     * Clears column selection.
     *
     * @private
     */
  }, {
    key: "clearColumnSelection",
    value: function() {
      var o = this.getSelectedColumn();
      o !== null && this.hot.selectCell(0, o.visualIndex);
    }
    /**
     * Returns handsontable source data with cell meta based on current selection.
     *
     * @param {number} [column] The physical column index. By default column index accept the value of the selected column.
     * @returns {Array} Returns array of objects where keys as row index.
     */
  }, {
    key: "getDataMapAtColumn",
    value: function(o) {
      var i = this, a = this.hot.toVisualColumn(o), l = [];
      return I(this.hot.getSourceDataAtCol(a), function(s, u) {
        var f, c = i.hot.getCellMeta(u, a), h = c.row, d = c.col, y = c.visualCol, p = c.visualRow, g = c.type, w = c.instance, C = c.dateFormat, _ = c.locale, k = (f = i.hot.getDataAtCell(i.hot.toVisualRow(u), a)) !== null && f !== void 0 ? f : s;
        l.push({
          meta: {
            row: h,
            col: d,
            visualCol: y,
            visualRow: p,
            type: g,
            instance: w,
            dateFormat: C,
            locale: _
          },
          value: uz(k)
        });
      }), l;
    }
    /**
     * `afterChange` listener.
     *
     * @private
     * @param {Array} changes Array of changes.
     */
  }, {
    key: "onAfterChange",
    value: function(o) {
      var i = this;
      o && I(o, function(a) {
        var l = LLe(a, 2), s = l[1], u = i.hot.propToCol(s);
        i.conditionCollection.hasConditions(u) && i.updateValueComponentCondition(u);
      });
    }
    /**
     * Update the condition of ValueComponent, based on the handled changes.
     *
     * @private
     * @param {number} columnIndex Column index of handled ValueComponent condition.
     */
  }, {
    key: "updateValueComponentCondition",
    value: function(o) {
      var i = this.hot.getDataAtCol(o), a = LO(i);
      this.conditionUpdateObserver.updateStatesAtColumn(o, a);
    }
    /**
     * Restores components to its saved state.
     *
     * @private
     * @param {Array} components List of components.
     */
  }, {
    key: "restoreComponents",
    value: function(o) {
      var i, a = (i = this.getSelectedColumn()) === null || i === void 0 ? void 0 : i.physicalIndex;
      o.forEach(function(l) {
        l.isHidden() || l.restoreState(a);
      }), this.updateDependentComponentsVisibility();
    }
    /**
     * After dropdown menu show listener.
     *
     * @private
     */
  }, {
    key: "onAfterDropdownMenuShow",
    value: function() {
      this.restoreComponents(Array.from(this.components.values()));
    }
    /**
     * After dropdown menu hide listener.
     *
     * @private
     */
  }, {
    key: "onAfterDropdownMenuHide",
    value: function() {
      this.components.get("filter_by_condition").getSelectElement().closeOptions(), this.components.get("filter_by_condition2").getSelectElement().closeOptions();
    }
    /**
     * Before dropdown menu set menu items listener.
     *
     * @private
     */
  }, {
    key: "onBeforeDropdownMenuSetItems",
    value: function() {
      var o = this;
      this.dropdownMenuPlugin && this.dropdownMenuPlugin.menu.addLocalHook("afterOpen", function() {
        o.dropdownMenuPlugin.menu.hotMenu.updateSettings({
          hiddenRows: !0
        });
      });
    }
    /**
     * After dropdown menu default options listener.
     *
     * @private
     * @param {object} defaultOptions ContextMenu default item options.
     */
  }, {
    key: "onAfterDropdownMenuDefaultOptions",
    value: function(o) {
      o.items.push({
        name: We
      }), this.components.forEach(function(i) {
        o.items.push(i.getMenuItemDescriptor());
      });
    }
    /**
     * Get an operation, based on the number and types of arguments (where arguments are states of components).
     *
     * @param {string} suggestedOperation Operation which was chosen by user from UI.
     * @param {object} byConditionState1 State of first condition component.
     * @param {object} byConditionState2 State of second condition component.
     * @param {object} byValueState State of value component.
     * @private
     * @returns {string}
     */
  }, {
    key: "getOperationBasedOnArguments",
    value: function(o, i, a, l) {
      var s = o;
      return s === Lm && i.command.key !== Jt && a.command.key !== Jt && l.command.key !== Jt ? s = IP : l.command.key !== Jt && (i.command.key === Jt || a.command.key === Jt) && (s = gi), s;
    }
    /**
     * On action bar submit listener.
     *
     * @private
     * @param {string} submitType The submit type.
     */
  }, {
    key: "onActionBarSubmit",
    value: function(o) {
      var i;
      if (o === "accept") {
        var a = this.getSelectedColumn();
        if (a === null) {
          var l;
          (l = this.dropdownMenuPlugin) === null || l === void 0 || l.close();
          return;
        }
        var s = a.physicalIndex, u = this.components.get("filter_by_condition").getState(), f = this.components.get("filter_by_condition2").getState(), c = this.components.get("filter_by_value").getState(), h = this.getOperationBasedOnArguments(this.components.get("filter_operators").getActiveOperationId(), u, f, c);
        this.conditionUpdateObserver.groupChanges();
        var d = this.conditionCollection.getColumnStackPosition(s);
        d === -1 && (d = void 0), this.conditionCollection.removeConditions(s), u.command.key !== Jt && (this.conditionCollection.addCondition(s, u, h, d), f.command.key !== Jt && this.conditionCollection.addCondition(s, f, h, d)), c.command.key !== Jt && this.conditionCollection.addCondition(s, c, h, d), this.conditionUpdateObserver.flush(), this.components.forEach(function(y) {
          return y.saveState(s);
        }), this.filtersRowsMap.clear(), this.filter();
      }
      (i = this.dropdownMenuPlugin) === null || i === void 0 || i.close();
    }
    /**
     * On component change listener.
     *
     * @private
     * @param {BaseComponent} component Component inheriting BaseComponent.
     * @param {object} command Menu item object (command).
     */
  }, {
    key: "onComponentChange",
    value: function(o, i) {
      this.updateDependentComponentsVisibility(), o.constructor === mS && !i.inputsCount && this.setListeningDropdownMenu();
    }
    /**
     * On component SelectUI closed listener.
     *
     * @private
     */
  }, {
    key: "onSelectUIClosed",
    value: function() {
      this.setListeningDropdownMenu();
    }
    /**
     * Listen to the keyboard input on document body and forward events to instance of Handsontable
     * created by DropdownMenu plugin.
     *
     * @private
     */
  }, {
    key: "setListeningDropdownMenu",
    value: function() {
      this.dropdownMenuPlugin && this.dropdownMenuPlugin.setListening();
    }
    /**
     * Updates visibility of some of the components, based on the state of the parent component.
     *
     * @private
     */
  }, {
    key: "updateDependentComponentsVisibility",
    value: function() {
      var o = this.components.get("filter_by_condition"), i = o.getState(), a = i.command, l = [this.components.get("filter_by_condition2"), this.components.get("filter_operators")];
      a.showOperators ? this.showComponents.apply(this, l) : this.hideComponents.apply(this, l);
    }
    /**
     * On after get column header listener.
     *
     * @private
     * @param {number} col Visual column index.
     * @param {HTMLTableCellElement} TH Header's TH element.
     */
  }, {
    key: "onAfterGetColHeader",
    value: function(o, i) {
      var a = this.hot.toPhysicalColumn(o);
      this.enabled && this.conditionCollection.hasConditions(a) ? ae(i, "htFiltersActive") : Le(i, "htFiltersActive");
    }
    /**
     * Creates DataFilter instance based on condition collection.
     *
     * @private
     * @param {ConditionCollection} conditionCollection Condition collection object.
     * @returns {DataFilter}
     */
  }, {
    key: "_createDataFilter",
    value: function() {
      var o = this, i = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.conditionCollection;
      return new wz(i, function(a) {
        return o.getDataMapAtColumn(a);
      });
    }
    /**
     * It updates the components state. The state is triggered by ConditionUpdateObserver, which
     * reacts to any condition added to the condition collection. It may be added through the UI
     * components or by API call.
     *
     * @private
     * @param {object} conditionsState An object with the state generated by UI components.
     */
  }, {
    key: "updateComponents",
    value: function(o) {
      var i;
      if ((i = this.dropdownMenuPlugin) !== null && i !== void 0 && i.enabled) {
        var a = o.editedConditionStack, l = a.conditions, s = a.column, u = l.filter(function(h) {
          return h.name === ya;
        }), f = l.filter(function(h) {
          return h.name !== ya;
        });
        if (u.length >= 2 || f.length >= 3)
          ht(ut(JN || (JN = HLe([`The filter conditions have been applied properly, but couldnât be displayed visually. 
        The overall amount of conditions exceed the capability of the dropdown menu. 
        For more details see the documentation.`], [`The filter conditions have been applied properly, but couldnât be displayed visually.\\x20
        The overall amount of conditions exceed the capability of the dropdown menu.\\x20
        For more details see the documentation.`]))));
        else {
          var c = this.conditionCollection.getOperation(s);
          this.components.get("filter_by_condition").updateState(f[0], s), this.components.get("filter_by_condition2").updateState(f[1], s), this.components.get("filter_operators").updateState(c, s), this.components.get("filter_by_value").updateState(o);
        }
      }
    }
    /**
     * Returns indexes of passed components inside list of `dropdownMenu` items.
     *
     * @private
     * @param {...BaseComponent} components List of components.
     * @returns {Array}
     */
  }, {
    key: "getIndexesOfComponents",
    value: function() {
      var o = [];
      if (!this.dropdownMenuPlugin)
        return o;
      for (var i = this.dropdownMenuPlugin.menu, a = arguments.length, l = new Array(a), s = 0; s < a; s++)
        l[s] = arguments[s];
      return I(l, function(u) {
        I(i.menuItems, function(f, c) {
          f.key === u.getMenuItemDescriptor().key && o.push(c);
        });
      }), o;
    }
    /**
     * Changes visibility of component.
     *
     * @private
     * @param {boolean} visible Determine if components should be visible.
     * @param {...BaseComponent} components List of components.
     */
  }, {
    key: "changeComponentsVisibility",
    value: function() {
      var o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
      if (this.dropdownMenuPlugin) {
        for (var i = this.dropdownMenuPlugin.menu, a = i.hotMenu, l = a.getPlugin("hiddenRows"), s = arguments.length, u = new Array(s > 1 ? s - 1 : 0), f = 1; f < s; f++)
          u[f - 1] = arguments[f];
        var c = this.getIndexesOfComponents.apply(this, u);
        o ? l.showRows(c) : l.hideRows(c), a.render();
      }
    }
    /**
     * Hides components of filters `dropdownMenu`.
     *
     * @private
     * @param {...BaseComponent} components List of components.
     */
  }, {
    key: "hideComponents",
    value: function() {
      for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
        i[a] = arguments[a];
      this.changeComponentsVisibility.apply(this, [!1].concat(i));
    }
    /**
     * Shows components of filters `dropdownMenu`.
     *
     * @private
     * @param {...BaseComponent} components List of components.
     */
  }, {
    key: "showComponents",
    value: function() {
      for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
        i[a] = arguments[a];
      this.changeComponentsVisibility.apply(this, [!0].concat(i));
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      var o = this;
      this.enabled && (this.components.forEach(function(i, a) {
        i !== null && (i.destroy(), o.components.set(a, null));
      }), this.conditionCollection.destroy(), this.conditionUpdateObserver.destroy(), this.hot.rowIndexMapper.unregisterMap(this.pluginName)), rs(Ci(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return rH;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return QLe;
    }
  }, {
    key: "PLUGIN_DEPS",
    get: function() {
      return ["plugin:DropdownMenu", "plugin:HiddenRows", "cell-type:checkbox"];
    }
  }]), r;
}(ft);
function Sd(e) {
  "@babel/helpers - typeof";
  return Sd = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Sd(e);
}
function nH(e, t) {
  var r = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    t && (n = n.filter(function(o) {
      return Object.getOwnPropertyDescriptor(e, o).enumerable;
    })), r.push.apply(r, n);
  }
  return r;
}
function Pc(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? nH(Object(r), !0).forEach(function(n) {
      eje(e, n, r[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : nH(Object(r)).forEach(function(n) {
      Object.defineProperty(e, n, Object.getOwnPropertyDescriptor(r, n));
    });
  }
  return e;
}
function eje(e, t, r) {
  return t = tje(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function tje(e) {
  var t = rje(e, "string");
  return Sd(t) === "symbol" ? t : String(t);
}
function rje(e, t) {
  if (Sd(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Sd(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var _z = "internal-use-in-handsontable", XO = {
  licenseKey: _z,
  useArrayArithmetic: !0,
  useColumnIndex: !1,
  useStats: !1,
  evaluateNullToZero: !0,
  precisionEpsilon: 1e-13,
  precisionRounding: 14,
  smartRounding: !0,
  leapYear1900: !1,
  nullDate: {
    year: 1899,
    month: 12,
    day: 30
  },
  nullYear: 30,
  dateFormats: ["DD/MM/YYYY", "DD/MM/YY"],
  timeFormats: ["hh:mm", "hh:mm:ss.sss"],
  matchWholeCell: !0,
  useRegularExpressions: !1,
  useWildcards: !0,
  functionArgSeparator: ",",
  thousandSeparator: "",
  decimalSeparator: ".",
  language: "enGB"
};
function Oz(e) {
  var t, r;
  return {
    maxColumns: e.maxColumns,
    maxRows: e.maxRows,
    language: (t = e[ir]) === null || t === void 0 || (r = t.language) === null || r === void 0 ? void 0 : r.langCode
  };
}
function Rz(e) {
  return Object.keys(e).reduce(function(t, r) {
    return r !== "hyperformula" && (t[r] = e[r]), t;
  }, {});
}
function nje(e) {
  var t, r = e[ir], n = Rz(r != null && (t = r.engine) !== null && t !== void 0 && t.hyperformula ? r.engine : {}), o = Oz(e);
  return Pc(Pc(Pc({}, XO), n), o);
}
function oje(e) {
  var t, r = e[ir], n = Rz(r != null && (t = r.engine) !== null && t !== void 0 && t.hyperformula ? r.engine : {}), o = Oz(e);
  return Pc(Pc({}, n), o);
}
function ije(e, t) {
  return Object.keys(t).some(function(r) {
    return t[r] !== void 0 && t[r] !== e[r];
  });
}
var oH;
function aje(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } }));
}
function ZO(e) {
  "@babel/helpers - typeof";
  return ZO = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, ZO(e);
}
function sb() {
  var e = "engine_relationship", t = nn(ir);
  return t.hasItem(e) || t.register(e, /* @__PURE__ */ new Map()), t.getItem(e);
}
function MP() {
  var e = "shared_engine_usage", t = nn(ir);
  return t.hasItem(e) || t.register(e, /* @__PURE__ */ new Map()), t.getItem(e);
}
function lje(e) {
  var t = e.getSettings(), r = t[ir], n = r == null ? void 0 : r.engine;
  if (r === !0 || gt(n))
    return null;
  if (typeof n.hyperformula == "function" || typeof n == "function") {
    var o;
    return sje((o = n.hyperformula) !== null && o !== void 0 ? o : n, t, e);
  } else if (ZO(n) === "object" && gt(n.hyperformula)) {
    var i = sb(), a = MP().get(n);
    return i.has(n) || i.set(n, []), i.get(n).push(e), a && a.push(e.guid), n.getConfig().licenseKey || n.updateConfig({
      licenseKey: _z
    }), (n.getConfig().leapYear1900 !== XO.leapYear1900 || WE(n.getConfig().nullDate, XO.nullDate) === !1) && ht(ut(oH || (oH = aje(["If you use HyperFormula with Handsontable, keep the default `leapYear1900` and `nullDate` \n      settings. Otherwise, HyperFormula's dates may not sync correctly with Handsontable's dates."], ["If you use HyperFormula with Handsontable, keep the default \\`leapYear1900\\` and \\`nullDate\\` \n      settings. Otherwise, HyperFormula's dates may not sync correctly with Handsontable's dates."])))), n;
  }
  return null;
}
function sje(e, t, r) {
  var n = t[ir], o = nje(t), i = sb(), a = MP();
  uje(e, n.functions), fje(e, n.language);
  var l = e.buildEmpty(o);
  return i.set(l, [r]), a.set(l, [r.guid]), cje(l, n.namedExpressions), l.on("sheetAdded", function() {
    l.rebuildAndRecalculate();
  }), l.on("sheetRemoved", function() {
    l.rebuildAndRecalculate();
  }), l;
}
function iH(e) {
  var t, r = sb(), n = r.size === 0 ? [] : Array.from((t = r.get(e)) !== null && t !== void 0 ? t : []);
  return new Map(n.map(function(o) {
    return [o.getPlugin("formulas").sheetId, o];
  }));
}
function aH(e, t) {
  if (e) {
    var r = sb(), n = r.get(e), o = MP(), i = o.get(e);
    n && n.includes(t) && (n.splice(n.indexOf(t), 1), n.length === 0 && r.delete(e)), i && i.includes(t.guid) && (i.splice(i.indexOf(t.guid), 1), i.length === 0 && (o.delete(e), e.destroy()));
  }
}
function uje(e, t) {
  t && t.forEach(function(r) {
    var n = r.name, o = r.plugin, i = r.translations;
    try {
      e.registerFunction(n, o, i);
    } catch (a) {
      ht(a.message);
    }
  });
}
function fje(e, t) {
  if (t) {
    var r = t.langCode;
    try {
      e.registerLanguage(r, t);
    } catch (n) {
      ht(n.message);
    }
  }
}
function cje(e, t) {
  t && (e.suspendEvaluation(), t.forEach(function(r) {
    var n = r.name, o = r.expression, i = r.scope, a = r.options;
    try {
      e.addNamedExpression(n, o, i, a);
    } catch (l) {
      ht(l.message);
    }
  }), e.resumeEvaluation());
}
function hje(e, t) {
  return (gt(t) || !e.doesSheetExist(t)) && (t = e.addSheet(t)), t;
}
var Ez = "DD/MM/YYYY";
function Tz(e) {
  return typeof e == "string" && e.charAt(0) === "'" && e.charAt(1) === "=";
}
function dje(e) {
  return Tz(e) ? e.substr(1) : e;
}
function vje(e) {
  return typeof e == "string" && e.startsWith("=");
}
function bS(e, t) {
  return typeof e == "string" && t === "date";
}
function lH(e, t) {
  return ne(e, t, !0).isValid();
}
function sH(e, t) {
  return ne(e, t, !0).format(Ez);
}
function yje(e, t) {
  return ne(e, Ez, !0).format(t);
}
function uH(e, t) {
  var r = -1, n = new Date(Date.UTC(0, 0, e + r));
  return ne(n).format(t);
}
function Cd(e) {
  "@babel/helpers - typeof";
  return Cd = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Cd(e);
}
function pje(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function fH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, gje(n.key), n);
  }
}
function mje(e, t, r) {
  return t && fH(e.prototype, t), r && fH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function gje(e) {
  var t = bje(e, "string");
  return Cd(t) === "symbol" ? t : String(t);
}
function bje(e, t) {
  if (Cd(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Cd(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Yi(e, t, r) {
  wje(e, t), t.set(e, r);
}
function wje(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Ct(e, t) {
  var r = Pz(e, t, "get");
  return Sje(e, r);
}
function Sje(e, t) {
  return t.get ? t.get.call(e) : t.value;
}
function Qo(e, t, r) {
  var n = Pz(e, t, "set");
  return Cje(e, n, r), r;
}
function Pz(e, t, r) {
  if (!t.has(e))
    throw new TypeError("attempted to " + r + " private field on non-instance");
  return t.get(e);
}
function Cje(e, t, r) {
  if (t.set)
    t.set.call(e, r);
  else {
    if (!t.writable)
      throw new TypeError("attempted to set read only private field");
    t.value = r;
  }
}
var Jf = /* @__PURE__ */ new WeakMap(), Jo = /* @__PURE__ */ new WeakMap(), Mr = /* @__PURE__ */ new WeakMap(), Ty = /* @__PURE__ */ new WeakMap(), wS = /* @__PURE__ */ new WeakMap(), SS = /* @__PURE__ */ new WeakMap(), Py = /* @__PURE__ */ new WeakMap(), _je = /* @__PURE__ */ function() {
  function e(t, r, n) {
    pje(this, e), Yi(this, Jf, {
      writable: !0,
      value: void 0
    }), Yi(this, Jo, {
      writable: !0,
      value: void 0
    }), Yi(this, Mr, {
      writable: !0,
      value: void 0
    }), Yi(this, Ty, {
      writable: !0,
      value: []
    }), Yi(this, wS, {
      writable: !0,
      value: []
    }), Yi(this, SS, {
      writable: !0,
      value: void 0
    }), Yi(this, Py, {
      writable: !0,
      value: []
    }), Qo(this, Jf, t), Qo(this, Jo, r), Qo(this, Mr, n);
  }
  return mje(e, [{
    key: "setRemovedHfIndexes",
    value: function(r) {
      var n = this;
      return Qo(this, Py, r.map(function(o) {
        var i = Ct(n, Jo).getVisualFromPhysicalIndex(o);
        return n.getHfIndexFromVisualIndex(i);
      })), Ct(this, Py);
    }
    /**
     * Gets removed HF indexes (right before performing removal on HOT).
     *
     * @returns {Array<number>} List of removed HF indexes.
     */
  }, {
    key: "getRemovedHfIndexes",
    value: function() {
      return Ct(this, Py);
    }
    /**
     * Gets corresponding HyperFormula index for particular visual index. It's respecting the idea that HF's engine
     * is fed also with trimmed indexes (business requirements for formula result calculation also for trimmed elements).
     *
     * @param {number} visualIndex Visual index.
     * @returns {number}
     */
  }, {
    key: "getHfIndexFromVisualIndex",
    value: function(r) {
      var n = Ct(this, Jo).getIndexesSequence(), o = Ct(this, Jo).getNotTrimmedIndexes();
      return n.indexOf(o[r]);
    }
    /**
     * Synchronizes moves done on HOT to HF engine (based on previously calculated positions).
     *
     * @private
     * @param {Array<{from: number, to: number}>} moves Calculated HF's move positions.
     */
  }, {
    key: "syncMoves",
    value: function(r) {
      var n = this, o = 1, i = "move".concat(vn(Ct(this, Jf)), "s");
      Ct(this, Mr).getEngine().batch(function() {
        r.forEach(function(a) {
          var l = a.from !== a.to, s = a.from + 1 !== a.to;
          l && s && Ct(n, Mr).getEngine()[i](Ct(n, Mr).getSheetId(), a.from, o, a.to);
        });
      });
    }
    /**
     * Stores information about performed HOT moves for purpose of calculating where to move HF elements.
     *
     * @param {Array<number>} movedVisualIndexes Sequence of moved visual indexes for certain axis.
     * @param {number} visualFinalIndex Final visual place where to move HOT indexes.
     * @param {boolean} movePossible Indicates if it's possible to move HOT indexes to the desired position.
     */
  }, {
    key: "storeMovesInformation",
    value: function(r, n, o) {
      var i = this;
      o !== !1 && (Qo(this, wS, r.map(function(a) {
        return i.getHfIndexFromVisualIndex(a);
      })), Qo(this, SS, this.getHfIndexFromVisualIndex(n)));
    }
    /**
     * Gets first position where to move element (respecting the fact that some element will be sooner or later
     * taken out of the dataset in order to move them).
     *
     * @param {Array<number>} movedHfIndexes Sequence of moved HF indexes for certain axis.
     * @param {number} finalHfIndex Final HF place where to move rows.
     * @returns {number} HF's index informing where to move the first element.
     * @private
     */
  }, {
    key: "getMoveLine",
    value: function(r, n) {
      var o = Ct(this, Jo).getNumberOfIndexes(), i = Array.from(Array(o).keys()).filter(function(l) {
        return r.includes(l) === !1;
      });
      if (n === 0) {
        var a;
        return (a = i[n]) !== null && a !== void 0 ? a : 0;
      }
      return i[n - 1] + 1;
    }
    /**
     * Gets initially calculated HF's move positions.
     *
     * @private
     * @param {Array<number>} movedHfIndexes Sequence of moved HF indexes for certain axis.
     * @param {number} finalHfIndex Final HF place where to move rows.
     * @returns {Array<{from: number, to: number}>} Initially calculated HF's move positions.
     */
  }, {
    key: "getInitiallyCalculatedMoves",
    value: function(r, n) {
      var o = this.getMoveLine(r, n), i = [];
      return r.forEach(function(a) {
        var l = {
          from: a,
          to: o
        };
        i.forEach(function(s) {
          var u = s.from > s.to, f = s.to <= l.from, c = s.from > l.from;
          c && f && u && (l.from += 1);
        }), l.from >= o && (o += 1), i.push(l);
      }), i;
    }
    /**
     * Gets finally calculated HF's move positions (after adjusting).
     *
     * @private
     * @param {Array<{from: number, to: number}>} moves Initially calculated HF's move positions.
     * @returns {Array<{from: number, to: number}>} Finally calculated HF's move positions (after adjusting).
     */
  }, {
    key: "adjustedCalculatedMoves",
    value: function(r) {
      return r.forEach(function(n, o) {
        var i = r.slice(o + 1);
        i.forEach(function(a) {
          var l = a.from < a.to;
          a.from > n.from && l && (a.from -= 1);
        });
      }), r;
    }
    /**
     * Calculating where to move HF elements and performing already calculated moves.
     *
     * @param {boolean} movePossible Indicates if it was possible to move HOT indexes to the desired position.
     * @param {boolean} orderChanged Indicates if order of HOT indexes was changed by move.
     */
  }, {
    key: "calculateAndSyncMoves",
    value: function(r, n) {
      var o = this;
      if (!Ct(this, Mr).isPerformingUndoRedo() && !(r === !1 || n === !1)) {
        var i = this.adjustedCalculatedMoves(this.getInitiallyCalculatedMoves(Ct(this, wS), Ct(this, SS)));
        Ct(this, Mr).getSheetId() === null ? Ct(this, Mr).getPostponeAction(function() {
          return o.syncMoves(i);
        }) : this.syncMoves(i);
      }
    }
    /**
     * Gets callback for hook triggered after performing change of indexes order.
     *
     * @returns {Function}
     */
  }, {
    key: "getIndexesChangeSyncMethod",
    value: function() {
      var r = this, n = "set".concat(vn(Ct(this, Jf)), "Order");
      return function(o) {
        if (!Ct(r, Mr).isPerformingUndoRedo()) {
          var i = Ct(r, Jo).getIndexesSequence();
          if (o === "update") {
            var a = Ct(r, Ty).map(function(c) {
              return i.indexOf(c);
            }), l = Ct(r, Mr).getEngine().getSheetDimensions(Ct(r, Mr).getSheetId()), s;
            Ct(r, Jf) === "row" ? s = l.height : s = l.width;
            for (var u = a.length, f = u; f < s; f += 1)
              a.push(f);
            Ct(r, Mr).getEngine()[n](Ct(r, Mr).getSheetId(), a);
          }
          Qo(r, Ty, i);
        }
      };
    }
    /**
     * Initialize the AxisSyncer.
     */
  }, {
    key: "init",
    value: function() {
      Qo(this, Ty, Ct(this, Jo).getIndexesSequence());
    }
  }]), e;
}();
const cH = _je;
function _d(e) {
  "@babel/helpers - typeof";
  return _d = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, _d(e);
}
function Oje(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function hH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Eje(n.key), n);
  }
}
function Rje(e, t, r) {
  return t && hH(e.prototype, t), r && hH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Eje(e) {
  var t = Tje(e, "string");
  return _d(t) === "symbol" ? t : String(t);
}
function Tje(e, t) {
  if (_d(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (_d(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Gi(e, t, r) {
  Pje(e, t), t.set(e, r);
}
function Pje(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Zn(e, t) {
  var r = kz(e, t, "get");
  return kje(e, r);
}
function kje(e, t) {
  return t.get ? t.get.call(e) : t.value;
}
function Ki(e, t, r) {
  var n = kz(e, t, "set");
  return $je(e, n, r), r;
}
function kz(e, t, r) {
  if (!t.has(e))
    throw new TypeError("attempted to " + r + " private field on non-instance");
  return t.get(e);
}
function $je(e, t, r) {
  if (t.set)
    t.set.call(e, r);
  else {
    if (!t.writable)
      throw new TypeError("attempted to set read only private field");
    t.value = r;
  }
}
var ky = /* @__PURE__ */ new WeakMap(), $y = /* @__PURE__ */ new WeakMap(), CS = /* @__PURE__ */ new WeakMap(), _S = /* @__PURE__ */ new WeakMap(), OS = /* @__PURE__ */ new WeakMap(), RS = /* @__PURE__ */ new WeakMap(), ES = /* @__PURE__ */ new WeakMap(), Aje = /* @__PURE__ */ function() {
  function e(t, r, n) {
    Oje(this, e), Gi(this, ky, {
      writable: !0,
      value: void 0
    }), Gi(this, $y, {
      writable: !0,
      value: void 0
    }), Gi(this, CS, {
      writable: !0,
      value: void 0
    }), Gi(this, _S, {
      writable: !0,
      value: !1
    }), Gi(this, OS, {
      writable: !0,
      value: !1
    }), Gi(this, RS, {
      writable: !0,
      value: null
    }), Gi(this, ES, {
      writable: !0,
      value: null
    }), Ki(this, ky, new cH("row", t, this)), Ki(this, $y, new cH("column", r, this)), Ki(this, CS, n);
  }
  return Rje(e, [{
    key: "getForAxis",
    value: function(r) {
      return r === "row" ? Zn(this, ky) : Zn(this, $y);
    }
    /**
     * Sets flag informing whether an undo action is already performed (we don't execute synchronization in such case).
     *
     * @param {boolean} flagValue Boolean value for the flag.
     */
  }, {
    key: "setPerformUndo",
    value: function(r) {
      Ki(this, _S, r);
    }
    /**
     * Sets flag informing whether a redo action is already performed (we don't execute synchronization in such case).
     *
     * @param {boolean} flagValue Boolean value for the flag.
     */
  }, {
    key: "setPerformRedo",
    value: function(r) {
      Ki(this, OS, r);
    }
    /**
     * Gets information whether redo or undo action is already performed (we don't execute synchronization in such case).
     *
     * @private
     * @returns {boolean}
     */
  }, {
    key: "isPerformingUndoRedo",
    value: function() {
      return Zn(this, _S) || Zn(this, OS);
    }
    /**
     * Gets HyperFormula's sheet id.
     *
     * @returns {string|null}
     */
  }, {
    key: "getSheetId",
    value: function() {
      return Zn(this, ES);
    }
    /**
     * Gets engine instance that will be used for handled instance of Handsontable.
     *
     * @type {HyperFormula|null}
     */
  }, {
    key: "getEngine",
    value: function() {
      return Zn(this, RS);
    }
    /**
     * Gets method which will postpone execution of some action (needed when synchronization endpoint isn't setup yet).
     *
     * @returns {Function}
     */
  }, {
    key: "getPostponeAction",
    value: function() {
      return Zn(this, CS);
    }
    /**
     * Setups a synchronization endpoint.
     *
     * @param {HyperFormula|null} engine The HF's engine instance which will be synced.
     * @param {string|null} sheetId HyperFormula's sheet name.
     */
  }, {
    key: "setupSyncEndpoint",
    value: function(r, n) {
      Ki(this, RS, r), Ki(this, ES, n), Zn(this, ky).init(), Zn(this, $y).init();
    }
  }]), e;
}();
const Ije = Aje;
function Mje(e) {
  return Nje(e) || Dje(e) || $z(e) || xje();
}
function xje() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Dje(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function Nje(e) {
  if (Array.isArray(e))
    return QO(e);
}
function Ti(e) {
  "@babel/helpers - typeof";
  return Ti = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Ti(e);
}
function Pl(e, t) {
  return jje(e) || Lje(e, t) || $z(e, t) || Hje();
}
function Hje() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function $z(e, t) {
  if (e) {
    if (typeof e == "string")
      return QO(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return QO(e, t);
  }
}
function QO(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function Lje(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function jje(e) {
  if (Array.isArray(e))
    return e;
}
function Fje(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function dH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Az(n.key), n);
  }
}
function Bje(e, t, r) {
  return t && dH(e.prototype, t), r && dH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function pa() {
  return typeof Reflect < "u" && Reflect.get ? pa = Reflect.get.bind() : pa = function(t, r, n) {
    var o = Vje(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, pa.apply(this, arguments);
}
function Vje(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = _o(e), e !== null); )
    ;
  return e;
}
function Wje(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && JO(e, t);
}
function JO(e, t) {
  return JO = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, JO(e, t);
}
function Uje(e) {
  var t = Yje();
  return function() {
    var n = _o(e), o;
    if (t) {
      var i = _o(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return zje(this, o);
  };
}
function zje(e, t) {
  if (t && (Ti(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return An(e);
}
function An(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function Yje() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function _o(e) {
  return _o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, _o(e);
}
function kl(e, t, r) {
  return t = Az(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function Az(e) {
  var t = Gje(e, "string");
  return Ti(t) === "symbol" ? t : String(t);
}
function Gje(e, t) {
  if (Ti(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Ti(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function TS(e, t, r) {
  Kje(e, t), t.set(e, r);
}
function Kje(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function ei(e, t, r) {
  var n = Iz(e, t, "set");
  return qje(e, n, r), r;
}
function qje(e, t, r) {
  if (t.set)
    t.set.call(e, r);
  else {
    if (!t.writable)
      throw new TypeError("attempted to set read only private field");
    t.value = r;
  }
}
function $l(e, t) {
  var r = Iz(e, t, "get");
  return Xje(e, r);
}
function Iz(e, t, r) {
  if (!t.has(e))
    throw new TypeError("attempted to " + r + " private field on non-instance");
  return t.get(e);
}
function Xje(e, t) {
  return t.get ? t.get.call(e) : t.value;
}
var ir = "formulas", Zje = ["maxRows", "maxColumns", "language"], Qje = 260;
we.getSingleton().register("afterNamedExpressionAdded");
we.getSingleton().register("afterNamedExpressionRemoved");
we.getSingleton().register("afterSheetAdded");
we.getSingleton().register("afterSheetRemoved");
we.getSingleton().register("afterSheetRenamed");
we.getSingleton().register("afterFormulasValuesUpdate");
var Al = function(t) {
  return t === "UndoRedo.undo" || t === "UndoRedo.redo" || t === "auto";
}, Qn = /* @__PURE__ */ new WeakMap(), PS = /* @__PURE__ */ new WeakMap(), ec = /* @__PURE__ */ new WeakMap(), Jje = /* @__PURE__ */ function(e) {
  Wje(r, e);
  var t = Uje(r);
  function r() {
    var n;
    Fje(this, r);
    for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
      i[a] = arguments[a];
    return n = t.call.apply(t, [this].concat(i)), TS(An(n), Qn, {
      writable: !0,
      value: !1
    }), TS(An(n), PS, {
      writable: !0,
      value: !1
    }), TS(An(n), ec, {
      writable: !0,
      value: [["valuesUpdated", function() {
        var l;
        return (l = n).onEngineValuesUpdated.apply(l, arguments);
      }], ["namedExpressionAdded", function() {
        var l;
        return (l = n).onEngineNamedExpressionsAdded.apply(l, arguments);
      }], ["namedExpressionRemoved", function() {
        var l;
        return (l = n).onEngineNamedExpressionsRemoved.apply(l, arguments);
      }], ["sheetAdded", function() {
        var l;
        return (l = n).onEngineSheetAdded.apply(l, arguments);
      }], ["sheetRenamed", function() {
        var l;
        return (l = n).onEngineSheetRenamed.apply(l, arguments);
      }], ["sheetRemoved", function() {
        var l;
        return (l = n).onEngineSheetRemoved.apply(l, arguments);
      }]]
    }), kl(An(n), "staticRegister", nn("formulas")), kl(An(n), "engine", null), kl(An(n), "sheetName", null), kl(An(n), "indexSyncer", null), kl(An(n), "rowAxisSyncer", null), kl(An(n), "columnAxisSyncer", null), n;
  }
  return Bje(r, [{
    key: "sheetId",
    get: (
      /**
       * HyperFormula's sheet id.
       *
       * @type {number|null}
       */
      function() {
        return this.sheetName === null ? null : this.engine.getSheetId(this.sheetName);
      }
    )
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link Formulas#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
  }, {
    key: "isEnabled",
    value: function() {
      return !!this.hot.getSettings()[ir];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o, i = this;
      if (!this.enabled) {
        if (this.engine = (o = lje(this.hot)) !== null && o !== void 0 ? o : this.engine, !this.engine) {
          ht("Missing the required `engine` key in the Formulas settings. Please fill it with either an engine class or an engine instance.");
          return;
        }
        if (this.sheetName !== null && !this.engine.doesSheetExist(this.sheetName)) {
          var a = this.addSheet(this.sheetName, this.hot.getSourceDataArray());
          a !== !1 && (this.sheetName = a);
        }
        this.addHook("beforeLoadData", function() {
          return i.onBeforeLoadData.apply(i, arguments);
        }), this.addHook("afterLoadData", function() {
          return i.onAfterLoadData.apply(i, arguments);
        }), this.addHook("beforeUpdateData", function() {
          return i.onBeforeLoadData.apply(i, arguments);
        }), this.addHook("afterUpdateData", function() {
          return i.onAfterLoadData.apply(i, arguments);
        }), this.addHook("modifyData", function() {
          return i.onModifyData.apply(i, arguments);
        }), this.addHook("modifySourceData", function() {
          return i.onModifySourceData.apply(i, arguments);
        }), this.addHook("beforeValidate", function() {
          return i.onBeforeValidate.apply(i, arguments);
        }), this.addHook("afterSetSourceDataAtCell", function() {
          return i.onAfterSetSourceDataAtCell.apply(i, arguments);
        }), this.addHook("afterSetDataAtCell", function() {
          return i.onAfterSetDataAtCell.apply(i, arguments);
        }), this.addHook("afterSetDataAtRowProp", function() {
          return i.onAfterSetDataAtCell.apply(i, arguments);
        }), this.addHook("beforeCreateRow", function() {
          return i.onBeforeCreateRow.apply(i, arguments);
        }), this.addHook("beforeCreateCol", function() {
          return i.onBeforeCreateCol.apply(i, arguments);
        }), this.addHook("afterCreateRow", function() {
          return i.onAfterCreateRow.apply(i, arguments);
        }), this.addHook("afterCreateCol", function() {
          return i.onAfterCreateCol.apply(i, arguments);
        }), this.addHook("beforeRemoveRow", function() {
          return i.onBeforeRemoveRow.apply(i, arguments);
        }), this.addHook("beforeRemoveCol", function() {
          return i.onBeforeRemoveCol.apply(i, arguments);
        }), this.addHook("afterRemoveRow", function() {
          return i.onAfterRemoveRow.apply(i, arguments);
        }), this.addHook("afterRemoveCol", function() {
          return i.onAfterRemoveCol.apply(i, arguments);
        }), this.indexSyncer = new Ije(this.hot.rowIndexMapper, this.hot.columnIndexMapper, function(l) {
          i.hot.addHookOnce("init", function() {
            l();
          });
        }), this.rowAxisSyncer = this.indexSyncer.getForAxis("row"), this.columnAxisSyncer = this.indexSyncer.getForAxis("column"), this.hot.addHook("afterRowSequenceChange", this.rowAxisSyncer.getIndexesChangeSyncMethod()), this.hot.addHook("afterColumnSequenceChange", this.columnAxisSyncer.getIndexesChangeSyncMethod()), this.hot.addHook("beforeRowMove", function(l, s, u, f) {
          i.rowAxisSyncer.storeMovesInformation(l, s, f);
        }), this.hot.addHook("beforeColumnMove", function(l, s, u, f) {
          i.columnAxisSyncer.storeMovesInformation(l, s, f);
        }), this.hot.addHook("afterRowMove", function(l, s, u, f, c) {
          i.rowAxisSyncer.calculateAndSyncMoves(f, c);
        }), this.hot.addHook("afterColumnMove", function(l, s, u, f, c) {
          i.columnAxisSyncer.calculateAndSyncMoves(f, c);
        }), this.hot.addHook("beforeColumnFreeze", function(l, s) {
          i.columnAxisSyncer.storeMovesInformation([l], i.hot.getSettings().fixedColumnsStart, s);
        }), this.hot.addHook("afterColumnFreeze", function(l, s) {
          i.columnAxisSyncer.calculateAndSyncMoves(s, s);
        }), this.hot.addHook("beforeColumnUnfreeze", function(l, s) {
          i.columnAxisSyncer.storeMovesInformation([l], i.hot.getSettings().fixedColumnsStart - 1, s);
        }), this.hot.addHook("afterColumnUnfreeze", function(l, s) {
          i.columnAxisSyncer.calculateAndSyncMoves(s, s);
        }), this.addHook("afterCellMetaReset", function() {
          return i.onAfterCellMetaReset.apply(i, arguments);
        }), this.addHook("beforeUndo", function() {
          i.indexSyncer.setPerformUndo(!0), i.engine.undo();
        }), this.addHook("beforeRedo", function() {
          i.indexSyncer.setPerformRedo(!0), i.engine.redo();
        }), this.addHook("afterUndo", function() {
          i.indexSyncer.setPerformUndo(!1);
        }), this.addHook("afterUndo", function() {
          i.indexSyncer.setPerformRedo(!1);
        }), this.addHook("afterDetachChild", function() {
          return i.onAfterDetachChild.apply(i, arguments);
        }), this.addHook("beforeAutofill", function() {
          return i.onBeforeAutofill.apply(i, arguments);
        }), $l(this, ec).forEach(function(l) {
          var s = Pl(l, 2), u = s[0], f = s[1];
          return i.engine.on(u, f);
        }), pa(_o(r.prototype), "enablePlugin", this).call(this);
      }
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      var o = this;
      $l(this, ec).forEach(function(i) {
        var a = Pl(i, 2), l = a[0], s = a[1];
        return o.engine.off(l, s);
      }), aH(this.engine, this.hot), this.engine = null, pa(_o(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Triggered on `updateSettings`.
     *
     * @private
     * @param {object} newSettings New set of settings passed to the `updateSettings` method.
     */
  }, {
    key: "updatePlugin",
    value: function(o) {
      var i = oje(this.hot.getSettings());
      ije(this.engine.getConfig(), i) && this.engine.updateConfig(i);
      var a = this.hot.getSettings()[ir];
      if (be(a) && be(a.sheetName) && a.sheetName !== this.sheetName && this.switchSheet(a.sheetName), !o.data && this.sheetName === null) {
        var l = this.hot.getSettings()[ir].sheetName;
        l && this.engine.doesSheetExist(l) ? this.switchSheet(this.sheetName) : this.sheetName = this.addSheet(l ?? void 0, this.hot.getSourceDataArray());
      }
      pa(_o(r.prototype), "updatePlugin", this).call(this, o);
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      var o = this;
      $l(this, ec).forEach(function(i) {
        var a, l = Pl(i, 2), s = l[0], u = l[1];
        return (a = o.engine) === null || a === void 0 ? void 0 : a.off(s, u);
      }), ei(this, ec, null), aH(this.engine, this.hot), this.engine = null, pa(_o(r.prototype), "destroy", this).call(this);
    }
    /**
     * Add a sheet to the shared HyperFormula instance.
     *
     * @param {string|null} [sheetName] The new sheet name. If not provided (or a null is passed), will be
     * auto-generated by HyperFormula.
     * @param {Array} [sheetData] Data passed to the shared HyperFormula instance. Has to be declared as an array of
     * arrays - array of objects is not supported in this scenario.
     * @returns {boolean|string} `false` if the data format is unusable or it is impossible to add a new sheet to the
     * engine, the created sheet name otherwise.
     */
  }, {
    key: "addSheet",
    value: function(o, i) {
      if (be(i) && !ppe(i))
        return ht("The provided data should be an array of arrays."), !1;
      if (o != null && this.engine.doesSheetExist(o))
        return ht("Sheet with the provided name already exists."), !1;
      try {
        var a = this.engine.addSheet(o ?? void 0);
        return i && this.engine.setSheetContent(this.engine.getSheetId(a), i), a;
      } catch (l) {
        return ht(l.message), !1;
      }
    }
    /**
     * Switch the sheet used as data in the Handsontable instance (it loads the data from the shared HyperFormula
     * instance).
     *
     * @param {string} sheetName Sheet name used in the shared HyperFormula instance.
     */
  }, {
    key: "switchSheet",
    value: function(o) {
      if (!this.engine.doesSheetExist(o)) {
        yT("The sheet named `".concat(o, "` does not exist, switch aborted."));
        return;
      }
      this.sheetName = o;
      var i = this.engine.getSheetSerialized(this.sheetId);
      i.length > 0 && this.hot.loadData(i, "".concat(vn(ir), ".switchSheet"));
    }
    /**
     * Get the cell type under specified visual coordinates.
     *
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {number} [sheet] The target sheet id, defaults to the current sheet.
     * @returns {string} Possible values: 'FORMULA' | 'VALUE' | 'ARRAYFORMULA' | 'EMPTY'.
     */
  }, {
    key: "getCellType",
    value: function(o, i) {
      var a = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.sheetId, l = this.hot.toPhysicalRow(o), s = this.hot.toPhysicalColumn(i);
      return l !== null && s !== null ? this.engine.getCellType({
        sheet: a,
        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(o),
        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(i)
      }) : "EMPTY";
    }
    /**
     * Returns `true` if under specified visual coordinates is formula.
     *
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {number} [sheet] The target sheet id, defaults to the current sheet.
     * @returns {boolean}
     */
  }, {
    key: "isFormulaCellType",
    value: function(o, i) {
      var a = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.sheetId;
      return this.engine.doesCellHaveFormula({
        sheet: a,
        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(o),
        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(i)
      });
    }
    /**
     * Renders dependent sheets (handsontable instances) based on the changes - list of the
     * recalculated dependent cells.
     *
     * @private
     * @param {object[]} dependentCells The values and location of applied changes within HF engine.
     * @param {boolean} [renderSelf] `true` if it's supposed to render itself, `false` otherwise.
     */
  }, {
    key: "renderDependentSheets",
    value: function(o) {
      var i = this, a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, l = /* @__PURE__ */ new Set();
      o.forEach(function(s) {
        var u, f = s == null || (u = s.address) === null || u === void 0 ? void 0 : u.sheet;
        f !== void 0 && (l.has(f) || l.add(f));
      }), iH(this.engine).forEach(function(s, u) {
        if ((a || u !== i.sheetId) && l.has(u)) {
          var f;
          s.render(), (f = s.view) === null || f === void 0 || f.adjustElementsSize();
        }
      });
    }
    /**
     * Validates dependent cells based on the cells that are modified by the change.
     *
     * @private
     * @param {object[]} dependentCells The values and location of applied changes within HF engine.
     * @param {object[]} [changedCells] The values and location of applied changes by developer (through API or UI).
     */
  }, {
    key: "validateDependentCells",
    value: function(o) {
      var i = this, a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], l = function(f) {
        var c, h = (c = f == null ? void 0 : f.address) !== null && c !== void 0 ? c : {}, d = h.row, y = h.col, p = h.sheet;
        return be(p) ? "".concat(p, ":").concat(d, "x").concat(y) : "";
      }, s = new Set(a.map(function(u) {
        return l(u);
      }));
      o.forEach(function(u) {
        var f, c, h = (f = u.address) !== null && f !== void 0 ? f : {}, d = h.row, y = h.col;
        if (!(be(d) === !1 || be(y) === !1 || d >= i.hot.countRows() || y >= i.hot.countCols())) {
          var p = u == null || (c = u.address) === null || c === void 0 ? void 0 : c.sheet, g = l(u);
          if (p !== void 0 && !s.has(g)) {
            var w = iH(i.engine).get(p);
            if (!w)
              return;
            w.validateCell(w.getDataAtCell(d, y), w.getCellMeta(d, y), function() {
            });
          }
        }
      });
    }
    /**
     * Sync a change from the change-related hooks with the engine.
     *
     * @private
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {Handsontable.CellValue} newValue New value.
     * @returns {Array} Array of changes exported from the engine.
     */
  }, {
    key: "syncChangeWithEngine",
    value: function(o, i, a) {
      var l = {
        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(o),
        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(i),
        sheet: this.sheetId
      };
      if (!this.engine.isItPossibleToSetCellContents(l)) {
        ht("Not possible to set cell data at ".concat(JSON.stringify(l)));
        return;
      }
      var s = this.hot.getCellMeta(o, i);
      return bS(a, s.type) && (lH(a, s.dateFormat) ? a = sH(a, s.dateFormat) : vje(a) === !1 && (a = "'".concat(a))), this.engine.setCellContents(l, a);
    }
    /**
     * The hook allows to translate the formula value to calculated value before it goes to the
     * validator function.
     *
     * @private
     * @param {*} value The cell value to validate.
     * @param {number} visualRow The visual row index.
     * @param {number|string} prop The visual column index or property name of the column.
     * @returns {*} Returns value to validate.
     */
  }, {
    key: "onBeforeValidate",
    value: function(o, i, a) {
      var l = this.hot.propToCol(a);
      if (this.isFormulaCellType(i, l)) {
        var s = {
          row: this.rowAxisSyncer.getHfIndexFromVisualIndex(i),
          col: this.columnAxisSyncer.getHfIndexFromVisualIndex(l),
          sheet: this.sheetId
        }, u = this.hot.getCellMeta(i, l), f = this.engine.getCellValue(s);
        return u.type === "date" && Er(f) && (f = uH(f, u.dateFormat)), Ti(f) === "object" && f !== null ? f.value : f;
      }
      return o;
    }
    /**
     * `onBeforeAutofill` hook callback.
     *
     * @private
     * @param {Array[]} fillData The data that was used to fill the `targetRange`. If `beforeAutofill` was used
     * and returned `[[]]`, this will be the same object that was returned from `beforeAutofill`.
     * @param {CellRange} sourceRange The range values will be filled from.
     * @param {CellRange} targetRange The range new values will be filled into.
     * @returns {boolean|*}
     */
  }, {
    key: "onBeforeAutofill",
    value: function(o, i, a) {
      var l = i.getTopStartCorner(), s = l.row, u = l.col, f = i.getBottomEndCorner(), c = f.row, h = f.col, d = a.getTopStartCorner(), y = d.row, p = d.col, g = a.getBottomEndCorner(), w = g.row, C = g.col, _ = {
        start: {
          row: this.rowAxisSyncer.getHfIndexFromVisualIndex(s),
          col: this.columnAxisSyncer.getHfIndexFromVisualIndex(u),
          sheet: this.sheetId
        },
        end: {
          row: this.rowAxisSyncer.getHfIndexFromVisualIndex(c),
          col: this.columnAxisSyncer.getHfIndexFromVisualIndex(h),
          sheet: this.sheetId
        }
      }, k = {
        start: {
          row: this.rowAxisSyncer.getHfIndexFromVisualIndex(y),
          col: this.columnAxisSyncer.getHfIndexFromVisualIndex(p),
          sheet: this.sheetId
        },
        end: {
          row: this.rowAxisSyncer.getHfIndexFromVisualIndex(w),
          col: this.columnAxisSyncer.getHfIndexFromVisualIndex(C),
          sheet: this.sheetId
        }
      };
      if (this.engine.isItPossibleToSetCellContents(k) === !1)
        return !1;
      for (var E = this.engine.getFillRangeData(_, k), j = _.start, Y = j.row, Q = j.col, X = _.end, q = X.row, J = X.col, le = q - Y + 1, ee = J - Q + 1, U = 0; U < E.length; U += 1)
        for (var Z = 0; Z < E[U].length; Z += 1) {
          var oe = E[U][Z], ie = U % le, T = Z % ee, v = this.hot.getCellMeta(ie, T);
          bS(oe, v.type) && (oe.startsWith("'") ? E[U][Z] = oe.slice(1) : this.isFormulaCellType(ie, T, this.sheetId) === !1 && (E[U][Z] = yje(oe, v.dateFormat)));
        }
      return E;
    }
    /**
     * `beforeLoadData` hook callback.
     *
     * @param {Array} sourceData Array of arrays or array of objects containing data.
     * @param {boolean} initialLoad Flag that determines whether the data has been loaded during the initialization.
     * @param {string} [source] Source of the call.
     * @private
     */
  }, {
    key: "onBeforeLoadData",
    value: function(o, i) {
      var a = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
      a.includes(vn(ir)) || ei(this, PS, gt(this.hot.getSettings().data));
    }
    /**
     * Callback to `afterCellMetaReset` hook which is triggered after setting cell meta.
     *
     * @private
     */
  }, {
    key: "onAfterCellMetaReset",
    value: function() {
      var o = this, i = this.hot.getSourceDataArray(), a = !1;
      i.forEach(function(l, s) {
        l.forEach(function(u, f) {
          var c = o.hot.getCellMeta(s, f), h = c.dateFormat;
          bS(u, c.type) && (a = !0, lH(u, h) ? i[s][f] = sH(u, h) : o.isFormulaCellType(s, f) === !1 && (i[s][f] = "'".concat(u)));
        });
      }), a === !0 && (ei(this, Qn, !0), this.engine.setSheetContent(this.sheetId, i), ei(this, Qn, !1));
    }
    /**
     * `afterLoadData` hook callback.
     *
     * @param {Array} sourceData Array of arrays or array of objects containing data.
     * @param {boolean} initialLoad Flag that determines whether the data has been loaded during the initialization.
     * @param {string} [source] Source of the call.
     * @private
     */
  }, {
    key: "onAfterLoadData",
    value: function(o, i) {
      var a = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
      if (!a.includes(vn(ir)))
        if (this.sheetName = hje(this.engine, this.hot.getSettings()[ir].sheetName), $l(this, PS))
          this.switchSheet(this.sheetName);
        else {
          var l = this.hot.getSourceDataArray();
          if (this.engine.isItPossibleToReplaceSheetContent(this.sheetId, l)) {
            ei(this, Qn, !0);
            var s = this.engine.setSheetContent(this.sheetId, l);
            this.indexSyncer.setupSyncEndpoint(this.engine, this.sheetId), this.renderDependentSheets(s), ei(this, Qn, !1);
          }
        }
    }
    /**
     * `modifyData` hook callback.
     *
     * @private
     * @param {number} physicalRow Physical row index.
     * @param {number} visualColumn Visual column index.
     * @param {object} valueHolder Object which contains original value which can be modified by overwriting `.value`
     *   property.
     * @param {string} ioMode String which indicates for what operation hook is fired (`get` or `set`).
     */
  }, {
    key: "onModifyData",
    value: function(o, i, a, l) {
      if (!(l !== "get" || $l(this, Qn) || this.sheetName === null || !this.engine.doesSheetExist(this.sheetName))) {
        var s = this.hot.toVisualRow(o);
        if (!(s === null || i === null)) {
          var u = this.isFormulaCellType(s, i);
          if (!u) {
            var f = this.getCellType(s, i);
            if (f !== "ARRAY") {
              Tz(a.value) && (a.value = dje(a.value));
              return;
            }
          }
          var c = {
            row: this.rowAxisSyncer.getHfIndexFromVisualIndex(s),
            col: this.columnAxisSyncer.getHfIndexFromVisualIndex(i),
            sheet: this.sheetId
          }, h = this.engine.getCellValue(c), d = this.hot.getCellMeta(s, i);
          d.type === "date" && Er(h) && (h = uH(h, d.dateFormat));
          var y = Ti(h) === "object" && h !== null ? h.value : h;
          a.value = y;
        }
      }
    }
    /**
     * `modifySourceData` hook callback.
     *
     * @private
     * @param {number} row Physical row index.
     * @param {number|string} columnOrProp Physical column index or prop.
     * @param {object} valueHolder Object which contains original value which can be modified by overwriting `.value`
     *   property.
     * @param {string} ioMode String which indicates for what operation hook is fired (`get` or `set`).
     */
  }, {
    key: "onModifySourceData",
    value: function(o, i, a, l) {
      if (!(l !== "get" || $l(this, Qn) || this.sheetName === null || !this.engine.doesSheetExist(this.sheetName))) {
        var s = this.hot.toVisualRow(o), u = this.hot.propToCol(i);
        if (!(s === null || u === null)) {
          var f = this.isFormulaCellType(s, u);
          if (!f) {
            var c = this.getCellType(s, u);
            if (c !== "ARRAY")
              return;
          }
          var h = this.engine.getSheetDimensions(this.engine.getSheetId(this.sheetName));
          if (!(h.width === 0 && h.height === 0)) {
            var d = {
              row: this.rowAxisSyncer.getHfIndexFromVisualIndex(s),
              col: this.columnAxisSyncer.getHfIndexFromVisualIndex(u),
              sheet: this.sheetId
            };
            a.value = this.engine.getCellSerialized(d);
          }
        }
      }
    }
    /**
     * `onAfterSetDataAtCell` hook callback.
     *
     * @private
     * @param {Array[]} changes An array of changes in format [[row, prop, oldValue, value], ...].
     * @param {string} [source] String that identifies source of hook call
     *                          ([list of all available sources]{@link https://handsontable.com/docs/javascript-data-grid/events-and-hooks/#handsontable-hooks}).
     */
  }, {
    key: "onAfterSetDataAtCell",
    value: function(o, i) {
      var a = this;
      if (!Al(i)) {
        var l = [], s = [], u = this.engine.batch(function() {
          o.forEach(function(f) {
            var c = Pl(f, 4), h = c[0], d = c[1], y = c[3], p = a.hot.propToCol(d), g = a.hot.toPhysicalRow(h), w = a.hot.toPhysicalColumn(p), C = {
              row: a.rowAxisSyncer.getHfIndexFromVisualIndex(h),
              col: a.columnAxisSyncer.getHfIndexFromVisualIndex(p),
              sheet: a.sheetId
            };
            g !== null && w !== null ? a.syncChangeWithEngine(h, p, y) : l.push([h, p, y]), s.push({
              address: C
            });
          });
        });
        l.length && this.hot.addHookOnce("afterChange", function() {
          var f = a.engine.batch(function() {
            l.forEach(function(c) {
              var h = Pl(c, 3), d = h[0], y = h[1], p = h[2];
              a.syncChangeWithEngine(d, y, p);
            });
          });
          a.renderDependentSheets(f, !0);
        }), this.renderDependentSheets(u), this.validateDependentCells(u, s);
      }
    }
    /**
     * `onAfterSetSourceDataAtCell` hook callback.
     *
     * @private
     * @param {Array[]} changes An array of changes in format [[row, column, oldValue, value], ...].
     * @param {string} [source] String that identifies source of hook call
     *                          ([list of all available sources]{@link https://handsontable.com/docs/javascript-data-grid/events-and-hooks/#handsontable-hooks}).
     */
  }, {
    key: "onAfterSetSourceDataAtCell",
    value: function(o, i) {
      var a = this;
      if (!Al(i)) {
        var l = [], s = [];
        o.forEach(function(u) {
          var f = Pl(u, 4), c = f[0], h = f[1], d = f[3], y = a.hot.propToCol(h);
          if (Er(y)) {
            var p = {
              row: a.rowAxisSyncer.getHfIndexFromVisualIndex(c),
              col: a.columnAxisSyncer.getHfIndexFromVisualIndex(y),
              sheet: a.sheetId
            };
            if (!a.engine.isItPossibleToSetCellContents(p)) {
              ht("Not possible to set source cell data at ".concat(JSON.stringify(p)));
              return;
            }
            s.push({
              address: p
            }), l.push.apply(l, Mje(a.engine.setCellContents(p, d)));
          }
        }), this.renderDependentSheets(l), this.validateDependentCells(l, s);
      }
    }
    /**
     * `beforeCreateRow` hook callback.
     *
     * @private
     * @param {number} visualRow Represents the visual index of first newly created row in the data source array.
     * @param {number} amount Number of newly created rows in the data source array.
     * @returns {*|boolean} If false is returned the action is canceled.
     */
  }, {
    key: "onBeforeCreateRow",
    value: function(o, i) {
      var a = this.rowAxisSyncer.getHfIndexFromVisualIndex(o);
      if (o >= this.hot.countRows() && (a = o), this.sheetId === null || !this.engine.doesSheetExist(this.sheetName) || !this.engine.isItPossibleToAddRows(this.sheetId, [a, i]))
        return !1;
    }
    /**
     * `beforeCreateCol` hook callback.
     *
     * @private
     * @param {number} visualColumn Represents the visual index of first newly created column in the data source.
     * @param {number} amount Number of newly created columns in the data source.
     * @returns {*|boolean} If false is returned the action is canceled.
     */
  }, {
    key: "onBeforeCreateCol",
    value: function(o, i) {
      var a = this.columnAxisSyncer.getHfIndexFromVisualIndex(o);
      if (o >= this.hot.countCols() && (a = o), this.sheetId === null || !this.engine.doesSheetExist(this.sheetName) || !this.engine.isItPossibleToAddColumns(this.sheetId, [a, i]))
        return !1;
    }
    /**
     * `beforeRemoveRow` hook callback.
     *
     * @private
     * @param {number} row Visual index of starter row.
     * @param {number} amount Amount of rows to be removed.
     * @param {number[]} physicalRows An array of physical rows removed from the data source.
     * @returns {*|boolean} If false is returned the action is canceled.
     */
  }, {
    key: "onBeforeRemoveRow",
    value: function(o, i, a) {
      var l = this, s = this.rowAxisSyncer.setRemovedHfIndexes(a), u = s.every(function(f) {
        return l.engine.isItPossibleToRemoveRows(l.sheetId, [f, 1]);
      });
      return u === !1 ? !1 : void 0;
    }
    /**
     * `beforeRemoveCol` hook callback.
     *
     * @private
     * @param {number} col Visual index of starter column.
     * @param {number} amount Amount of columns to be removed.
     * @param {number[]} physicalColumns An array of physical columns removed from the data source.
     * @returns {*|boolean} If false is returned the action is canceled.
     */
  }, {
    key: "onBeforeRemoveCol",
    value: function(o, i, a) {
      var l = this, s = this.columnAxisSyncer.setRemovedHfIndexes(a), u = s.every(function(f) {
        return l.engine.isItPossibleToRemoveColumns(l.sheetId, [f, 1]);
      });
      return u === !1 ? !1 : void 0;
    }
    /**
     * `afterCreateRow` hook callback.
     *
     * @private
     * @param {number} visualRow Represents the visual index of first newly created row in the data source array.
     * @param {number} amount Number of newly created rows in the data source array.
     * @param {string} [source] String that identifies source of hook call
     *                          ([list of all available sources]{@link https://handsontable.com/docs/javascript-data-grid/events-and-hooks/#handsontable-hooks}).
     */
  }, {
    key: "onAfterCreateRow",
    value: function(o, i, a) {
      if (!Al(a)) {
        var l = this.engine.addRows(this.sheetId, [this.rowAxisSyncer.getHfIndexFromVisualIndex(o), i]);
        this.renderDependentSheets(l);
      }
    }
    /**
     * `afterCreateCol` hook callback.
     *
     * @private
     * @param {number} visualColumn Represents the visual index of first newly created column in the data source.
     * @param {number} amount Number of newly created columns in the data source.
     * @param {string} [source] String that identifies source of hook call
     *                          ([list of all available sources]{@link https://handsontable.com/docs/javascript-data-grid/events-and-hooks/#handsontable-hooks}).
     */
  }, {
    key: "onAfterCreateCol",
    value: function(o, i, a) {
      if (!Al(a)) {
        var l = this.engine.addColumns(this.sheetId, [this.columnAxisSyncer.getHfIndexFromVisualIndex(o), i]);
        this.renderDependentSheets(l);
      }
    }
    /**
     * `afterRemoveRow` hook callback.
     *
     * @private
     * @param {number} row Visual index of starter row.
     * @param {number} amount An amount of removed rows.
     * @param {number[]} physicalRows An array of physical rows removed from the data source.
     * @param {string} [source] String that identifies source of hook call
     *                          ([list of all available sources]{@link https://handsontable.com/docs/javascript-data-grid/events-and-hooks/#handsontable-hooks}).
     */
  }, {
    key: "onAfterRemoveRow",
    value: function(o, i, a, l) {
      var s = this;
      if (!Al(l)) {
        var u = this.rowAxisSyncer.getRemovedHfIndexes().sort().reverse(), f = this.engine.batch(function() {
          u.forEach(function(c) {
            s.engine.removeRows(s.sheetId, [c, 1]);
          });
        });
        this.renderDependentSheets(f);
      }
    }
    /**
     * `afterRemoveCol` hook callback.
     *
     * @private
     * @param {number} col Visual index of starter column.
     * @param {number} amount An amount of removed columns.
     * @param {number[]} physicalColumns An array of physical columns removed from the data source.
     * @param {string} [source] String that identifies source of hook call
     *                          ([list of all available sources]{@link https://handsontable.com/docs/javascript-data-grid/events-and-hooks/#handsontable-hooks}).
     */
  }, {
    key: "onAfterRemoveCol",
    value: function(o, i, a, l) {
      var s = this;
      if (!Al(l)) {
        var u = this.columnAxisSyncer.getRemovedHfIndexes().sort().reverse(), f = this.engine.batch(function() {
          u.forEach(function(c) {
            s.engine.removeColumns(s.sheetId, [c, 1]);
          });
        });
        this.renderDependentSheets(f);
      }
    }
    /**
     * `afterDetachChild` hook callback.
     * Used to sync the data of the rows detached in the Nested Rows plugin with the engine's dataset.
     *
     * @private
     * @param {object} parent An object representing the parent from which the element was detached.
     * @param {object} element The detached element.
     * @param {number} finalElementRowIndex The final row index of the detached element.
     */
  }, {
    key: "onAfterDetachChild",
    value: function(o, i, a) {
      var l, s = this;
      ei(this, Qn, !0);
      var u = this.hot.getSourceDataArray(a, 0, a + (((l = i.__children) === null || l === void 0 ? void 0 : l.length) || 0), this.hot.countSourceCols());
      ei(this, Qn, !1), u.forEach(function(f, c) {
        f.forEach(function(h, d) {
          s.engine.setCellContents({
            col: d,
            row: a + c,
            sheet: s.sheetId
          }, [[h]]);
        });
      });
    }
    /**
     * Called when a value is updated in the engine.
     *
     * @private
     * @fires Hooks#afterFormulasValuesUpdate
     * @param {Array} changes The values and location of applied changes.
     */
  }, {
    key: "onEngineValuesUpdated",
    value: function(o) {
      this.hot.runHooks("afterFormulasValuesUpdate", o);
    }
    /**
     * Called when a named expression is added to the engine instance.
     *
     * @private
     * @fires Hooks#afterNamedExpressionAdded
     * @param {string} namedExpressionName The name of the added expression.
     * @param {Array} changes The values and location of applied changes.
     */
  }, {
    key: "onEngineNamedExpressionsAdded",
    value: function(o, i) {
      this.hot.runHooks("afterNamedExpressionAdded", o, i);
    }
    /**
     * Called when a named expression is removed from the engine instance.
     *
     * @private
     * @fires Hooks#afterNamedExpressionRemoved
     * @param {string} namedExpressionName The name of the removed expression.
     * @param {Array} changes The values and location of applied changes.
     */
  }, {
    key: "onEngineNamedExpressionsRemoved",
    value: function(o, i) {
      this.hot.runHooks("afterNamedExpressionRemoved", o, i);
    }
    /**
     * Called when a new sheet is added to the engine instance.
     *
     * @private
     * @fires Hooks#afterSheetAdded
     * @param {string} addedSheetDisplayName The name of the added sheet.
     */
  }, {
    key: "onEngineSheetAdded",
    value: function(o) {
      this.hot.runHooks("afterSheetAdded", o);
    }
    /**
     * Called when a sheet in the engine instance is renamed.
     *
     * @private
     * @fires Hooks#afterSheetRenamed
     * @param {string} oldDisplayName The old name of the sheet.
     * @param {string} newDisplayName The new name of the sheet.
     */
  }, {
    key: "onEngineSheetRenamed",
    value: function(o, i) {
      this.hot.runHooks("afterSheetRenamed", o, i);
    }
    /**
     * Called when a sheet is removed from the engine instance.
     *
     * @private
     * @fires Hooks#afterSheetRemoved
     * @param {string} removedSheetDisplayName The removed sheet name.
     * @param {Array} changes The values and location of applied changes.
     */
  }, {
    key: "onEngineSheetRemoved",
    value: function(o, i) {
      this.hot.runHooks("afterSheetRemoved", o, i);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return ir;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return Qje;
    }
  }, {
    key: "SETTING_KEYS",
    get: function() {
      return [ir].concat(Zje);
    }
  }]), r;
}(ft);
function eFe(e, t) {
  return oFe(e) || nFe(e, t) || rFe(e, t) || tFe();
}
function tFe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function rFe(e, t) {
  if (e) {
    if (typeof e == "string")
      return vH(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return vH(e, t);
  }
}
function vH(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function nFe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function oFe(e) {
  if (Array.isArray(e))
    return e;
}
function iFe(e) {
  return {
    key: "hidden_columns_hide",
    name: function() {
      var r = this.getSelectedLast(), n = 0;
      if (Array.isArray(r)) {
        var o = eFe(r, 4), i = o[1], a = o[3];
        i - a !== 0 && (n = 1);
      }
      return this.getTranslatedPhrase(O0, n);
    },
    callback: function() {
      for (var r = this.getSelectedRangeLast(), n = r.from, o = r.to, i = Math.max(Math.min(n.col, o.col), 0), a = Math.max(n.col, o.col), l = [], s = i; s <= a; s += 1)
        l.push(s);
      e.hideColumns(l);
      var u = l[l.length - 1], f = this.columnIndexMapper.getNearestNotHiddenIndex(u, 1, !0);
      Number.isInteger(f) && f >= 0 ? this.selectColumns(f) : this.deselectCell(), this.render(), this.view.adjustElementsSize(!0);
    },
    disabled: !1,
    hidden: function() {
      return !(this.selection.isSelectedByColumnHeader() || this.selection.isSelectedByCorner());
    }
  };
}
function Ay(e) {
  return uFe(e) || sFe(e) || lFe(e) || aFe();
}
function aFe() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function lFe(e, t) {
  if (e) {
    if (typeof e == "string")
      return eR(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return eR(e, t);
  }
}
function sFe(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function uFe(e) {
  if (Array.isArray(e))
    return eR(e);
}
function eR(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function fFe(e) {
  var t = [];
  return {
    key: "hidden_columns_show",
    name: function() {
      var n = t.length > 1 ? 1 : 0;
      return this.getTranslatedPhrase(R0, n);
    },
    callback: function() {
      var n, o;
      if (t.length !== 0) {
        var i = t[0], a = t[t.length - 1];
        i = (n = this.columnIndexMapper.getNearestNotHiddenIndex(i - 1, -1)) !== null && n !== void 0 ? n : 0, a = (o = this.columnIndexMapper.getNearestNotHiddenIndex(a + 1, 1)) !== null && o !== void 0 ? o : this.countCols() - 1, e.showColumns(t), this.render(), this.view.adjustElementsSize(!0);
        var l = a - i + 1 === this.countCols();
        l || this.selectColumns(i, a);
      }
    },
    disabled: !1,
    hidden: function() {
      var n = this, o = Ue(e.getHiddenColumns(), function(C) {
        return n.toPhysicalColumn(C);
      });
      if (!(this.selection.isSelectedByColumnHeader() || this.selection.isSelectedByCorner()) || o.length < 1)
        return !0;
      t.length = 0;
      var i = this.getSelectedRangeLast(), a = i.getTopStartCorner().col, l = i.getBottomEndCorner().col, s = this.columnIndexMapper, u = s.getRenderableFromVisualIndex(a), f = s.getRenderableFromVisualIndex(l), c = s.getNotTrimmedIndexes(), h = [];
      if (a !== l) {
        var d = l - a + 1, y = f - u + 1;
        if (d > y) {
          var p = c.slice(a, l + 1);
          h.push.apply(h, Ay(p.filter(function(C) {
            return o.includes(C);
          })));
        }
      } else if (u === 0 && u < a)
        h.push.apply(h, Ay(c.slice(0, a)));
      else if (u === null)
        h.push.apply(h, Ay(c.slice(0, this.countCols())));
      else {
        var g = this.countCols() - 1, w = s.getRenderableFromVisualIndex(s.getNearestNotHiddenIndex(g, -1));
        f === w && g > l && h.push.apply(h, Ay(c.slice(l + 1)));
      }
      return I(h, function(C) {
        t.push(n.toVisualColumn(C));
      }), t.length === 0;
    }
  };
}
function Hu(e) {
  "@babel/helpers - typeof";
  return Hu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Hu(e);
}
function cFe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function yH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, dFe(n.key), n);
  }
}
function hFe(e, t, r) {
  return t && yH(e.prototype, t), r && yH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function dFe(e) {
  var t = vFe(e, "string");
  return Hu(t) === "symbol" ? t : String(t);
}
function vFe(e, t) {
  if (Hu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Hu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function ma() {
  return typeof Reflect < "u" && Reflect.get ? ma = Reflect.get.bind() : ma = function(t, r, n) {
    var o = yFe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, ma.apply(this, arguments);
}
function yFe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Oo(e), e !== null); )
    ;
  return e;
}
function pFe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && tR(e, t);
}
function tR(e, t) {
  return tR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, tR(e, t);
}
function mFe(e) {
  var t = bFe();
  return function() {
    var n = Oo(e), o;
    if (t) {
      var i = Oo(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return gFe(this, o);
  };
}
function gFe(e, t) {
  if (t && (Hu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return rR(e);
}
function rR(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function bFe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Oo(e) {
  return Oo = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Oo(e);
}
function pH(e, t, r) {
  wFe(e, t), t.set(e, r);
}
function wFe(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function xr(e, t) {
  var r = Mz(e, t, "get");
  return SFe(e, r);
}
function SFe(e, t) {
  return t.get ? t.get.call(e) : t.value;
}
function tc(e, t, r) {
  var n = Mz(e, t, "set");
  return CFe(e, n, r), r;
}
function Mz(e, t, r) {
  if (!t.has(e))
    throw new TypeError("attempted to " + r + " private field on non-instance");
  return t.get(e);
}
function CFe(e, t, r) {
  if (t.set)
    t.set.call(e, r);
  else {
    if (!t.writable)
      throw new TypeError("attempted to set read only private field");
    t.value = r;
  }
}
we.getSingleton().register("beforeHideColumns");
we.getSingleton().register("afterHideColumns");
we.getSingleton().register("beforeUnhideColumns");
we.getSingleton().register("afterUnhideColumns");
var kS = "hiddenColumns", _Fe = 310, En = /* @__PURE__ */ new WeakMap(), Tn = /* @__PURE__ */ new WeakMap(), OFe = /* @__PURE__ */ function(e) {
  pFe(r, e);
  var t = mFe(r);
  function r() {
    var n;
    cFe(this, r);
    for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
      i[a] = arguments[a];
    return n = t.call.apply(t, [this].concat(i)), pH(rR(n), En, {
      writable: !0,
      value: {}
    }), pH(rR(n), Tn, {
      writable: !0,
      value: null
    }), n;
  }
  return hFe(r, [{
    key: "isEnabled",
    value: (
      /**
       * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
       * hook and if it returns `true` then the {@link HiddenColumns#enablePlugin} method is called.
       *
       * @returns {boolean}
       */
      function() {
        return !!this.hot.getSettings()[kS];
      }
    )
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      if (!this.enabled) {
        var i = this.hot.getSettings()[kS];
        ze(i) && (tc(this, En, i), gt(i.copyPasteEnabled) && (i.copyPasteEnabled = !0)), tc(this, Tn, new Ig()), xr(this, Tn).addLocalHook("init", function() {
          return o.onMapInit();
        }), this.hot.columnIndexMapper.registerMap(this.pluginName, xr(this, Tn)), this.addHook("afterContextMenuDefaultOptions", function() {
          return o.onAfterContextMenuDefaultOptions.apply(o, arguments);
        }), this.addHook("afterGetCellMeta", function(a, l, s) {
          return o.onAfterGetCellMeta(a, l, s);
        }), this.addHook("modifyColWidth", function(a, l) {
          return o.onModifyColWidth(a, l);
        }), this.addHook("afterGetColHeader", function() {
          return o.onAfterGetColHeader.apply(o, arguments);
        }), this.addHook("modifyCopyableRange", function(a) {
          return o.onModifyCopyableRange(a);
        }), ma(Oo(r.prototype), "enablePlugin", this).call(this);
      }
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`hiddenColumns`](@/api/options.md#hiddencolumns)
     */
  }, {
    key: "updatePlugin",
    value: function() {
      this.disablePlugin(), this.enablePlugin(), ma(Oo(r.prototype), "updatePlugin", this).call(this);
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      this.hot.columnIndexMapper.unregisterMap(this.pluginName), tc(this, En, {}), ma(Oo(r.prototype), "disablePlugin", this).call(this), this.resetCellsMeta();
    }
    /**
     * Shows the provided columns.
     *
     * @param {number[]} columns Array of visual column indexes.
     */
  }, {
    key: "showColumns",
    value: function(o) {
      var i = this, a = this.getHiddenColumns(), l = this.isValidConfig(o), s = a, u = xr(this, Tn).getValues().slice(), f = o.length > 0;
      if (l && f) {
        var c = o.map(function(d) {
          return i.hot.toPhysicalColumn(d);
        });
        I(c, function(d) {
          u[d] = !1;
        }), s = sr(u, function(d, y, p) {
          return y && d.push(i.hot.toVisualColumn(p)), d;
        }, []);
      }
      var h = this.hot.runHooks("beforeUnhideColumns", a, s, l && f);
      h !== !1 && (l && f && xr(this, Tn).setValues(u), this.hot.view.adjustElementsSize(), this.hot.runHooks("afterUnhideColumns", a, s, l && f, l && s.length < a.length));
    }
    /**
     * Shows a single column.
     *
     * @param {...number} column Visual column index.
     */
  }, {
    key: "showColumn",
    value: function() {
      for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
        i[a] = arguments[a];
      this.showColumns(i);
    }
    /**
     * Hides the columns provided in the array.
     *
     * @param {number[]} columns Array of visual column indexes.
     */
  }, {
    key: "hideColumns",
    value: function(o) {
      var i = this, a = this.getHiddenColumns(), l = this.isValidConfig(o), s = a;
      l && (s = Array.from(new Set(a.concat(o))));
      var u = this.hot.runHooks("beforeHideColumns", a, s, l);
      u !== !1 && (l && this.hot.batchExecution(function() {
        I(o, function(f) {
          xr(i, Tn).setValueAtIndex(i.hot.toPhysicalColumn(f), !0);
        });
      }, !0), this.hot.runHooks("afterHideColumns", a, s, l, l && s.length > a.length));
    }
    /**
     * Hides a single column.
     *
     * @param {...number} column Visual column index.
     */
  }, {
    key: "hideColumn",
    value: function() {
      for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
        i[a] = arguments[a];
      this.hideColumns(i);
    }
    /**
     * Returns an array of visual indexes of hidden columns.
     *
     * @returns {number[]}
     */
  }, {
    key: "getHiddenColumns",
    value: function() {
      var o = this;
      return Ue(xr(this, Tn).getHiddenIndexes(), function(i) {
        return o.hot.toVisualColumn(i);
      });
    }
    /**
     * Checks if the provided column is hidden.
     *
     * @param {number} column Visual column index.
     * @returns {boolean}
     */
  }, {
    key: "isHidden",
    value: function(o) {
      return xr(this, Tn).getValueAtIndex(this.hot.toPhysicalColumn(o)) || !1;
    }
    /**
     * Get if trim config is valid. Check whether all of the provided column indexes are within the bounds of the table.
     *
     * @param {Array} hiddenColumns List of hidden column indexes.
     * @returns {boolean}
     */
  }, {
    key: "isValidConfig",
    value: function(o) {
      var i = this.hot.countCols();
      return Array.isArray(o) && o.length > 0 ? o.every(function(a) {
        return Number.isInteger(a) && a >= 0 && a < i;
      }) : !1;
    }
    /**
     * Reset all rendered cells meta.
     *
     * @private
     */
  }, {
    key: "resetCellsMeta",
    value: function() {
      I(this.hot.getCellsMeta(), function(o) {
        o && (o.skipColumnOnPaste = !1);
      });
    }
    /**
     * Adds the additional column width for the hidden column indicators.
     *
     * @private
     * @param {number|undefined} width Column width.
     * @param {number} column Visual column index.
     * @returns {number}
     */
  }, {
    key: "onModifyColWidth",
    value: function(o, i) {
      if (this.isHidden(i))
        return 0;
      if (xr(this, En).indicators && (this.isHidden(i + 1) || this.isHidden(i - 1)) && typeof o == "number" && this.hot.hasColHeaders())
        return o + 15;
    }
    /**
     * Sets the copy-related cell meta.
     *
     * @private
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {object} cellProperties Object containing the cell properties.
     */
  }, {
    key: "onAfterGetCellMeta",
    value: function(o, i, a) {
      if (xr(this, En).copyPasteEnabled === !1 && this.isHidden(i) && (a.skipColumnOnPaste = !0), this.isHidden(i - 1))
        a.className = a.className || "", a.className.indexOf("afterHiddenColumn") === -1 && (a.className += " afterHiddenColumn");
      else if (a.className) {
        var l = a.className.split(" ");
        if (l.length > 0) {
          var s = l.indexOf("afterHiddenColumn");
          s > -1 && l.splice(s, 1), a.className = l.join(" ");
        }
      }
    }
    /**
     * Modifies the copyable range, accordingly to the provided config.
     *
     * @private
     * @param {Array} ranges An array of objects defining copyable cells.
     * @returns {Array}
     */
  }, {
    key: "onModifyCopyableRange",
    value: function(o) {
      var i = this;
      if (xr(this, En).copyPasteEnabled)
        return o;
      var a = [], l = function(u, f, c, h) {
        a.push({
          startRow: u,
          endRow: f,
          startCol: c,
          endCol: h
        });
      };
      return I(o, function(s) {
        var u = !0, f = 0;
        _e(s.startCol, s.endCol, function(c) {
          i.isHidden(c) ? (u || l(s.startRow, s.endRow, f, c - 1), u = !0) : (u && (f = c), c === s.endCol && l(s.startRow, s.endRow, f, c), u = !1);
        });
      }), a;
    }
    /**
     * Adds the needed classes to the headers.
     *
     * @private
     * @param {number} column Visual column index.
     * @param {HTMLElement} TH Header's TH element.
     */
  }, {
    key: "onAfterGetColHeader",
    value: function(o, i) {
      if (!(!xr(this, En).indicators || o < 0)) {
        var a = [];
        o >= 1 && this.isHidden(o - 1) && a.push("afterHiddenColumn"), o < this.hot.countCols() - 1 && this.isHidden(o + 1) && a.push("beforeHiddenColumn"), ae(i, a);
      }
    }
    /**
     * Add Show-hide columns to context menu.
     *
     * @private
     * @param {object} options An array of objects containing information about the pre-defined Context Menu items.
     */
  }, {
    key: "onAfterContextMenuDefaultOptions",
    value: function(o) {
      o.items.push({
        name: We
      }, iFe(this), fFe(this));
    }
    /**
     * On map initialized hook callback.
     *
     * @private
     */
  }, {
    key: "onMapInit",
    value: function() {
      Array.isArray(xr(this, En).columns) && this.hideColumns(xr(this, En).columns);
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      tc(this, En, null), tc(this, Tn, null), ma(Oo(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return kS;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return _Fe;
    }
  }]), r;
}(ft);
function RFe(e, t) {
  return kFe(e) || PFe(e, t) || TFe(e, t) || EFe();
}
function EFe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function TFe(e, t) {
  if (e) {
    if (typeof e == "string")
      return mH(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return mH(e, t);
  }
}
function mH(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function PFe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function kFe(e) {
  if (Array.isArray(e))
    return e;
}
function $Fe(e) {
  return {
    key: "hidden_rows_hide",
    name: function() {
      var r = this.getSelectedLast(), n = 0;
      if (Array.isArray(r)) {
        var o = RFe(r, 3), i = o[0], a = o[2];
        i - a !== 0 && (n = 1);
      }
      return this.getTranslatedPhrase(E0, n);
    },
    callback: function() {
      for (var r = this.getSelectedRangeLast(), n = r.from, o = r.to, i = Math.max(Math.min(n.row, o.row), 0), a = Math.max(n.row, o.row), l = [], s = i; s <= a; s += 1)
        l.push(s);
      e.hideRows(l);
      var u = l[l.length - 1], f = this.rowIndexMapper.getNearestNotHiddenIndex(u, 1, !0);
      Number.isInteger(f) && f >= 0 ? this.selectRows(f) : this.deselectCell(), this.render(), this.view.adjustElementsSize(!0);
    },
    disabled: !1,
    hidden: function() {
      return !(this.selection.isSelectedByRowHeader() || this.selection.isSelectedByCorner());
    }
  };
}
function Iy(e) {
  return xFe(e) || MFe(e) || IFe(e) || AFe();
}
function AFe() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function IFe(e, t) {
  if (e) {
    if (typeof e == "string")
      return nR(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return nR(e, t);
  }
}
function MFe(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function xFe(e) {
  if (Array.isArray(e))
    return nR(e);
}
function nR(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function DFe(e) {
  var t = [];
  return {
    key: "hidden_rows_show",
    name: function() {
      var n = t.length > 1 ? 1 : 0;
      return this.getTranslatedPhrase(T0, n);
    },
    callback: function() {
      var n, o;
      if (t.length !== 0) {
        var i = t[0], a = t[t.length - 1];
        i = (n = this.rowIndexMapper.getNearestNotHiddenIndex(i - 1, -1)) !== null && n !== void 0 ? n : 0, a = (o = this.rowIndexMapper.getNearestNotHiddenIndex(a + 1, 1)) !== null && o !== void 0 ? o : this.countRows() - 1, e.showRows(t), this.render(), this.view.adjustElementsSize(!0);
        var l = a - i + 1 === this.countRows();
        l || this.selectRows(i, a);
      }
    },
    disabled: !1,
    hidden: function() {
      var n = this, o = Ue(e.getHiddenRows(), function(C) {
        return n.toPhysicalRow(C);
      });
      if (!(this.selection.isSelectedByRowHeader() || this.selection.isSelectedByCorner()) || o.length < 1)
        return !0;
      t.length = 0;
      var i = this.getSelectedRangeLast(), a = i.getTopStartCorner().row, l = i.getBottomEndCorner().row, s = this.rowIndexMapper, u = s.getRenderableFromVisualIndex(a), f = s.getRenderableFromVisualIndex(l), c = s.getNotTrimmedIndexes(), h = [];
      if (a !== l) {
        var d = l - a + 1, y = f - u + 1;
        if (d > y) {
          var p = c.slice(a, l + 1);
          h.push.apply(h, Iy(p.filter(function(C) {
            return o.includes(C);
          })));
        }
      } else if (u === 0 && u < a)
        h.push.apply(h, Iy(c.slice(0, a)));
      else if (u === null)
        h.push.apply(h, Iy(c.slice(0, this.countRows())));
      else {
        var g = this.countRows() - 1, w = s.getRenderableFromVisualIndex(s.getNearestNotHiddenIndex(g, -1));
        f === w && g > l && h.push.apply(h, Iy(c.slice(l + 1)));
      }
      return I(h, function(C) {
        t.push(n.toVisualRow(C));
      }), t.length === 0;
    }
  };
}
function Lu(e) {
  "@babel/helpers - typeof";
  return Lu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Lu(e);
}
function NFe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function gH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, LFe(n.key), n);
  }
}
function HFe(e, t, r) {
  return t && gH(e.prototype, t), r && gH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function LFe(e) {
  var t = jFe(e, "string");
  return Lu(t) === "symbol" ? t : String(t);
}
function jFe(e, t) {
  if (Lu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Lu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function ga() {
  return typeof Reflect < "u" && Reflect.get ? ga = Reflect.get.bind() : ga = function(t, r, n) {
    var o = FFe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, ga.apply(this, arguments);
}
function FFe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Ro(e), e !== null); )
    ;
  return e;
}
function BFe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && oR(e, t);
}
function oR(e, t) {
  return oR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, oR(e, t);
}
function VFe(e) {
  var t = UFe();
  return function() {
    var n = Ro(e), o;
    if (t) {
      var i = Ro(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return WFe(this, o);
  };
}
function WFe(e, t) {
  if (t && (Lu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return iR(e);
}
function iR(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function UFe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Ro(e) {
  return Ro = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Ro(e);
}
function bH(e, t, r) {
  zFe(e, t), t.set(e, r);
}
function zFe(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function Gr(e, t) {
  var r = xz(e, t, "get");
  return YFe(e, r);
}
function YFe(e, t) {
  return t.get ? t.get.call(e) : t.value;
}
function rc(e, t, r) {
  var n = xz(e, t, "set");
  return GFe(e, n, r), r;
}
function xz(e, t, r) {
  if (!t.has(e))
    throw new TypeError("attempted to " + r + " private field on non-instance");
  return t.get(e);
}
function GFe(e, t, r) {
  if (t.set)
    t.set.call(e, r);
  else {
    if (!t.writable)
      throw new TypeError("attempted to set read only private field");
    t.value = r;
  }
}
we.getSingleton().register("beforeHideRows");
we.getSingleton().register("afterHideRows");
we.getSingleton().register("beforeUnhideRows");
we.getSingleton().register("afterUnhideRows");
var $S = "hiddenRows", KFe = 320, Jn = /* @__PURE__ */ new WeakMap(), Pn = /* @__PURE__ */ new WeakMap(), qFe = /* @__PURE__ */ function(e) {
  BFe(r, e);
  var t = VFe(r);
  function r() {
    var n;
    NFe(this, r);
    for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
      i[a] = arguments[a];
    return n = t.call.apply(t, [this].concat(i)), bH(iR(n), Jn, {
      writable: !0,
      value: {}
    }), bH(iR(n), Pn, {
      writable: !0,
      value: null
    }), n;
  }
  return HFe(r, [{
    key: "isEnabled",
    value: (
      /**
       * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
       * hook and if it returns `true` then the {@link HiddenRows#enablePlugin} method is called.
       *
       * @returns {boolean}
       */
      function() {
        return !!this.hot.getSettings()[$S];
      }
    )
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      if (!this.enabled) {
        var i = this.hot.getSettings()[$S];
        ze(i) && (rc(this, Jn, i), gt(i.copyPasteEnabled) && (i.copyPasteEnabled = !0)), rc(this, Pn, new Ig()), Gr(this, Pn).addLocalHook("init", function() {
          return o.onMapInit();
        }), this.hot.rowIndexMapper.registerMap(this.pluginName, Gr(this, Pn)), this.addHook("afterContextMenuDefaultOptions", function() {
          return o.onAfterContextMenuDefaultOptions.apply(o, arguments);
        }), this.addHook("afterGetCellMeta", function(a, l, s) {
          return o.onAfterGetCellMeta(a, l, s);
        }), this.addHook("modifyRowHeight", function(a, l) {
          return o.onModifyRowHeight(a, l);
        }), this.addHook("afterGetRowHeader", function() {
          return o.onAfterGetRowHeader.apply(o, arguments);
        }), this.addHook("modifyCopyableRange", function(a) {
          return o.onModifyCopyableRange(a);
        }), ga(Ro(r.prototype), "enablePlugin", this).call(this);
      }
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`hiddenRows`](@/api/options.md#hiddenrows)
     */
  }, {
    key: "updatePlugin",
    value: function() {
      this.disablePlugin(), this.enablePlugin(), ga(Ro(r.prototype), "updatePlugin", this).call(this);
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      this.hot.rowIndexMapper.unregisterMap(this.pluginName), rc(this, Jn, {}), ga(Ro(r.prototype), "disablePlugin", this).call(this), this.resetCellsMeta();
    }
    /**
     * Shows the rows provided in the array.
     *
     * @param {number[]} rows Array of visual row indexes.
     */
  }, {
    key: "showRows",
    value: function(o) {
      var i = this, a = this.getHiddenRows(), l = this.isValidConfig(o), s = a, u = Gr(this, Pn).getValues().slice(), f = o.length > 0;
      if (l && f) {
        var c = o.map(function(d) {
          return i.hot.toPhysicalRow(d);
        });
        I(c, function(d) {
          u[d] = !1;
        }), s = sr(u, function(d, y, p) {
          return y && d.push(i.hot.toVisualRow(p)), d;
        }, []);
      }
      var h = this.hot.runHooks("beforeUnhideRows", a, s, l && f);
      h !== !1 && (l && f && Gr(this, Pn).setValues(u), this.hot.runHooks("afterUnhideRows", a, s, l && f, l && s.length < a.length));
    }
    /**
     * Shows the row provided as row index (counting from 0).
     *
     * @param {...number} row Visual row index.
     */
  }, {
    key: "showRow",
    value: function() {
      for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
        i[a] = arguments[a];
      this.showRows(i);
    }
    /**
     * Hides the rows provided in the array.
     *
     * @param {number[]} rows Array of visual row indexes.
     */
  }, {
    key: "hideRows",
    value: function(o) {
      var i = this, a = this.getHiddenRows(), l = this.isValidConfig(o), s = a;
      l && (s = Array.from(new Set(a.concat(o))));
      var u = this.hot.runHooks("beforeHideRows", a, s, l);
      u !== !1 && (l && this.hot.batchExecution(function() {
        I(o, function(f) {
          Gr(i, Pn).setValueAtIndex(i.hot.toPhysicalRow(f), !0);
        });
      }, !0), this.hot.runHooks("afterHideRows", a, s, l, l && s.length > a.length));
    }
    /**
     * Hides the row provided as row index (counting from 0).
     *
     * @param {...number} row Visual row index.
     */
  }, {
    key: "hideRow",
    value: function() {
      for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
        i[a] = arguments[a];
      this.hideRows(i);
    }
    /**
     * Returns an array of visual indexes of hidden rows.
     *
     * @returns {number[]}
     */
  }, {
    key: "getHiddenRows",
    value: function() {
      var o = this;
      return Ue(Gr(this, Pn).getHiddenIndexes(), function(i) {
        return o.hot.toVisualRow(i);
      });
    }
    /**
     * Checks if the provided row is hidden.
     *
     * @param {number} row Visual row index.
     * @returns {boolean}
     */
  }, {
    key: "isHidden",
    value: function(o) {
      return Gr(this, Pn).getValueAtIndex(this.hot.toPhysicalRow(o)) || !1;
    }
    /**
     * Checks whether all of the provided row indexes are within the bounds of the table.
     *
     * @param {Array} hiddenRows List of hidden visual row indexes.
     * @returns {boolean}
     */
  }, {
    key: "isValidConfig",
    value: function(o) {
      var i = this.hot.countRows();
      return Array.isArray(o) && o.length > 0 ? o.every(function(a) {
        return Number.isInteger(a) && a >= 0 && a < i;
      }) : !1;
    }
    /**
     * Resets all rendered cells meta.
     *
     * @private
     */
  }, {
    key: "resetCellsMeta",
    value: function() {
      I(this.hot.getCellsMeta(), function(o) {
        o && (o.skipRowOnPaste = !1);
      });
    }
    /**
     * Adds the additional row height for the hidden row indicators.
     *
     * @private
     * @param {number|undefined} height Row height.
     * @param {number} row Visual row index.
     * @returns {number}
     */
  }, {
    key: "onModifyRowHeight",
    value: function(o, i) {
      return this.isHidden(i) ? 0 : o;
    }
    /**
     * Sets the copy-related cell meta.
     *
     * @private
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @param {object} cellProperties Object containing the cell properties.
     */
  }, {
    key: "onAfterGetCellMeta",
    value: function(o, i, a) {
      if (Gr(this, Jn).copyPasteEnabled === !1 && this.isHidden(o) && (a.skipRowOnPaste = !0), this.isHidden(o - 1))
        a.className = a.className || "", a.className.indexOf("afterHiddenRow") === -1 && (a.className += " afterHiddenRow");
      else if (a.className) {
        var l = a.className.split(" ");
        if (l.length > 0) {
          var s = l.indexOf("afterHiddenRow");
          s > -1 && l.splice(s, 1), a.className = l.join(" ");
        }
      }
    }
    /**
     * Modifies the copyable range, accordingly to the provided config.
     *
     * @private
     * @param {Array} ranges An array of objects defining copyable cells.
     * @returns {Array}
     */
  }, {
    key: "onModifyCopyableRange",
    value: function(o) {
      var i = this;
      if (Gr(this, Jn).copyPasteEnabled)
        return o;
      var a = [], l = function(u, f, c, h) {
        a.push({
          startRow: u,
          endRow: f,
          startCol: c,
          endCol: h
        });
      };
      return I(o, function(s) {
        var u = !0, f = 0;
        _e(s.startRow, s.endRow, function(c) {
          i.isHidden(c) ? (u || l(f, c - 1, s.startCol, s.endCol), u = !0) : (u && (f = c), c === s.endRow && l(f, c, s.startCol, s.endCol), u = !1);
        });
      }), a;
    }
    /**
     * Adds the needed classes to the headers.
     *
     * @private
     * @param {number} row Visual row index.
     * @param {HTMLElement} TH Header's TH element.
     */
  }, {
    key: "onAfterGetRowHeader",
    value: function(o, i) {
      if (!(!Gr(this, Jn).indicators || o < 0)) {
        var a = [];
        o >= 1 && this.isHidden(o - 1) && a.push("afterHiddenRow"), o < this.hot.countRows() - 1 && this.isHidden(o + 1) && a.push("beforeHiddenRow"), ae(i, a);
      }
    }
    /**
     * Add Show-hide rows to context menu.
     *
     * @private
     * @param {object} options An array of objects containing information about the pre-defined Context Menu items.
     */
  }, {
    key: "onAfterContextMenuDefaultOptions",
    value: function(o) {
      o.items.push({
        name: We
      }, $Fe(this), DFe(this));
    }
    /**
     * On map initialized hook callback.
     *
     * @private
     */
  }, {
    key: "onMapInit",
    value: function() {
      Array.isArray(Gr(this, Jn).rows) && this.hideRows(Gr(this, Jn).rows);
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      rc(this, Jn, null), rc(this, Pn, null), ga(Ro(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return $S;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return KFe;
    }
  }]), r;
}(ft);
function XFe(e, t) {
  return eBe(e) || JFe(e, t) || QFe(e, t) || ZFe();
}
function ZFe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function QFe(e, t) {
  if (e) {
    if (typeof e == "string")
      return wH(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return wH(e, t);
  }
}
function wH(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function JFe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function eBe(e) {
  if (Array.isArray(e))
    return e;
}
function tBe(e) {
  return {
    key: "freeze_column",
    name: function() {
      return this.getTranslatedPhrase(e0);
    },
    callback: function(r, n) {
      var o = XFe(n, 1), i = o[0].start.col;
      e.freezeColumn(i), this.render(), this.view.adjustElementsSize(!0);
    },
    hidden: function() {
      var r = this.getSelectedRange(), n = !1;
      return (r === void 0 || r.length > 1 || r[0].from.col !== r[0].to.col || r[0].from.col <= this.getSettings().fixedColumnsStart - 1) && (n = !0), n;
    }
  };
}
function rBe(e, t) {
  return aBe(e) || iBe(e, t) || oBe(e, t) || nBe();
}
function nBe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function oBe(e, t) {
  if (e) {
    if (typeof e == "string")
      return SH(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return SH(e, t);
  }
}
function SH(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function iBe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function aBe(e) {
  if (Array.isArray(e))
    return e;
}
function lBe(e) {
  return {
    key: "unfreeze_column",
    name: function() {
      return this.getTranslatedPhrase(t0);
    },
    callback: function(r, n) {
      var o = rBe(n, 1), i = o[0].start.col;
      e.unfreezeColumn(i), this.render(), this.view.adjustElementsSize(!0);
    },
    hidden: function() {
      var r = this.getSelectedRange(), n = !1;
      return (r === void 0 || r.length > 1 || r[0].from.col !== r[0].to.col || r[0].from.col >= this.getSettings().fixedColumnsStart) && (n = !0), n;
    }
  };
}
function ju(e) {
  "@babel/helpers - typeof";
  return ju = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, ju(e);
}
function sBe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function CH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, fBe(n.key), n);
  }
}
function uBe(e, t, r) {
  return t && CH(e.prototype, t), r && CH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function fBe(e) {
  var t = cBe(e, "string");
  return ju(t) === "symbol" ? t : String(t);
}
function cBe(e, t) {
  if (ju(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (ju(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function ns() {
  return typeof Reflect < "u" && Reflect.get ? ns = Reflect.get.bind() : ns = function(t, r, n) {
    var o = hBe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, ns.apply(this, arguments);
}
function hBe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = _i(e), e !== null); )
    ;
  return e;
}
function dBe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && aR(e, t);
}
function aR(e, t) {
  return aR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, aR(e, t);
}
function vBe(e) {
  var t = pBe();
  return function() {
    var n = _i(e), o;
    if (t) {
      var i = _i(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return yBe(this, o);
  };
}
function yBe(e, t) {
  if (t && (ju(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return Dz(e);
}
function Dz(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function pBe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function _i(e) {
  return _i = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, _i(e);
}
we.getSingleton().register("beforeColumnFreeze");
we.getSingleton().register("afterColumnFreeze");
we.getSingleton().register("beforeColumnUnfreeze");
we.getSingleton().register("afterColumnUnfreeze");
var _H = "manualColumnFreeze", mBe = 110, nc = /* @__PURE__ */ new WeakMap(), gBe = /* @__PURE__ */ function(e) {
  dBe(r, e);
  var t = vBe(r);
  function r(n) {
    var o;
    return sBe(this, r), o = t.call(this, n), nc.set(Dz(o), {
      afterFirstUse: !1
    }), o;
  }
  return uBe(r, [{
    key: "isEnabled",
    value: function() {
      return !!this.hot.getSettings()[_H];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      this.enabled || (this.addHook("afterContextMenuDefaultOptions", function(i) {
        return o.addContextMenuEntry(i);
      }), this.addHook("beforeColumnMove", function(i, a) {
        return o.onBeforeColumnMove(i, a);
      }), ns(_i(r.prototype), "enablePlugin", this).call(this));
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      var o = nc.get(this);
      o.afterFirstUse = !1, ns(_i(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`manualColumnFreeze`](@/api/options.md#manualcolumnfreeze)
     */
  }, {
    key: "updatePlugin",
    value: function() {
      this.disablePlugin(), this.enablePlugin(), ns(_i(r.prototype), "updatePlugin", this).call(this);
    }
    /**
     * Freezes the specified column (adds it to fixed columns).
     *
     * `freezeColumn()` doesn't re-render the table,
     * so you need to call the `render()` method afterward.
     *
     * @param {number} column Visual column index.
     */
  }, {
    key: "freezeColumn",
    value: function(o) {
      var i = nc.get(this), a = this.hot.getSettings(), l = a.fixedColumnsStart < this.hot.countCols() && o > a.fixedColumnsStart - 1;
      i.afterFirstUse || (i.afterFirstUse = !0);
      var s = this.hot.runHooks("beforeColumnFreeze", o, l);
      s !== !1 && (l && (this.hot.columnIndexMapper.moveIndexes(o, a.fixedColumnsStart), a._fixedColumnsStart += 1), this.hot.runHooks("afterColumnFreeze", o, l));
    }
    /**
     * Unfreezes the given column (remove it from fixed columns and bring to it's previous position).
     *
     * @param {number} column Visual column index.
     */
  }, {
    key: "unfreezeColumn",
    value: function(o) {
      var i = nc.get(this), a = this.hot.getSettings(), l = a.fixedColumnsStart > 0 && o <= a.fixedColumnsStart - 1;
      i.afterFirstUse || (i.afterFirstUse = !0);
      var s = this.hot.runHooks("beforeColumnUnfreeze", o, l);
      s !== !1 && (l && (a._fixedColumnsStart -= 1, this.hot.columnIndexMapper.moveIndexes(o, a.fixedColumnsStart)), this.hot.runHooks("afterColumnUnfreeze", o, l));
    }
    /**
     * Adds the manualColumnFreeze context menu entries.
     *
     * @private
     * @param {object} options Context menu options.
     */
  }, {
    key: "addContextMenuEntry",
    value: function(o) {
      o.items.push({
        name: "---------"
      }, tBe(this), lBe(this));
    }
    /**
     * Prevents moving the columns from/to fixed area.
     *
     * @private
     * @param {Array} columns Array of visual column indexes to be moved.
     * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
     * @returns {boolean|undefined}
     */
  }, {
    key: "onBeforeColumnMove",
    value: function(o, i) {
      var a = nc.get(this);
      if (a.afterFirstUse) {
        var l = this.hot.getSettings().fixedColumnsStart;
        if (i < l || o.some(function(s) {
          return s < l;
        }))
          return !1;
      }
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return _H;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return mBe;
    }
  }]), r;
}(ft);
function Od(e) {
  "@babel/helpers - typeof";
  return Od = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Od(e);
}
function bBe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function OH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, SBe(n.key), n);
  }
}
function wBe(e, t, r) {
  return t && OH(e.prototype, t), r && OH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function SBe(e) {
  var t = CBe(e, "string");
  return Od(t) === "symbol" ? t : String(t);
}
function CBe(e, t) {
  if (Od(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Od(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var AS = 0, RH = 1, EH = 2, Il = "px", _Be = /* @__PURE__ */ function() {
  function e(t) {
    bBe(this, e), this.hot = t, this._element = null, this.state = AS, this.inlineProperty = t.isRtl() ? "right" : "left";
  }
  return wBe(e, [{
    key: "appendTo",
    value: function(r) {
      r.appendChild(this._element), this.state = EH;
    }
    /**
     * Method for create UI element. Only create, without append to table.
     */
  }, {
    key: "build",
    value: function() {
      this.state === AS && (this._element = this.hot.rootDocument.createElement("div"), this.state = RH);
    }
    /**
     * Method for remove UI element.
     */
  }, {
    key: "destroy",
    value: function() {
      this.isAppended() && this._element.parentElement.removeChild(this._element), this._element = null, this.state = AS;
    }
    /**
     * Check if UI element are appended.
     *
     * @returns {boolean}
     */
  }, {
    key: "isAppended",
    value: function() {
      return this.state === EH;
    }
    /**
     * Check if UI element are built.
     *
     * @returns {boolean}
     */
  }, {
    key: "isBuilt",
    value: function() {
      return this.state >= RH;
    }
    /**
     * Setter for position.
     *
     * @param {number} top New top position of the element.
     * @param {number} inlinePosition New left/right (depends on LTR/RTL document mode) position of the element.
     */
  }, {
    key: "setPosition",
    value: function(r, n) {
      Er(r) && (this._element.style.top = r + Il), Er(n) && (this._element.style[this.inlineProperty] = n + Il);
    }
    /**
     * Getter for the element position.
     *
     * @returns {object} Object contains left and top position of the element.
     */
  }, {
    key: "getPosition",
    value: function() {
      var r = this._element.style;
      return {
        top: r.top ? parseInt(r.top, 10) : 0,
        start: r[this.inlineProperty] ? parseInt(r[this.inlineProperty], 10) : 0
      };
    }
    /**
     * Setter for the element size.
     *
     * @param {number} width New width of the element.
     * @param {number} height New height of the element.
     */
  }, {
    key: "setSize",
    value: function(r, n) {
      Er(r) && (this._element.style.width = r + Il), Er(n) && (this._element.style.height = n + Il);
    }
    /**
     * Getter for the element position.
     *
     * @returns {object} Object contains height and width of the element.
     */
  }, {
    key: "getSize",
    value: function() {
      return {
        width: this._element.style.width ? parseInt(this._element.style.width, 10) : 0,
        height: this._element.style.height ? parseInt(this._element.style.height, 10) : 0
      };
    }
    /**
     * Setter for the element offset. Offset means marginTop and marginLeft of the element.
     *
     * @param {number} top New margin top of the element.
     * @param {number} inlineOffset New margin left/right (depends on LTR/RTL document mode) of the element.
     */
  }, {
    key: "setOffset",
    value: function(r, n) {
      Er(r) && (this._element.style.marginTop = r + Il), Er(n) && (this._element.style["margin".concat(vn(this.inlineProperty))] = n + Il);
    }
    /**
     * Getter for the element offset.
     *
     * @returns {object} Object contains top and left offset of the element.
     */
  }, {
    key: "getOffset",
    value: function() {
      var r = this._element.style, n = "margin".concat(vn(this.inlineProperty));
      return {
        top: r.marginTop ? parseInt(r.marginTop, 10) : 0,
        start: r[n] ? parseInt(r[n], 10) : 0
      };
    }
  }]), e;
}();
const Nz = _Be;
function Fu(e) {
  "@babel/helpers - typeof";
  return Fu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Fu(e);
}
function OBe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function TH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, EBe(n.key), n);
  }
}
function RBe(e, t, r) {
  return t && TH(e.prototype, t), r && TH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function EBe(e) {
  var t = TBe(e, "string");
  return Fu(t) === "symbol" ? t : String(t);
}
function TBe(e, t) {
  if (Fu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Fu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Op() {
  return typeof Reflect < "u" && Reflect.get ? Op = Reflect.get.bind() : Op = function(t, r, n) {
    var o = PBe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, Op.apply(this, arguments);
}
function PBe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Bu(e), e !== null); )
    ;
  return e;
}
function kBe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && lR(e, t);
}
function lR(e, t) {
  return lR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, lR(e, t);
}
function $Be(e) {
  var t = MBe();
  return function() {
    var n = Bu(e), o;
    if (t) {
      var i = Bu(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return ABe(this, o);
  };
}
function ABe(e, t) {
  if (t && (Fu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return IBe(e);
}
function IBe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function MBe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Bu(e) {
  return Bu = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Bu(e);
}
var xBe = "ht__manualColumnMove--backlight", DBe = /* @__PURE__ */ function(e) {
  kBe(r, e);
  var t = $Be(r);
  function r() {
    return OBe(this, r), t.apply(this, arguments);
  }
  return RBe(r, [{
    key: "build",
    value: (
      /**
       * Custom className on build process.
       */
      function() {
        Op(Bu(r.prototype), "build", this).call(this), ae(this._element, xBe);
      }
    )
  }]), r;
}(Nz);
const NBe = DBe;
function Vu(e) {
  "@babel/helpers - typeof";
  return Vu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Vu(e);
}
function HBe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function PH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, jBe(n.key), n);
  }
}
function LBe(e, t, r) {
  return t && PH(e.prototype, t), r && PH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function jBe(e) {
  var t = FBe(e, "string");
  return Vu(t) === "symbol" ? t : String(t);
}
function FBe(e, t) {
  if (Vu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Vu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Rp() {
  return typeof Reflect < "u" && Reflect.get ? Rp = Reflect.get.bind() : Rp = function(t, r, n) {
    var o = BBe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, Rp.apply(this, arguments);
}
function BBe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Wu(e), e !== null); )
    ;
  return e;
}
function VBe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && sR(e, t);
}
function sR(e, t) {
  return sR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, sR(e, t);
}
function WBe(e) {
  var t = YBe();
  return function() {
    var n = Wu(e), o;
    if (t) {
      var i = Wu(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return UBe(this, o);
  };
}
function UBe(e, t) {
  if (t && (Vu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return zBe(e);
}
function zBe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function YBe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Wu(e) {
  return Wu = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Wu(e);
}
var GBe = "ht__manualColumnMove--guideline", KBe = /* @__PURE__ */ function(e) {
  VBe(r, e);
  var t = WBe(r);
  function r() {
    return HBe(this, r), t.apply(this, arguments);
  }
  return LBe(r, [{
    key: "build",
    value: (
      /**
       * Custom className on build process.
       */
      function() {
        Rp(Wu(r.prototype), "build", this).call(this), ae(this._element, GBe);
      }
    )
  }]), r;
}(Nz);
const qBe = KBe;
function Uu(e) {
  "@babel/helpers - typeof";
  return Uu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Uu(e);
}
function XBe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function kH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, QBe(n.key), n);
  }
}
function ZBe(e, t, r) {
  return t && kH(e.prototype, t), r && kH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function QBe(e) {
  var t = JBe(e, "string");
  return Uu(t) === "symbol" ? t : String(t);
}
function JBe(e, t) {
  if (Uu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Uu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function ba() {
  return typeof Reflect < "u" && Reflect.get ? ba = Reflect.get.bind() : ba = function(t, r, n) {
    var o = eVe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, ba.apply(this, arguments);
}
function eVe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Eo(e), e !== null); )
    ;
  return e;
}
function tVe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && uR(e, t);
}
function uR(e, t) {
  return uR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, uR(e, t);
}
function rVe(e) {
  var t = oVe();
  return function() {
    var n = Eo(e), o;
    if (t) {
      var i = Eo(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return nVe(this, o);
  };
}
function nVe(e, t) {
  if (t && (Uu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return fR(e);
}
function fR(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function oVe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Eo(e) {
  return Eo = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Eo(e);
}
we.getSingleton().register("beforeColumnMove");
we.getSingleton().register("afterColumnMove");
var IS = "manualColumnMove", iVe = 120, ti = /* @__PURE__ */ new WeakMap(), $H = "ht__manualColumnMove", My = "show-ui", MS = "on-moving--columns", xS = "after-selection--columns", aVe = /* @__PURE__ */ function(e) {
  tVe(r, e);
  var t = rVe(r);
  function r(n) {
    var o;
    return XBe(this, r), o = t.call(this, n), ti.set(fR(o), {
      columnsToMove: [],
      countCols: 0,
      fixedColumns: 0,
      pressed: void 0,
      target: {
        eventPageX: void 0,
        coords: void 0,
        TD: void 0,
        col: void 0
      },
      cachedDropIndex: void 0
    }), o.eventManager = new It(fR(o)), o.backlight = new NBe(n), o.guideline = new qBe(n), o;
  }
  return ZBe(r, [{
    key: "isEnabled",
    value: function() {
      return !!this.hot.getSettings()[IS];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      this.enabled || (this.addHook("beforeOnCellMouseDown", function() {
        return o.onBeforeOnCellMouseDown.apply(o, arguments);
      }), this.addHook("beforeOnCellMouseOver", function() {
        return o.onBeforeOnCellMouseOver.apply(o, arguments);
      }), this.addHook("afterScrollVertically", function() {
        return o.onAfterScrollVertically();
      }), this.addHook("afterLoadData", function() {
        return o.onAfterLoadData.apply(o, arguments);
      }), this.buildPluginUI(), this.registerEvents(), ae(this.hot.rootElement, $H), ba(Eo(r.prototype), "enablePlugin", this).call(this));
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`manualColumnMove`](@/api/options.md#manualcolumnmove)
     */
  }, {
    key: "updatePlugin",
    value: function() {
      this.disablePlugin(), this.enablePlugin(), this.moveBySettingsOrLoad(), ba(Eo(r.prototype), "updatePlugin", this).call(this);
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      Le(this.hot.rootElement, $H), this.unregisterEvents(), this.backlight.destroy(), this.guideline.destroy(), ba(Eo(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Moves a single column.
     *
     * @param {number} column Visual column index to be moved.
     * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
     * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
     * @fires Hooks#beforeColumnMove
     * @fires Hooks#afterColumnMove
     * @returns {boolean}
     */
  }, {
    key: "moveColumn",
    value: function(o, i) {
      return this.moveColumns([o], i);
    }
    /**
     * Moves a multiple columns.
     *
     * @param {Array} columns Array of visual column indexes to be moved.
     * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
     * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
     * @fires Hooks#beforeColumnMove
     * @fires Hooks#afterColumnMove
     * @returns {boolean}
     */
  }, {
    key: "moveColumns",
    value: function(o, i) {
      var a = ti.get(this), l = a.cachedDropIndex, s = this.isMovePossible(o, i), u = this.hot.runHooks("beforeColumnMove", o, i, l, s);
      if (a.cachedDropIndex = void 0, u !== !1) {
        s && this.hot.columnIndexMapper.moveIndexes(o, i);
        var f = s && this.isColumnOrderChanged(o, i);
        return this.hot.runHooks("afterColumnMove", o, i, l, s, f), f;
      }
    }
    /**
     * Drag a single column to drop index position.
     *
     * @param {number} column Visual column index to be dragged.
     * @param {number} dropIndex Visual column index, being a drop index for the moved columns. Points to where we are going to drop the moved elements.
     * To check visualization of drop index please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
     * @fires Hooks#beforeColumnMove
     * @fires Hooks#afterColumnMove
     * @returns {boolean}
     */
  }, {
    key: "dragColumn",
    value: function(o, i) {
      return this.dragColumns([o], i);
    }
    /**
     * Drag multiple columns to drop index position.
     *
     * @param {Array} columns Array of visual column indexes to be dragged.
     * @param {number} dropIndex Visual column index, being a drop index for the moved columns. Points to where we are going to drop the moved elements.
     * To check visualization of drop index please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
     * @fires Hooks#beforeColumnMove
     * @fires Hooks#afterColumnMove
     * @returns {boolean}
     */
  }, {
    key: "dragColumns",
    value: function(o, i) {
      var a = this.countFinalIndex(o, i), l = ti.get(this);
      return l.cachedDropIndex = i, this.moveColumns(o, a);
    }
    /**
     * Indicates if it's possible to move columns to the desired position. Some of the actions aren't
     * possible, i.e. You canât move more than one element to the last position.
     *
     * @param {Array} movedColumns Array of visual column indexes to be moved.
     * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
     * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
     * @returns {boolean}
     */
  }, {
    key: "isMovePossible",
    value: function(o, i) {
      var a = this.hot.columnIndexMapper.getNotTrimmedIndexesLength(), l = o.length + i > a, s = i < 0, u = o.some(function(c) {
        return c < 0;
      }), f = o.some(function(c) {
        return c >= a;
      });
      return !(l || s || u || f);
    }
    /**
     * Indicates if order of columns was changed.
     *
     * @private
     * @param {Array} movedColumns Array of visual column indexes to be moved.
     * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.
     * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).
     * @returns {boolean}
     */
  }, {
    key: "isColumnOrderChanged",
    value: function(o, i) {
      return o.some(function(a, l) {
        return a - l !== i;
      });
    }
    /**
     * Count the final column index from the drop index.
     *
     * @private
     * @param {Array} movedColumns Array of visual column indexes to be moved.
     * @param {number} dropIndex Visual column index, being a drop index for the moved columns.
     * @returns {number} Visual column index, being a start index for the moved columns.
     */
  }, {
    key: "countFinalIndex",
    value: function(o, i) {
      var a = sr(o, function(l, s) {
        return s < i && (l += 1), l;
      }, 0);
      return i - a;
    }
    /**
     * Gets the sum of the widths of columns in the provided range.
     *
     * @private
     * @param {number} fromColumn Visual column index.
     * @param {number} toColumn Visual column index.
     * @returns {number}
     */
  }, {
    key: "getColumnsWidth",
    value: function(o, i) {
      for (var a = this.hot.columnIndexMapper, l = 0, s = o; s <= i; s += 1) {
        var u = a.getRenderableFromVisualIndex(s);
        s < 0 ? l += this.hot.view._wt.wtViewport.getRowHeaderWidth() || 0 : u !== null && (l += this.hot.view._wt.wtTable.getStretchedColumnWidth(u) || 0);
      }
      return l;
    }
    /**
     * Loads initial settings when persistent state is saved or when plugin was initialized as an array.
     *
     * @private
     */
  }, {
    key: "moveBySettingsOrLoad",
    value: function() {
      var o = this.hot.getSettings()[IS];
      if (Array.isArray(o))
        this.moveColumns(o, 0);
      else if (o !== void 0) {
        var i = this.persistentStateLoad();
        i.length && this.moveColumns(i, 0);
      }
    }
    /**
     * Checks if the provided column is in the fixedColumnsTop section.
     *
     * @private
     * @param {number} column Visual column index to check.
     * @returns {boolean}
     */
  }, {
    key: "isFixedColumnsStart",
    value: function(o) {
      return o < this.hot.getSettings().fixedColumnsStart;
    }
    /**
     * Saves the manual column positions to the persistent state (the {@link Options#persistentState} option has to be enabled).
     *
     * @private
     * @fires Hooks#persistentStateSave
     */
  }, {
    key: "persistentStateSave",
    value: function() {
      this.hot.runHooks("persistentStateSave", "manualColumnMove", this.hot.columnIndexMapper.getIndexesSequence());
    }
    /**
     * Loads the manual column positions from the persistent state (the {@link Options#persistentState} option has to be enabled).
     *
     * @private
     * @fires Hooks#persistentStateLoad
     * @returns {Array} Stored state.
     */
  }, {
    key: "persistentStateLoad",
    value: function() {
      var o = {};
      return this.hot.runHooks("persistentStateLoad", "manualColumnMove", o), o.value ? o.value : [];
    }
    /**
     * Prepares an array of indexes based on actual selection.
     *
     * @private
     * @param {number} start The start index.
     * @param {number} end The end index.
     * @returns {Array}
     */
  }, {
    key: "prepareColumnsToMoving",
    value: function(o, i) {
      var a = [];
      return _e(o, i, function(l) {
        a.push(l);
      }), a;
    }
    /**
     * Update the UI visual position.
     *
     * @private
     */
  }, {
    key: "refreshPositions",
    value: function() {
      var o = ti.get(this), i = this.hot.view.getFirstFullyVisibleColumn();
      this.isFixedColumnsStart(o.hoveredColumn) && i > 0 && this.hot.scrollViewportTo(void 0, this.hot.columnIndexMapper.getNearestNotHiddenIndex(i - 1, -1));
      var a = this.hot.view._wt.wtTable, l = this.hot.view._wt.wtOverlays.scrollableElement, s = typeof l.scrollX == "number" ? l.scrollX : l.scrollLeft, u = this.hot.view.THEAD.offsetLeft + this.getColumnsWidth(0, o.hoveredColumn - 1), f = a.hider.offsetWidth, c = a.TBODY.offsetLeft, h = this.backlight.getOffset().start, d = this.backlight.getSize().width, y = 0, p = 0;
      if (this.hot.isRtl()) {
        var g = this.hot.rootWindow, w = yt(this.hot.rootElement), C = g.innerWidth - o.rootElementOffset - w;
        p = g.innerWidth - o.target.eventPageX - C - (l.scrollX === void 0 ? s : 0);
      } else
        p = o.target.eventPageX - (o.rootElementOffset - (l.scrollX === void 0 ? s : 0));
      if (o.hasRowHeaders && (y = this.hot.view._wt.wtOverlays.inlineStartOverlay.clone.wtTable.getColumnHeader(-1).offsetWidth), this.isFixedColumnsStart(o.hoveredColumn) && (u += s), u += y, o.hoveredColumn < 0)
        o.fixedColumnsStart > 0 ? o.target.col = 0 : o.target.col = i > 0 ? i - 1 : i;
      else if (o.target.TD.offsetWidth / 2 + u <= p) {
        var _ = o.hoveredColumn >= o.countCols ? o.countCols - 1 : o.hoveredColumn;
        o.target.col = _ + 1, u += o.target.TD.offsetWidth;
      } else
        o.target.col = o.hoveredColumn;
      var k = p, E = u;
      p + d + h >= f ? k = f - d - h : p + h < c + y && (k = c + y + Math.abs(h)), u >= f - 1 ? E = f - 1 : E === 0 ? E = 1 : l.scrollX !== void 0 && o.hoveredColumn < o.fixedColumnsStart && (E -= o.rootElementOffset <= l.scrollX ? o.rootElementOffset : 0), this.backlight.setPosition(null, k), this.guideline.setPosition(null, E);
    }
    /**
     * Binds the events used by the plugin.
     *
     * @private
     */
  }, {
    key: "registerEvents",
    value: function() {
      var o = this, i = this.hot.rootDocument.documentElement;
      this.eventManager.addEventListener(i, "mousemove", function(a) {
        return o.onMouseMove(a);
      }), this.eventManager.addEventListener(i, "mouseup", function() {
        return o.onMouseUp();
      });
    }
    /**
     * Unbinds the events used by the plugin.
     *
     * @private
     */
  }, {
    key: "unregisterEvents",
    value: function() {
      this.eventManager.clear();
    }
    /**
     * Change the behavior of selection / dragging.
     *
     * @private
     * @param {MouseEvent} event `mousedown` event properties.
     * @param {CellCoords} coords Visual cell coordinates where was fired event.
     * @param {HTMLElement} TD Cell represented as HTMLElement.
     * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
     *                            a boolean value that allows or disallows changing the selection for that particular area.
     */
  }, {
    key: "onBeforeOnCellMouseDown",
    value: function(o, i, a, l) {
      var s = this.hot.view._wt.wtTable, u = this.hot.selection.isSelectedByColumnHeader(), f = this.hot.getSelectedRangeLast(), c = ti.get(this), h = Me(o.target, "sortAction");
      if (!f || !u || c.pressed || o.button !== 0 || h) {
        c.pressed = !1, c.columnsToMove.length = 0, Le(this.hot.rootElement, [MS, My]);
        return;
      }
      var d = this.guideline.isBuilt() && !this.guideline.isAppended(), y = this.backlight.isBuilt() && !this.backlight.isAppended();
      d && y && (this.guideline.appendTo(s.hider), this.backlight.appendTo(s.hider));
      var p = f.from, g = f.to, w = Math.min(p.col, g.col), C = Math.max(p.col, g.col);
      if (i.row < 0 && i.col >= w && i.col <= C) {
        l.column = !0, c.pressed = !0, c.target.eventPageX = o.pageX, c.target.eventOffsetX = o.offsetX, c.hoveredColumn = i.col, c.target.TD = a, c.target.col = i.col, c.columnsToMove = this.prepareColumnsToMoving(w, C), c.hasRowHeaders = !!this.hot.getSettings().rowHeaders, c.countCols = this.hot.countCols(), c.fixedColumnsStart = this.hot.getSettings().fixedColumnsStart, c.rootElementOffset = Yt(this.hot.rootElement).left;
        var _ = c.hasRowHeaders ? -1 : 0, k = s.holder.scrollTop + s.getColumnHeaderHeight(0) + 1, E = i.col < c.fixedColumnsStart, j = Math.abs(this.hot.view._wt.wtOverlays.inlineStartOverlay.getScrollPosition()), Y = Math.abs(o.offsetX - (this.hot.isRtl() ? o.target.offsetWidth : 0)), Q = this.getColumnsWidth(w, i.col - 1) + Y, X = this.getColumnsWidth(_, w - 1) + (E ? j : 0) + Q;
        this.backlight.setPosition(k, X), this.backlight.setSize(this.getColumnsWidth(w, C), s.hider.offsetHeight - k), this.backlight.setOffset(null, -Q), ae(this.hot.rootElement, MS);
      } else
        Le(this.hot.rootElement, xS), c.pressed = !1, c.columnsToMove.length = 0;
    }
    /**
     * 'mouseMove' event callback. Fired when pointer move on document.documentElement.
     *
     * @private
     * @param {MouseEvent} event `mousemove` event properties.
     */
  }, {
    key: "onMouseMove",
    value: function(o) {
      var i = ti.get(this);
      if (i.pressed) {
        if (o.target === this.backlight.element) {
          var a = this.backlight.getSize().width;
          this.backlight.setSize(0), setTimeout(function() {
            this.backlight.setPosition(a);
          });
        }
        i.target.eventPageX = o.pageX, this.refreshPositions();
      }
    }
    /**
     * 'beforeOnCellMouseOver' hook callback. Fired when pointer was over cell.
     *
     * @private
     * @param {MouseEvent} event `mouseover` event properties.
     * @param {CellCoords} coords Visual cell coordinates where was fired event.
     * @param {HTMLElement} TD Cell represented as HTMLElement.
     * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
     *                            a boolean value that allows or disallows changing the selection for that particular area.
     */
  }, {
    key: "onBeforeOnCellMouseOver",
    value: function(o, i, a, l) {
      var s = this.hot.getSelectedRangeLast(), u = ti.get(this);
      !s || !u.pressed || (u.columnsToMove.indexOf(i.col) > -1 ? Le(this.hot.rootElement, My) : ae(this.hot.rootElement, My), l.row = !0, l.column = !0, l.cell = !0, u.hoveredColumn = i.col, u.target.TD = a);
    }
    /**
     * `onMouseUp` hook callback.
     *
     * @private
     */
  }, {
    key: "onMouseUp",
    value: function() {
      var o = ti.get(this), i = o.target.col, a = o.columnsToMove.length;
      if (o.hoveredColumn = void 0, o.pressed = !1, o.backlightWidth = 0, Le(this.hot.rootElement, [MS, My, xS]), this.hot.selection.isSelectedByColumnHeader() && ae(this.hot.rootElement, xS), !(a < 1 || i === void 0)) {
        var l = o.columnsToMove[0], s = this.hot.toPhysicalColumn(l), u = this.dragColumns(o.columnsToMove, i);
        if (o.columnsToMove.length = 0, u === !0) {
          this.persistentStateSave(), this.hot.render(), this.hot.view.adjustElementsSize(!0);
          var f = this.hot.toVisualColumn(s), c = f + a - 1;
          this.hot.selectColumns(f, c);
        }
      }
    }
    /**
     * `afterScrollHorizontally` hook callback. Fired the table was scrolled horizontally.
     *
     * @private
     */
  }, {
    key: "onAfterScrollVertically",
    value: function() {
      var o = this.hot.view._wt.wtTable, i = o.getColumnHeaderHeight(0) + 1, a = o.holder.scrollTop, l = i + a;
      this.backlight.setPosition(l), this.backlight.setSize(null, o.hider.offsetHeight - l);
    }
    /**
     * Builds the plugin's UI.
     *
     * @private
     */
  }, {
    key: "buildPluginUI",
    value: function() {
      this.backlight.build(), this.guideline.build();
    }
    /**
     * Callback for the `afterLoadData` hook.
     *
     * @private
     */
  }, {
    key: "onAfterLoadData",
    value: function() {
      this.moveBySettingsOrLoad();
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      this.backlight.destroy(), this.guideline.destroy(), ba(Eo(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return IS;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return iVe;
    }
  }]), r;
}(ft);
function zu(e) {
  "@babel/helpers - typeof";
  return zu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, zu(e);
}
function lVe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function AH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, uVe(n.key), n);
  }
}
function sVe(e, t, r) {
  return t && AH(e.prototype, t), r && AH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function uVe(e) {
  var t = fVe(e, "string");
  return zu(t) === "symbol" ? t : String(t);
}
function fVe(e, t) {
  if (zu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (zu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function wa() {
  return typeof Reflect < "u" && Reflect.get ? wa = Reflect.get.bind() : wa = function(t, r, n) {
    var o = cVe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, wa.apply(this, arguments);
}
function cVe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = To(e), e !== null); )
    ;
  return e;
}
function hVe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && cR(e, t);
}
function cR(e, t) {
  return cR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, cR(e, t);
}
function dVe(e) {
  var t = yVe();
  return function() {
    var n = To(e), o;
    if (t) {
      var i = To(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return vVe(this, o);
  };
}
function vVe(e, t) {
  if (t && (zu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return hR(e);
}
function hR(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function yVe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function To(e) {
  return To = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, To(e);
}
var xy = "manualColumnResize", pVe = 130, IH = "manualColumnWidths", DS = /* @__PURE__ */ new WeakMap(), mVe = /* @__PURE__ */ function(e) {
  hVe(r, e);
  var t = dVe(r);
  function r(n) {
    var o;
    lVe(this, r), o = t.call(this, n);
    var i = o.hot.rootDocument;
    return o.currentTH = null, o.currentCol = null, o.selectedCols = [], o.currentWidth = null, o.newSize = null, o.startY = null, o.startWidth = null, o.startOffset = null, o.handle = i.createElement("DIV"), o.guide = i.createElement("DIV"), o.eventManager = new It(hR(o)), o.pressed = null, o.dblclick = 0, o.autoresizeTimeout = null, o.columnWidthsMap = void 0, DS.set(hR(o), {
      config: void 0
    }), ae(o.handle, "manualColumnResizer"), ae(o.guide, "manualColumnResizerGuide"), o;
  }
  return sVe(r, [{
    key: "inlineDir",
    get: function() {
      return this.hot.isRtl() ? "right" : "left";
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link ManualColumnResize#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
  }, {
    key: "isEnabled",
    value: function() {
      return this.hot.getSettings()[xy];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      this.enabled || (this.columnWidthsMap = new Ai(), this.columnWidthsMap.addLocalHook("init", function() {
        return o.onMapInit();
      }), this.hot.columnIndexMapper.registerMap(this.pluginName, this.columnWidthsMap), this.addHook("modifyColWidth", function(i, a) {
        return o.onModifyColWidth(i, a);
      }), this.addHook("beforeStretchingColumnWidth", function(i, a) {
        return o.onBeforeStretchingColumnWidth(i, a);
      }), this.addHook("beforeColumnResize", function(i, a, l) {
        return o.onBeforeColumnResize(i, a, l);
      }), this.bindEvents(), wa(To(r.prototype), "enablePlugin", this).call(this));
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`manualColumnResize`](@/api/options.md#manualcolumnresize)
     */
  }, {
    key: "updatePlugin",
    value: function() {
      this.disablePlugin(), this.enablePlugin(), wa(To(r.prototype), "updatePlugin", this).call(this);
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      var o = DS.get(this);
      o.config = this.columnWidthsMap.getValues(), this.hot.columnIndexMapper.unregisterMap(this.pluginName), wa(To(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Saves the current sizes using the persistentState plugin (the {@link Options#persistentState} option has to be enabled).
     *
     * @fires Hooks#persistentStateSave
     */
  }, {
    key: "saveManualColumnWidths",
    value: function() {
      this.hot.runHooks("persistentStateSave", IH, this.columnWidthsMap.getValues());
    }
    /**
     * Loads the previously saved sizes using the persistentState plugin (the {@link Options#persistentState} option has to be enabled).
     *
     * @returns {Array}
     * @fires Hooks#persistentStateLoad
     */
  }, {
    key: "loadManualColumnWidths",
    value: function() {
      var o = {};
      return this.hot.runHooks("persistentStateLoad", IH, o), o.value;
    }
    /**
     * Sets the new width for specified column index.
     *
     * @param {number} column Visual column index.
     * @param {number} width Column width (no less than 20px).
     * @returns {number} Returns new width.
     */
  }, {
    key: "setManualSize",
    value: function(o, i) {
      var a = Math.max(i, 20), l = this.hot.toPhysicalColumn(o);
      return this.columnWidthsMap.setValueAtIndex(l, a), a;
    }
    /**
     * Clears the cache for the specified column index.
     *
     * @param {number} column Visual column index.
     */
  }, {
    key: "clearManualSize",
    value: function(o) {
      var i = this.hot.toPhysicalColumn(o);
      this.columnWidthsMap.setValueAtIndex(i, null);
    }
    /**
     * Callback to call on map's `init` local hook.
     *
     * @private
     */
  }, {
    key: "onMapInit",
    value: function() {
      var o = this, i = DS.get(this), a = this.hot.getSettings()[xy], l = this.loadManualColumnWidths();
      typeof l < "u" ? this.hot.batchExecution(function() {
        l.forEach(function(s, u) {
          o.columnWidthsMap.setValueAtIndex(u, s);
        });
      }, !0) : Array.isArray(a) ? (this.hot.batchExecution(function() {
        a.forEach(function(s, u) {
          o.columnWidthsMap.setValueAtIndex(u, s);
        });
      }, !0), i.config = a) : a === !0 && Array.isArray(i.config) && this.hot.batchExecution(function() {
        i.config.forEach(function(s, u) {
          o.columnWidthsMap.setValueAtIndex(u, s);
        });
      }, !0);
    }
    /**
     * Set the resize handle position.
     *
     * @private
     * @param {HTMLCellElement} TH TH HTML element.
     */
  }, {
    key: "setupHandlePosition",
    value: function(o) {
      var i = this;
      if (o.parentNode) {
        this.currentTH = o;
        var a = this.hot.view._wt, l = a.wtTable.getCoords(this.currentTH), s = l.col;
        if (!(s < 0)) {
          var u = $t(this.currentTH), f = this.currentTH.getBoundingClientRect(), c = s < a.getSetting("fixedColumnsStart"), h;
          c && (h = a.wtOverlays.topInlineStartCornerOverlay.getRelativeCellPosition(this.currentTH, l.row, l.col)), h || (h = a.wtOverlays.topOverlay.getRelativeCellPosition(this.currentTH, l.row, l.col)), this.currentCol = this.hot.columnIndexMapper.getVisualFromRenderableIndex(s), this.selectedCols = [];
          var d = this.hot.selection.isSelectedByCorner() || this.hot.selection.isSelectedByColumnHeader();
          if (this.hot.selection.isSelected() && d) {
            var y = this.hot.getSelectedRange();
            I(y, function(p) {
              var g = p.getTopStartCorner().col, w = p.getBottomEndCorner().col;
              _e(g, w, function(C) {
                i.selectedCols.includes(C) || i.selectedCols.push(C);
              });
            });
          }
          this.selectedCols.includes(this.currentCol) || (this.selectedCols = [this.currentCol]), this.startOffset = h.start - 6, this.startWidth = parseInt(f.width, 10), this.handle.style.top = "".concat(h.top, "px"), this.handle.style[this.inlineDir] = "".concat(this.startOffset + this.startWidth, "px"), this.handle.style.height = "".concat(u, "px"), this.hot.rootElement.appendChild(this.handle);
        }
      }
    }
    /**
     * Refresh the resize handle position.
     *
     * @private
     */
  }, {
    key: "refreshHandlePosition",
    value: function() {
      this.handle.style[this.inlineDir] = "".concat(this.startOffset + this.currentWidth, "px");
    }
    /**
     * Sets the resize guide position.
     *
     * @private
     */
  }, {
    key: "setupGuidePosition",
    value: function() {
      var o = parseInt($t(this.handle), 10), i = parseInt(this.handle.style.top, 10) + o, a = parseInt(this.hot.view.maximumVisibleElementHeight(0), 10);
      ae(this.handle, "active"), ae(this.guide, "active"), this.guide.style.top = "".concat(i, "px"), this.refreshGuidePosition(), this.guide.style.height = "".concat(a - o, "px"), this.hot.rootElement.appendChild(this.guide);
    }
    /**
     * Refresh the resize guide position.
     *
     * @private
     */
  }, {
    key: "refreshGuidePosition",
    value: function() {
      this.guide.style[this.inlineDir] = this.handle.style[this.inlineDir];
    }
    /**
     * Hides both the resize handle and resize guide.
     *
     * @private
     */
  }, {
    key: "hideHandleAndGuide",
    value: function() {
      Le(this.handle, "active"), Le(this.guide, "active");
    }
    /**
     * Checks if provided element is considered a column header.
     *
     * @private
     * @param {HTMLElement} element HTML element.
     * @returns {boolean}
     */
  }, {
    key: "checkIfColumnHeader",
    value: function(o) {
      return !!Aa(o, ["THEAD"], this.hot.rootElement);
    }
    /**
     * Gets the TH element from the provided element.
     *
     * @private
     * @param {HTMLElement} element HTML element.
     * @returns {HTMLElement}
     */
  }, {
    key: "getClosestTHParent",
    value: function(o) {
      return o.tagName !== "TABLE" ? o.tagName === "TH" ? o : this.getClosestTHParent(o.parentNode) : null;
    }
    /**
     * 'mouseover' event callback - set the handle position.
     *
     * @private
     * @param {MouseEvent} event The mouse event.
     */
  }, {
    key: "onMouseOver",
    value: function(o) {
      if (!_V(o.target) && this.checkIfColumnHeader(o.target)) {
        var i = this.getClosestTHParent(o.target);
        if (!i)
          return;
        var a = i.getAttribute("colspan");
        i && (a === null || a === "1") && (this.pressed || this.setupHandlePosition(i));
      }
    }
    /**
     * Auto-size row after doubleclick - callback.
     *
     * @private
     * @fires Hooks#beforeColumnResize
     * @fires Hooks#afterColumnResize
     */
  }, {
    key: "afterMouseDownTimeout",
    value: function() {
      var o = this, i = function() {
        o.hot.forceFullRender = !0, o.hot.view.render(), o.hot.view.adjustElementsSize(!0);
      }, a = function(u, f) {
        var c = o.hot.runHooks("beforeColumnResize", o.newSize, u, !0);
        c !== void 0 && (o.newSize = c), o.hot.getSettings().stretchH === "all" ? o.clearManualSize(u) : o.setManualSize(u, o.newSize), o.saveManualColumnWidths(), o.hot.runHooks("afterColumnResize", o.newSize, u, !0), f && i();
      };
      if (this.dblclick >= 2) {
        var l = this.selectedCols.length;
        l > 1 ? (I(this.selectedCols, function(s) {
          a(s);
        }), i()) : I(this.selectedCols, function(s) {
          a(s, !0);
        });
      }
      this.dblclick = 0, this.autoresizeTimeout = null;
    }
    /**
     * 'mousedown' event callback.
     *
     * @private
     * @param {MouseEvent} event The mouse event.
     */
  }, {
    key: "onMouseDown",
    value: function(o) {
      var i = this;
      Me(o.target, "manualColumnResizer") && (this.setupHandlePosition(this.currentTH), this.setupGuidePosition(), this.pressed = !0, this.autoresizeTimeout === null && (this.autoresizeTimeout = setTimeout(function() {
        return i.afterMouseDownTimeout();
      }, 500), this.hot._registerTimeout(this.autoresizeTimeout)), this.dblclick += 1, this.startX = o.pageX, this.newSize = this.startWidth);
    }
    /**
     * 'mousemove' event callback - refresh the handle and guide positions, cache the new column width.
     *
     * @private
     * @param {MouseEvent} event The mouse event.
     */
  }, {
    key: "onMouseMove",
    value: function(o) {
      var i = this;
      if (this.pressed) {
        var a = (o.pageX - this.startX) * this.hot.getDirectionFactor();
        this.currentWidth = this.startWidth + a, I(this.selectedCols, function(l) {
          i.newSize = i.setManualSize(l, i.currentWidth);
        }), this.refreshHandlePosition(), this.refreshGuidePosition();
      }
    }
    /**
     * 'mouseup' event callback - apply the column resizing.
     *
     * @private
     *
     * @fires Hooks#beforeColumnResize
     * @fires Hooks#afterColumnResize
     */
  }, {
    key: "onMouseUp",
    value: function() {
      var o = this, i = function() {
        o.hot.forceFullRender = !0, o.hot.view.render(), o.hot.view.adjustElementsSize(!0);
      }, a = function(u, f) {
        o.hot.runHooks("beforeColumnResize", o.newSize, u, !1), f && i(), o.saveManualColumnWidths(), o.hot.runHooks("afterColumnResize", o.newSize, u, !1);
      };
      if (this.pressed) {
        if (this.hideHandleAndGuide(), this.pressed = !1, this.newSize !== this.startWidth) {
          var l = this.selectedCols.length;
          l > 1 ? (I(this.selectedCols, function(s) {
            a(s);
          }), i()) : I(this.selectedCols, function(s) {
            a(s, !0);
          });
        }
        this.setupHandlePosition(this.currentTH);
      }
    }
    /**
     * Binds the mouse events.
     *
     * @private
     */
  }, {
    key: "bindEvents",
    value: function() {
      var o = this, i = this.hot, a = i.rootWindow, l = i.rootElement;
      this.eventManager.addEventListener(l, "mouseover", function(s) {
        return o.onMouseOver(s);
      }), this.eventManager.addEventListener(l, "mousedown", function(s) {
        return o.onMouseDown(s);
      }), this.eventManager.addEventListener(a, "mousemove", function(s) {
        return o.onMouseMove(s);
      }), this.eventManager.addEventListener(a, "mouseup", function() {
        return o.onMouseUp();
      });
    }
    /**
     * Modifies the provided column width, based on the plugin settings.
     *
     * @private
     * @param {number} width Column width.
     * @param {number} column Visual column index.
     * @returns {number}
     */
  }, {
    key: "onModifyColWidth",
    value: function(o, i) {
      var a = o;
      if (this.enabled) {
        var l = this.hot.toPhysicalColumn(i), s = this.columnWidthsMap.getValueAtIndex(l);
        this.hot.getSettings()[xy] && s && (a = s);
      }
      return a;
    }
    /**
     * Modifies the provided column stretched width. This hook decides if specified column should be stretched or not.
     *
     * @private
     * @param {number} stretchedWidth Stretched width.
     * @param {number} column Visual column index.
     * @returns {number}
     */
  }, {
    key: "onBeforeStretchingColumnWidth",
    value: function(o, i) {
      var a = this.columnWidthsMap.getValueAtIndex(i);
      return a === null && (a = o), a;
    }
    /**
     * `beforeColumnResize` hook callback.
     *
     * @private
     */
  }, {
    key: "onBeforeColumnResize",
    value: function() {
      this.hot.view._wt.wtViewport.resetHasOversizedColumnHeadersMarked();
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      wa(To(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return xy;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return pVe;
    }
  }]), r;
}(ft);
function Rd(e) {
  "@babel/helpers - typeof";
  return Rd = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Rd(e);
}
function gVe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function MH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, wVe(n.key), n);
  }
}
function bVe(e, t, r) {
  return t && MH(e.prototype, t), r && MH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function wVe(e) {
  var t = SVe(e, "string");
  return Rd(t) === "symbol" ? t : String(t);
}
function SVe(e, t) {
  if (Rd(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Rd(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var NS = 0, xH = 1, DH = 2, Ml = "px", CVe = /* @__PURE__ */ function() {
  function e(t) {
    gVe(this, e), this.hot = t, this._element = null, this.state = NS;
  }
  return bVe(e, [{
    key: "appendTo",
    value: function(r) {
      r.appendChild(this._element), this.state = DH;
    }
    /**
     * Method for create UI element. Only create, without append to table.
     */
  }, {
    key: "build",
    value: function() {
      this.state === NS && (this._element = this.hot.rootDocument.createElement("div"), this.state = xH);
    }
    /**
     * Method for remove UI element.
     */
  }, {
    key: "destroy",
    value: function() {
      this.isAppended() && this._element.parentElement.removeChild(this._element), this._element = null, this.state = NS;
    }
    /**
     * Check if UI element are appended.
     *
     * @returns {boolean}
     */
  }, {
    key: "isAppended",
    value: function() {
      return this.state === DH;
    }
    /**
     * Check if UI element are built.
     *
     * @returns {boolean}
     */
  }, {
    key: "isBuilt",
    value: function() {
      return this.state >= xH;
    }
    /**
     * Setter for position.
     *
     * @param {number} top New top position of the element.
     * @param {number} left New left position of the element.
     */
  }, {
    key: "setPosition",
    value: function(r, n) {
      r !== void 0 && (this._element.style.top = r + Ml), n !== void 0 && (this._element.style.left = n + Ml);
    }
    /**
     * Getter for the element position.
     *
     * @returns {object} Object contains left and top position of the element.
     */
  }, {
    key: "getPosition",
    value: function() {
      return {
        top: this._element.style.top ? parseInt(this._element.style.top, 10) : 0,
        left: this._element.style.left ? parseInt(this._element.style.left, 10) : 0
      };
    }
    /**
     * Setter for the element size.
     *
     * @param {number} width New width of the element.
     * @param {number} height New height of the element.
     */
  }, {
    key: "setSize",
    value: function(r, n) {
      r && (this._element.style.width = r + Ml), n && (this._element.style.height = n + Ml);
    }
    /**
     * Getter for the element position.
     *
     * @returns {object} Object contains height and width of the element.
     */
  }, {
    key: "getSize",
    value: function() {
      return {
        width: this._element.style.width ? parseInt(this._element.style.width, 10) : 0,
        height: this._element.style.height ? parseInt(this._element.style.height, 10) : 0
      };
    }
    /**
     * Setter for the element offset. Offset means marginTop and marginLeft of the element.
     *
     * @param {number} top New margin top of the element.
     * @param {number} left New margin left of the element.
     */
  }, {
    key: "setOffset",
    value: function(r, n) {
      r && (this._element.style.marginTop = r + Ml), n && (this._element.style.marginLeft = n + Ml);
    }
    /**
     * Getter for the element offset.
     *
     * @returns {object} Object contains top and left offset of the element.
     */
  }, {
    key: "getOffset",
    value: function() {
      return {
        top: this._element.style.marginTop ? parseInt(this._element.style.marginTop, 10) : 0,
        left: this._element.style.marginLeft ? parseInt(this._element.style.marginLeft, 10) : 0
      };
    }
  }]), e;
}();
const Hz = CVe;
function Yu(e) {
  "@babel/helpers - typeof";
  return Yu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Yu(e);
}
function _Ve(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function NH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, RVe(n.key), n);
  }
}
function OVe(e, t, r) {
  return t && NH(e.prototype, t), r && NH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function RVe(e) {
  var t = EVe(e, "string");
  return Yu(t) === "symbol" ? t : String(t);
}
function EVe(e, t) {
  if (Yu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Yu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Ep() {
  return typeof Reflect < "u" && Reflect.get ? Ep = Reflect.get.bind() : Ep = function(t, r, n) {
    var o = TVe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, Ep.apply(this, arguments);
}
function TVe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Gu(e), e !== null); )
    ;
  return e;
}
function PVe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && dR(e, t);
}
function dR(e, t) {
  return dR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, dR(e, t);
}
function kVe(e) {
  var t = IVe();
  return function() {
    var n = Gu(e), o;
    if (t) {
      var i = Gu(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return $Ve(this, o);
  };
}
function $Ve(e, t) {
  if (t && (Yu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return AVe(e);
}
function AVe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function IVe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Gu(e) {
  return Gu = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Gu(e);
}
var MVe = "ht__manualRowMove--backlight", xVe = /* @__PURE__ */ function(e) {
  PVe(r, e);
  var t = kVe(r);
  function r() {
    return _Ve(this, r), t.apply(this, arguments);
  }
  return OVe(r, [{
    key: "build",
    value: (
      /**
       * Custom className on build process.
       */
      function() {
        Ep(Gu(r.prototype), "build", this).call(this), ae(this._element, MVe);
      }
    )
  }]), r;
}(Hz);
const DVe = xVe;
function Ku(e) {
  "@babel/helpers - typeof";
  return Ku = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Ku(e);
}
function NVe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function HH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, LVe(n.key), n);
  }
}
function HVe(e, t, r) {
  return t && HH(e.prototype, t), r && HH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function LVe(e) {
  var t = jVe(e, "string");
  return Ku(t) === "symbol" ? t : String(t);
}
function jVe(e, t) {
  if (Ku(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Ku(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Tp() {
  return typeof Reflect < "u" && Reflect.get ? Tp = Reflect.get.bind() : Tp = function(t, r, n) {
    var o = FVe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, Tp.apply(this, arguments);
}
function FVe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = qu(e), e !== null); )
    ;
  return e;
}
function BVe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && vR(e, t);
}
function vR(e, t) {
  return vR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, vR(e, t);
}
function VVe(e) {
  var t = zVe();
  return function() {
    var n = qu(e), o;
    if (t) {
      var i = qu(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return WVe(this, o);
  };
}
function WVe(e, t) {
  if (t && (Ku(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return UVe(e);
}
function UVe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function zVe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function qu(e) {
  return qu = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, qu(e);
}
var YVe = "ht__manualRowMove--guideline", GVe = /* @__PURE__ */ function(e) {
  BVe(r, e);
  var t = VVe(r);
  function r() {
    return NVe(this, r), t.apply(this, arguments);
  }
  return HVe(r, [{
    key: "build",
    value: (
      /**
       * Custom className on build process.
       */
      function() {
        Tp(qu(r.prototype), "build", this).call(this), ae(this._element, YVe);
      }
    )
  }]), r;
}(Hz);
const KVe = GVe;
function Xu(e) {
  "@babel/helpers - typeof";
  return Xu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Xu(e);
}
function qVe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function LH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, ZVe(n.key), n);
  }
}
function XVe(e, t, r) {
  return t && LH(e.prototype, t), r && LH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function ZVe(e) {
  var t = QVe(e, "string");
  return Xu(t) === "symbol" ? t : String(t);
}
function QVe(e, t) {
  if (Xu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Xu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Sa() {
  return typeof Reflect < "u" && Reflect.get ? Sa = Reflect.get.bind() : Sa = function(t, r, n) {
    var o = JVe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, Sa.apply(this, arguments);
}
function JVe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Po(e), e !== null); )
    ;
  return e;
}
function eWe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && yR(e, t);
}
function yR(e, t) {
  return yR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, yR(e, t);
}
function tWe(e) {
  var t = nWe();
  return function() {
    var n = Po(e), o;
    if (t) {
      var i = Po(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return rWe(this, o);
  };
}
function rWe(e, t) {
  if (t && (Xu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return pR(e);
}
function pR(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function nWe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Po(e) {
  return Po = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Po(e);
}
we.getSingleton().register("beforeRowMove");
we.getSingleton().register("afterRowMove");
var HS = "manualRowMove", oWe = 140, ri = /* @__PURE__ */ new WeakMap(), jH = "ht__manualRowMove", Dy = "show-ui", LS = "on-moving--rows", jS = "after-selection--rows", iWe = /* @__PURE__ */ function(e) {
  eWe(r, e);
  var t = tWe(r);
  function r(n) {
    var o;
    return qVe(this, r), o = t.call(this, n), ri.set(pR(o), {
      rowsToMove: [],
      pressed: void 0,
      target: {
        eventPageY: void 0,
        coords: void 0,
        TD: void 0,
        row: void 0
      },
      cachedDropIndex: void 0
    }), o.eventManager = new It(pR(o)), o.backlight = new DVe(n), o.guideline = new KVe(n), o;
  }
  return XVe(r, [{
    key: "isEnabled",
    value: function() {
      return !!this.hot.getSettings()[HS];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      this.enabled || (this.addHook("beforeOnCellMouseDown", function() {
        return o.onBeforeOnCellMouseDown.apply(o, arguments);
      }), this.addHook("beforeOnCellMouseOver", function() {
        return o.onBeforeOnCellMouseOver.apply(o, arguments);
      }), this.addHook("afterScrollHorizontally", function() {
        return o.onAfterScrollHorizontally();
      }), this.addHook("afterLoadData", function() {
        return o.onAfterLoadData.apply(o, arguments);
      }), this.buildPluginUI(), this.registerEvents(), ae(this.hot.rootElement, jH), Sa(Po(r.prototype), "enablePlugin", this).call(this));
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`manualRowMove`](@/api/options.md#manualrowmove)
     */
  }, {
    key: "updatePlugin",
    value: function() {
      this.disablePlugin(), this.enablePlugin(), this.moveBySettingsOrLoad(), Sa(Po(r.prototype), "updatePlugin", this).call(this);
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      Le(this.hot.rootElement, jH), this.unregisterEvents(), this.backlight.destroy(), this.guideline.destroy(), Sa(Po(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Moves a single row.
     *
     * @param {number} row Visual row index to be moved.
     * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
     * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
     * @fires Hooks#beforeRowMove
     * @fires Hooks#afterRowMove
     * @returns {boolean}
     */
  }, {
    key: "moveRow",
    value: function(o, i) {
      return this.moveRows([o], i);
    }
    /**
     * Moves a multiple rows.
     *
     * @param {Array} rows Array of visual row indexes to be moved.
     * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
     * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
     * @fires Hooks#beforeRowMove
     * @fires Hooks#afterRowMove
     * @returns {boolean}
     */
  }, {
    key: "moveRows",
    value: function(o, i) {
      var a = ri.get(this), l = a.cachedDropIndex, s = this.isMovePossible(o, i), u = this.hot.runHooks("beforeRowMove", o, i, l, s);
      if (a.cachedDropIndex = void 0, u !== !1) {
        s && this.hot.rowIndexMapper.moveIndexes(o, i);
        var f = s && this.isRowOrderChanged(o, i);
        return this.hot.runHooks("afterRowMove", o, i, l, s, f), f;
      }
    }
    /**
     * Drag a single row to drop index position.
     *
     * @param {number} row Visual row index to be dragged.
     * @param {number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we are going to drop the moved elements.
     * To check visualization of drop index please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
     * @fires Hooks#beforeRowMove
     * @fires Hooks#afterRowMove
     * @returns {boolean}
     */
  }, {
    key: "dragRow",
    value: function(o, i) {
      return this.dragRows([o], i);
    }
    /**
     * Drag multiple rows to drop index position.
     *
     * @param {Array} rows Array of visual row indexes to be dragged.
     * @param {number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we are going to drop the moved elements.
     * To check visualization of drop index please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
     * @fires Hooks#beforeRowMove
     * @fires Hooks#afterRowMove
     * @returns {boolean}
     */
  }, {
    key: "dragRows",
    value: function(o, i) {
      var a = this.countFinalIndex(o, i), l = ri.get(this);
      return l.cachedDropIndex = i, this.moveRows(o, a);
    }
    /**
     * Indicates if it's possible to move rows to the desired position. Some of the actions aren't possible, i.e. You canât move more than one element to the last position.
     *
     * @param {Array} movedRows Array of visual row indexes to be moved.
     * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
     * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
     * @returns {boolean}
     */
  }, {
    key: "isMovePossible",
    value: function(o, i) {
      var a = this.hot.rowIndexMapper.getNotTrimmedIndexesLength(), l = o.length + i > a, s = i < 0, u = o.some(function(c) {
        return c < 0;
      }), f = o.some(function(c) {
        return c >= a;
      });
      return !(l || s || u || f);
    }
    /**
     * Indicates if order of rows was changed.
     *
     * @private
     * @param {Array} movedRows Array of visual row indexes to be moved.
     * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.
     * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).
     * @returns {boolean}
     */
  }, {
    key: "isRowOrderChanged",
    value: function(o, i) {
      return o.some(function(a, l) {
        return a - l !== i;
      });
    }
    /**
     * Count the final row index from the drop index.
     *
     * @private
     * @param {Array} movedRows Array of visual row indexes to be moved.
     * @param {number} dropIndex Visual row index, being a drop index for the moved rows.
     * @returns {number} Visual row index, being a start index for the moved rows.
     */
  }, {
    key: "countFinalIndex",
    value: function(o, i) {
      var a = sr(o, function(l, s) {
        return s < i && (l += 1), l;
      }, 0);
      return i - a;
    }
    /**
     * Gets the sum of the heights of rows in the provided range.
     *
     * @private
     * @param {number} fromRow Visual row index.
     * @param {number} toRow Visual row index.
     * @returns {number}
     */
  }, {
    key: "getRowsHeight",
    value: function(o, i) {
      for (var a = this.hot.rowIndexMapper, l = 0, s = o; s <= i; s++) {
        var u = a.getRenderableFromVisualIndex(s);
        u !== null && (l += this.hot.view._wt.wtTable.getRowHeight(u) || 23);
      }
      return l;
    }
    /**
     * Loads initial settings when persistent state is saved or when plugin was initialized as an array.
     *
     * @private
     */
  }, {
    key: "moveBySettingsOrLoad",
    value: function() {
      var o = this.hot.getSettings()[HS];
      if (Array.isArray(o))
        this.moveRows(o, 0);
      else if (o !== void 0) {
        var i = this.persistentStateLoad();
        i.length && this.moveRows(i, 0);
      }
    }
    /**
     * Checks if the provided row is in the fixedRowsTop section.
     *
     * @private
     * @param {number} row Visual row index to check.
     * @returns {boolean}
     */
  }, {
    key: "isFixedRowTop",
    value: function(o) {
      return o < this.hot.getSettings().fixedRowsTop;
    }
    /**
     * Checks if the provided row is in the fixedRowsBottom section.
     *
     * @private
     * @param {number} row Visual row index to check.
     * @returns {boolean}
     */
  }, {
    key: "isFixedRowBottom",
    value: function(o) {
      return o > this.hot.countRows() - 1 - this.hot.getSettings().fixedRowsBottom;
    }
    /**
     * Saves the manual row positions to the persistent state (the {@link Options#persistentState} option has to be enabled).
     *
     * @private
     * @fires Hooks#persistentStateSave
     */
  }, {
    key: "persistentStateSave",
    value: function() {
      this.hot.runHooks("persistentStateSave", "manualRowMove", this.hot.rowIndexMapper.getIndexesSequence());
    }
    /**
     * Loads the manual row positions from the persistent state (the {@link Options#persistentState} option has to be enabled).
     *
     * @private
     * @fires Hooks#persistentStateLoad
     * @returns {Array} Stored state.
     */
  }, {
    key: "persistentStateLoad",
    value: function() {
      var o = {};
      return this.hot.runHooks("persistentStateLoad", "manualRowMove", o), o.value ? o.value : [];
    }
    /**
     * Prepares an array of indexes based on actual selection.
     *
     * @private
     * @returns {Array}
     */
  }, {
    key: "prepareRowsToMoving",
    value: function() {
      var o = this.hot.getSelectedRangeLast(), i = [];
      if (!o)
        return i;
      var a = o.from, l = o.to, s = Math.min(a.row, l.row), u = Math.max(a.row, l.row);
      return _e(s, u, function(f) {
        i.push(f);
      }), i;
    }
    /**
     * Update the UI visual position.
     *
     * @private
     */
  }, {
    key: "refreshPositions",
    value: function() {
      var o = ri.get(this), i = o.target.coords, a = this.hot.view.getFirstFullyVisibleRow(), l = this.hot.view.getLastFullyVisibleRow(), s = this.hot.countRows();
      this.isFixedRowTop(i.row) && a > 0 && this.hot.scrollViewportTo(this.hot.rowIndexMapper.getNearestNotHiddenIndex(a - 1, -1)), this.isFixedRowBottom(i.row) && l < s && this.hot.scrollViewportTo(this.hot.rowIndexMapper.getNearestNotHiddenIndex(l + 1, 1), void 0, !0);
      var u = this.hot.view._wt.wtTable, f = o.target.TD, c = this.hot.rootElement, h = Yt(c), d = fs(c), y = u.holder.scrollTop, p;
      this.hot.rootWindow === d ? p = d.scrollY : p = d.scrollTop;
      var g = h.top - p, w = o.target.eventPageY - g + y, C = u.hider.offsetHeight, _ = u.TBODY.offsetTop, k = this.backlight.getOffset().top, E = this.backlight.getSize().height, j = f.offsetHeight / 2, Y = f.offsetHeight, Q = this.hot.view.THEAD.offsetHeight + this.getRowsHeight(0, i.row - 1), X = w >= Q + j;
      this.isFixedRowTop(i.row) && (Q += u.holder.scrollTop), i.row < 0 ? o.target.row = a > 0 ? a - 1 : a : X ? (o.target.row = i.row + 1, Q += i.row === 0 ? Y - 1 : Y) : o.target.row = i.row;
      var q = w, J = Q;
      w + E + k >= C ? q = C - E - k : w + k < _ && (q = _ + Math.abs(k)), Q >= C - 1 && (J = C - 1), this.backlight.setPosition(q), this.guideline.setPosition(J);
    }
    /**
     * Binds the events used by the plugin.
     *
     * @private
     */
  }, {
    key: "registerEvents",
    value: function() {
      var o = this, i = this.hot.rootDocument.documentElement;
      this.eventManager.addEventListener(i, "mousemove", function(a) {
        return o.onMouseMove(a);
      }), this.eventManager.addEventListener(i, "mouseup", function() {
        return o.onMouseUp();
      });
    }
    /**
     * Unbinds the events used by the plugin.
     *
     * @private
     */
  }, {
    key: "unregisterEvents",
    value: function() {
      this.eventManager.clear();
    }
    /**
     * Change the behavior of selection / dragging.
     *
     * @private
     * @param {MouseEvent} event `mousedown` event properties.
     * @param {CellCoords} coords Visual cell coordinates where was fired event.
     * @param {HTMLElement} TD Cell represented as HTMLElement.
     * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
     *                            a boolean value that allows or disallows changing the selection for that particular area.
     */
  }, {
    key: "onBeforeOnCellMouseDown",
    value: function(o, i, a, l) {
      var s = this.hot.view._wt, u = s.wtTable, f = s.wtViewport, c = this.hot.selection.isSelectedByRowHeader(), h = this.hot.getSelectedRangeLast(), d = ri.get(this);
      if (!h || !c || d.pressed || o.button !== 0) {
        d.pressed = !1, d.rowsToMove.length = 0, Le(this.hot.rootElement, [LS, Dy]);
        return;
      }
      var y = this.guideline.isBuilt() && !this.guideline.isAppended(), p = this.backlight.isBuilt() && !this.backlight.isAppended();
      y && p && (this.guideline.appendTo(u.hider), this.backlight.appendTo(u.hider));
      var g = h.from, w = h.to, C = Math.min(g.row, w.row), _ = Math.max(g.row, w.row);
      if (i.col < 0 && i.row >= C && i.row <= _) {
        l.row = !0, d.pressed = !0, d.target.eventPageY = o.pageY, d.target.coords = i, d.target.TD = a, d.rowsToMove = this.prepareRowsToMoving();
        var k = u.holder.scrollLeft + f.getRowHeaderWidth();
        this.backlight.setPosition(null, k), this.backlight.setSize(u.hider.offsetWidth - k, this.getRowsHeight(C, _)), this.backlight.setOffset((this.getRowsHeight(C, i.row - 1) + o.offsetY) * -1, null), ae(this.hot.rootElement, LS), this.refreshPositions();
      } else
        Le(this.hot.rootElement, jS), d.pressed = !1, d.rowsToMove.length = 0;
    }
    /**
     * 'mouseMove' event callback. Fired when pointer move on document.documentElement.
     *
     * @private
     * @param {MouseEvent} event `mousemove` event properties.
     */
  }, {
    key: "onMouseMove",
    value: function(o) {
      var i = ri.get(this);
      if (i.pressed) {
        if (o.target === this.backlight.element) {
          var a = this.backlight.getSize().height;
          this.backlight.setSize(null, 0), setTimeout(function() {
            this.backlight.setPosition(null, a);
          });
        }
        i.target.eventPageY = o.pageY, this.refreshPositions();
      }
    }
    /**
     * 'beforeOnCellMouseOver' hook callback. Fired when pointer was over cell.
     *
     * @private
     * @param {MouseEvent} event `mouseover` event properties.
     * @param {CellCoords} coords Visual cell coordinates where was fired event.
     * @param {HTMLElement} TD Cell represented as HTMLElement.
     * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
     *                            a boolean value that allows or disallows changing the selection for that particular area.
     */
  }, {
    key: "onBeforeOnCellMouseOver",
    value: function(o, i, a, l) {
      var s = this.hot.getSelectedRangeLast(), u = ri.get(this);
      !s || !u.pressed || (u.rowsToMove.indexOf(i.row) > -1 ? Le(this.hot.rootElement, Dy) : ae(this.hot.rootElement, Dy), l.row = !0, l.column = !0, l.cell = !0, u.target.coords = i, u.target.TD = a);
    }
    /**
     * `onMouseUp` hook callback.
     *
     * @private
     */
  }, {
    key: "onMouseUp",
    value: function() {
      var o = ri.get(this), i = o.target.row, a = o.rowsToMove.length;
      if (o.pressed = !1, o.backlightHeight = 0, Le(this.hot.rootElement, [LS, Dy, jS]), this.hot.selection.isSelectedByRowHeader() && ae(this.hot.rootElement, jS), !(a < 1 || i === void 0)) {
        var l = o.rowsToMove[0], s = this.hot.toPhysicalRow(l), u = this.dragRows(o.rowsToMove, i);
        if (o.rowsToMove.length = 0, u === !0) {
          this.persistentStateSave(), this.hot.render(), this.hot.view.adjustElementsSize(!0);
          var f = this.hot.toVisualRow(s), c = f + a - 1;
          this.hot.selectRows(f, c);
        }
      }
    }
    /**
     * `afterScrollHorizontally` hook callback. Fired the table was scrolled horizontally.
     *
     * @private
     */
  }, {
    key: "onAfterScrollHorizontally",
    value: function() {
      var o = this.hot.view._wt.wtTable, i = this.hot.view._wt.wtViewport.getRowHeaderWidth(), a = o.holder.scrollLeft, l = i + a;
      this.backlight.setPosition(null, l), this.backlight.setSize(o.hider.offsetWidth - l);
    }
    /**
     * Builds the plugin's UI.
     *
     * @private
     */
  }, {
    key: "buildPluginUI",
    value: function() {
      this.backlight.build(), this.guideline.build();
    }
    /**
     * Callback for the `afterLoadData` hook.
     *
     * @private
     */
  }, {
    key: "onAfterLoadData",
    value: function() {
      this.moveBySettingsOrLoad();
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      this.backlight.destroy(), this.guideline.destroy(), Sa(Po(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return HS;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return oWe;
    }
  }]), r;
}(ft);
function Zu(e) {
  "@babel/helpers - typeof";
  return Zu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Zu(e);
}
function aWe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function FH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, sWe(n.key), n);
  }
}
function lWe(e, t, r) {
  return t && FH(e.prototype, t), r && FH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function sWe(e) {
  var t = uWe(e, "string");
  return Zu(t) === "symbol" ? t : String(t);
}
function uWe(e, t) {
  if (Zu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Zu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Ca() {
  return typeof Reflect < "u" && Reflect.get ? Ca = Reflect.get.bind() : Ca = function(t, r, n) {
    var o = fWe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, Ca.apply(this, arguments);
}
function fWe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = ko(e), e !== null); )
    ;
  return e;
}
function cWe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && mR(e, t);
}
function mR(e, t) {
  return mR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, mR(e, t);
}
function hWe(e) {
  var t = vWe();
  return function() {
    var n = ko(e), o;
    if (t) {
      var i = ko(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return dWe(this, o);
  };
}
function dWe(e, t) {
  if (t && (Zu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return gR(e);
}
function gR(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function vWe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function ko(e) {
  return ko = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, ko(e);
}
var Ny = "manualRowResize", yWe = 30, BH = "manualRowHeights", FS = /* @__PURE__ */ new WeakMap(), pWe = /* @__PURE__ */ function(e) {
  cWe(r, e);
  var t = hWe(r);
  function r(n) {
    var o;
    aWe(this, r), o = t.call(this, n);
    var i = o.hot.rootDocument;
    return o.currentTH = null, o.currentRow = null, o.selectedRows = [], o.currentHeight = null, o.newSize = null, o.startY = null, o.startHeight = null, o.startOffset = null, o.handle = i.createElement("DIV"), o.guide = i.createElement("DIV"), o.eventManager = new It(gR(o)), o.pressed = null, o.dblclick = 0, o.autoresizeTimeout = null, o.rowHeightsMap = void 0, FS.set(gR(o), {
      config: void 0
    }), ae(o.handle, "manualRowResizer"), ae(o.guide, "manualRowResizerGuide"), o;
  }
  return lWe(r, [{
    key: "inlineDir",
    get: function() {
      return this.hot.isRtl() ? "right" : "left";
    }
    /**
     * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}
     * hook and if it returns `true` then the {@link ManualRowResize#enablePlugin} method is called.
     *
     * @returns {boolean}
     */
  }, {
    key: "isEnabled",
    value: function() {
      return this.hot.getSettings()[Ny];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      this.enabled || (this.rowHeightsMap = new Ai(), this.rowHeightsMap.addLocalHook("init", function() {
        return o.onMapInit();
      }), this.hot.rowIndexMapper.registerMap(this.pluginName, this.rowHeightsMap), this.addHook("modifyRowHeight", function(i, a) {
        return o.onModifyRowHeight(i, a);
      }), this.bindEvents(), Ca(ko(r.prototype), "enablePlugin", this).call(this));
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`manualRowResize`](@/api/options.md#manualrowresize)
     */
  }, {
    key: "updatePlugin",
    value: function() {
      this.disablePlugin(), this.enablePlugin(), Ca(ko(r.prototype), "updatePlugin", this).call(this);
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      var o = FS.get(this);
      o.config = this.rowHeightsMap.getValues(), this.hot.rowIndexMapper.unregisterMap(this.pluginName), Ca(ko(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Saves the current sizes using the persistentState plugin (the {@link Options#persistentState} option has to be
     * enabled).
     *
     * @fires Hooks#persistentStateSave
     */
  }, {
    key: "saveManualRowHeights",
    value: function() {
      this.hot.runHooks("persistentStateSave", BH, this.rowHeightsMap.getValues());
    }
    /**
     * Loads the previously saved sizes using the persistentState plugin (the {@link Options#persistentState} option
     * has be enabled).
     *
     * @returns {Array}
     * @fires Hooks#persistentStateLoad
     */
  }, {
    key: "loadManualRowHeights",
    value: function() {
      var o = {};
      return this.hot.runHooks("persistentStateLoad", BH, o), o.value;
    }
    /**
     * Sets the new height for specified row index.
     *
     * @param {number} row Visual row index.
     * @param {number} height Row height.
     * @returns {number} Returns new height.
     */
  }, {
    key: "setManualSize",
    value: function(o, i) {
      var a = this.hot.toPhysicalRow(o), l = Math.max(i, eW.DEFAULT_HEIGHT);
      return this.rowHeightsMap.setValueAtIndex(a, l), l;
    }
    /**
     * Sets the resize handle position.
     *
     * @private
     * @param {HTMLCellElement} TH TH HTML element.
     */
  }, {
    key: "setupHandlePosition",
    value: function(o) {
      var i = this;
      this.currentTH = o;
      var a = this.hot.view, l = a._wt, s = l.wtTable.getCoords(this.currentTH), u = s.row;
      if (!(u < 0)) {
        var f = yt(this.currentTH), c = this.currentTH.getBoundingClientRect(), h = u < l.getSetting("fixedRowsTop"), d = u >= a.countNotHiddenRowIndexes(0, 1) - l.getSetting("fixedRowsBottom"), y;
        h ? y = l.wtOverlays.topInlineStartCornerOverlay.getRelativeCellPosition(this.currentTH, s.row, s.col) : d && (y = l.wtOverlays.bottomInlineStartCornerOverlay.getRelativeCellPosition(this.currentTH, s.row, s.col)), y || (y = l.wtOverlays.inlineStartOverlay.getRelativeCellPosition(this.currentTH, s.row, s.col)), this.currentRow = this.hot.rowIndexMapper.getVisualFromRenderableIndex(u), this.selectedRows = [];
        var p = this.hot.selection.isSelectedByCorner() || this.hot.selection.isSelectedByRowHeader();
        if (this.hot.selection.isSelected() && p) {
          var g = this.hot.getSelectedRange();
          I(g, function(w) {
            var C = w.getTopStartCorner().row, _ = w.getBottomStartCorner().row;
            _e(C, _, function(k) {
              i.selectedRows.includes(k) || i.selectedRows.push(k);
            });
          });
        }
        this.selectedRows.includes(this.currentRow) || (this.selectedRows = [this.currentRow]), this.startOffset = y.top - 6, this.startHeight = parseInt(c.height, 10), this.handle.style.top = "".concat(this.startOffset + this.startHeight, "px"), this.handle.style[this.inlineDir] = "".concat(y.start, "px"), this.handle.style.width = "".concat(f, "px"), this.hot.rootElement.appendChild(this.handle);
      }
    }
    /**
     * Refresh the resize handle position.
     *
     * @private
     */
  }, {
    key: "refreshHandlePosition",
    value: function() {
      this.handle.style.top = "".concat(this.startOffset + this.currentHeight, "px");
    }
    /**
     * Sets the resize guide position.
     *
     * @private
     */
  }, {
    key: "setupGuidePosition",
    value: function() {
      var o = parseInt(yt(this.handle), 10), i = parseInt(this.handle.style[this.inlineDir], 10) + o, a = parseInt(this.hot.view.maximumVisibleElementWidth(0), 10);
      ae(this.handle, "active"), ae(this.guide, "active"), this.guide.style.top = this.handle.style.top, this.guide.style[this.inlineDir] = "".concat(i, "px"), this.guide.style.width = "".concat(a - o, "px"), this.hot.rootElement.appendChild(this.guide);
    }
    /**
     * Refresh the resize guide position.
     *
     * @private
     */
  }, {
    key: "refreshGuidePosition",
    value: function() {
      this.guide.style.top = this.handle.style.top;
    }
    /**
     * Hides both the resize handle and resize guide.
     *
     * @private
     */
  }, {
    key: "hideHandleAndGuide",
    value: function() {
      Le(this.handle, "active"), Le(this.guide, "active");
    }
    /**
     * Checks if provided element is considered as a row header.
     *
     * @private
     * @param {HTMLElement} element HTML element.
     * @returns {boolean}
     */
  }, {
    key: "checkIfRowHeader",
    value: function(o) {
      var i, a, l = Aa(o, ["TH"], this.hot.rootElement);
      return l && ((i = o.parentNode) === null || i === void 0 || (a = i.parentNode) === null || a === void 0 ? void 0 : a.tagName) === "TBODY";
    }
    /**
     * Gets the TH element from the provided element.
     *
     * @private
     * @param {HTMLElement} element HTML element.
     * @returns {HTMLElement}
     */
  }, {
    key: "getClosestTHParent",
    value: function(o) {
      return o.tagName !== "TABLE" ? o.tagName === "TH" ? o : this.getClosestTHParent(o.parentNode) : null;
    }
    /**
     * Returns the actual height for the provided row index.
     *
     * @private
     * @param {number} row Visual row index.
     * @returns {number} Actual row height.
     */
  }, {
    key: "getActualRowHeight",
    value: function(o) {
      var i = this.hot.view._wt.wtTable.getRowHeight(o);
      return i !== void 0 && this.newSize < i ? i : this.newSize;
    }
    /**
     * 'mouseover' event callback - set the handle position.
     *
     * @private
     * @param {MouseEvent} event The mouse event.
     */
  }, {
    key: "onMouseOver",
    value: function(o) {
      if (!_V(o.target) && this.checkIfRowHeader(o.target)) {
        var i = this.getClosestTHParent(o.target);
        i && (this.pressed || this.setupHandlePosition(i));
      }
    }
    /**
     * Auto-size row after doubleclick - callback.
     *
     * @private
     * @fires Hooks#beforeRowResize
     * @fires Hooks#afterRowResize
     */
  }, {
    key: "afterMouseDownTimeout",
    value: function() {
      var o = this, i = function() {
        o.hot.forceFullRender = !0, o.hot.view.render(), o.hot.view.adjustElementsSize(!0);
      }, a = function(u, f) {
        var c = o.hot.runHooks("beforeRowResize", o.getActualRowHeight(u), u, !0);
        c !== void 0 && (o.newSize = c), o.setManualSize(u, o.newSize), o.hot.runHooks("afterRowResize", o.getActualRowHeight(u), u, !0), f && i();
      };
      if (this.dblclick >= 2) {
        var l = this.selectedRows.length;
        l > 1 ? (I(this.selectedRows, function(s) {
          a(s);
        }), i()) : I(this.selectedRows, function(s) {
          a(s, !0);
        });
      }
      this.dblclick = 0, this.autoresizeTimeout = null;
    }
    /**
     * 'mousedown' event callback.
     *
     * @private
     * @param {MouseEvent} event The mouse event.
     */
  }, {
    key: "onMouseDown",
    value: function(o) {
      var i = this;
      Me(o.target, "manualRowResizer") && (this.setupHandlePosition(this.currentTH), this.setupGuidePosition(), this.pressed = !0, this.autoresizeTimeout === null && (this.autoresizeTimeout = setTimeout(function() {
        return i.afterMouseDownTimeout();
      }, 500), this.hot._registerTimeout(this.autoresizeTimeout)), this.dblclick += 1, this.startY = o.pageY, this.newSize = this.startHeight);
    }
    /**
     * 'mousemove' event callback - refresh the handle and guide positions, cache the new row height.
     *
     * @private
     * @param {MouseEvent} event The mouse event.
     */
  }, {
    key: "onMouseMove",
    value: function(o) {
      var i = this;
      this.pressed && (this.currentHeight = this.startHeight + (o.pageY - this.startY), I(this.selectedRows, function(a) {
        i.newSize = i.setManualSize(a, i.currentHeight);
      }), this.refreshHandlePosition(), this.refreshGuidePosition());
    }
    /**
     * 'mouseup' event callback - apply the row resizing.
     *
     * @private
     *
     * @fires Hooks#beforeRowResize
     * @fires Hooks#afterRowResize
     */
  }, {
    key: "onMouseUp",
    value: function() {
      var o = this, i = function() {
        o.hot.forceFullRender = !0, o.hot.view.render(), o.hot.view.adjustElementsSize(!0);
      }, a = function(u, f) {
        o.hot.runHooks("beforeRowResize", o.getActualRowHeight(u), u, !1), f && i(), o.saveManualRowHeights(), o.hot.runHooks("afterRowResize", o.getActualRowHeight(u), u, !1);
      };
      if (this.pressed) {
        if (this.hideHandleAndGuide(), this.pressed = !1, this.newSize !== this.startHeight) {
          var l = this.selectedRows.length;
          l > 1 ? (I(this.selectedRows, function(s) {
            a(s);
          }), i()) : I(this.selectedRows, function(s) {
            a(s, !0);
          });
        }
        this.setupHandlePosition(this.currentTH);
      }
    }
    /**
     * Binds the mouse events.
     *
     * @private
     */
  }, {
    key: "bindEvents",
    value: function() {
      var o = this, i = this.hot, a = i.rootElement, l = i.rootWindow;
      this.eventManager.addEventListener(a, "mouseover", function(s) {
        return o.onMouseOver(s);
      }), this.eventManager.addEventListener(a, "mousedown", function(s) {
        return o.onMouseDown(s);
      }), this.eventManager.addEventListener(l, "mousemove", function(s) {
        return o.onMouseMove(s);
      }), this.eventManager.addEventListener(l, "mouseup", function() {
        return o.onMouseUp();
      });
    }
    /**
     * Modifies the provided row height, based on the plugin settings.
     *
     * @private
     * @param {number} height Row height.
     * @param {number} row Visual row index.
     * @returns {number}
     */
  }, {
    key: "onModifyRowHeight",
    value: function(o, i) {
      var a = o;
      if (this.enabled) {
        var l = this.hot.toPhysicalRow(i), s = this.rowHeightsMap.getValueAtIndex(l);
        this.hot.getSettings()[Ny] && s && (a = s);
      }
      return a;
    }
    /**
     * Callback to call on map's `init` local hook.
     *
     * @private
     */
  }, {
    key: "onMapInit",
    value: function() {
      var o = this, i = FS.get(this), a = this.hot.getSettings()[Ny], l = this.loadManualRowHeights();
      this.hot.batchExecution(function() {
        typeof l < "u" ? l.forEach(function(s, u) {
          o.rowHeightsMap.setValueAtIndex(u, s);
        }) : Array.isArray(a) ? (a.forEach(function(s, u) {
          o.rowHeightsMap.setValueAtIndex(u, s);
        }), i.config = a) : a === !0 && Array.isArray(i.config) && i.config.forEach(function(s, u) {
          o.rowHeightsMap.setValueAtIndex(u, s);
        });
      }, !0);
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      Ca(ko(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return Ny;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return yWe;
    }
  }]), r;
}(ft);
function Ed(e) {
  "@babel/helpers - typeof";
  return Ed = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Ed(e);
}
var VH, WH, UH, zH;
function Hy(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } }));
}
function mWe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function YH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, bWe(n.key), n);
  }
}
function gWe(e, t, r) {
  return t && YH(e.prototype, t), r && YH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function bWe(e) {
  var t = wWe(e, "string");
  return Ed(t) === "symbol" ? t : String(t);
}
function wWe(e, t) {
  if (Ed(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Ed(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var SWe = /* @__PURE__ */ function() {
  function e(t, r, n, o, i, a) {
    mWe(this, e), this.row = t, this.col = r, this.rowspan = n, this.colspan = o, this.removed = !1, this.cellCoordsFactory = i, this.cellRangeFactory = a;
  }
  return gWe(e, [{
    key: "normalize",
    value: (
      /**
       * Sanitize (prevent from going outside the boundaries) the merged cell.
       *
       * @param {Core} hotInstance The Handsontable instance.
       */
      function(r) {
        var n = r.countRows(), o = r.countCols();
        this.row < 0 ? this.row = 0 : this.row > n - 1 && (this.row = n - 1), this.col < 0 ? this.col = 0 : this.col > o - 1 && (this.col = o - 1), this.row + this.rowspan > n - 1 && (this.rowspan = n - this.row), this.col + this.colspan > o - 1 && (this.colspan = o - this.col);
      }
    )
    /**
     * Returns `true` if the provided coordinates are inside the merged cell.
     *
     * @param {number} row The row index.
     * @param {number} column The column index.
     * @returns {boolean}
     */
  }, {
    key: "includes",
    value: function(r, n) {
      return this.row <= r && this.col <= n && this.row + this.rowspan - 1 >= r && this.col + this.colspan - 1 >= n;
    }
    /**
     * Returns `true` if the provided `column` property is within the column span of the merged cell.
     *
     * @param {number} column The column index.
     * @returns {boolean}
     */
  }, {
    key: "includesHorizontally",
    value: function(r) {
      return this.col <= r && this.col + this.colspan - 1 >= r;
    }
    /**
     * Returns `true` if the provided `row` property is within the row span of the merged cell.
     *
     * @param {number} row Row index.
     * @returns {boolean}
     */
  }, {
    key: "includesVertically",
    value: function(r) {
      return this.row <= r && this.row + this.rowspan - 1 >= r;
    }
    /**
     * Shift (and possibly resize, if needed) the merged cell.
     *
     * @param {Array} shiftVector 2-element array containing the information on the shifting in the `x` and `y` axis.
     * @param {number} indexOfChange Index of the preceding change.
     * @returns {boolean} Returns `false` if the whole merged cell was removed.
     */
  }, {
    key: "shift",
    value: function(r, n) {
      var o = r[0] || r[1], i = n + Math.abs(r[0] || r[1]) - 1, a = r[0] ? "colspan" : "rowspan", l = r[0] ? "col" : "row", s = Math.min(n, i), u = Math.max(n, i), f = this[l], c = this[l] + this[a] - 1;
      if (f >= n && (this[l] += o), o > 0)
        n <= c && n > f && (this[a] += o);
      else if (o < 0) {
        if (s <= f && u >= c)
          return this.removed = !0, !1;
        if (f >= s && f <= u) {
          var h = u - f + 1, d = Math.abs(o) - h;
          this[l] -= d + o, this[a] -= h;
        } else if (f <= s && c >= u)
          this[a] += o;
        else if (f <= s && c >= s && c < u) {
          var y = c - s + 1;
          this[a] -= y;
        }
      }
      return !0;
    }
    /**
     * Check if the second provided merged cell is "farther" in the provided direction.
     *
     * @param {MergedCellCoords} mergedCell The merged cell to check.
     * @param {string} direction Drag direction.
     * @returns {boolean|null} `true` if the second provided merged cell is "farther".
     */
  }, {
    key: "isFarther",
    value: function(r, n) {
      return r ? n === "down" ? r.row + r.rowspan - 1 < this.row + this.rowspan - 1 : n === "up" ? r.row > this.row : n === "right" ? r.col + r.colspan - 1 < this.col + this.colspan - 1 : n === "left" ? r.col > this.col : null : !0;
    }
    /**
     * Get the bottom row index of the merged cell.
     *
     * @returns {number}
     */
  }, {
    key: "getLastRow",
    value: function() {
      return this.row + this.rowspan - 1;
    }
    /**
     * Get the rightmost column index of the merged cell.
     *
     * @returns {number}
     */
  }, {
    key: "getLastColumn",
    value: function() {
      return this.col + this.colspan - 1;
    }
    /**
     * Get the range coordinates of the merged cell.
     *
     * @returns {CellRange}
     */
  }, {
    key: "getRange",
    value: function() {
      return this.cellRangeFactory(this.cellCoordsFactory(this.row, this.col), this.cellCoordsFactory(this.row, this.col), this.cellCoordsFactory(this.getLastRow(), this.getLastColumn()));
    }
  }], [{
    key: "NEGATIVE_VALUES_WARNING",
    value: function(r) {
      return ut(VH || (VH = Hy(["The merged cell declared with {row: ", ", col: ", `, 
      rowspan: `, ", colspan: ", `} contains negative values, which is 
      not supported. It will not be added to the collection.`], ["The merged cell declared with {row: ", ", col: ", `,\\x20
      rowspan: `, ", colspan: ", `} contains negative values, which is\\x20
      not supported. It will not be added to the collection.`])), r.row, r.col, r.rowspan, r.colspan);
    }
    /**
     * Get a warning message for when the declared merged cell data contains values exceeding the table limits.
     *
     * @param {object} newMergedCell Object containg information about the merged cells that was about to be added.
     * @returns {string}
     */
  }, {
    key: "IS_OUT_OF_BOUNDS_WARNING",
    value: function(r) {
      return ut(WH || (WH = Hy(["The merged cell declared at [", ", ", `] is positioned 
      (or positioned partially) outside of the table range. It was not added to the table, please fix your setup.`], ["The merged cell declared at [", ", ", `] is positioned\\x20
      (or positioned partially) outside of the table range. It was not added to the table, please fix your setup.`])), r.row, r.col);
    }
    /**
     * Get a warning message for when the declared merged cell data represents a single cell.
     *
     * @param {object} newMergedCell Object containg information about the merged cells that was about to be added.
     * @returns {string}
     */
  }, {
    key: "IS_SINGLE_CELL",
    value: function(r) {
      return ut(UH || (UH = Hy(["The merged cell declared at [", ", ", `] has both "rowspan" 
      and "colspan" declared as "1", which makes it a single cell. It cannot be added to the collection.`], ["The merged cell declared at [", ", ", `] has both "rowspan"\\x20
      and "colspan" declared as "1", which makes it a single cell. It cannot be added to the collection.`])), r.row, r.col);
    }
    /**
     * Get a warning message for when the declared merged cell data contains "colspan" or "rowspan", that equals 0.
     *
     * @param {object} newMergedCell Object containg information about the merged cells that was about to be added.
     * @returns {string}
     */
  }, {
    key: "ZERO_SPAN_WARNING",
    value: function(r) {
      return ut(zH || (zH = Hy(["The merged cell declared at [", ", ", `] has "rowspan" 
      or "colspan" declared as "0", which is not supported. It cannot be added to the collection.`], ["The merged cell declared at [", ", ", `] has "rowspan"\\x20
      or "colspan" declared as "0", which is not supported. It cannot be added to the collection.`])), r.row, r.col);
    }
    /**
     * Check whether the values provided for a merged cell contain any negative values.
     *
     * @param {object} mergedCellInfo Object containing the `row`, `col`, `rowspan` and `colspan` properties.
     * @returns {boolean}
     */
  }, {
    key: "containsNegativeValues",
    value: function(r) {
      return r.row < 0 || r.col < 0 || r.rowspan < 0 || r.colspan < 0;
    }
    /**
     * Check whether the provided merged cell information object represents a single cell.
     *
     * @private
     * @param {object} mergedCellInfo An object with `row`, `col`, `rowspan` and `colspan` properties.
     * @returns {boolean}
     */
  }, {
    key: "isSingleCell",
    value: function(r) {
      return r.colspan === 1 && r.rowspan === 1;
    }
    /**
     * Check whether the provided merged cell information object contains a rowspan or colspan of 0.
     *
     * @private
     * @param {object} mergedCellInfo An object with `row`, `col`, `rowspan` and `colspan` properties.
     * @returns {boolean}
     */
  }, {
    key: "containsZeroSpan",
    value: function(r) {
      return r.colspan === 0 || r.rowspan === 0;
    }
    /**
     * Check whether the provided merged cell object is to be declared out of bounds of the table.
     *
     * @param {object} mergeCell Object containing the `row`, `col`, `rowspan` and `colspan` properties.
     * @param {number} rowCount Number of rows in the table.
     * @param {number} columnCount Number of rows in the table.
     * @returns {boolean}
     */
  }, {
    key: "isOutOfBounds",
    value: function(r, n, o) {
      return r.row < 0 || r.col < 0 || r.row >= n || r.row + r.rowspan - 1 >= n || r.col >= o || r.col + r.colspan - 1 >= o;
    }
  }]), e;
}();
const In = SWe;
function bR(e, t, r, n) {
  t ? t.row === r && t.col === n ? (e.setAttribute("rowspan", t.rowspan.toString()), e.setAttribute("colspan", t.colspan.toString())) : (e.removeAttribute("rowspan"), e.removeAttribute("colspan"), e.style.display = "none") : (e.removeAttribute("rowspan"), e.removeAttribute("colspan"), e.style.display = "");
}
function Td(e) {
  "@babel/helpers - typeof";
  return Td = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Td(e);
}
var GH;
function CWe(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } }));
}
function KH(e) {
  return EWe(e) || RWe(e) || OWe(e) || _We();
}
function _We() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function OWe(e, t) {
  if (e) {
    if (typeof e == "string")
      return wR(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return wR(e, t);
  }
}
function RWe(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function EWe(e) {
  if (Array.isArray(e))
    return wR(e);
}
function wR(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function TWe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function qH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, kWe(n.key), n);
  }
}
function PWe(e, t, r) {
  return t && qH(e.prototype, t), r && qH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function kWe(e) {
  var t = $We(e, "string");
  return Td(t) === "symbol" ? t : String(t);
}
function $We(e, t) {
  if (Td(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Td(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var AWe = /* @__PURE__ */ function() {
  function e(t) {
    TWe(this, e), this.plugin = t, this.mergedCells = [], this.hot = t.hot;
  }
  return PWe(e, [{
    key: "get",
    value: (
      /**
       * Get a merged cell from the container, based on the provided arguments. You can provide either the "starting coordinates"
       * of a merged cell, or any coordinates from the body of the merged cell.
       *
       * @param {number} row Row index.
       * @param {number} column Column index.
       * @returns {MergedCellCoords|boolean} Returns a wanted merged cell on success and `false` on failure.
       */
      function(r, n) {
        var o = this.mergedCells, i = !1;
        return I(o, function(a) {
          return a.row <= r && a.row + a.rowspan - 1 >= r && a.col <= n && a.col + a.colspan - 1 >= n ? (i = a, !1) : !0;
        }), i;
      }
    )
    /**
     * Get a merged cell containing the provided range.
     *
     * @param {CellRange|object} range The range to search merged cells for.
     * @returns {MergedCellCoords|boolean}
     */
  }, {
    key: "getByRange",
    value: function(r) {
      var n = this.mergedCells, o = !1;
      return I(n, function(i) {
        return i.row <= r.from.row && i.row + i.rowspan - 1 >= r.to.row && i.col <= r.from.col && i.col + i.colspan - 1 >= r.to.col ? (o = i, o) : !0;
      }), o;
    }
    /**
     * Get a merged cell contained in the provided range.
     *
     * @param {CellRange|object} range The range to search merged cells in.
     * @param {boolean} [countPartials=false] If set to `true`, all the merged cells overlapping the range will be taken into calculation.
     * @returns {Array|boolean} Array of found merged cells of `false` if none were found.
     */
  }, {
    key: "getWithinRange",
    value: function(r) {
      var n = this, o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, i = this.mergedCells, a = [], l = r;
      if (!l.includesRange) {
        var s = this.hot._createCellCoords(l.from.row, l.from.col), u = this.hot._createCellCoords(l.to.row, l.to.col);
        l = this.hot._createCellRange(s, s, u);
      }
      return I(i, function(f) {
        var c = n.hot._createCellCoords(f.row, f.col), h = n.hot._createCellCoords(f.row + f.rowspan - 1, f.col + f.colspan - 1), d = n.hot._createCellRange(c, c, h);
        o ? l.overlaps(d) && a.push(f) : l.includesRange(d) && a.push(f);
      }), a.length ? a : !1;
    }
    /**
     * Add a merged cell to the container.
     *
     * @param {object} mergedCellInfo The merged cell information object. Has to contain `row`, `col`, `colspan` and `rowspan` properties.
     * @returns {MergedCellCoords|boolean} Returns the new merged cell on success and `false` on failure.
     */
  }, {
    key: "add",
    value: function(r) {
      var n = this.mergedCells, o = r.row, i = r.col, a = r.rowspan, l = r.colspan, s = new In(o, i, a, l, this.hot._createCellCoords, this.hot._createCellRange), u = this.get(o, i), f = this.isOverlapping(s);
      return !u && !f ? (this.hot && s.normalize(this.hot), n.push(s), s) : (ht(e.IS_OVERLAPPING_WARNING(s)), !1);
    }
    /**
     * Remove a merged cell from the container. You can provide either the "starting coordinates"
     * of a merged cell, or any coordinates from the body of the merged cell.
     *
     * @param {number} row Row index.
     * @param {number} column Column index.
     * @returns {MergedCellCoords|boolean} Returns the removed merged cell on success and `false` on failure.
     */
  }, {
    key: "remove",
    value: function(r, n) {
      var o = this.mergedCells, i = this.get(r, n), a = i ? this.mergedCells.indexOf(i) : -1;
      return i && a !== -1 ? (o.splice(a, 1), i) : !1;
    }
    /**
     * Clear all the merged cells.
     */
  }, {
    key: "clear",
    value: function() {
      var r = this, n = this.mergedCells, o = [], i = [];
      I(n, function(a) {
        var l = r.hot.getCell(a.row, a.col);
        l && o.push([l, r.get(a.row, a.col), a.row, a.col]);
      }), this.mergedCells.length = 0, I(o, function(a, l) {
        _e(0, a.rowspan - 1, function(s) {
          _e(0, a.colspan - 1, function(u) {
            if (u !== 0 || s !== 0) {
              var f = r.hot.getCell(a.row + s, a.col + u);
              f && i.push([f, null, null, null]);
            }
          });
        }), o[l][1] = null;
      }), I(o, function(a) {
        bR.apply(void 0, KH(a));
      }), I(i, function(a) {
        bR.apply(void 0, KH(a));
      });
    }
    /**
     * Check if the provided merged cell overlaps with the others in the container.
     *
     * @param {MergedCellCoords} mergedCell The merged cell to check against all others in the container.
     * @returns {boolean} `true` if the provided merged cell overlaps with the others, `false` otherwise.
     */
  }, {
    key: "isOverlapping",
    value: function(r) {
      var n = this, o = this.hot._createCellRange(this.hot._createCellCoords(0, 0), this.hot._createCellCoords(r.row, r.col), this.hot._createCellCoords(r.row + r.rowspan - 1, r.col + r.colspan - 1)), i = !1;
      return I(this.mergedCells, function(a) {
        var l = n.hot._createCellRange(n.hot._createCellCoords(0, 0), n.hot._createCellCoords(a.row, a.col), n.hot._createCellCoords(a.row + a.rowspan - 1, a.col + a.colspan - 1));
        return l.overlaps(o) ? (i = !0, !1) : !0;
      }), i;
    }
    /**
     * Check whether the provided row/col coordinates direct to a first not hidden cell within merge area.
     *
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @returns {boolean}
     */
  }, {
    key: "isFirstRenderableMergedCell",
    value: function(r, n) {
      var o = this.get(r, n);
      return o && this.hot.rowIndexMapper.getNearestNotHiddenIndex(o.row, 1) === r && this.hot.columnIndexMapper.getNearestNotHiddenIndex(o.col, 1) === n;
    }
    /**
     * Get the first renderable coords of the merged cell at the provided coordinates.
     *
     * @param {number} row Visual row index.
     * @param {number} column Visual column index.
     * @returns {CellCoords} A `CellCoords` object with the coordinates to the first renderable cell within the
     *                        merged cell.
     */
  }, {
    key: "getFirstRenderableCoords",
    value: function(r, n) {
      var o = this.get(r, n);
      if (!o || this.isFirstRenderableMergedCell(r, n))
        return this.hot._createCellCoords(r, n);
      var i = this.hot.rowIndexMapper.getNearestNotHiddenIndex(o.row, 1), a = this.hot.columnIndexMapper.getNearestNotHiddenIndex(o.col, 1);
      return this.hot._createCellCoords(i, a);
    }
    /**
     * Shift the merged cell in the direction and by an offset defined in the arguments.
     *
     * @param {string} direction `right`, `left`, `up` or `down`.
     * @param {number} index Index where the change, which caused the shifting took place.
     * @param {number} count Number of rows/columns added/removed in the preceding action.
     */
  }, {
    key: "shiftCollections",
    value: function(r, n, o) {
      var i = this, a = [0, 0];
      switch (r) {
        case "right":
          a[0] += o;
          break;
        case "left":
          a[0] -= o;
          break;
        case "down":
          a[1] += o;
          break;
        case "up":
          a[1] -= o;
          break;
      }
      I(this.mergedCells, function(l) {
        l.shift(a, n);
      }), qC(this.mergedCells.length - 1, 0, function(l) {
        var s = i.mergedCells[l];
        s && s.removed && i.mergedCells.splice(i.mergedCells.indexOf(s), 1);
      });
    }
  }], [{
    key: "IS_OVERLAPPING_WARNING",
    value: function(r) {
      return ut(GH || (GH = CWe(["The merged cell declared at [", ", ", `], overlaps 
      with the other declared merged cell. The overlapping merged cell was not added to the table, please 
      fix your setup.`], ["The merged cell declared at [", ", ", `], overlaps\\x20
      with the other declared merged cell. The overlapping merged cell was not added to the table, please\\x20
      fix your setup.`])), r.row, r.col);
    }
  }]), e;
}();
const IWe = AWe;
function Pd(e) {
  "@babel/helpers - typeof";
  return Pd = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Pd(e);
}
function qi(e, t) {
  return NWe(e) || DWe(e, t) || xWe(e, t) || MWe();
}
function MWe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function xWe(e, t) {
  if (e) {
    if (typeof e == "string")
      return XH(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return XH(e, t);
  }
}
function XH(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function DWe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function NWe(e) {
  if (Array.isArray(e))
    return e;
}
function HWe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function ZH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, jWe(n.key), n);
  }
}
function LWe(e, t, r) {
  return t && ZH(e.prototype, t), r && ZH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function jWe(e) {
  var t = FWe(e, "string");
  return Pd(t) === "symbol" ? t : String(t);
}
function FWe(e, t) {
  if (Pd(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Pd(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var BWe = /* @__PURE__ */ function() {
  function e(t) {
    HWe(this, e), this.plugin = t, this.mergedCellsCollection = this.plugin.mergedCellsCollection, this.currentFillData = null;
  }
  return LWe(e, [{
    key: "correctSelectionAreaSize",
    value: function(r) {
      if (r[0] === r[2] && r[1] === r[3]) {
        var n = this.mergedCellsCollection.get(r[0], r[1]);
        n && (r[2] = r[0] + n.rowspan - 1, r[3] = r[1] + n.colspan - 1);
      }
    }
    /**
     * Get the direction of the autofill process.
     *
     * @param {Array} selectionArea The selection area.
     * @param {Array} finalArea The final area (base + drag).
     * @returns {string} `up`, `down`, `left` or `right`.
     */
  }, {
    key: "getDirection",
    value: function(r, n) {
      var o = null;
      return n[0] === r[0] && n[1] === r[1] && n[3] === r[3] ? o = "down" : n[2] === r[2] && n[1] === r[1] && n[3] === r[3] ? o = "up" : n[1] === r[1] && n[2] === r[2] ? o = "right" : o = "left", o;
    }
    /**
     * Snap the drag area to the farthest merged cell, so it won't clip any of the merged cells.
     *
     * @param {Array} baseArea The base selected area.
     * @param {Array} dragArea The drag area.
     * @param {string} dragDirection The autofill drag direction.
     * @param {Array} foundMergedCells MergeCellCoords found in the base selection area.
     * @returns {Array} The new drag area.
     */
  }, {
    key: "snapDragArea",
    value: function(r, n, o, i) {
      var a = n.slice(0), l = this.getAutofillSize(r, n, o), s = qi(r, 4), u = s[0], f = s[1], c = s[2], h = s[3], d = ["up", "down"].indexOf(o) > -1, y = d ? c - u + 1 : h - f + 1, p = Math.floor(l / y) * y, g = l - p, w = this.getFarthestCollection(r, n, o, i);
      if (w) {
        if (o === "down") {
          var C = w.row + w.rowspan - u - g, _ = a[2] + C;
          _ >= this.plugin.hot.countRows() ? a[2] -= g : a[2] += g ? C : 0;
        } else if (o === "right") {
          var k = w.col + w.colspan - f - g, E = a[3] + k;
          E >= this.plugin.hot.countCols() ? a[3] -= g : a[3] += g ? k : 0;
        } else if (o === "up") {
          var j = c - g - w.row + 1, Y = a[0] + j;
          Y < 0 ? a[0] += g : a[0] -= g ? j : 0;
        } else if (o === "left") {
          var Q = h - g - w.col + 1, X = a[1] + Q;
          X < 0 ? a[1] += g : a[1] -= g ? Q : 0;
        }
      }
      return this.updateCurrentFillCache({
        baseArea: r,
        dragDirection: o,
        foundMergedCells: i,
        fillSize: l,
        dragArea: a,
        cycleLength: y
      }), a;
    }
    /**
     * Update the current fill cache with the provided object.
     *
     * @private
     * @param {object} updateObject The current filled object cache.
     */
  }, {
    key: "updateCurrentFillCache",
    value: function(r) {
      this.currentFillData || (this.currentFillData = {}), Gt(this.currentFillData, r);
    }
    /**
     * Get the "length" of the drag area.
     *
     * @private
     * @param {Array} baseArea The base selection area.
     * @param {Array} dragArea The drag area (containing the base area).
     * @param {string} direction The drag direction.
     * @returns {number|null} The "length" (height or width, depending on the direction) of the drag.
     */
  }, {
    key: "getAutofillSize",
    value: function(r, n, o) {
      var i = qi(r, 4), a = i[0], l = i[1], s = i[2], u = i[3], f = qi(n, 4), c = f[0], h = f[1], d = f[2], y = f[3];
      switch (o) {
        case "up":
          return a - c;
        case "down":
          return d - s;
        case "left":
          return l - h;
        case "right":
          return y - u;
        default:
          return null;
      }
    }
    /**
     * Trim the default drag area (containing the selection area) to the drag-only area.
     *
     * @private
     * @param {Array} baseArea The base selection area.
     * @param {Array} dragArea The base selection area extended by the drag area.
     * @param {string} direction Drag direction.
     * @returns {Array|null} Array representing the drag area coordinates.
     */
  }, {
    key: "getDragArea",
    value: function(r, n, o) {
      var i = qi(r, 4), a = i[0], l = i[1], s = i[2], u = i[3], f = qi(n, 4), c = f[0], h = f[1], d = f[2], y = f[3];
      switch (o) {
        case "up":
          return [c, h, a - 1, u];
        case "down":
          return [s + 1, l, d, u];
        case "left":
          return [c, h, s, l - 1];
        case "right":
          return [a, u + 1, d, y];
        default:
          return null;
      }
    }
    /**
     * Get the to-be-farthest merged cell in the newly filled area.
     *
     * @private
     * @param {Array} baseArea The base selection area.
     * @param {Array} dragArea The drag area (containing the base area).
     * @param {string} direction The drag direction.
     * @param {Array} mergedCellArray Array of the merged cells found in the base area.
     * @returns {MergedCellCoords|null}
     */
  }, {
    key: "getFarthestCollection",
    value: function(r, n, o, i) {
      var a = qi(r, 4), l = a[0], s = a[1], u = a[2], f = a[3], c = ["up", "down"].indexOf(o) > -1, h = c ? u : f, d = c ? l : s, y = this.getAutofillSize(r, n, o), p = c ? u - l + 1 : f - s + 1, g = Math.floor(y / p) * p, w = y - g, C = null, _ = null, k = null;
      switch (o) {
        case "up":
          C = "includesVertically", k = h - w + 1;
          break;
        case "left":
          C = "includesHorizontally", k = h - w + 1;
          break;
        case "down":
          C = "includesVertically", k = d + w - 1;
          break;
        case "right":
          C = "includesHorizontally", k = d + w - 1;
          break;
      }
      return I(i, function(E) {
        E[C](k) && E.isFarther(_, o) && (_ = E);
      }), _;
    }
    /**
     * Recreate the merged cells after the autofill process.
     *
     * @param {Array} changes Changes made.
     */
  }, {
    key: "recreateAfterDataPopulation",
    value: function(r) {
      if (this.currentFillData) {
        var n = this.getRangeFromChanges(r), o = this.currentFillData.foundMergedCells, i = this.currentFillData.dragDirection, a = function(h, d) {
          switch (i) {
            case "up":
              return h.row - d >= n.from.row;
            case "down":
              return h.row + h.rowspan - 1 + d <= n.to.row;
            case "left":
              return h.col - d >= n.from.column;
            case "right":
              return h.col + h.colspan - 1 + d <= n.to.column;
            default:
              return null;
          }
        }, l = 0, s = null, u = 1;
        do
          for (var f = 0; f < o.length; f += 1) {
            if (s = o[f], l = u * this.currentFillData.cycleLength, a(s, l))
              switch (i) {
                case "up":
                  this.plugin.mergedCellsCollection.add({
                    row: s.row - l,
                    rowspan: s.rowspan,
                    col: s.col,
                    colspan: s.colspan
                  });
                  break;
                case "down":
                  this.plugin.mergedCellsCollection.add({
                    row: s.row + l,
                    rowspan: s.rowspan,
                    col: s.col,
                    colspan: s.colspan
                  });
                  break;
                case "left":
                  this.plugin.mergedCellsCollection.add({
                    row: s.row,
                    rowspan: s.rowspan,
                    col: s.col - l,
                    colspan: s.colspan
                  });
                  break;
                case "right":
                  this.plugin.mergedCellsCollection.add({
                    row: s.row,
                    rowspan: s.rowspan,
                    col: s.col + l,
                    colspan: s.colspan
                  });
                  break;
              }
            f === o.length - 1 && (u += 1);
          }
        while (a(s, l));
        this.currentFillData = null, this.plugin.hot.render(), o.length > 0 && this.plugin.ifChromeForceRepaint();
      }
    }
    /**
     * Get the drag range from the changes made.
     *
     * @private
     * @param {Array} changes The changes made.
     * @returns {object} Object with `from` and `to` properties, both containing `row` and `column` keys.
     */
  }, {
    key: "getRangeFromChanges",
    value: function(r) {
      var n = this, o = {
        min: null,
        max: null
      }, i = {
        min: null,
        max: null
      };
      return I(r, function(a) {
        var l = a[0], s = n.plugin.hot.propToCol(a[1]);
        (o.min === null || l < o.min) && (o.min = l), (o.max === null || l > o.max) && (o.max = l), (i.min === null || s < i.min) && (i.min = s), (i.max === null || s > i.max) && (i.max = s);
      }), {
        from: {
          row: o.min,
          column: i.min
        },
        to: {
          row: o.max,
          column: i.max
        }
      };
    }
    /**
     * Check if the drag area contains any merged cells.
     *
     * @param {Array} baseArea The base selection area.
     * @param {Array} fullArea The base area extended by the drag area.
     * @param {string} direction Drag direction.
     * @returns {boolean}
     */
  }, {
    key: "dragAreaOverlapsCollections",
    value: function(r, n, o) {
      var i = this.getDragArea(r, n, o), a = qi(i, 4), l = a[0], s = a[1], u = a[2], f = a[3], c = this.plugin.hot._createCellCoords(l, s), h = this.plugin.hot._createCellCoords(u, f), d = this.plugin.hot._createCellRange(c, c, h);
      return !!this.mergedCellsCollection.getWithinRange(d, !0);
    }
  }]), e;
}();
const VWe = BWe;
function kd(e) {
  "@babel/helpers - typeof";
  return kd = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, kd(e);
}
function WWe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function QH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, zWe(n.key), n);
  }
}
function UWe(e, t, r) {
  return t && QH(e.prototype, t), r && QH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function zWe(e) {
  var t = YWe(e, "string");
  return kd(t) === "symbol" ? t : String(t);
}
function YWe(e, t) {
  if (kd(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (kd(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var GWe = /* @__PURE__ */ function() {
  function e(t) {
    WWe(this, e), this.plugin = t, this.hot = t.hot, this.fullySelectedMergedCellClassName = "fullySelectedMergedCell";
  }
  return UWe(e, [{
    key: "snapDelta",
    value: function(r, n, o) {
      var i = n.to, a = i.row + r.row, l = i.col + r.col;
      r.row ? this.jumpOverMergedCell(r, o, a) : r.col && this.jumpOverMergedCell(r, o, l);
    }
    /**
     * "Jump" over the merged cell (compensate for the indexes within the merged cell to get past it).
     *
     * @private
     * @param {object} delta The delta object.
     * @param {MergedCellCoords} mergedCell The merge cell object.
     * @param {number} newIndex New row/column index, created with the delta.
     */
  }, {
    key: "jumpOverMergedCell",
    value: function(r, n, o) {
      var i = r.row || r.col, a = null, l = null, s = null;
      r.row ? (a = n.includesVertically(o), l = n.row, s = n.getLastRow()) : r.col && (a = n.includesHorizontally(o), l = n.col, s = n.getLastColumn()), i !== 0 && (i > 0 ? a && o !== l && (i += s - o + 1) : a && o !== s && (i -= o - l + 1), r.row ? r.row = i : r.col && (r.col = i));
    }
    /**
     * Get a selection range with `to` property incremented by the provided delta.
     *
     * @param {CellRange} oldSelectionRange The base selection range.
     * @param {object} delta The delta object with `row` and `col` properties.
     * @returns {CellRange} A new `CellRange` object.
     */
  }, {
    key: "getUpdatedSelectionRange",
    value: function(r, n) {
      return this.hot._createCellRange(r.highlight, r.from, this.hot._createCellCoords(r.to.row + n.row, r.to.col + n.col));
    }
    /**
     * Generate an additional class name for the entirely-selected merged cells.
     *
     * @param {number} currentRow Visual row index of the currently processed cell.
     * @param {number} currentColumn Visual column index of the currently cell.
     * @param {Array} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow, endColumn]`.
     * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.
     * @returns {string|undefined} A `String`, which will act as an additional `className` to be added to the currently processed cell.
     */
  }, {
    key: "getSelectedMergedCellClassName",
    value: function(r, n, o, i) {
      var a = Math.min(o[0], o[2]), l = Math.min(o[1], o[3]), s = Math.max(o[0], o[2]), u = Math.max(o[1], o[3]);
      if (i !== void 0) {
        var f = this.plugin.mergedCellsCollection.isFirstRenderableMergedCell(r, n);
        if (f) {
          var c = this.plugin.mergedCellsCollection.get(r, n);
          if (c) {
            var h = c.getLastRow(), d = c.getLastColumn(), y = a <= c.row && l <= c.col && s >= h && u >= d;
            if (y)
              return "".concat(this.fullySelectedMergedCellClassName, "-").concat(i);
            if (this.plugin.selectionCalculations.isMergeCellFullySelected(c, this.plugin.hot.getSelectedRange()))
              return "".concat(this.fullySelectedMergedCellClassName, "-multiple");
          }
        }
      }
    }
    /**
     * Check if the provided merged cell is fully selected (by one or many layers of selection).
     *
     * @param {MergedCellCoords} mergedCell The merged cell to be processed.
     * @param {CellRange[]} selectionRangesArray Array of selection ranges.
     * @returns {boolean}
     */
  }, {
    key: "isMergeCellFullySelected",
    value: function(r, n) {
      var o = [];
      if (!n || !r)
        return !1;
      for (var i = 0; i < r.rowspan; i += 1)
        for (var a = 0; a < r.colspan; a += 1)
          o.push(this.hot._createCellCoords(r.row + i, r.col + a));
      for (var l = 0; l < o.length; l += 1) {
        for (var s = [], u = 0; u < n.length; u += 1)
          s[u] = n[u].includes(o[l]);
        if (!s.includes(!0))
          return !1;
      }
      return !0;
    }
    /**
     * Generate an array of the entirely-selected merged cells' class names.
     *
     * @returns {string[]} An `Array` of `String`s. Each of these strings will act like class names to be removed from all the cells in the table.
     */
  }, {
    key: "getSelectedMergedCellClassNameToRemove",
    value: function() {
      for (var r = [], n = 0; n <= 7; n += 1)
        r.push("".concat(this.fullySelectedMergedCellClassName, "-").concat(n));
      return r.push("".concat(this.fullySelectedMergedCellClassName, "-multiple")), r;
    }
  }]), e;
}();
const KWe = GWe;
function qWe(e) {
  return {
    key: "mergeCells",
    name: function() {
      var r = this.getSelectedLast();
      if (r) {
        var n = e.mergedCellsCollection.get(r[0], r[1]);
        if (n.row === r[0] && n.col === r[1] && n.row + n.rowspan - 1 === r[2] && n.col + n.colspan - 1 === r[3])
          return this.getTranslatedPhrase(n0);
      }
      return this.getTranslatedPhrase(r0);
    },
    callback: function() {
      e.toggleMergeOnSelection();
    },
    disabled: function() {
      var r = this.getSelectedLast();
      if (!r)
        return !0;
      var n = In.isSingleCell({
        row: r[0],
        col: r[1],
        rowspan: r[2] - r[0] + 1,
        colspan: r[3] - r[1] + 1
      });
      return n || this.selection.isSelectedByCorner();
    },
    hidden: !1
  };
}
function Qu(e) {
  "@babel/helpers - typeof";
  return Qu = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Qu(e);
}
function XWe(e, t) {
  return JWe(e) || QWe(e, t) || Lz(e, t) || ZWe();
}
function ZWe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function QWe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function JWe(e) {
  if (Array.isArray(e))
    return e;
}
function e2e(e) {
  return n2e(e) || r2e(e) || Lz(e) || t2e();
}
function t2e() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Lz(e, t) {
  if (e) {
    if (typeof e == "string")
      return SR(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return SR(e, t);
  }
}
function r2e(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function n2e(e) {
  if (Array.isArray(e))
    return SR(e);
}
function SR(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function o2e(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function JH(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, a2e(n.key), n);
  }
}
function i2e(e, t, r) {
  return t && JH(e.prototype, t), r && JH(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function a2e(e) {
  var t = l2e(e, "string");
  return Qu(t) === "symbol" ? t : String(t);
}
function l2e(e, t) {
  if (Qu(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Qu(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function os() {
  return typeof Reflect < "u" && Reflect.get ? os = Reflect.get.bind() : os = function(t, r, n) {
    var o = s2e(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, os.apply(this, arguments);
}
function s2e(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Oi(e), e !== null); )
    ;
  return e;
}
function u2e(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && CR(e, t);
}
function CR(e, t) {
  return CR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, CR(e, t);
}
function f2e(e) {
  var t = h2e();
  return function() {
    var n = Oi(e), o;
    if (t) {
      var i = Oi(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return c2e(this, o);
  };
}
function c2e(e, t) {
  if (t && (Qu(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return jz(e);
}
function jz(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function h2e() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Oi(e) {
  return Oi = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Oi(e);
}
we.getSingleton().register("beforeMergeCells");
we.getSingleton().register("afterMergeCells");
we.getSingleton().register("beforeUnmergeCells");
we.getSingleton().register("afterUnmergeCells");
var hc = "mergeCells", d2e = 150, eL = /* @__PURE__ */ new WeakMap(), tL = hc, v2e = /* @__PURE__ */ function(e) {
  u2e(r, e);
  var t = f2e(r);
  function r(n) {
    var o;
    return o2e(this, r), o = t.call(this, n), eL.set(jz(o), {
      lastDesiredCoords: null
    }), o.mergedCellsCollection = null, o.autofillCalculations = null, o.selectionCalculations = null, o;
  }
  return i2e(r, [{
    key: "isEnabled",
    value: function() {
      return !!this.hot.getSettings()[hc];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      this.enabled || (this.mergedCellsCollection = new IWe(this), this.autofillCalculations = new VWe(this), this.selectionCalculations = new KWe(this), this.addHook("afterInit", function() {
        return o.onAfterInit.apply(o, arguments);
      }), this.addHook("modifyTransformStart", function() {
        return o.onModifyTransformStart.apply(o, arguments);
      }), this.addHook("afterModifyTransformStart", function() {
        return o.onAfterModifyTransformStart.apply(o, arguments);
      }), this.addHook("modifyTransformEnd", function() {
        return o.onModifyTransformEnd.apply(o, arguments);
      }), this.addHook("modifyGetCellCoords", function() {
        return o.onModifyGetCellCoords.apply(o, arguments);
      }), this.addHook("beforeSetRangeStart", function() {
        return o.onBeforeSetRangeStart.apply(o, arguments);
      }), this.addHook("beforeSetRangeStartOnly", function() {
        return o.onBeforeSetRangeStart.apply(o, arguments);
      }), this.addHook("beforeSetRangeEnd", function() {
        return o.onBeforeSetRangeEnd.apply(o, arguments);
      }), this.addHook("afterIsMultipleSelection", function() {
        return o.onAfterIsMultipleSelection.apply(o, arguments);
      }), this.addHook("afterRenderer", function() {
        return o.onAfterRenderer.apply(o, arguments);
      }), this.addHook("afterContextMenuDefaultOptions", function() {
        return o.addMergeActionsToContextMenu.apply(o, arguments);
      }), this.addHook("afterGetCellMeta", function() {
        return o.onAfterGetCellMeta.apply(o, arguments);
      }), this.addHook("afterViewportRowCalculatorOverride", function() {
        return o.onAfterViewportRowCalculatorOverride.apply(o, arguments);
      }), this.addHook("afterViewportColumnCalculatorOverride", function() {
        return o.onAfterViewportColumnCalculatorOverride.apply(o, arguments);
      }), this.addHook("modifyAutofillRange", function() {
        return o.onModifyAutofillRange.apply(o, arguments);
      }), this.addHook("afterCreateCol", function() {
        return o.onAfterCreateCol.apply(o, arguments);
      }), this.addHook("afterRemoveCol", function() {
        return o.onAfterRemoveCol.apply(o, arguments);
      }), this.addHook("afterCreateRow", function() {
        return o.onAfterCreateRow.apply(o, arguments);
      }), this.addHook("afterRemoveRow", function() {
        return o.onAfterRemoveRow.apply(o, arguments);
      }), this.addHook("afterChange", function() {
        return o.onAfterChange.apply(o, arguments);
      }), this.addHook("beforeDrawBorders", function() {
        return o.onBeforeDrawAreaBorders.apply(o, arguments);
      }), this.addHook("afterDrawSelection", function() {
        return o.onAfterDrawSelection.apply(o, arguments);
      }), this.addHook("beforeRemoveCellClassNames", function() {
        return o.onBeforeRemoveCellClassNames.apply(o, arguments);
      }), this.addHook("beforeUndoStackChange", function(i, a) {
        if (a === "MergeCells")
          return !1;
      }), this.registerShortcuts(), os(Oi(r.prototype), "enablePlugin", this).call(this));
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      this.clearCollections(), this.unregisterShortcuts(), this.hot.render(), os(Oi(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the
     * following configuration options:
     *  - [`mergeCells`](@/api/options.md#mergecells)
     */
  }, {
    key: "updatePlugin",
    value: function() {
      var o = this.hot.getSettings()[hc];
      this.disablePlugin(), this.enablePlugin(), this.generateFromSettings(o), os(Oi(r.prototype), "updatePlugin", this).call(this);
    }
    /**
     * If the browser is recognized as Chrome, force an additional repaint to prevent showing the effects of a Chrome bug.
     *
     * Issue described in https://github.com/handsontable/dev-handsontable/issues/521.
     *
     * @private
     */
  }, {
    key: "ifChromeForceRepaint",
    value: function() {
      var o = this;
      if (SB()) {
        var i = [], a = [];
        this.mergedCellsCollection.mergedCells.forEach(function(l) {
          for (var s = l.row, u = l.rowspan, f = s + 1; f < s + u; f++)
            a.push(f);
        }), a = e2e(new Set(a)), a.forEach(function(l) {
          var s = o.hot.rowIndexMapper.getRenderableFromVisualIndex(l);
          o.hot.view._wt.wtOverlays.getOverlays(!0).map(function(u) {
            return (u == null ? void 0 : u.name) === "master" ? u : u.clone.wtTable;
          }).forEach(function(u) {
            var f = u.getRow(s);
            f && (f.style.background = jc(f, "backgroundColor").replace(")", ", 0.99)"), i.push(f));
          });
        }), this.hot._registerTimeout(function() {
          i.forEach(function(l) {
            l.style.background = jc(l, "backgroundColor").replace(", 0.99)", ")");
          });
        }, 1);
      }
    }
    /**
     * Validates a single setting object, represented by a single merged cell information object.
     *
     * @private
     * @param {object} setting An object with `row`, `col`, `rowspan` and `colspan` properties.
     * @returns {boolean}
     */
  }, {
    key: "validateSetting",
    value: function(o) {
      var i = !0;
      return o ? (In.containsNegativeValues(o) ? (ht(In.NEGATIVE_VALUES_WARNING(o)), i = !1) : In.isOutOfBounds(o, this.hot.countRows(), this.hot.countCols()) ? (ht(In.IS_OUT_OF_BOUNDS_WARNING(o)), i = !1) : In.isSingleCell(o) ? (ht(In.IS_SINGLE_CELL(o)), i = !1) : In.containsZeroSpan(o) && (ht(In.ZERO_SPAN_WARNING(o)), i = !1), i) : !1;
    }
    /**
     * Generates the merged cells from the settings provided to the plugin.
     *
     * @private
     * @param {Array|boolean} settings The settings provided to the plugin.
     */
  }, {
    key: "generateFromSettings",
    value: function(o) {
      var i = this;
      if (Array.isArray(o)) {
        var a = [];
        if (I(o, function(l) {
          if (i.validateSetting(l)) {
            var s = i.hot._createCellCoords(l.row, l.col), u = i.hot._createCellCoords(l.row + l.rowspan - 1, l.col + l.colspan - 1), f = i.hot._createCellRange(s, s, u);
            i.mergeRange(f, !0, !0), _e(l.row, l.row + l.rowspan - 1, function(c) {
              _e(l.col, l.col + l.colspan - 1, function(h) {
                c === l.row && h === l.col || a.push([c, h, null]);
              });
            });
          }
        }), a.length === 0)
          return;
        this.hot.setDataAtCell(a);
      }
    }
    /**
     * Clears the merged cells from the merged cell container.
     */
  }, {
    key: "clearCollections",
    value: function() {
      this.mergedCellsCollection.clear();
    }
    /**
     * Returns `true` if a range is mergeable.
     *
     * @private
     * @param {object} newMergedCellInfo Merged cell information object to test.
     * @param {boolean} [auto=false] `true` if triggered at initialization.
     * @returns {boolean}
     */
  }, {
    key: "canMergeRange",
    value: function(o) {
      var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;
      return i ? !0 : this.validateSetting(o);
    }
    /**
     * Merge or unmerge, based on last selected range.
     *
     * @private
     */
  }, {
    key: "toggleMergeOnSelection",
    value: function() {
      var o = this.hot.getSelectedRangeLast();
      if (o) {
        o.setDirection(this.hot.isRtl() ? "NE-SW" : "NW-SE");
        var i = o.from, a = o.to;
        this.toggleMerge(o), this.hot.selectCell(i.row, i.col, a.row, a.col, !1);
      }
    }
    /**
     * Merges the selection provided as a cell range.
     *
     * @param {CellRange} [cellRange] Selection cell range.
     */
  }, {
    key: "mergeSelection",
    value: function() {
      var o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.hot.getSelectedRangeLast();
      if (o) {
        o.setDirection(this.hot.isRtl() ? "NE-SW" : "NW-SE");
        var i = o.from, a = o.to;
        this.unmergeRange(o, !0), this.mergeRange(o), this.hot.selectCell(i.row, i.col, a.row, a.col, !1);
      }
    }
    /**
     * Unmerges the selection provided as a cell range.
     *
     * @param {CellRange} [cellRange] Selection cell range.
     */
  }, {
    key: "unmergeSelection",
    value: function() {
      var o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.hot.getSelectedRangeLast();
      if (o) {
        var i = o.from, a = o.to;
        this.unmergeRange(o, !0), this.hot.selectCell(i.row, i.col, a.row, a.col, !1);
      }
    }
    /**
     * Merges cells in the provided cell range.
     *
     * @private
     * @param {CellRange} cellRange Cell range to merge.
     * @param {boolean} [auto=false] `true` if is called automatically, e.g. At initialization.
     * @param {boolean} [preventPopulation=false] `true`, if the method should not run `populateFromArray` at the end,
     *   but rather return its arguments.
     * @returns {Array|boolean} Returns an array of [row, column, dataUnderCollection] if preventPopulation is set to
     *   true. If the the merging process went successful, it returns `true`, otherwise - `false`.
     * @fires Hooks#beforeMergeCells
     * @fires Hooks#afterMergeCells
     */
  }, {
    key: "mergeRange",
    value: function(o) {
      var i = this, a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, l = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, s = o.getTopStartCorner(), u = o.getBottomEndCorner(), f = {
        row: s.row,
        col: s.col,
        rowspan: u.row - s.row + 1,
        colspan: u.col - s.col + 1
      }, c = [], h = null;
      if (!this.canMergeRange(f, a))
        return !1;
      this.hot.runHooks("beforeMergeCells", o, a), _e(0, f.rowspan - 1, function(y) {
        _e(0, f.colspan - 1, function(p) {
          var g = null;
          c[y] || (c[y] = []), y === 0 && p === 0 ? g = i.hot.getSourceDataAtCell(i.hot.toPhysicalRow(f.row), i.hot.toPhysicalColumn(f.col)) : i.hot.setCellMeta(f.row + y, f.col + p, "hidden", !0), c[y][p] = g;
        });
      }), this.hot.setCellMeta(f.row, f.col, "spanned", !0);
      var d = this.mergedCellsCollection.add(f);
      return d ? (l ? h = [f.row, f.col, c] : this.hot.populateFromArray(f.row, f.col, c, void 0, void 0, this.pluginName), a || this.ifChromeForceRepaint(), this.hot.runHooks("afterMergeCells", o, f, a), h) : !0;
    }
    /**
     * Unmerges the selection provided as a cell range. If no cell range is provided, it uses the current selection.
     *
     * @private
     * @param {CellRange} cellRange Selection cell range.
     * @param {boolean} [auto=false] `true` if called automatically by the plugin.
     *
     * @fires Hooks#beforeUnmergeCells
     * @fires Hooks#afterUnmergeCells
     */
  }, {
    key: "unmergeRange",
    value: function(o) {
      var i = this, a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1, l = this.mergedCellsCollection.getWithinRange(o);
      l && (this.hot.runHooks("beforeUnmergeCells", o, a), I(l, function(s) {
        i.mergedCellsCollection.remove(s.row, s.col), _e(0, s.rowspan - 1, function(u) {
          _e(0, s.colspan - 1, function(f) {
            i.hot.removeCellMeta(s.row + u, s.col + f, "hidden");
          });
        }), i.hot.removeCellMeta(s.row, s.col, "spanned");
      }), this.hot.runHooks("afterUnmergeCells", o, a), this.hot.render());
    }
    /**
     * Merges or unmerges, based on the cell range provided as `cellRange`.
     *
     * @private
     * @param {CellRange} cellRange The cell range to merge or unmerged.
     */
  }, {
    key: "toggleMerge",
    value: function(o) {
      var i = this.mergedCellsCollection.get(o.from.row, o.from.col), a = i.row === o.from.row && i.col === o.from.col && i.row + i.rowspan - 1 === o.to.row && i.col + i.colspan - 1 === o.to.col;
      a ? this.unmergeRange(o) : this.mergeSelection(o);
    }
    /**
     * Merges the specified range.
     *
     * @param {number} startRow Start row of the merged cell.
     * @param {number} startColumn Start column of the merged cell.
     * @param {number} endRow End row of the merged cell.
     * @param {number} endColumn End column of the merged cell.
     * @fires Hooks#beforeMergeCells
     * @fires Hooks#afterMergeCells
     */
  }, {
    key: "merge",
    value: function(o, i, a, l) {
      var s = this.hot._createCellCoords(o, i), u = this.hot._createCellCoords(a, l);
      this.mergeRange(this.hot._createCellRange(s, s, u));
    }
    /**
     * Unmerges the merged cell in the provided range.
     *
     * @param {number} startRow Start row of the merged cell.
     * @param {number} startColumn Start column of the merged cell.
     * @param {number} endRow End row of the merged cell.
     * @param {number} endColumn End column of the merged cell.
     * @fires Hooks#beforeUnmergeCells
     * @fires Hooks#afterUnmergeCells
     */
  }, {
    key: "unmerge",
    value: function(o, i, a, l) {
      var s = this.hot._createCellCoords(o, i), u = this.hot._createCellCoords(a, l);
      this.unmergeRange(this.hot._createCellRange(s, s, u));
    }
    /**
     * `afterInit` hook callback.
     *
     * @private
     */
  }, {
    key: "onAfterInit",
    value: function() {
      this.generateFromSettings(this.hot.getSettings()[hc]), this.hot.render();
    }
    /**
     * Register shortcuts responsible for toggling a merge.
     *
     * @private
     */
  }, {
    key: "registerShortcuts",
    value: function() {
      var o = this, i = this.hot.getShortcutManager(), a = i.getContext("grid");
      a.addShortcut({
        keys: [["Control", "m"]],
        callback: function() {
          o.toggleMerge(o.hot.getSelectedRangeLast()), o.hot.render();
        },
        runOnlyIf: function(s) {
          return !s.altKey;
        },
        // right ALT in some systems triggers ALT+CTRL
        group: tL
      });
    }
    /**
     * Unregister shortcuts responsible for toggling a merge.
     *
     * @private
     */
  }, {
    key: "unregisterShortcuts",
    value: function() {
      var o = this.hot.getShortcutManager(), i = o.getContext("grid");
      i.removeShortcutsByGroup(tL);
    }
    /**
     * Modifies the information on whether the current selection contains multiple cells. The `afterIsMultipleSelection`
     * hook callback.
     *
     * @private
     * @param {boolean} isMultiple Determines whether the current selection contains multiple cells.
     * @returns {boolean}
     */
  }, {
    key: "onAfterIsMultipleSelection",
    value: function(o) {
      if (o) {
        for (var i = this.mergedCellsCollection.mergedCells, a = this.hot.getSelectedRangeLast(), l = 0; l < i.length; l += 1)
          if (a.from.row === i[l].row && a.from.col === i[l].col && a.to.row === i[l].row + i[l].rowspan - 1 && a.to.col === i[l].col + i[l].colspan - 1)
            return !1;
      }
      return o;
    }
    /**
     * `modifyTransformStart` hook callback.
     *
     * @private
     * @param {object} delta The transformation delta.
     */
  }, {
    key: "onModifyTransformStart",
    value: function(o) {
      var i = eL.get(this), a = this.hot.getSelectedRangeLast(), l = {
        row: o.row,
        col: o.col
      }, s = null, u = this.hot._createCellCoords(a.highlight.row, a.highlight.col), f = this.mergedCellsCollection.get(u.row, u.col);
      if (i.lastDesiredCoords || (i.lastDesiredCoords = this.hot._createCellCoords(null, null)), f) {
        var c = this.hot._createCellCoords(f.row, f.col), h = this.hot._createCellCoords(f.row + f.rowspan - 1, f.col + f.colspan - 1), d = this.hot._createCellRange(c, c, h);
        d.includes(i.lastDesiredCoords) || (i.lastDesiredCoords = this.hot._createCellCoords(null, null)), l.row = i.lastDesiredCoords.row ? i.lastDesiredCoords.row - u.row : l.row, l.col = i.lastDesiredCoords.col ? i.lastDesiredCoords.col - u.col : l.col, o.row > 0 ? l.row = f.row + f.rowspan - 1 - u.row + o.row : o.row < 0 && (l.row = u.row - f.row + o.row), o.col > 0 ? l.col = f.col + f.colspan - 1 - u.col + o.col : o.col < 0 && (l.col = u.col - f.col + o.col);
      }
      s = this.hot._createCellCoords(a.highlight.row + l.row, a.highlight.col + l.col);
      var y = this.mergedCellsCollection.get(s.row, s.col);
      if (y) {
        var p = this.mergedCellsCollection.getFirstRenderableCoords(y.row, y.col);
        i.lastDesiredCoords = s, l = {
          row: p.row - u.row,
          col: p.col - u.col
        };
      }
      l.row !== 0 && (o.row = l.row), l.col !== 0 && (o.col = l.col);
    }
    /**
     * `modifyTransformEnd` hook callback. Needed to handle "jumping over" merged merged cells, while selecting.
     *
     * @private
     * @param {object} delta The transformation delta.
     */
  }, {
    key: "onModifyTransformEnd",
    value: function(o) {
      var i = this, a = this.hot.getSelectedRangeLast(), l = Tr(o), s = this.selectionCalculations.getUpdatedSelectionRange(a, o), u = Tr(l), f = this.mergedCellsCollection.getWithinRange(s, !0);
      do
        u = Tr(l), this.selectionCalculations.getUpdatedSelectionRange(a, l), I(f, function(c) {
          i.selectionCalculations.snapDelta(l, a, c);
        });
      while (l.row !== u.row || l.col !== u.col);
      o.row = l.row, o.col = l.col;
    }
    /**
     * `modifyGetCellCoords` hook callback. Swaps the `getCell` coords with the merged parent coords.
     *
     * @private
     * @param {number} row Row index.
     * @param {number} column Visual column index.
     * @returns {Array|undefined} Visual coordinates of the merge.
     */
  }, {
    key: "onModifyGetCellCoords",
    value: function(o, i) {
      if (!(o < 0 || i < 0)) {
        var a = this.mergedCellsCollection.get(o, i);
        if (a) {
          var l = a.row, s = a.col, u = a.colspan, f = a.rowspan;
          return [
            // Most top-left merged cell coords.
            l,
            s,
            // Most bottom-right merged cell coords.
            l + f - 1,
            s + u - 1
          ];
        }
      }
    }
    /**
     * `afterContextMenuDefaultOptions` hook callback.
     *
     * @private
     * @param {object} defaultOptions The default context menu options.
     */
  }, {
    key: "addMergeActionsToContextMenu",
    value: function(o) {
      o.items.push({
        name: "---------"
      }, qWe(this));
    }
    /**
     * `afterRenderer` hook callback.
     *
     * @private
     * @param {HTMLElement} TD The cell to be modified.
     * @param {number} row Row index.
     * @param {number} col Visual column index.
     */
  }, {
    key: "onAfterRenderer",
    value: function(o, i, a) {
      var l = this.mergedCellsCollection.get(i, a), s = ze(l) ? Tr(l) : void 0;
      if (ze(s)) {
        var u = this.hot, f = u.rowIndexMapper, c = u.columnIndexMapper, h = s.row, d = s.col, y = s.colspan, p = s.rowspan, g = this.translateMergedCellToRenderable(h, p, d, y), w = XWe(g, 2), C = w[0], _ = w[1], k = f.getRenderableFromVisualIndex(i), E = c.getRenderableFromVisualIndex(a), j = C - k + 1, Y = _ - E + 1;
        s.row = f.getNearestNotHiddenIndex(s.row, 1), s.col = c.getNearestNotHiddenIndex(s.col, 1), s.rowspan = Math.min(s.rowspan, j), s.colspan = Math.min(s.colspan, Y);
      }
      bR(o, s, i, a);
    }
    /**
     * `beforeSetRangeStart` and `beforeSetRangeStartOnly` hook callback.
     * A selection within merge area should be rewritten to the start of merge area.
     *
     * @private
     * @param {object} coords Cell coords.
     */
  }, {
    key: "onBeforeSetRangeStart",
    value: function(o) {
      if (this.mergedCellsCollection.isFirstRenderableMergedCell(o.row, o.col)) {
        var i = this.mergedCellsCollection.get(o.row, o.col), a = [i.row, i.col];
        o.row = a[0], o.col = a[1];
      }
    }
    /**
     * `beforeSetRangeEnd` hook callback.
     * While selecting cells with keyboard or mouse, make sure that rectangular area is expanded to the extent of the
     * merged cell.
     *
     * Note: Please keep in mind that callback may modify both start and end range coordinates by the reference.
     *
     * @private
     * @param {object} coords Cell coords.
     */
  }, {
    key: "onBeforeSetRangeEnd",
    value: function(o) {
      var i = this.hot.getSelectedRangeLast();
      i.highlight = this.hot._createCellCoords(i.highlight.row, i.highlight.col), i.to = o;
      var a = !1;
      if (!(this.hot.selection.isSelectedByColumnHeader() || this.hot.selection.isSelectedByRowHeader()))
        do {
          a = !1;
          for (var l = 0; l < this.mergedCellsCollection.mergedCells.length; l += 1) {
            var s = this.mergedCellsCollection.mergedCells[l], u = s.getRange();
            i.expandByRange(u) && (o.row = i.to.row, o.col = i.to.col, a = !0);
          }
        } while (a);
    }
    /**
     * The `afterGetCellMeta` hook callback.
     *
     * @private
     * @param {number} row Row index.
     * @param {number} col Column index.
     * @param {object} cellProperties The cell properties object.
     */
  }, {
    key: "onAfterGetCellMeta",
    value: function(o, i, a) {
      var l = this.mergedCellsCollection.get(o, i);
      l && (l.row !== o || l.col !== i ? a.copyable = !1 : (a.rowspan = l.rowspan, a.colspan = l.colspan));
    }
    /**
     * `afterViewportRowCalculatorOverride` hook callback.
     *
     * @private
     * @param {object} calc The row calculator object.
     */
  }, {
    key: "onAfterViewportRowCalculatorOverride",
    value: function(o) {
      var i = this.hot.countCols();
      this.modifyViewportRowStart(o, i), this.modifyViewportRowEnd(o, i);
    }
    /**
     * Modify viewport start when needed. We extend viewport when merged cells aren't fully visible.
     *
     * @private
     * @param {object} calc The row calculator object.
     * @param {number} nrOfColumns Number of visual columns.
     */
  }, {
    key: "modifyViewportRowStart",
    value: function(o, i) {
      for (var a = this.hot.rowIndexMapper, l = a.getVisualFromRenderableIndex(o.startRow), s = 0; s < i; s += 1) {
        var u = this.mergedCellsCollection.get(l, s);
        if (ze(u)) {
          var f = a.getRenderableFromVisualIndex(a.getNearestNotHiddenIndex(u.row, 1));
          if (f < o.startRow) {
            o.startRow = f, this.modifyViewportRowStart(o, i);
            return;
          }
        }
      }
    }
    /**
     *  Modify viewport end when needed. We extend viewport when merged cells aren't fully visible.
     *
     * @private
     * @param {object} calc The row calculator object.
     * @param {number} nrOfColumns Number of visual columns.
     */
  }, {
    key: "modifyViewportRowEnd",
    value: function(o, i) {
      for (var a = this.hot.rowIndexMapper, l = a.getVisualFromRenderableIndex(o.endRow), s = 0; s < i; s += 1) {
        var u = this.mergedCellsCollection.get(l, s);
        if (ze(u)) {
          var f = u.row + u.rowspan - 1, c = a.getRenderableFromVisualIndex(a.getNearestNotHiddenIndex(f, -1));
          if (c > o.endRow) {
            o.endRow = c, this.modifyViewportRowEnd(o, i);
            return;
          }
        }
      }
    }
    /**
     * `afterViewportColumnCalculatorOverride` hook callback.
     *
     * @private
     * @param {object} calc The column calculator object.
     */
  }, {
    key: "onAfterViewportColumnCalculatorOverride",
    value: function(o) {
      var i = this.hot.countRows();
      this.modifyViewportColumnStart(o, i), this.modifyViewportColumnEnd(o, i);
    }
    /**
     * Modify viewport start when needed. We extend viewport when merged cells aren't fully visible.
     *
     * @private
     * @param {object} calc The column calculator object.
     * @param {number} nrOfRows Number of visual rows.
     */
  }, {
    key: "modifyViewportColumnStart",
    value: function(o, i) {
      for (var a = this.hot.columnIndexMapper, l = a.getVisualFromRenderableIndex(o.startColumn), s = 0; s < i; s += 1) {
        var u = this.mergedCellsCollection.get(s, l);
        if (ze(u)) {
          var f = a.getRenderableFromVisualIndex(a.getNearestNotHiddenIndex(u.col, 1));
          if (f < o.startColumn) {
            o.startColumn = f, this.modifyViewportColumnStart(o, i);
            return;
          }
        }
      }
    }
    /**
     *  Modify viewport end when needed. We extend viewport when merged cells aren't fully visible.
     *
     * @private
     * @param {object} calc The column calculator object.
     * @param {number} nrOfRows Number of visual rows.
     */
  }, {
    key: "modifyViewportColumnEnd",
    value: function(o, i) {
      for (var a = this.hot.columnIndexMapper, l = a.getVisualFromRenderableIndex(o.endColumn), s = 0; s < i; s += 1) {
        var u = this.mergedCellsCollection.get(s, l);
        if (ze(u)) {
          var f = u.col + u.colspan - 1, c = a.getRenderableFromVisualIndex(a.getNearestNotHiddenIndex(f, -1));
          if (c > o.endColumn) {
            o.endColumn = c, this.modifyViewportColumnEnd(o, i);
            return;
          }
        }
      }
    }
    /**
     * Translates merged cell coordinates to renderable indexes.
     *
     * @private
     * @param {number} parentRow Visual row index.
     * @param {number} rowspan Rowspan which describes shift which will be applied to parent row
     *                         to calculate renderable index which points to the most bottom
     *                         index position. Pass rowspan as `0` to calculate the most top
     *                         index position.
     * @param {number} parentColumn Visual column index.
     * @param {number} colspan Colspan which describes shift which will be applied to parent column
     *                         to calculate renderable index which points to the most right
     *                         index position. Pass colspan as `0` to calculate the most left
     *                         index position.
     * @returns {number[]}
     */
  }, {
    key: "translateMergedCellToRenderable",
    value: function(o, i, a, l) {
      var s = this.hot, u = s.rowIndexMapper, f = s.columnIndexMapper, c, h;
      i === 0 ? c = u.getNearestNotHiddenIndex(o, 1) : c = u.getNearestNotHiddenIndex(o + i - 1, -1), l === 0 ? h = f.getNearestNotHiddenIndex(a, 1) : h = f.getNearestNotHiddenIndex(a + l - 1, -1);
      var d = o >= 0 ? u.getRenderableFromVisualIndex(c) : o, y = a >= 0 ? f.getRenderableFromVisualIndex(h) : a;
      return [d, y];
    }
    /**
     * The `modifyAutofillRange` hook callback.
     *
     * @private
     * @param {Array} drag The drag area coordinates.
     * @param {Array} select The selection information.
     * @returns {Array} The new drag area.
     */
  }, {
    key: "onModifyAutofillRange",
    value: function(o, i) {
      this.autofillCalculations.correctSelectionAreaSize(i);
      var a = this.autofillCalculations.getDirection(i, o), l = o;
      if (this.autofillCalculations.dragAreaOverlapsCollections(i, l, a))
        return l = i, l;
      var s = this.mergedCellsCollection.getWithinRange({
        from: {
          row: i[0],
          col: i[1]
        },
        to: {
          row: i[2],
          col: i[3]
        }
      });
      return s && (l = this.autofillCalculations.snapDragArea(i, l, a, s)), l;
    }
    /**
     * `afterCreateCol` hook callback.
     *
     * @private
     * @param {number} column Column index.
     * @param {number} count Number of created columns.
     */
  }, {
    key: "onAfterCreateCol",
    value: function(o, i) {
      this.mergedCellsCollection.shiftCollections("right", o, i);
    }
    /**
     * `afterRemoveCol` hook callback.
     *
     * @private
     * @param {number} column Column index.
     * @param {number} count Number of removed columns.
     */
  }, {
    key: "onAfterRemoveCol",
    value: function(o, i) {
      this.mergedCellsCollection.shiftCollections("left", o, i);
    }
    /**
     * `afterCreateRow` hook callback.
     *
     * @private
     * @param {number} row Row index.
     * @param {number} count Number of created rows.
     * @param {string} source Source of change.
     */
  }, {
    key: "onAfterCreateRow",
    value: function(o, i, a) {
      a !== "auto" && this.mergedCellsCollection.shiftCollections("down", o, i);
    }
    /**
     * `afterRemoveRow` hook callback.
     *
     * @private
     * @param {number} row Row index.
     * @param {number} count Number of removed rows.
     */
  }, {
    key: "onAfterRemoveRow",
    value: function(o, i) {
      this.mergedCellsCollection.shiftCollections("up", o, i);
    }
    /**
     * `afterChange` hook callback. Used to propagate merged cells after using Autofill.
     *
     * @private
     * @param {Array} changes The changes array.
     * @param {string} source Determines the source of the change.
     */
  }, {
    key: "onAfterChange",
    value: function(o, i) {
      i === "Autofill.fill" && this.autofillCalculations.recreateAfterDataPopulation(o);
    }
    /**
     * `beforeDrawAreaBorders` hook callback.
     *
     * @private
     * @param {Array} corners Visual coordinates of the area corners.
     * @param {string} className Class name for the area.
     */
  }, {
    key: "onBeforeDrawAreaBorders",
    value: function(o, i) {
      if (i && i === "area") {
        var a = this.hot.getSelectedRangeLast(), l = this.mergedCellsCollection.getWithinRange(a);
        I(l, function(s) {
          a.getBottomEndCorner().row === s.getLastRow() && a.getBottomEndCorner().col === s.getLastColumn() && (o[2] = s.row, o[3] = s.col);
        });
      }
    }
    /**
     * `afterModifyTransformStart` hook callback. Fixes a problem with navigating through merged cells at the edges of
     * the table with the ENTER/SHIFT+ENTER/TAB/SHIFT+TAB keys.
     *
     * @private
     * @param {CellCoords} coords Coordinates of the to-be-selected cell.
     * @param {number} rowTransformDir Row transformation direction (negative value = up, 0 = none, positive value =
     *   down).
     * @param {number} colTransformDir Column transformation direction (negative value = up, 0 = none, positive value =
     *   down).
     */
  }, {
    key: "onAfterModifyTransformStart",
    value: function(o, i, a) {
      if (this.enabled) {
        var l = this.mergedCellsCollection.get(o.row, o.col);
        if (l) {
          var s = i > 0, u = i < 0, f = a < 0, c = a > 0, h = l.row + l.rowspan - 1 === this.hot.countRows() - 1, d = l.row === 0, y = l.col + l.colspan - 1 === this.hot.countCols() - 1, p = l.col === 0;
          (s && h || u && d || c && y || f && p) && (o.row = l.row, o.col = l.col);
        }
      }
    }
    /**
     * `afterDrawSelection` hook callback. Used to add the additional class name for the entirely-selected merged cells.
     *
     * @private
     * @param {number} currentRow Visual row index of the currently processed cell.
     * @param {number} currentColumn Visual column index of the currently cell.
     * @param {Array} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow,
     *   endColumn]`.
     * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.
     * @returns {string|undefined} A `String`, which will act as an additional `className` to be added to the currently
     *   processed cell.
     */
  }, {
    key: "onAfterDrawSelection",
    value: function(o, i, a, l) {
      if (a)
        return this.selectionCalculations.getSelectedMergedCellClassName(o, i, a, l);
    }
    /**
     * `beforeRemoveCellClassNames` hook callback. Used to remove additional class name from all cells in the table.
     *
     * @private
     * @returns {string[]} An `Array` of `String`s. Each of these strings will act like class names to be removed from
     *   all the cells in the table.
     */
  }, {
    key: "onBeforeRemoveCellClassNames",
    value: function() {
      return this.selectionCalculations.getSelectedMergedCellClassNameToRemove();
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return hc;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return d2e;
    }
  }]), r;
}(ft);
function rL(e) {
  return g2e(e) || m2e(e) || p2e(e) || y2e();
}
function y2e() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function p2e(e, t) {
  if (e) {
    if (typeof e == "string")
      return nL(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return nL(e, t);
  }
}
function nL(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function m2e(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function g2e(e) {
  if (Array.isArray(e))
    return e;
}
function b2e(e, t) {
  return function(r, n) {
    var o = rL(r), i = o.slice(1), a = rL(n), l = a.slice(1);
    return function s(u) {
      var f = e[u], c = t[u], h = i[u], d = l[u], y = c.multiColumnSorting, p = y.compareFunctionFactory ? y.compareFunctionFactory : wU(c.type), g = p(f, c, y)(h, d);
      if (g === Hn) {
        var w = u + 1;
        if (typeof t[w] < "u")
          return s(w);
      }
      return g;
    }(0);
  };
}
var oL;
function w2e(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } }));
}
function iL() {
  ht(ut(oL || (oL = w2e(["Plugins `columnSorting` and `multiColumnSorting` should not be enabled simultaneously. \n    Only `multiColumnSorting` will work."], ["Plugins \\`columnSorting\\` and \\`multiColumnSorting\\` should not be enabled simultaneously. \n    Only \\`multiColumnSorting\\` will work."]))));
}
var Fz = "sort";
function S2e(e, t, r) {
  var n = [];
  return r === !1 || e.isColumnSorted(t) && e.getNumberOfSortedColumns() > 1 && n.push("".concat(Fz, "-").concat(e.getIndexOfColumnInSortQueue(t) + 1)), n;
}
function C2e(e) {
  var t = e.className.split(" "), r = new RegExp("^".concat(Fz, "-[0-9]{1,2}$"));
  return t.filter(function(n) {
    return r.test(n);
  });
}
function Ju(e) {
  "@babel/helpers - typeof";
  return Ju = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Ju(e);
}
function _2e(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function aL(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, R2e(n.key), n);
  }
}
function O2e(e, t, r) {
  return t && aL(e.prototype, t), r && aL(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function R2e(e) {
  var t = E2e(e, "string");
  return Ju(t) === "symbol" ? t : String(t);
}
function E2e(e, t) {
  if (Ju(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Ju(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Hr() {
  return typeof Reflect < "u" && Reflect.get ? Hr = Reflect.get.bind() : Hr = function(t, r, n) {
    var o = T2e(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, Hr.apply(this, arguments);
}
function T2e(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = pr(e), e !== null); )
    ;
  return e;
}
function P2e(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && _R(e, t);
}
function _R(e, t) {
  return _R = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, _R(e, t);
}
function k2e(e) {
  var t = I2e();
  return function() {
    var n = pr(e), o;
    if (t) {
      var i = pr(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return $2e(this, o);
  };
}
function $2e(e, t) {
  if (t && (Ju(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return A2e(e);
}
function A2e(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function I2e() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function pr(e) {
  return pr = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, pr(e);
}
var OR = "multiColumnSorting", M2e = 170, x2e = "append", lL = "columnSorting";
bU(OR, b2e);
var D2e = /* @__PURE__ */ function(e) {
  P2e(r, e);
  var t = k2e(r);
  function r(n) {
    var o;
    return _2e(this, r), o = t.call(this, n), o.pluginKey = OR, o;
  }
  return O2e(r, [{
    key: "isEnabled",
    value: function() {
      return Hr(pr(r.prototype), "isEnabled", this).call(this);
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      !this.enabled && this.hot.getSettings()[this.pluginKey] && this.hot.getSettings()[lL] && iL(), Hr(pr(r.prototype), "enablePlugin", this).call(this);
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      Hr(pr(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Sorts the table by chosen columns and orders.
     *
     * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).
     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
     * sort order (`asc` for ascending, `desc` for descending).
     *
     * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.
     *
     * @example
     * ```js
     * // sort ascending first visual column
     * hot.getPlugin('multiColumnSorting').sort({ column: 0, sortOrder: 'asc' });
     *
     * // sort first two visual column in the defined sequence
     * hot.getPlugin('multiColumnSorting').sort([{
     *   column: 1, sortOrder: 'asc'
     * }, {
     *   column: 0, sortOrder: 'desc'
     * }]);
     * ```
     *
     * @fires Hooks#beforeColumnSort
     * @fires Hooks#afterColumnSort
     */
  }, {
    key: "sort",
    value: function(o) {
      Hr(pr(r.prototype), "sort", this).call(this, o);
    }
    /**
     * Clear the sort performed on the table.
     */
  }, {
    key: "clearSort",
    value: function() {
      Hr(pr(r.prototype), "clearSort", this).call(this);
    }
    /**
     * Checks if the table is sorted (any column have to be sorted).
     *
     * @returns {boolean}
     */
  }, {
    key: "isSorted",
    value: function() {
      return Hr(pr(r.prototype), "isSorted", this).call(this);
    }
    /**
     * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.
     *
     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.
     *
     * @param {number} [column] Visual column index.
     * @returns {undefined|object|Array}
     */
  }, {
    key: "getSortConfig",
    value: function(o) {
      return Hr(pr(r.prototype), "getSortConfig", this).call(this, o);
    }
    /**
     * @description
     * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.
     * Note: Please keep in mind that this method doesn't re-render the table.
     *
     * @example
     * ```js
     * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {
     *   const columnSortPlugin = this.getPlugin('multiColumnSorting');
     *
     *   columnSortPlugin.setSortConfig(destinationSortConfigs);
     *
     *   // const newData = ... // Calculated data set, ie. from an AJAX call.
     *
     *   this.loadData(newData); // Load new data set and re-render the table.
     *
     *   return false; // The blockade for the default sort action.
     * }
     * ```
     *
     * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).
     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
     * sort order (`asc` for ascending, `desc` for descending).
     */
  }, {
    key: "setSortConfig",
    value: function(o) {
      Hr(pr(r.prototype), "setSortConfig", this).call(this, o);
    }
    /**
     * Get normalized sort configs.
     *
     * @private
     * @param {object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).
     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains
     * sort order (`asc` for ascending, `desc` for descending).
     * @returns {Array}
     */
  }, {
    key: "getNormalizedSortConfigs",
    value: function() {
      var o = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      return Array.isArray(o) ? o : [o];
    }
    /**
     * Update header classes.
     *
     * @private
     * @param {HTMLElement} headerSpanElement Header span element.
     * @param {...*} args Extra arguments for helpers.
     */
  }, {
    key: "updateHeaderClasses",
    value: function(o) {
      for (var i, a = arguments.length, l = new Array(a > 1 ? a - 1 : 0), s = 1; s < a; s++)
        l[s - 1] = arguments[s];
      (i = Hr(pr(r.prototype), "updateHeaderClasses", this)).call.apply(i, [this, o].concat(l)), Le(o, C2e(o)), this.enabled !== !1 && ae(o, S2e.apply(void 0, l));
    }
    /**
     * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called
     * for `updateSettings` in specific situations.
     *
     * @private
     * @param {object} newSettings New settings object.
     */
  }, {
    key: "onUpdateSettings",
    value: function(o) {
      this.hot.getSettings()[this.pluginKey] && this.hot.getSettings()[lL] && iL(), Hr(pr(r.prototype), "onUpdateSettings", this).call(this, o);
    }
    /**
     * Callback for the `onAfterOnCellMouseDown` hook.
     *
     * @private
     * @param {Event} event Event which are provided by hook.
     * @param {CellCoords} coords Visual coords of the selected cell.
     */
  }, {
    key: "onAfterOnCellMouseDown",
    value: function(o, i) {
      wO(i.row, i.col, o) !== !1 && this.wasClickableHeaderClicked(o, i.col) && (this.hot.getShortcutManager().isCtrlPressed() ? (this.hot.deselectCell(), this.hot.selectColumns(i.col), this.sort(this.getNextSortConfig(i.col, x2e))) : this.sort(this.getColumnNextConfig(i.col)));
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return OR;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return M2e;
    }
  }]), r;
}(CU);
function ef(e) {
  "@babel/helpers - typeof";
  return ef = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, ef(e);
}
function N2e(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function sL(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, L2e(n.key), n);
  }
}
function H2e(e, t, r) {
  return t && sL(e.prototype, t), r && sL(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function L2e(e) {
  var t = j2e(e, "string");
  return ef(t) === "symbol" ? t : String(t);
}
function j2e(e, t) {
  if (ef(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (ef(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Pp() {
  return typeof Reflect < "u" && Reflect.get ? Pp = Reflect.get.bind() : Pp = function(t, r, n) {
    var o = F2e(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, Pp.apply(this, arguments);
}
function F2e(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = tf(e), e !== null); )
    ;
  return e;
}
function B2e(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && RR(e, t);
}
function RR(e, t) {
  return RR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, RR(e, t);
}
function V2e(e) {
  var t = z2e();
  return function() {
    var n = tf(e), o;
    if (t) {
      var i = tf(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return W2e(this, o);
  };
}
function W2e(e, t) {
  if (t && (ef(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return U2e(e);
}
function U2e(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function z2e() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function tf(e) {
  return tf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, tf(e);
}
var Y2e = "multipleSelectionHandles", G2e = 160, K2e = /* @__PURE__ */ function(e) {
  B2e(r, e);
  var t = V2e(r);
  function r(n) {
    var o;
    return N2e(this, r), o = t.call(this, n), o.dragged = [], o.eventManager = null, o.lastSetCell = null, o;
  }
  return H2e(r, [{
    key: "isEnabled",
    value: function() {
      return Nn();
    }
    /**
     * Enable plugin for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      this.enabled || (this.eventManager || (this.eventManager = new It(this)), this.registerListeners(), Pp(tf(r.prototype), "enablePlugin", this).call(this));
    }
    /**
     * Bind the touch events.
     *
     * @private
     */
  }, {
    key: "registerListeners",
    value: function() {
      var o = this, i = this, a = this.hot.rootElement;
      function l(s) {
        if (i.dragged.length === 1)
          return i.dragged.splice(0, i.dragged.length), !0;
        var u = i.dragged.indexOf(s);
        if (u === -1)
          return !1;
        u === 0 ? i.dragged = i.dragged.slice(0, 1) : u === 1 && (i.dragged = i.dragged.slice(-1));
      }
      this.eventManager.addEventListener(a, "touchstart", function(s) {
        var u;
        if (Me(s.target, "topSelectionHandle-HitArea"))
          return u = i.hot.getSelectedRangeLast(), i.dragged.push("top"), i.touchStartRange = {
            width: u.getWidth(),
            height: u.getHeight(),
            direction: u.getDirection()
          }, s.preventDefault(), !1;
        if (Me(s.target, "bottomSelectionHandle-HitArea"))
          return u = i.hot.getSelectedRangeLast(), i.dragged.push("bottom"), i.touchStartRange = {
            width: u.getWidth(),
            height: u.getHeight(),
            direction: u.getDirection()
          }, s.preventDefault(), !1;
      }), this.eventManager.addEventListener(a, "touchend", function(s) {
        if (Me(s.target, "topSelectionHandle-HitArea"))
          return l.call(i, "top"), i.touchStartRange = void 0, s.preventDefault(), !1;
        if (Me(s.target, "bottomSelectionHandle-HitArea"))
          return l.call(i, "bottom"), i.touchStartRange = void 0, s.preventDefault(), !1;
      }), this.eventManager.addEventListener(a, "touchmove", function(s) {
        var u = o.hot.rootDocument, f, c, h, d, y, p;
        if (i.dragged.length !== 0) {
          var g = u.elementFromPoint(s.touches[0].clientX, s.touches[0].clientY);
          !g || g === i.lastSetCell || ((g.nodeName === "TD" || g.nodeName === "TH") && (f = i.hot.getCoords(g), f.col === -1 && (f.col = 0), c = i.hot.getSelectedRangeLast(), h = c.getWidth(), d = c.getHeight(), y = c.getDirection(), h === 1 && d === 1 && i.hot.selection.setRangeEnd(f), p = i.getCurrentRangeCoords(c, f, i.touchStartRange.direction, y, i.dragged[0]), p.start !== null && i.hot.selection.setRangeStart(p.start), i.hot.selection.setRangeEnd(p.end), i.lastSetCell = g), s.preventDefault());
        }
      });
    }
  }, {
    key: "getCurrentRangeCoords",
    value: function(o, i, a, l, s) {
      var u = o.getTopStartCorner(), f = o.getBottomEndCorner(), c = o.getBottomStartCorner(), h = o.getTopEndCorner(), d = {
        start: null,
        end: null
      };
      switch (a) {
        case "NE-SW":
          switch (l) {
            case "NE-SW":
            case "NW-SE":
              s === "top" ? d = {
                start: this.hot._createCellCoords(i.row, o.highlight.col),
                end: this.hot._createCellCoords(c.row, i.col)
              } : d = {
                start: this.hot._createCellCoords(o.highlight.row, i.col),
                end: this.hot._createCellCoords(i.row, u.col)
              };
              break;
            case "SE-NW":
              s === "bottom" && (d = {
                start: this.hot._createCellCoords(f.row, i.col),
                end: this.hot._createCellCoords(i.row, u.col)
              });
              break;
          }
          break;
        case "NW-SE":
          switch (l) {
            case "NE-SW":
              s === "top" ? d = {
                start: i,
                end: c
              } : d.end = i;
              break;
            case "NW-SE":
              s === "top" ? d = {
                start: i,
                end: f
              } : d.end = i;
              break;
            case "SE-NW":
              s === "top" ? d = {
                start: i,
                end: u
              } : d.end = i;
              break;
            case "SW-NE":
              s === "top" ? d = {
                start: i,
                end: h
              } : d.end = i;
              break;
          }
          break;
        case "SW-NE":
          switch (l) {
            case "NW-SE":
              s === "bottom" ? d = {
                start: this.hot._createCellCoords(i.row, u.col),
                end: this.hot._createCellCoords(c.row, i.col)
              } : d = {
                start: this.hot._createCellCoords(u.row, i.col),
                end: this.hot._createCellCoords(i.row, f.col)
              };
              break;
            case "SW-NE":
              s === "top" ? d = {
                start: this.hot._createCellCoords(o.highlight.row, i.col),
                end: this.hot._createCellCoords(i.row, f.col)
              } : d = {
                start: this.hot._createCellCoords(i.row, u.col),
                end: this.hot._createCellCoords(u.row, i.col)
              };
              break;
            case "SE-NW":
              s === "bottom" ? d = {
                start: this.hot._createCellCoords(i.row, h.col),
                end: this.hot._createCellCoords(u.row, i.col)
              } : s === "top" && (d = {
                start: c,
                end: i
              });
              break;
          }
          break;
        case "SE-NW":
          switch (l) {
            case "NW-SE":
            case "NE-SW":
            case "SW-NE":
              s === "top" && (d.end = i);
              break;
            case "SE-NW":
              s === "top" ? d.end = i : d = {
                start: i,
                end: u
              };
              break;
          }
          break;
      }
      return d;
    }
    /**
     * Check if user is currently dragging the handle.
     *
     * @returns {boolean} Dragging state.
     */
  }, {
    key: "isDragged",
    value: function() {
      return this.dragged.length > 0;
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return Y2e;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return G2e;
    }
  }]), r;
}(ft);
function ER() {
  var e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, t = e.label, r = t === void 0 ? "" : t, n = e.colspan, o = n === void 0 ? 1 : n, i = e.origColspan, a = i === void 0 ? 1 : i, l = e.collapsible, s = l === void 0 ? !1 : l, u = e.crossHiddenColumns, f = u === void 0 ? [] : u, c = e.isCollapsed, h = c === void 0 ? !1 : c, d = e.isHidden, y = d === void 0 ? !1 : d, p = e.isRoot, g = p === void 0 ? !1 : p, w = e.isPlaceholder, C = w === void 0 ? !1 : w;
  return {
    label: r,
    colspan: o,
    origColspan: a,
    collapsible: s,
    isCollapsed: h,
    crossHiddenColumns: f,
    isHidden: y,
    isRoot: g,
    isPlaceholder: C
  };
}
function Bz() {
  return {
    label: "",
    isPlaceholder: !0
  };
}
function uL(e) {
  return Q2e(e) || Z2e(e) || X2e(e) || q2e();
}
function q2e() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function X2e(e, t) {
  if (e) {
    if (typeof e == "string")
      return TR(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return TR(e, t);
  }
}
function Z2e(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function Q2e(e) {
  if (Array.isArray(e))
    return TR(e);
}
function TR(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function J2e(e) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1 / 0, r = [];
  if (t === 0)
    return r;
  I(e, function(o) {
    var i = [], a = 0;
    r.push(i), I(o, function(l) {
      var s = ER();
      if (ze(l)) {
        var u = l.label, f = l.colspan;
        s.label = Ft(u), typeof f == "number" && f > 1 && (s.colspan = f, s.origColspan = f);
      } else
        s.label = Ft(l);
      a += s.origColspan;
      var c = !1;
      if (a >= t && (s.colspan = s.origColspan - (a - t), s.origColspan = s.colspan, c = !0), i.push(s), s.colspan > 1)
        for (var h = 0; h < s.colspan - 1; h++)
          i.push(Bz());
      return !c;
    });
  });
  var n = Math.max.apply(Math, uL(Ue(r, function(o) {
    return o.length;
  })));
  return I(r, function(o) {
    if (o.length < n) {
      var i = Ue(new Array(n - o.length), function() {
        return ER();
      });
      o.splice.apply(o, [o.length, 0].concat(uL(i)));
    }
  }), r;
}
function $d(e) {
  "@babel/helpers - typeof";
  return $d = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, $d(e);
}
var eUe = ["row", "col"];
function fL(e, t) {
  var r = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    t && (n = n.filter(function(o) {
      return Object.getOwnPropertyDescriptor(e, o).enumerable;
    })), r.push.apply(r, n);
  }
  return r;
}
function tUe(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? fL(Object(r), !0).forEach(function(n) {
      rUe(e, n, r[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : fL(Object(r)).forEach(function(n) {
      Object.defineProperty(e, n, Object.getOwnPropertyDescriptor(r, n));
    });
  }
  return e;
}
function rUe(e, t, r) {
  return t = Vz(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function nUe(e, t) {
  if (e == null)
    return {};
  var r = oUe(e, t), n, o;
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(e);
    for (o = 0; o < i.length; o++)
      n = i[o], !(t.indexOf(n) >= 0) && Object.prototype.propertyIsEnumerable.call(e, n) && (r[n] = e[n]);
  }
  return r;
}
function oUe(e, t) {
  if (e == null)
    return {};
  var r = {}, n = Object.keys(e), o, i;
  for (i = 0; i < n.length; i++)
    o = n[i], !(t.indexOf(o) >= 0) && (r[o] = e[o]);
  return r;
}
function iUe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function cL(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Vz(n.key), n);
  }
}
function aUe(e, t, r) {
  return t && cL(e.prototype, t), r && cL(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Vz(e) {
  var t = lUe(e, "string");
  return $d(t) === "symbol" ? t : String(t);
}
function lUe(e, t) {
  if ($d(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if ($d(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function BS(e, t, r) {
  sUe(e, t), t.set(e, r);
}
function sUe(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function ln(e, t) {
  var r = Wz(e, t, "get");
  return uUe(e, r);
}
function uUe(e, t) {
  return t.get ? t.get.call(e) : t.value;
}
function oc(e, t, r) {
  var n = Wz(e, t, "set");
  return fUe(e, n, r), r;
}
function Wz(e, t, r) {
  if (!t.has(e))
    throw new TypeError("attempted to " + r + " private field on non-instance");
  return t.get(e);
}
function fUe(e, t, r) {
  if (t.set)
    t.set.call(e, r);
  else {
    if (!t.writable)
      throw new TypeError("attempted to set read only private field");
    t.value = r;
  }
}
var hL = ["label", "collapsible"], eo = /* @__PURE__ */ new WeakMap(), Xi = /* @__PURE__ */ new WeakMap(), VS = /* @__PURE__ */ new WeakMap(), cUe = /* @__PURE__ */ function() {
  function e() {
    iUe(this, e), BS(this, eo, {
      writable: !0,
      value: []
    }), BS(this, Xi, {
      writable: !0,
      value: 0
    }), BS(this, VS, {
      writable: !0,
      value: 1 / 0
    });
  }
  return aUe(e, [{
    key: "setColumnsLimit",
    value: (
      /**
       * Sets columns limit to the source settings will be trimmed. All headers which
       * overlap the column limit will be reduced to keep the structure solid.
       *
       * @param {number} columnsCount The number of columns to limit to.
       */
      function(r) {
        oc(this, VS, r);
      }
    )
    /**
     * Sets a new nested header configuration.
     *
     * @param {Array[]} [nestedHeadersSettings=[]] The user-defined nested headers settings.
     */
  }, {
    key: "setData",
    value: function() {
      var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      oc(this, eo, J2e(r, ln(this, VS))), oc(this, Xi, ln(this, eo).length);
    }
    /**
     * Gets normalized source settings.
     *
     * @returns {Array[]}
     */
  }, {
    key: "getData",
    value: function() {
      return ln(this, eo);
    }
    /**
     * Merges settings with current source settings.
     *
     * @param {object[]} additionalSettings An array of objects with `row`, `col` and additional
     *                                      properties to merge with current source settings.
     */
  }, {
    key: "mergeWith",
    value: function(r) {
      var n = this;
      I(r, function(o) {
        var i = o.row, a = o.col, l = nUe(o, eUe), s = n.getHeaderSettings(i, a);
        s !== null && Gt(s, l, hL);
      });
    }
    /**
     * Maps the current state with a callback. For each source settings the callback function
     * is called. If the function returns value that value is merged with the source settings.
     *
     * @param {Function} callback A function that is called for every header settings.
     *                            Each time the callback is called, the returned value extends
     *                            header settings.
     */
  }, {
    key: "map",
    value: function(r) {
      I(ln(this, eo), function(n) {
        I(n, function(o) {
          var i = r(tUe({}, o));
          ze(i) && Gt(o, i, hL);
        });
      });
    }
    /**
     * Gets source column header settings for a specified header. The returned
     * object contains information about the header label, its colspan length,
     * or if it is hidden in the header renderers.
     *
     * @param {number} headerLevel Header level (0 = most distant to the table).
     * @param {number} columnIndex A visual column index.
     * @returns {object|null}
     */
  }, {
    key: "getHeaderSettings",
    value: function(r, n) {
      var o;
      if (r >= ln(this, Xi) || r < 0)
        return null;
      var i = ln(this, eo)[r];
      return n >= i.length ? null : (o = i[n]) !== null && o !== void 0 ? o : null;
    }
    /**
     * Gets source of column headers settings for specified headers. If the retrieved column
     * settings overlap the range "box" determined by "columnIndex" and "columnsLength"
     * the exception will be thrown.
     *
     * @param {number} headerLevel Header level (0 = most distant to the table).
     * @param {number} columnIndex A visual column index from which the settings will be extracted.
     * @param {number} [columnsLength=1] The number of columns involved in the extraction of settings.
     * @returns {object}
     */
  }, {
    key: "getHeadersSettings",
    value: function(r, n) {
      var o = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1, i = [];
      if (r >= ln(this, Xi) || r < 0)
        return i;
      for (var a = ln(this, eo)[r], l = 0, s = n; s < a.length; s++) {
        var u = a[s];
        if (u.isPlaceholder)
          throw new Error("The first column settings cannot overlap the other header layers");
        if (l += u.colspan, i.push(u), u.colspan > 1 && (s += u.colspan - 1), l === o)
          break;
        if (l > o)
          throw new Error("The last column settings cannot overlap the other header layers");
      }
      return i;
    }
    /**
     * Gets a total number of headers levels.
     *
     * @returns {number}
     */
  }, {
    key: "getLayersCount",
    value: function() {
      return ln(this, Xi);
    }
    /**
     * Gets a total number of columns count.
     *
     * @returns {number}
     */
  }, {
    key: "getColumnsCount",
    value: function() {
      return ln(this, Xi) > 0 ? ln(this, eo)[0].length : 0;
    }
    /**
     * Clears the data.
     */
  }, {
    key: "clear",
    value: function() {
      oc(this, eo, []), oc(this, Xi, 0);
    }
  }]), e;
}();
function Ad(e) {
  "@babel/helpers - typeof";
  return Ad = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Ad(e);
}
function dL(e, t) {
  var r = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    t && (n = n.filter(function(o) {
      return Object.getOwnPropertyDescriptor(e, o).enumerable;
    })), r.push.apply(r, n);
  }
  return r;
}
function vL(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? dL(Object(r), !0).forEach(function(n) {
      kp(e, n, r[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : dL(Object(r)).forEach(function(n) {
      Object.defineProperty(e, n, Object.getOwnPropertyDescriptor(r, n));
    });
  }
  return e;
}
function hUe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function yL(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Uz(n.key), n);
  }
}
function dUe(e, t, r) {
  return t && yL(e.prototype, t), r && yL(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function kp(e, t, r) {
  return t = Uz(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function Uz(e) {
  var t = vUe(e, "string");
  return Ad(t) === "symbol" ? t : String(t);
}
function vUe(e, t) {
  if (Ad(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Ad(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function yUe(e) {
  return bUe(e) || gUe(e) || mUe(e) || pUe();
}
function pUe() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function mUe(e, t) {
  if (e) {
    if (typeof e == "string")
      return PR(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return PR(e, t);
  }
}
function gUe(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function bUe(e) {
  if (Array.isArray(e))
    return PR(e);
}
function PR(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
var wUe = "DF-pre-order";
function zz(e, t) {
  for (var r = e.call(t, this), n = 0; n < this.childs.length; n++) {
    if (r === !1)
      return !1;
    r = zz.call(this.childs[n], e, t);
  }
  return r;
}
var SUe = "DF-post-order";
function Yz(e, t) {
  for (var r = 0; r < this.childs.length; r++) {
    var n = Yz.call(this.childs[r], e, t);
    if (n === !1)
      return !1;
  }
  return e.call(t, this);
}
var Gz = "BF";
function CUe(e, t) {
  var r = [this];
  function n() {
    if (r.length !== 0) {
      var o = r.shift();
      r.push.apply(r, yUe(o.childs)), e.call(t, o) !== !1 && n();
    }
  }
  n();
}
var _Ue = Gz, pL = /* @__PURE__ */ new Map([[wUe, zz], [SUe, Yz], [Gz, CUe]]), mL = /* @__PURE__ */ function() {
  function e(t) {
    hUe(this, e), kp(this, "data", {}), kp(this, "parent", null), kp(this, "childs", []), this.data = t;
  }
  return dUe(e, [{
    key: "addChild",
    value: function(r) {
      r.parent = this, this.childs.push(r);
    }
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * @memberof TreeNode#
     * @function cloneTree
     *
     * Clones a tree structure deeply.
     *
     * For example, for giving a tree structure:
     *      .--(B1)--.
     *   .-(C1)   .-(C2)-.----.
     *  (D1)     (D2)   (D3) (D4)
     *
     * Cloning a tree starting from C2 node creates a mirrored tree structure.
     *     .-(C2')-.-----.
     *    (D2')   (D3') (D4')
     *
     * The cloned tree can be safely modified without affecting the original structure.
     * After modification, the clone can be merged with a tree using the "replaceTreeWith" method.
     *
     * @param {TreeNode} [nodeTree=this] A TreeNode to clone.
     * @returns {TreeNode}
     */
    /* eslint-enable jsdoc/require-description-complete-sentence */
  }, {
    key: "cloneTree",
    value: function() {
      for (var r = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this, n = new e(vL({}, r.data)), o = 0; o < r.childs.length; o++)
        n.addChild(this.cloneTree(r.childs[o]));
      return n;
    }
    /**
     * Replaces the current node with a passed tree structure.
     *
     * @param {TreeNode} nodeTree A TreeNode to replace with.
     */
  }, {
    key: "replaceTreeWith",
    value: function(r) {
      this.data = vL({}, r.data), this.childs = [];
      for (var n = 0; n < r.childs.length; n++)
        this.addChild(r.childs[n]);
    }
    /**
     * Traverses the tree structure through node childs. The walk down traversing supports
     * a three different strategies.
     *  - Depth-first pre-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR));
     *  - Depth-first post-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Post-order_(NLR));
     *  - Breadth-first traversal strategy (https://en.wikipedia.org/wiki/Tree_traversal#Breadth-first_search_/_level_order).
     *
     * @param {Function} callback The callback function which will be called for each node.
     * @param {string} [traversalStrategy=DEFAULT_TRAVERSAL_STRATEGY] Traversing strategy.
     */
  }, {
    key: "walkDown",
    value: function(r) {
      var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _Ue;
      if (!pL.has(n))
        throw new Error('Traversal strategy "'.concat(n, '" does not exist'));
      pL.get(n).call(this, r, this);
    }
    /**
     * Traverses the tree structure through node parents.
     *
     * @param {Function} callback The callback function which will be called for each node.
     */
  }, {
    key: "walkUp",
    value: function(r) {
      var n = this, o = function i(a) {
        var l = r.call(n, a);
        l !== !1 && a.parent !== null && i(a.parent);
      };
      o(this);
    }
  }]), e;
}();
function Id(e) {
  "@babel/helpers - typeof";
  return Id = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Id(e);
}
function gL(e, t) {
  var r = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    t && (n = n.filter(function(o) {
      return Object.getOwnPropertyDescriptor(e, o).enumerable;
    })), r.push.apply(r, n);
  }
  return r;
}
function bL(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? gL(Object(r), !0).forEach(function(n) {
      OUe(e, n, r[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : gL(Object(r)).forEach(function(n) {
      Object.defineProperty(e, n, Object.getOwnPropertyDescriptor(r, n));
    });
  }
  return e;
}
function OUe(e, t, r) {
  return t = Kz(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function RUe(e, t) {
  return kUe(e) || PUe(e, t) || TUe(e, t) || EUe();
}
function EUe() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function TUe(e, t) {
  if (e) {
    if (typeof e == "string")
      return wL(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return wL(e, t);
  }
}
function wL(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function PUe(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function kUe(e) {
  if (Array.isArray(e))
    return e;
}
function $Ue(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function SL(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Kz(n.key), n);
  }
}
function AUe(e, t, r) {
  return t && SL(e.prototype, t), r && SL(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Kz(e) {
  var t = IUe(e, "string");
  return Id(t) === "symbol" ? t : String(t);
}
function IUe(e, t) {
  if (Id(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Id(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function WS(e, t, r) {
  MUe(e, t), t.set(e, r);
}
function MUe(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function dr(e, t) {
  var r = qz(e, t, "get");
  return xUe(e, r);
}
function xUe(e, t) {
  return t.get ? t.get.call(e) : t.value;
}
function DUe(e, t, r) {
  var n = qz(e, t, "set");
  return NUe(e, n, r), r;
}
function qz(e, t, r) {
  if (!t.has(e))
    throw new TypeError("attempted to " + r + " private field on non-instance");
  return t.get(e);
}
function NUe(e, t, r) {
  if (t.set)
    t.set.call(e, r);
  else {
    if (!t.writable)
      throw new TypeError("attempted to set read only private field");
    t.value = r;
  }
}
var xl = /* @__PURE__ */ new WeakMap(), Zi = /* @__PURE__ */ new WeakMap(), Dl = /* @__PURE__ */ new WeakMap(), HUe = /* @__PURE__ */ function() {
  function e(t) {
    $Ue(this, e), WS(this, xl, {
      writable: !0,
      value: /* @__PURE__ */ new Map()
    }), WS(this, Zi, {
      writable: !0,
      value: /* @__PURE__ */ new Map()
    }), WS(this, Dl, {
      writable: !0,
      value: null
    }), DUe(this, Dl, t);
  }
  return AUe(e, [{
    key: "getRoots",
    value: function() {
      return Array.from(dr(this, xl).values());
    }
    /**
     * Gets a root node by specified visual column index.
     *
     * @param {number} columnIndex A visual column index.
     * @returns {TreeNode|undefined}
     */
  }, {
    key: "getRootByColumn",
    value: function(r) {
      var n;
      return dr(this, Zi).has(r) && (n = dr(this, xl).get(dr(this, Zi).get(r))), n;
    }
    /**
     * Gets a tree node by its position in the grid settings.
     *
     * @param {number} headerLevel Header level index (there is support only for positive values).
     * @param {number} columnIndex A visual column index.
     * @returns {TreeNode|undefined}
     */
  }, {
    key: "getNode",
    value: function(r, n) {
      var o = this.getRootByColumn(n);
      if (o) {
        var i = n - dr(this, Zi).get(n), a = 0, l;
        return o.walkDown(function(s) {
          var u = s.data, f = u.origColspan, c = u.headerLevel;
          if (r === c) {
            if (i >= a && i <= a + f - 1)
              return l = s, l.data.isRoot = n === l.data.columnIndex, !1;
            a += f;
          }
        }), l;
      }
    }
    /**
     * Builds (or rebuilds if called again) root nodes indexes.
     */
  }, {
    key: "rebuildTreeIndex",
    value: function() {
      var r = this, n = 0;
      dr(this, Zi).clear(), I(dr(this, xl), function(o) {
        for (var i = RUe(o, 2), a = i[1].data.colspan, l = n; l < n + a; l++)
          dr(r, Zi).set(l, n);
        n += a;
      });
    }
    /**
     * Builds trees based on SourceSettings class. Calling a method causes clearing the tree state built
     * from the previous call.
     */
  }, {
    key: "buildTree",
    value: function() {
      this.clear();
      for (var r = dr(this, Dl).getColumnsCount(), n = 0; n < r; ) {
        var o = dr(this, Dl).getHeaderSettings(0, n), i = new mL();
        dr(this, xl).set(n, i), this.buildLeaves(i, n, 0, o.origColspan), n += o.origColspan;
      }
      this.rebuildTreeIndex();
    }
    /**
     * Builds leaves for specified tree node.
     *
     * @param {TreeNode} parentNode A node to which the leaves applies.
     * @param {number} columnIndex A visual column index.
     * @param {number} headerLevel Currently processed header level.
     * @param {number} [extractionLength=1] Determines column extraction length for node children.
     */
  }, {
    key: "buildLeaves",
    value: function(r, n, o) {
      var i = this, a = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1, l = dr(this, Dl).getHeadersSettings(o, n, a);
      o += 1, I(l, function(s) {
        var u = bL(bL({}, s), {}, {
          /**
           * The header level (tree node depth level).
           *
           * @type {number}
           */
          headerLevel: o - 1,
          /**
           * A visual column index.
           *
           * @type {number}
           */
          columnIndex: n
        }), f;
        o === 1 ? (r.data = u, f = r) : (f = new mL(u), r.addChild(f)), o < dr(i, Dl).getLayersCount() && i.buildLeaves(f, n, o, s.origColspan), n += s.origColspan;
      });
    }
    /**
     * Clears the tree to the initial state.
     */
  }, {
    key: "clear",
    value: function() {
      dr(this, xl).clear(), dr(this, Zi).clear();
    }
  }]), e;
}();
function Xz(e, t) {
  e.walkDown(function(r) {
    var n = r.data, o = r.childs;
    if (!n.isHidden && (t(n.columnIndex), o.length === 0))
      for (var i = 1; i < n.colspan; i++)
        t(n.columnIndex + i);
  });
}
function Bm(e, t) {
  var r = e.childs;
  if (r.length !== 0)
    return r[0].data[t];
}
function Vm(e) {
  return Bm(e, "origColspan") === e.data.origColspan;
}
function xP(e) {
  var t = e.data, r = e.childs;
  if (!t.isCollapsed || t.isHidden || t.origColspan <= 1)
    return {
      rollbackModification: function() {
      },
      affectedColumns: [],
      colspanCompensation: 0
    };
  var n = Vm(e);
  if (n)
    return xP(r[0]);
  t.isCollapsed = !1;
  var o = r.slice(1), i = /* @__PURE__ */ new Set(), a = 0;
  if (o.length > 0)
    I(o, function(c) {
      c.replaceTreeWith(c.data.clonedTree), c.data.clonedTree = null;
      var h = c.data;
      a += h.colspan, Xz(c, function(d) {
        i.add(d);
      });
    });
  else {
    var l = t.colspan, s = t.origColspan, u = t.columnIndex;
    a = s - l;
    for (var f = 1; f < s; f++)
      i.add(u + f);
  }
  return e.walkUp(function(c) {
    var h = c.data;
    h.colspan += a, h.colspan >= h.origColspan ? (h.colspan = h.origColspan, h.isCollapsed = !1) : Vm(c) && (h.isCollapsed = Bm(c, "isCollapsed"));
  }), {
    rollbackModification: function() {
      return DP(e);
    },
    affectedColumns: Array.from(i),
    colspanCompensation: a
  };
}
function DP(e) {
  var t, r = e.data, n = e.childs;
  if (r.isCollapsed || r.isHidden || r.origColspan <= 1)
    return {
      rollbackModification: function() {
      },
      affectedColumns: [],
      colspanCompensation: 0
    };
  var o = Vm(e);
  if (o)
    return DP(n[0]);
  r.isCollapsed = !0;
  var i = n.slice(1), a = /* @__PURE__ */ new Set();
  if (i.length > 0)
    I(i, function(h) {
      Xz(h, function(d) {
        a.add(d);
      }), h.data.clonedTree = h.cloneTree(), h.walkDown(function(d) {
        var y = d.data;
        y.isHidden = !0;
      });
    });
  else
    for (var l = r.origColspan, s = r.columnIndex, u = 1; u < l; u++) {
      var f = s + u;
      a.add(f);
    }
  var c = r.colspan - ((t = Bm(e, "colspan")) !== null && t !== void 0 ? t : 1);
  return e.walkUp(function(h) {
    var d = h.data;
    d.colspan -= c, d.colspan <= 1 ? (d.colspan = 1, d.isCollapsed = !0) : Vm(h) && (d.isCollapsed = Bm(h, "isCollapsed"));
  }), {
    rollbackModification: function() {
      return xP(e);
    },
    affectedColumns: Array.from(a),
    colspanCompensation: c
  };
}
var CL;
function LUe(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } }));
}
function jUe(e, t) {
  if (!Number.isInteger(t))
    throw new Error("The passed gridColumnIndex argument has invalid type.");
  if (e.childs.length > 0)
    throw new Error(ut(CL || (CL = LUe([`The passed node is not the last node on the tree. Only for 
the last node, the hide column modification can be applied.`], [`The passed node is not the last node on the tree. Only for\\x20
the last node, the hide column modification can be applied.`]))));
  var r = e.data.crossHiddenColumns;
  if (!r.includes(t)) {
    var n = !1;
    e.walkUp(function(o) {
      var i = o.data.collapsible;
      if (i)
        return n = !0, !1;
    }), !n && e.walkUp(function(o) {
      var i = o.data;
      i.crossHiddenColumns.push(t), i.colspan > 1 ? i.colspan -= 1 : i.isHidden = !0;
    });
  }
}
var _L;
function FUe(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } }));
}
function BUe(e, t) {
  if (!Number.isInteger(t))
    throw new Error("The passed gridColumnIndex argument has invalid type.");
  if (e.childs.length > 0)
    throw new Error(ut(_L || (_L = FUe([`The passed node is not the last node on the tree. Only for 
the last node, the show column modification can be applied.`], [`The passed node is not the last node on the tree. Only for\\x20
the last node, the show column modification can be applied.`]))));
  var r = e.data.crossHiddenColumns;
  if (r.includes(t)) {
    var n = !1;
    e.walkUp(function(o) {
      var i = o.data.collapsible;
      if (i)
        return n = !0, !1;
    }), !n && e.walkUp(function(o) {
      var i = o.data;
      i.crossHiddenColumns.splice(i.crossHiddenColumns.indexOf(t), 1), !i.isHidden && i.colspan < i.origColspan && (i.colspan += 1), i.isHidden = !1;
    });
  }
}
var OL = /* @__PURE__ */ new Map([["collapse", DP], ["expand", xP], ["hide-column", jUe], ["show-column", BUe]]);
function VUe(e, t, r) {
  if (!OL.has(e))
    throw new Error('The node modifier action ("'.concat(e, '") does not exist.'));
  return OL.get(e)(t, r);
}
var WUe = ["crossHiddenColumns"];
function UUe(e, t) {
  if (e == null)
    return {};
  var r = zUe(e, t), n, o;
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(e);
    for (o = 0; o < i.length; o++)
      n = i[o], !(t.indexOf(n) >= 0) && Object.prototype.propertyIsEnumerable.call(e, n) && (r[n] = e[n]);
  }
  return r;
}
function zUe(e, t) {
  if (e == null)
    return {};
  var r = {}, n = Object.keys(e), o, i;
  for (i = 0; i < n.length; i++)
    o = n[i], !(t.indexOf(o) >= 0) && (r[o] = e[o]);
  return r;
}
function Ly(e) {
  var t = [];
  return I(e, function(r) {
    r.walkDown(function(n) {
      for (var o = n.data, i = o.origColspan, a = o.columnIndex, l = o.headerLevel, s = o.crossHiddenColumns, u = GUe(t, l), f = !1, c = a; c < a + i; c++) {
        var h = s.includes(c);
        if (h || f)
          u.push(Bz());
        else {
          var d = YUe(o);
          d.isRoot = !0, u.push(d), f = !0;
        }
      }
    });
  }), t;
}
function YUe(e) {
  var t = ER(e);
  t.crossHiddenColumns;
  var r = UUe(t, WUe);
  return r;
}
function GUe(e, t) {
  var r;
  return Array.isArray(e[t]) ? r = e[t] : (r = [], e[t] = r), r;
}
function Md(e) {
  "@babel/helpers - typeof";
  return Md = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Md(e);
}
var KUe = ["row"];
function RL(e, t) {
  var r = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    t && (n = n.filter(function(o) {
      return Object.getOwnPropertyDescriptor(e, o).enumerable;
    })), r.push.apply(r, n);
  }
  return r;
}
function EL(e) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? RL(Object(r), !0).forEach(function(n) {
      qUe(e, n, r[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : RL(Object(r)).forEach(function(n) {
      Object.defineProperty(e, n, Object.getOwnPropertyDescriptor(r, n));
    });
  }
  return e;
}
function qUe(e, t, r) {
  return t = Zz(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function XUe(e, t) {
  if (e == null)
    return {};
  var r = ZUe(e, t), n, o;
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(e);
    for (o = 0; o < i.length; o++)
      n = i[o], !(t.indexOf(n) >= 0) && Object.prototype.propertyIsEnumerable.call(e, n) && (r[n] = e[n]);
  }
  return r;
}
function ZUe(e, t) {
  if (e == null)
    return {};
  var r = {}, n = Object.keys(e), o, i;
  for (i = 0; i < n.length; i++)
    o = n[i], !(t.indexOf(o) >= 0) && (r[o] = e[o]);
  return r;
}
function QUe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function TL(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Zz(n.key), n);
  }
}
function JUe(e, t, r) {
  return t && TL(e.prototype, t), r && TL(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Zz(e) {
  var t = eze(e, "string");
  return Md(t) === "symbol" ? t : String(t);
}
function eze(e, t) {
  if (Md(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Md(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function US(e, t, r) {
  tze(e, t), t.set(e, r);
}
function tze(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function ic(e, t, r) {
  var n = Qz(e, t, "set");
  return rze(e, n, r), r;
}
function rze(e, t, r) {
  if (t.set)
    t.set.call(e, r);
  else {
    if (!t.writable)
      throw new TypeError("attempted to set read only private field");
    t.value = r;
  }
}
function xt(e, t) {
  var r = Qz(e, t, "get");
  return nze(e, r);
}
function Qz(e, t, r) {
  if (!t.has(e))
    throw new TypeError("attempted to " + r + " private field on non-instance");
  return t.get(e);
}
function nze(e, t) {
  return t.get ? t.get.call(e) : t.value;
}
var kn = /* @__PURE__ */ new WeakMap(), Dr = /* @__PURE__ */ new WeakMap(), Qi = /* @__PURE__ */ new WeakMap(), oze = /* @__PURE__ */ function() {
  function e() {
    QUe(this, e), US(this, kn, {
      writable: !0,
      value: new cUe()
    }), US(this, Dr, {
      writable: !0,
      value: new HUe(xt(this, kn))
    }), US(this, Qi, {
      writable: !0,
      value: [[]]
    });
  }
  return JUe(e, [{
    key: "setState",
    value: (
      /**
       * Sets a new state for the nested headers plugin based on settings passed
       * directly to the plugin.
       *
       * @param {Array[]} nestedHeadersSettings The user-defined settings.
       * @returns {boolean} Returns `true` if the settings are processed correctly, `false` otherwise.
       */
      function(r) {
        xt(this, kn).setData(r);
        var n = !1;
        try {
          xt(this, Dr).buildTree();
        } catch {
          xt(this, Dr).clear(), xt(this, kn).clear(), n = !0;
        }
        return ic(this, Qi, Ly(xt(this, Dr).getRoots())), n;
      }
    )
    /**
     * Sets columns limit to the state will be trimmed. All headers (colspans) which
     * overlap the column limit will be reduced to keep the structure solid.
     *
     * @param {number} columnsCount The number of columns to limit to.
     */
  }, {
    key: "setColumnsLimit",
    value: function(r) {
      xt(this, kn).setColumnsLimit(r);
    }
    /**
     * Merges settings with current plugin state.
     *
     * By default only foreign keys are merged with source state and passed to the tree. But only
     * known keys are exported to matrix.
     *
     * @param {object[]} settings An array of objects to merge with the current source settings.
     *                            It is a requirement that every object has `row` and `col` properties
     *                            which points to the specific header settings object.
     */
  }, {
    key: "mergeStateWith",
    value: function(r) {
      var n = this, o = Ue(r, function(i) {
        var a = i.row, l = XUe(i, KUe);
        return EL({
          row: a < 0 ? n.rowCoordsToLevel(a) : a
        }, l);
      });
      xt(this, kn).mergeWith(o), xt(this, Dr).buildTree(), ic(this, Qi, Ly(xt(this, Dr).getRoots()));
    }
    /**
     * Maps the current state with a callback. For each header settings the callback function
     * is called. If the function returns value that value is merged with the state.
     *
     * By default only foreign keys are merged with source state and passed to the tree. But only
     * known keys are exported to matrix.
     *
     * @param {Function} callback A function that is called for every header source settings.
     *                            Each time the callback is called, the returned value extends
     *                            header settings.
     */
  }, {
    key: "mapState",
    value: function(r) {
      xt(this, kn).map(r), xt(this, Dr).buildTree(), ic(this, Qi, Ly(xt(this, Dr).getRoots()));
    }
    /**
     * Maps the current tree nodes with a callback. For each node the callback function
     * is called. If the function returns value that value is added to returned array.
     *
     * @param {Function} callback A function that is called for every tree node.
     *                            Each time the callback is called, the returned value is
     *                            added to returned array.
     * @returns {Array}
     */
  }, {
    key: "mapNodes",
    value: function(r) {
      return sr(xt(this, Dr).getRoots(), function(n, o) {
        return o.walkDown(function(i) {
          var a = r(i.data);
          a !== void 0 && n.push(a);
        }), n;
      }, []);
    }
    /**
     * Triggers an action (e.g. "collapse") from the NodeModifiers module. The module
     * modifies a tree structure in such a way as to obtain the correct structure consistent with the
     * called action.
     *
     * @param {string} action An action name to trigger.
     * @param {number} headerLevel Header level index (there is support for negative and positive values).
     * @param {number} columnIndex A visual column index.
     * @returns {object|undefined}
     */
  }, {
    key: "triggerNodeModification",
    value: function(r, n, o) {
      n < 0 && (n = this.rowCoordsToLevel(n));
      var i = xt(this, Dr).getNode(n, o), a;
      return i && (a = VUe(r, i, o), ic(this, Qi, Ly(xt(this, Dr).getRoots()))), a;
    }
    /**
     * Triggers an action (e.g. "hide-column") from the NodeModifiers module. The action is
     * triggered starting from the lowest header. The module modifies a tree structure in
     * such a way as to obtain the correct structure consistent with the called action.
     *
     * @param {string} action An action name to trigger.
     * @param {number} columnIndex A visual column index.
     * @returns {object|undefined}
     */
  }, {
    key: "triggerColumnModification",
    value: function(r, n) {
      return this.triggerNodeModification(r, -1, n);
    }
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * @memberof StateManager#
     * @function rowCoordsToLevel
     *
     * Translates row coordinates into header level. The row coordinates counts from -1 to -N
     * and describes headers counting from most closest to most distant from the table.
     * The header levels are counted from 0 to N where 0 describes most distant header
     * from the table.
     *
     *  Row coords             Header level
     *           +--------------+
     *       -3  â A1 â A1      â  0
     *           +--------------+
     *       -2  â B1 â B2 â B3 â  1
     *           +--------------+
     *       -1  â C1 â C2 â C3 â  2
     *           +==============+
     *           â    â    â    â
     *           +--------------+
     *           â    â    â    â
     *
     * @param {number} rowIndex A visual row index.
     * @returns {number|null} Returns unsigned number.
     */
    /* eslint-enable jsdoc/require-description-complete-sentence */
  }, {
    key: "rowCoordsToLevel",
    value: function(r) {
      if (r >= 0)
        return null;
      var n = r + Math.max(this.getLayersCount(), 1);
      return n < 0 ? null : n;
    }
    /* eslint-disable jsdoc/require-description-complete-sentence */
    /**
     * @memberof StateManager#
     * @function levelToRowCoords
     *
     * Translates header level into row coordinates. The row coordinates counts from -1 to -N
     * and describes headers counting from most closest to most distant from the table.
     * The header levels are counted from 0 to N where 0 describes most distant header
     * from the table.
     *
     *  Header level            Row coords
     *           +--------------+
     *        0  â A1 â A1      â  -3
     *           +--------------+
     *        1  â B1 â B2 â B3 â  -2
     *           +--------------+
     *        2  â C1 â C2 â C3 â  -1
     *           +==============+
     *           â    â    â    â
     *           +--------------+
     *           â    â    â    â
     *
     * @param {number} headerLevel Header level index.
     * @returns {number} Returns negative number.
     */
    /* eslint-enable jsdoc/require-description-complete-sentence */
  }, {
    key: "levelToRowCoords",
    value: function(r) {
      if (r < 0)
        return null;
      var n = r - Math.max(this.getLayersCount(), 1);
      return n >= 0 ? null : n;
    }
    /**
     * Gets column header settings for a specified column and header index. The returned object contains
     * all information necessary for header renderers. It contains header label, colspan length, or hidden
     * flag.
     *
     * @param {number} headerLevel Header level (there is support for negative and positive values).
     * @param {number} columnIndex A visual column index.
     * @returns {object|null}
     */
  }, {
    key: "getHeaderSettings",
    value: function(r, n) {
      var o, i;
      return r < 0 && (r = this.rowCoordsToLevel(r)), r === null || r >= this.getLayersCount() ? null : (o = (i = xt(this, Qi)[r]) === null || i === void 0 ? void 0 : i[n]) !== null && o !== void 0 ? o : null;
    }
    /**
     * Gets tree data that is connected to the column header. The returned object contains all information
     * necessary for modifying tree structure (column collapsing, hiding, etc.). It contains a header
     * label, colspan length, or visual column index that indicates which column index the node is rendered from.
     *
     * @param {number} headerLevel Header level (there is support for negative and positive values).
     * @param {number} columnIndex A visual column index.
     * @returns {object|null}
     */
  }, {
    key: "getHeaderTreeNodeData",
    value: function(r, n) {
      if (r < 0 && (r = this.rowCoordsToLevel(r)), r === null || r >= this.getLayersCount())
        return null;
      var o = xt(this, Dr).getNode(r, n);
      return o ? EL({}, o.data) : null;
    }
    /**
     * The method is helpful in cases where the column index targets in-between currently
     * collapsed column. In that case, the method returns the left-most column index
     * where the nested header begins.
     *
     * @param {number} headerLevel Header level (there is support for negative and positive values).
     * @param {number} columnIndex A visual column index.
     * @returns {number}
     */
  }, {
    key: "findLeftMostColumnIndex",
    value: function(r, n) {
      var o, i = (o = this.getHeaderSettings(r, n)) !== null && o !== void 0 ? o : {
        isRoot: !0
      }, a = i.isRoot;
      if (a)
        return n;
      for (var l = n - 1; l >= 0; ) {
        var s, u = (s = this.getHeaderSettings(r, l)) !== null && s !== void 0 ? s : {
          isRoot: !0
        }, f = u.isRoot;
        if (f)
          break;
        l -= 1;
      }
      return l;
    }
    /**
     * Gets a total number of headers levels.
     *
     * @returns {number}
     */
  }, {
    key: "getLayersCount",
    value: function() {
      return xt(this, kn).getLayersCount();
    }
    /**
     * Gets a total number of columns count.
     *
     * @returns {number}
     */
  }, {
    key: "getColumnsCount",
    value: function() {
      return xt(this, kn).getColumnsCount();
    }
    /**
     * Clears the column state manager to the initial state.
     */
  }, {
    key: "clear",
    value: function() {
      ic(this, Qi, []), xt(this, kn).clear(), xt(this, Dr).clear();
    }
  }]), e;
}();
function xd(e) {
  "@babel/helpers - typeof";
  return xd = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, xd(e);
}
function ize(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function PL(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Jz(n.key), n);
  }
}
function aze(e, t, r) {
  return t && PL(e.prototype, t), r && PL(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function ac(e, t, r) {
  return t = Jz(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function Jz(e) {
  var t = lze(e, "string");
  return xd(t) === "symbol" ? t : String(t);
}
function lze(e, t) {
  if (xd(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (xd(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var sze = /* @__PURE__ */ function() {
  function e(t, r) {
    ize(this, e), ac(this, "hot", void 0), ac(this, "nestedHeaderSettingsGetter", void 0), ac(this, "layersCount", 0), ac(this, "container", void 0), ac(this, "widthsMap", void 0), this.hot = t, this.nestedHeaderSettingsGetter = r, this.widthsMap = this.hot.columnIndexMapper.createAndRegisterIndexMap("nestedHeaders.widthsMap", "physicalIndexToValue");
  }
  return aze(e, [{
    key: "setLayersCount",
    value: function(r) {
      return this.layersCount = r, this;
    }
    /**
     * Gets the column width based on the visual column index.
     *
     * @param {number} visualColumn Visual column index.
     * @returns {number|null}
     */
  }, {
    key: "getWidth",
    value: function(r) {
      return this.widthsMap.getValueAtIndex(this.hot.toPhysicalColumn(r));
    }
    /**
     * Build cache of the headers widths.
     */
  }, {
    key: "buildWidthsMap",
    value: function() {
      this.container = this.hot.rootDocument.createElement("div"), this.container.classList.add("handsontable", "htGhostTable", "htAutoSize"), this._buildGhostTable(this.container), this.hot.rootDocument.body.appendChild(this.container);
      var r = this.container.querySelectorAll("tr:last-of-type th"), n = r.length;
      this.widthsMap.clear();
      for (var o = 0; o < n; o++) {
        var i = this.hot.columnIndexMapper.getVisualFromRenderableIndex(o), a = this.hot.toPhysicalColumn(i);
        this.widthsMap.setValueAtIndex(a, r[o].offsetWidth);
      }
      this.container.parentNode.removeChild(this.container), this.container = null;
    }
    /**
     * Build temporary table for getting minimal columns widths.
     *
     * @private
     * @param {HTMLElement} container The element where the DOM nodes are injected.
     */
  }, {
    key: "_buildGhostTable",
    value: function(r) {
      for (var n = this.hot, o = n.rootDocument, i = n.columnIndexMapper, a = o.createDocumentFragment(), l = o.createElement("table"), s = !!this.hot.getSettings().dropdownMenu, u = i.getRenderableIndexesLength(), f = 0; f < this.layersCount; f++) {
        for (var c = o.createElement("tr"), h = 0; h < u; h++) {
          var d = i.getVisualFromRenderableIndex(h);
          d === null && (d = h);
          var y = o.createElement("th"), p = this.nestedHeaderSettingsGetter(f, d);
          if (p && (!p.isPlaceholder || p.isHidden)) {
            var g = p.label;
            s && (g += '<button class="changeType"></button>'), _f(y, g), y.colSpan = p.colspan, c.appendChild(y);
          }
        }
        l.appendChild(c);
      }
      a.appendChild(l), r.appendChild(a);
    }
    /**
     * Clear the widths cache.
     */
  }, {
    key: "clear",
    value: function() {
      this.widthsMap.clear(), this.container = null;
    }
  }]), e;
}();
const uze = sze;
function rf(e) {
  "@babel/helpers - typeof";
  return rf = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, rf(e);
}
var kL, $L;
function AL(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } }));
}
function fze(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function IL(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, eY(n.key), n);
  }
}
function cze(e, t, r) {
  return t && IL(e.prototype, t), r && IL(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function _a() {
  return typeof Reflect < "u" && Reflect.get ? _a = Reflect.get.bind() : _a = function(t, r, n) {
    var o = hze(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, _a.apply(this, arguments);
}
function hze(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = $o(e), e !== null); )
    ;
  return e;
}
function dze(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && kR(e, t);
}
function kR(e, t) {
  return kR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, kR(e, t);
}
function vze(e) {
  var t = pze();
  return function() {
    var n = $o(e), o;
    if (t) {
      var i = $o(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return yze(this, o);
  };
}
function yze(e, t) {
  if (t && (rf(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return dc(e);
}
function dc(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function pze() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function $o(e) {
  return $o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, $o(e);
}
function ML(e, t, r) {
  return t = eY(t), t in e ? Object.defineProperty(e, t, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = r, e;
}
function eY(e) {
  var t = mze(e, "string");
  return rf(t) === "symbol" ? t : String(t);
}
function mze(e, t) {
  if (rf(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (rf(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function xL(e, t, r) {
  gze(e, t), t.set(e, r);
}
function gze(e, t) {
  if (t.has(e))
    throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function jy(e, t, r) {
  var n = tY(e, t, "set");
  return bze(e, n, r), r;
}
function bze(e, t, r) {
  if (t.set)
    t.set.call(e, r);
  else {
    if (!t.writable)
      throw new TypeError("attempted to set read only private field");
    t.value = r;
  }
}
function Tt(e, t) {
  var r = tY(e, t, "get");
  return wze(e, r);
}
function tY(e, t, r) {
  if (!t.has(e))
    throw new TypeError("attempted to " + r + " private field on non-instance");
  return t.get(e);
}
function wze(e, t) {
  return t.get ? t.get.call(e) : t.value;
}
var DL = "nestedHeaders", Sze = 280, Lt = /* @__PURE__ */ new WeakMap(), ni = /* @__PURE__ */ new WeakMap(), Cze = /* @__PURE__ */ function(e) {
  dze(r, e);
  var t = vze(r);
  function r() {
    var n;
    fze(this, r);
    for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
      i[a] = arguments[a];
    return n = t.call.apply(t, [this].concat(i)), xL(dc(n), Lt, {
      writable: !0,
      value: new oze()
    }), xL(dc(n), ni, {
      writable: !0,
      value: null
    }), ML(dc(n), "ghostTable", new uze(n.hot, function(l, s) {
      return n.getHeaderSettings(l, s);
    })), ML(dc(n), "detectedOverlappedHeaders", !1), n;
  }
  return cze(r, [{
    key: "isEnabled",
    value: (
      /**
       * Check if plugin is enabled.
       *
       * @returns {boolean}
       */
      function() {
        return !!this.hot.getSettings()[DL];
      }
    )
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      if (!this.enabled) {
        var i = this.hot.getSettings(), a = i.nestedHeaders;
        (!Array.isArray(a) || !Array.isArray(a[0])) && ht(ut(kL || (kL = AL([`Your Nested Headers plugin configuration is invalid. The settings has to be 
                        passed as an array of arrays e.q. [['A1', { label: 'A2', colspan: 2 }]]`], [`Your Nested Headers plugin configuration is invalid. The settings has to be\\x20
                        passed as an array of arrays e.q. [['A1', { label: 'A2', colspan: 2 }]]`])))), this.addHook("init", function() {
          return o.onInit();
        }), this.addHook("afterLoadData", function() {
          return o.onAfterLoadData.apply(o, arguments);
        }), this.addHook("beforeOnCellMouseDown", function() {
          return o.onBeforeOnCellMouseDown.apply(o, arguments);
        }), this.addHook("afterOnCellMouseDown", function() {
          return o.onAfterOnCellMouseDown.apply(o, arguments);
        }), this.addHook("beforeOnCellMouseOver", function() {
          return o.onBeforeOnCellMouseOver.apply(o, arguments);
        }), this.addHook("afterGetColumnHeaderRenderers", function(l) {
          return o.onAfterGetColumnHeaderRenderers(l);
        }), this.addHook("modifyColWidth", function() {
          return o.onModifyColWidth.apply(o, arguments);
        }), this.addHook("modifyColumnHeaderValue", function() {
          return o.onModifyColumnHeaderValue.apply(o, arguments);
        }), this.addHook("beforeHighlightingColumnHeader", function() {
          return o.onBeforeHighlightingColumnHeader.apply(o, arguments);
        }), this.addHook("beforeCopy", function() {
          return o.onBeforeCopy.apply(o, arguments);
        }), this.addHook("afterViewportColumnCalculatorOverride", function() {
          return o.onAfterViewportColumnCalculatorOverride.apply(o, arguments);
        }), _a($o(r.prototype), "enablePlugin", this).call(this), this.updatePlugin();
      }
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`nestedHeaders`](@/api/options.md#nestedheaders)
     */
  }, {
    key: "updatePlugin",
    value: function() {
      var o = this;
      if (this.hot.view) {
        var i = this.hot.getSettings(), a = i.nestedHeaders;
        Tt(this, Lt).setColumnsLimit(this.hot.countCols()), Array.isArray(a) && (this.detectedOverlappedHeaders = Tt(this, Lt).setState(a)), this.detectedOverlappedHeaders && ht(ut($L || ($L = AL([`Your Nested Headers plugin setup contains overlapping headers. This kind of configuration 
                        is currently not supported.`], [`Your Nested Headers plugin setup contains overlapping headers. This kind of configuration\\x20
                        is currently not supported.`])))), this.enabled && this.hot.columnIndexMapper.hidingMapsCollection.getMergedValues().forEach(function(l, s) {
          var u = l === !0 ? "hide-column" : "show-column";
          Tt(o, Lt).triggerColumnModification(u, s);
        }), !Tt(this, ni) && this.enabled && jy(this, ni, this.hot.columnIndexMapper.createChangesObserver("hiding").subscribe(function(l) {
          l.forEach(function(s) {
            var u = s.op, f = s.index, c = s.newValue;
            if (u === "replace") {
              var h = c === !0 ? "hide-column" : "show-column";
              Tt(o, Lt).triggerColumnModification(h, f);
            }
          }), o.ghostTable.buildWidthsMap();
        })), this.ghostTable.setLayersCount(this.getLayersCount()).buildWidthsMap(), _a($o(r.prototype), "updatePlugin", this).call(this);
      }
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      this.clearColspans(), Tt(this, Lt).clear(), Tt(this, ni).unsubscribe(), jy(this, ni, null), this.ghostTable.clear(), _a($o(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Returns an instance of the internal state manager of the plugin.
     *
     * @private
     * @returns {StateManager}
     */
  }, {
    key: "getStateManager",
    value: function() {
      return Tt(this, Lt);
    }
    /**
     * Gets a total number of headers levels.
     *
     * @private
     * @returns {number}
     */
  }, {
    key: "getLayersCount",
    value: function() {
      return Tt(this, Lt).getLayersCount();
    }
    /**
     * Gets column settings for a specified header. The returned object contains
     * information about the header label, its colspan length, or if it is hidden
     * in the header renderers.
     *
     * @private
     * @param {number} headerLevel Header level (0 = most distant to the table).
     * @param {number} columnIndex A visual column index.
     * @returns {object}
     */
  }, {
    key: "getHeaderSettings",
    value: function(o, i) {
      return Tt(this, Lt).getHeaderSettings(o, i);
    }
    /**
     * Clear the colspans remaining after plugin usage.
     *
     * @private
     */
  }, {
    key: "clearColspans",
    value: function() {
      if (this.hot.view)
        for (var o = this.hot.view._wt, i = o.getSetting("columnHeaders").length, a = o.wtTable.THEAD, l = o.wtOverlays.topOverlay.clone.wtTable.THEAD, s = o.wtOverlays.topInlineStartCornerOverlay ? o.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.THEAD : null, u = 0; u < i; u++) {
          var f = a.childNodes[u];
          if (!f)
            break;
          for (var c = l.childNodes[u], h = s ? s.childNodes[u] : null, d = 0, y = f.childNodes.length; d < y; d++)
            f.childNodes[d].removeAttribute("colspan"), Le(f.childNodes[d], "hiddenHeader"), c && c.childNodes[d] && (c.childNodes[d].removeAttribute("colspan"), Le(c.childNodes[d], "hiddenHeader")), s && h && h.childNodes[d] && (h.childNodes[d].removeAttribute("colspan"), Le(h.childNodes[d], "hiddenHeader"));
        }
    }
    /**
     * Generates the appropriate header renderer for a header row.
     *
     * @private
     * @param {number} headerLevel The index of header level counting from the top (positive
     *                             values counting from 0 to N).
     * @returns {Function}
     * @fires Hooks#afterGetColHeader
     */
  }, {
    key: "headerRendererFactory",
    value: function(o) {
      var i = this, a = this.hot.view._wt.getSetting("fixedColumnsStart");
      return function(l, s) {
        var u, f = i.hot, c = f.columnIndexMapper, h = f.view, d = c.getVisualFromRenderableIndex(l);
        d === null && (d = l), s.removeAttribute("colspan"), Le(s, "hiddenHeader");
        var y = (u = Tt(i, Lt).getHeaderSettings(o, d)) !== null && u !== void 0 ? u : {
          label: ""
        }, p = y.colspan, g = y.isHidden, w = y.isPlaceholder;
        if (w || g)
          ae(s, "hiddenHeader");
        else if (p > 1) {
          var C, _, k = h._wt.wtOverlays, E = (C = k.topInlineStartCornerOverlay) === null || C === void 0 ? void 0 : C.clone.wtTable.THEAD.contains(s), j = (_ = k.inlineStartOverlay) === null || _ === void 0 ? void 0 : _.clone.wtTable.THEAD.contains(s), Y = E || j ? Math.min(p, a - l) : p;
          Y > 1 && s.setAttribute("colspan", Y);
        }
        i.hot.view.appendColHeader(d, s, function() {
          return i.getColumnHeaderValue.apply(i, arguments);
        }, o);
      };
    }
    /**
     * Returns the column header value for specified column and header level index.
     *
     * @private
     * @param {number} visualColumnIndex Visual column index.
     * @param {number} headerLevel The index of header level. The header level accepts positive (0 to N)
     *                             and negative (-1 to -N) values. For positive values, 0 points to the
     *                             top most header, and for negative direction, -1 points to the most bottom
     *                             header (the header closest to the cells).
     * @returns {string} Returns the column header value to update.
     */
  }, {
    key: "getColumnHeaderValue",
    value: function(o, i) {
      var a, l = (a = Tt(this, Lt).getHeaderSettings(i, o)) !== null && a !== void 0 ? a : {}, s = l.isHidden, u = l.isPlaceholder;
      return u || s ? "" : this.hot.getColHeader(o, i);
    }
    /**
     * Allows to control which header DOM element will be used to highlight.
     *
     * @private
     * @param {number} visualColumn A visual column index of the highlighted row header.
     * @param {number} headerLevel A row header level that is currently highlighted.
     * @param {object} highlightMeta An object with meta data that describes the highlight state.
     * @returns {number}
     */
  }, {
    key: "onBeforeHighlightingColumnHeader",
    value: function(o, i, a) {
      var l = Tt(this, Lt).getHeaderTreeNodeData(i, o);
      if (!l)
        return o;
      var s = a.classNames, u = a.columnCursor, f = a.selectionType, c = a.selectionWidth, h = Tt(this, Lt).getHeaderSettings(i, o), d = h.isRoot, y = h.colspan;
      if (f === bv) {
        if (!d)
          return l.columnIndex;
      } else
        f === Hg && (y > c - u || !d) && (s.length = 0);
      return o;
    }
    /**
     * Listens the `beforeCopy` hook that allows processing the copied column headers so that the
     * merged column headers do not propagate the value for each column but only once at the beginning
     * of the column.
     *
     * @private
     * @param {Array[]} data An array of arrays which contains data to copied.
     * @param {object[]} copyableRanges An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)
     *                                  which will copied.
     * @param {{ columnHeadersCount: number }} copiedHeadersCount An object with keys that holds information with
     *                                                            the number of copied headers.
     */
  }, {
    key: "onBeforeCopy",
    value: function(o, i, a) {
      var l = a.columnHeadersCount;
      if (l !== 0)
        for (var s = 0; s < i.length; s++) {
          var u = i[s], f = u.startRow, c = u.startCol, h = u.endRow, d = u.endCol, y = h - f + 1, p = c - d + 1;
          if (f >= 0 || p === 1)
            break;
          for (var g = c; g <= d; g++)
            for (var w = f; w <= h; w++) {
              var C, _ = y + w, k = g - c;
              if (k !== 0) {
                var E = (C = Tt(this, Lt).getHeaderTreeNodeData(w, g)) === null || C === void 0 ? void 0 : C.isRoot;
                E === !1 && (o[_][k] = "");
              }
            }
        }
    }
    /**
     * Allows blocking the column selection that is controlled by the core Selection module.
     *
     * @private
     * @param {MouseEvent} event Mouse event.
     * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.
     * @param {CellCoords} TD The table cell or header element.
     * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
     *                            a boolean value that allows or disallows changing the selection for that particular area.
     */
  }, {
    key: "onBeforeOnCellMouseDown",
    value: function(o, i, a, l) {
      var s = this._getHeaderTreeNodeDataByCoords(i);
      s && (l.column = !0);
    }
    /**
     * Allows to control how the column selection based on the coordinates and the nested headers is made.
     *
     * @private
     * @param {MouseEvent} event Mouse event.
     * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.
     */
  }, {
    key: "onAfterOnCellMouseDown",
    value: function(o, i) {
      var a = this._getHeaderTreeNodeDataByCoords(i);
      if (a) {
        var l = this.hot.selection, s = l.isSelected() ? l.getSelectedRange().current() : null, u = [], f = a.columnIndex, c = a.origColspan, h = !l.inInSelection(i);
        o.shiftKey && s ? i.col < s.from.col ? u.push(s.getTopEndCorner().col, f, i.row) : i.col > s.from.col ? u.push(s.getTopStartCorner().col, f + c - 1, i.row) : u.push(f, f + c - 1, i.row) : (pT(o) || Na(o) && h) && u.push(f, f + c - 1, i.row), l.selectColumns.apply(l, u);
      }
    }
    /**
     * Makes the header-selection properly select the nested headers.
     *
     * @private
     * @param {MouseEvent} event Mouse event.
     * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.
     * @param {HTMLElement} TD The cell element.
     * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains
     *                            a boolean value that allows or disallows changing the selection for that particular area.
     */
  }, {
    key: "onBeforeOnCellMouseOver",
    value: function(o, i, a, l) {
      var s;
      if (this.hot.view.isMouseDown()) {
        var u = this._getHeaderTreeNodeDataByCoords(i);
        if (u) {
          var f = u.columnIndex, c = u.origColspan, h = this.hot.getSelectedRangeLast(), d = h.getTopStartCorner(), y = h.getBottomEndCorner(), p = h.from;
          l.column = !0, l.cell = !0;
          var g = [];
          i.col < p.col ? g.push(y.col, f) : i.col > p.col ? g.push(d.col, f + c - 1) : g.push(f, f + c - 1), (s = this.hot).selectColumns.apply(s, g);
        }
      }
    }
    /**
     * `afterGetColumnHeader` hook callback - prepares the header structure.
     *
     * @private
     * @param {Array} renderersArray Array of renderers.
     */
  }, {
    key: "onAfterGetColumnHeaderRenderers",
    value: function(o) {
      o.length = 0;
      for (var i = 0; i < Tt(this, Lt).getLayersCount(); i++)
        o.push(this.headerRendererFactory(i));
    }
    /**
     * Make the renderer render the first nested column in its entirety.
     *
     * @private
     * @param {object} calc Viewport column calculator.
     */
  }, {
    key: "onAfterViewportColumnCalculatorOverride",
    value: function(o) {
      for (var i = Tt(this, Lt).getLayersCount(), a = o.startColumn, l = !!i, s = 0; s < i; s++) {
        var u = Tt(this, Lt).findLeftMostColumnIndex(s, o.startColumn), f = this.hot.columnIndexMapper.getRenderableFromVisualIndex(u);
        if (u >= 0 && (l = !1), Er(f) && f < o.startColumn) {
          a = f;
          break;
        }
      }
      o.startColumn = l ? Tt(this, Lt).getHeaderTreeNodeData(0, a).columnIndex : a;
    }
    /**
     * `modifyColWidth` hook callback - returns width from cache, when is greater than incoming from hook.
     *
     * @private
     * @param {number} width Width from hook.
     * @param {number} column Visual index of an column.
     * @returns {number}
     */
  }, {
    key: "onModifyColWidth",
    value: function(o, i) {
      var a = this.ghostTable.getWidth(i);
      return o > a ? o : a;
    }
    /**
     * Listens the `modifyColumnHeaderValue` hook that overwrites the column headers values based on
     * the internal state and settings of the plugin.
     *
     * @private
     * @param {string} value The column header value.
     * @param {number} visualColumnIndex The visual column index.
     * @param {number} headerLevel The index of header level. The header level accepts positive (0 to N)
     *                             and negative (-1 to -N) values. For positive values, 0 points to the
     *                             top most header, and for negative direction, -1 points to the most bottom
     *                             header (the header closest to the cells).
     * @returns {string} Returns the column header value to update.
     */
  }, {
    key: "onModifyColumnHeaderValue",
    value: function(o, i, a) {
      var l, s = (l = Tt(this, Lt).getHeaderTreeNodeData(a, i)) !== null && l !== void 0 ? l : {
        label: ""
      }, u = s.label;
      return u;
    }
    /**
     * Updates the plugin state after HoT initialization.
     *
     * @private
     */
  }, {
    key: "onInit",
    value: function() {
      this.updatePlugin();
    }
    /**
     * Updates the plugin state after new dataset load.
     *
     * @private
     * @param {Array[]} sourceData Array of arrays or array of objects containing data.
     * @param {boolean} initialLoad Flag that determines whether the data has been loaded
     *                              during the initialization.
     */
  }, {
    key: "onAfterLoadData",
    value: function(o, i) {
      i || this.updatePlugin();
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      jy(this, Lt, null), Tt(this, ni) !== null && (Tt(this, ni).unsubscribe(), jy(this, ni, null)), _a($o(r.prototype), "destroy", this).call(this);
    }
    /**
     * Gets the tree data that belongs to the column headers pointed by the passed coordinates.
     *
     * @private
     * @param {CellCoords} coords The CellCoords instance.
     * @returns {object|undefined}
     */
  }, {
    key: "_getHeaderTreeNodeDataByCoords",
    value: function(o) {
      if (!(o.row >= 0 || o.col < 0))
        return Tt(this, Lt).getHeaderTreeNodeData(o.row, o.col);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return DL;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return Sze;
    }
  }]), r;
}(ft);
function NL(e) {
  return Eze(e) || Rze(e) || Oze(e) || _ze();
}
function _ze() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function Oze(e, t) {
  if (e) {
    if (typeof e == "string")
      return $R(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return $R(e, t);
  }
}
function Rze(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function Eze(e) {
  if (Array.isArray(e))
    return $R(e);
}
function $R(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function nf(e) {
  "@babel/helpers - typeof";
  return nf = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, nf(e);
}
function Tze(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function HL(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, kze(n.key), n);
  }
}
function Pze(e, t, r) {
  return t && HL(e.prototype, t), r && HL(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function kze(e) {
  var t = $ze(e, "string");
  return nf(t) === "symbol" ? t : String(t);
}
function $ze(e, t) {
  if (nf(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (nf(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var Aze = /* @__PURE__ */ function() {
  function e(t, r) {
    Tze(this, e), this.hot = r, this.data = null, this.plugin = t, this.parentReference = /* @__PURE__ */ new WeakMap(), this.cache = {
      levels: [],
      levelCount: 0,
      rows: [],
      nodeInfo: /* @__PURE__ */ new WeakMap()
    };
  }
  return Pze(e, [{
    key: "setData",
    value: function(r) {
      this.data = r;
    }
    /**
     * Get the data cached in the manager.
     *
     * @returns {Handsontable.CellValue[][]|Handsontable.RowObject[]}
     */
  }, {
    key: "getData",
    value: function() {
      return this.data;
    }
    /**
     * Load the "raw" source data, without NestedRows' modifications.
     *
     * @returns {Handsontable.CellValue[][]|Handsontable.RowObject[]}
     */
  }, {
    key: "getRawSourceData",
    value: function() {
      var r = null;
      return this.plugin.disableCoreAPIModifiers(), r = this.hot.getSourceData(), this.plugin.enableCoreAPIModifiers(), r;
    }
    /**
     * Update the Data Manager with new data and refresh cache.
     *
     * @param {Handsontable.CellValue[][]|Handsontable.RowObject[]} data Data for the manager.
     */
  }, {
    key: "updateWithData",
    value: function(r) {
      this.setData(r), this.rewriteCache();
    }
    /**
     * Rewrite the nested structure cache.
     *
     * @private
     */
  }, {
    key: "rewriteCache",
    value: function() {
      var r = this;
      this.cache = {
        levels: [],
        levelCount: 0,
        rows: [],
        nodeInfo: /* @__PURE__ */ new WeakMap()
      }, _e(0, this.data.length - 1, function(n) {
        r.cacheNode(r.data[n], 0, null);
      });
    }
    /**
     * Cache a data node.
     *
     * @private
     * @param {object} node Node to cache.
     * @param {number} level Level of the node.
     * @param {object} parent Parent of the node.
     */
  }, {
    key: "cacheNode",
    value: function(r, n, o) {
      var i = this;
      this.cache.levels[n] || (this.cache.levels[n] = [], this.cache.levelCount += 1), this.cache.levels[n].push(r), this.cache.rows.push(r), this.cache.nodeInfo.set(r, {
        parent: o,
        row: this.cache.rows.length - 1,
        level: n
      }), this.hasChildren(r) && I(r.__children, function(a) {
        i.cacheNode(a, n + 1, r);
      });
    }
    /**
     * Get the date for the provided visual row number.
     *
     * @param {number} row Row index.
     * @returns {object}
     */
  }, {
    key: "getDataObject",
    value: function(r) {
      return r == null ? null : this.cache.rows[r];
    }
    /**
     * Read the row tree in search for a specific row index or row object.
     *
     * @private
     * @param {object} parent The initial parent object.
     * @param {number} readCount Number of read nodes.
     * @param {number} neededIndex The row index we search for.
     * @param {object} neededObject The row object we search for.
     * @returns {number|object}
     */
  }, {
    key: "readTreeNodes",
    value: function(r, n, o, i) {
      var a = this, l = !1, s = n;
      if (isNaN(s) && s.end)
        return s;
      var u = r;
      return u || (u = {
        __children: this.data
      }, l = !0, s -= 1), o != null && s === o ? {
        result: u,
        end: !0
      } : i != null && u === i ? {
        result: s,
        end: !0
      } : (s += 1, u.__children && I(u.__children, function(f) {
        if (a.parentReference.set(f, l ? null : u), s = a.readTreeNodes(f, s, o, i), isNaN(s) && s.end)
          return !1;
      }), s);
    }
    /**
     * Mock a parent node.
     *
     * @private
     * @returns {*}
     */
  }, {
    key: "mockParent",
    value: function() {
      var r = this.mockNode();
      return r.__children = this.data, r;
    }
    /**
     * Mock a data node.
     *
     * @private
     * @returns {{}}
     */
  }, {
    key: "mockNode",
    value: function() {
      var r = {};
      return Ye(this.data[0], function(n, o) {
        r[o] = null;
      }), r;
    }
    /**
     * Get the row index for the provided row object.
     *
     * @param {object} rowObj The row object.
     * @returns {number} Row index.
     */
  }, {
    key: "getRowIndex",
    value: function(r) {
      return r == null ? null : this.cache.nodeInfo.get(r).row;
    }
    /**
     * Get the index of the provided row index/row object within its parent.
     *
     * @param {number|object} row Row index / row object.
     * @returns {number}
     */
  }, {
    key: "getRowIndexWithinParent",
    value: function(r) {
      var n = null;
      isNaN(r) ? n = r : n = this.getDataObject(r);
      var o = this.getRowParent(r);
      return o == null ? this.data.indexOf(n) : o.__children.indexOf(n);
    }
    /**
     * Count all rows (including all parents and children).
     *
     * @returns {number}
     */
  }, {
    key: "countAllRows",
    value: function() {
      var r = {
        __children: this.data
      };
      return this.countChildren(r);
    }
    /**
     * Count children of the provided parent.
     *
     * @param {object|number} parent Parent node.
     * @returns {number} Children count.
     */
  }, {
    key: "countChildren",
    value: function(r) {
      var n = this, o = 0, i = r;
      return isNaN(i) || (i = this.getDataObject(i)), !i || !i.__children ? 0 : (I(i.__children, function(a) {
        o += 1, a.__children && (o += n.countChildren(a));
      }), o);
    }
    /**
     * Get the parent of the row at the provided index.
     *
     * @param {number|object} row Physical row index.
     * @returns {object}
     */
  }, {
    key: "getRowParent",
    value: function(r) {
      var n;
      return isNaN(r) ? n = r : n = this.getDataObject(r), this.getRowObjectParent(n);
    }
    /**
     * Get the parent of the provided row object.
     *
     * @private
     * @param {object} rowObject The row object (tree node).
     * @returns {object|null}
     */
  }, {
    key: "getRowObjectParent",
    value: function(r) {
      return !r || nf(r) !== "object" ? null : this.cache.nodeInfo.get(r).parent;
    }
    /**
     * Get the nesting level for the row with the provided row index.
     *
     * @param {number} row Row index.
     * @returns {number|null} Row level or null, when row doesn't exist.
     */
  }, {
    key: "getRowLevel",
    value: function(r) {
      var n = null;
      return isNaN(r) ? n = r : n = this.getDataObject(r), n ? this.getRowObjectLevel(n) : null;
    }
    /**
     * Get the nesting level for the row with the provided row index.
     *
     * @private
     * @param {object} rowObject Row object.
     * @returns {number} Row level.
     */
  }, {
    key: "getRowObjectLevel",
    value: function(r) {
      return r == null ? null : this.cache.nodeInfo.get(r).level;
    }
    /**
     * Check if the provided row/row element has children.
     *
     * @param {number|object} row Row number or row element.
     * @returns {boolean}
     */
  }, {
    key: "hasChildren",
    value: function(r) {
      var n = r;
      return isNaN(n) || (n = this.getDataObject(n)), !!(n.__children && n.__children.length);
    }
    /**
     * Returns `true` if the row at the provided index has a parent.
     *
     * @param {number} index Row index.
     * @returns {boolean} `true` if the row at the provided index has a parent, `false` otherwise.
     */
  }, {
    key: "isChild",
    value: function(r) {
      return this.getRowParent(r) !== null;
    }
    /**
     * Get child at a provided index from the parent element.
     *
     * @param {object} parent The parent row object.
     * @param {number} index Index of the child element to be retrieved.
     * @returns {object|null} The child element or `null` if the child doesn't exist.
     */
  }, {
    key: "getChild",
    value: function(r, n) {
      var o;
      return ((o = r.__children) === null || o === void 0 ? void 0 : o[n]) || null;
    }
    /**
     * Return `true` of the row at the provided index is located at the topmost level.
     *
     * @param {number} index Row index.
     * @returns {boolean} `true` of the row at the provided index is located at the topmost level, `false` otherwise.
     */
  }, {
    key: "isRowHighestLevel",
    value: function(r) {
      return !this.isChild(r);
    }
    /**
     * Return `true` if the provided row index / row object represents a parent in the nested structure.
     *
     * @param {number|object} row Row index / row object.
     * @returns {boolean} `true` if the row is a parent, `false` otherwise.
     */
  }, {
    key: "isParent",
    value: function(r) {
      var n, o = r;
      return isNaN(o) || (o = this.getDataObject(o)), o && !!o.__children && ((n = o.__children) === null || n === void 0 ? void 0 : n.length) !== 0;
    }
    /**
     * Add a child to the provided parent. It's optional to add a row object as the "element".
     *
     * @param {object} parent The parent row object.
     * @param {object} [element] The element to add as a child.
     */
  }, {
    key: "addChild",
    value: function(r, n) {
      var o = n;
      this.hot.runHooks("beforeAddChild", r, o);
      var i = null;
      r && (i = this.getRowIndex(r)), this.hot.runHooks("beforeCreateRow", i + this.countChildren(r) + 1, 1);
      var a = r;
      r || (a = this.mockParent()), a.__children || (a.__children = []), o || (o = this.mockNode()), a.__children.push(o), this.rewriteCache();
      var l = this.getRowIndex(o);
      this.hot.rowIndexMapper.insertIndexes(l, 1), this.hot.runHooks("afterCreateRow", l, 1), this.hot.runHooks("afterAddChild", r, o);
    }
    /**
     * Add a child node to the provided parent at a specified index.
     *
     * @param {object} parent Parent node.
     * @param {number} index Index to insert the child element at.
     * @param {object} [element] Element (node) to insert.
     */
  }, {
    key: "addChildAtIndex",
    value: function(r, n, o) {
      var i = o, a;
      if (i || (i = this.mockNode()), this.hot.runHooks("beforeAddChild", r, i, n), r) {
        var l = this.getRowIndex(r), s = l + n + 1;
        this.hot.runHooks("beforeCreateRow", s, 1), r.__children.splice(n, null, i), this.rewriteCache(), this.plugin.disableCoreAPIModifiers(), this.hot.setSourceDataAtCell(this.getRowIndexWithinParent(r), "__children", r.__children, "NestedRows.addChildAtIndex"), this.hot.rowIndexMapper.insertIndexes(s, 1), this.plugin.enableCoreAPIModifiers(), this.hot.runHooks("afterCreateRow", s, 1), a = s;
      } else
        this.plugin.disableCoreAPIModifiers(), this.hot.alter("insert_row_above", n, 1, "NestedRows.addChildAtIndex"), this.plugin.enableCoreAPIModifiers(), a = this.getRowIndex(this.data[n]);
      i = this.getDataObject(a), this.hot.runHooks("afterAddChild", r, i, n);
    }
    /**
     * Add a sibling element at the specified index.
     *
     * @param {number} index New element sibling's index.
     * @param {('above'|'below')} where Direction in which the sibling is to be created.
     */
  }, {
    key: "addSibling",
    value: function(r) {
      var n = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "below", o = this.translateTrimmedRow(r), i = this.getRowParent(o), a = this.getRowIndexWithinParent(o);
      switch (n) {
        case "below":
          this.addChildAtIndex(i, a + 1, null);
          break;
        case "above":
          this.addChildAtIndex(i, a, null);
          break;
      }
    }
    /**
     * Detach the provided element from its parent and add it right after it.
     *
     * @param {object|Array} elements Row object or an array of selected coordinates.
     * @param {boolean} [forceRender=true] If true (default), it triggers render after finished.
     */
  }, {
    key: "detachFromParent",
    value: function(r) {
      var n = this, o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, i = null, a = [];
      Array.isArray(r) ? (_e(r[0], r[2], function(w) {
        var C = n.translateTrimmedRow(w);
        a.push(n.getDataObject(C));
      }), _e(0, a.length - 2, function(w) {
        n.detachFromParent(a[w], !1);
      }), i = a[a.length - 1]) : i = r;
      var l = this.getRowIndex(i), s = this.countChildren(i), u = this.getRowIndexWithinParent(i), f = this.getRowParent(i), c = this.getRowParent(f), h = this.getRowIndex(c), d = null;
      if (this.hot.runHooks("beforeDetachChild", f, i), u != null) {
        var y = Array.from(new Array(l + s + 1).keys()).splice(-1 * (s + 1));
        if (this.hot.runHooks("beforeRemoveRow", l, s + 1, y, this.plugin.pluginName), f.__children.splice(u, 1), this.rewriteCache(), this.hot.runHooks("afterRemoveRow", l, s + 1, y, this.plugin.pluginName), c) {
          d = h + this.countChildren(c);
          var p = this.getChild(c, this.countChildren(c) - 1), g = this.getRowIndex(p);
          this.hot.runHooks("beforeCreateRow", g + 1, s + 1, this.plugin.pluginName), c.__children.push(i);
        } else
          d = this.hot.countRows() + 1, this.hot.runHooks("beforeCreateRow", d - 2, s + 1, this.plugin.pluginName), this.data.push(i);
      }
      this.rewriteCache(), this.hot.runHooks("afterCreateRow", d - 2, s + 1, this.plugin.pluginName), this.hot.runHooks("afterDetachChild", f, i, this.getRowIndex(i)), o && this.hot.render();
    }
    /**
     * Filter the data by the `logicRows` array.
     *
     * @private
     * @param {number} index Index of the first row to remove.
     * @param {number} amount Number of elements to remove.
     * @param {Array} logicRows Array of indexes to remove.
     */
  }, {
    key: "filterData",
    value: function(r, n, o) {
      var i = this, a = [];
      I(o, function(l) {
        a.push(i.getDataObject(l));
      }), I(a, function(l) {
        var s = i.getRowIndexWithinParent(l), u = i.getRowParent(l);
        u === null ? i.data.splice(s, 1) : u.__children.splice(s, 1);
      }), this.rewriteCache();
    }
    /**
     * Used to splice the source data. Needed to properly modify the nested structure, which wouldn't work with the
     * default script.
     *
     * @private
     * @param {number} index Physical index of the element at the splice beginning.
     * @param {number} amount Number of elements to be removed.
     * @param {object[]} elements Array of row objects to add.
     */
  }, {
    key: "spliceData",
    value: function(r, n, o) {
      var i = this.getDataObject(r - 1), a = null, l = r;
      if (i && i.__children && i.__children.length === 0 ? (a = i, l = 0) : r < this.countAllRows() && (a = this.getRowParent(r), l = this.getRowIndexWithinParent(r)), a)
        if (o) {
          var s;
          (s = a.__children).splice.apply(s, [l, n].concat(NL(o)));
        } else
          a.__children.splice(l, n);
      else if (o) {
        var u;
        (u = this.data).splice.apply(u, [l, n].concat(NL(o)));
      } else
        this.data.splice(l, n);
      this.rewriteCache();
    }
    /**
     * Update the `__children` key of the upmost parent of the provided row object.
     *
     * @private
     * @param {object} rowElement Row object.
     */
  }, {
    key: "syncRowWithRawSource",
    value: function(r) {
      var n = r, o = null;
      do
        o = this.getRowParent(o), o !== null && (n = o);
      while (o !== null);
      this.plugin.disableCoreAPIModifiers(), this.hot.setSourceDataAtCell(this.getRowIndex(n), "__children", n.__children, "NestedRows.syncRowWithRawSource"), this.plugin.enableCoreAPIModifiers();
    }
    /* eslint-disable jsdoc/require-param */
    /**
     * Move a single row.
     *
     * @param {number} fromIndex Index of the row to be moved.
     * @param {number} toIndex Index of the destination.
     * @param {boolean} moveToCollapsed `true` if moving a row to a collapsed parent.
     * @param {boolean} moveToLastChild `true` if moving a row to be a last child of the new parent.
     */
    /* eslint-enable jsdoc/require-param */
  }, {
    key: "moveRow",
    value: function(r, n, o, i) {
      var a = n === this.hot.countRows(), l = this.getRowParent(r), s = this.getRowIndexWithinParent(r), u = l.__children.slice(s, s + 1), f = r > n, c = a ? this.getRowParent(n - 1) : this.getRowParent(n);
      c == null && (c = this.getRowParent(n - 1)), c == null && (c = this.getDataObject(n - 1)), c ? c.__children || (c.__children = []) : (c = this.getDataObject(n), c.__children = []);
      var h = a || o || i ? c.__children.length : this.getRowIndexWithinParent(n), d = l === c;
      c.__children.splice(h, 0, u[0]), l.__children.splice(s + (f && d ? 1 : 0), 1), this.syncRowWithRawSource(l), d || this.syncRowWithRawSource(c);
    }
    /**
     * Translate the visual row index to the physical index, taking into consideration the state of collapsed rows.
     *
     * @private
     * @param {number} row Row index.
     * @returns {number}
     */
  }, {
    key: "translateTrimmedRow",
    value: function(r) {
      return this.plugin.collapsingUI ? this.plugin.collapsingUI.translateTrimmedRow(r) : r;
    }
    /**
     * Translate the physical row index to the visual index, taking into consideration the state of collapsed rows.
     *
     * @private
     * @param {number} row Row index.
     * @returns {number}
     */
  }, {
    key: "untranslateTrimmedRow",
    value: function(r) {
      return this.plugin.collapsingUI ? this.plugin.collapsingUI.untranslateTrimmedRow(r) : r;
    }
  }]), e;
}();
const Ize = Aze;
function Dd(e) {
  "@babel/helpers - typeof";
  return Dd = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Dd(e);
}
function LL(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, xze(n.key), n);
  }
}
function Mze(e, t, r) {
  return t && LL(e.prototype, t), r && LL(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function xze(e) {
  var t = Dze(e, "string");
  return Dd(t) === "symbol" ? t : String(t);
}
function Dze(e, t) {
  if (Dd(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Dd(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Nze(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
var Hze = /* @__PURE__ */ Mze(function e(t, r) {
  Nze(this, e), this.hot = r, this.plugin = t;
});
const NP = Hze;
function of(e) {
  "@babel/helpers - typeof";
  return of = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, of(e);
}
function Lze(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function jL(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, Fze(n.key), n);
  }
}
function jze(e, t, r) {
  return t && jL(e.prototype, t), r && jL(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function Fze(e) {
  var t = Bze(e, "string");
  return of(t) === "symbol" ? t : String(t);
}
function Bze(e, t) {
  if (of(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (of(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Vze(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && AR(e, t);
}
function AR(e, t) {
  return AR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, AR(e, t);
}
function Wze(e) {
  var t = Yze();
  return function() {
    var n = Wm(e), o;
    if (t) {
      var i = Wm(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return Uze(this, o);
  };
}
function Uze(e, t) {
  if (t && (of(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return zze(e);
}
function zze(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function Yze() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Wm(e) {
  return Wm = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Wm(e);
}
var Gze = /* @__PURE__ */ function(e) {
  Vze(r, e);
  var t = Wze(r);
  function r(n, o) {
    var i;
    return Lze(this, r), i = t.call(this, n, o), i.dataManager = i.plugin.dataManager, i.collapsingUI = i.plugin.collapsingUI, i.rowHeaderWidthCache = null, i;
  }
  return jze(r, [{
    key: "appendLevelIndicators",
    value: function(o, i) {
      var a = this.hot.toPhysicalRow(o), l = this.dataManager.getRowLevel(a), s = this.dataManager.getDataObject(a), u = i.getElementsByTagName("DIV")[0], f = u.querySelector("span.rowHeader"), c = u.querySelectorAll('[class^="ht_nesting"]');
      if (I(c, function(p) {
        p && u.removeChild(p);
      }), ae(i, r.CSS_CLASSES.indicatorContainer), l) {
        var h = this.hot.rootDocument, d = f.cloneNode(!0);
        u.innerHTML = "", _e(0, l - 1, function() {
          var p = h.createElement("SPAN");
          ae(p, r.CSS_CLASSES.emptyIndicator), u.appendChild(p);
        }), u.appendChild(d);
      }
      if (this.dataManager.hasChildren(s)) {
        var y = this.hot.rootDocument.createElement("DIV");
        ae(i, r.CSS_CLASSES.parent), this.collapsingUI.areChildrenCollapsed(a) ? ae(y, "".concat(r.CSS_CLASSES.button, " ").concat(r.CSS_CLASSES.expandButton)) : ae(y, "".concat(r.CSS_CLASSES.button, " ").concat(r.CSS_CLASSES.collapseButton)), u.appendChild(y);
      }
    }
    /**
     * Update the row header width according to number of levels in the dataset.
     *
     * @private
     * @param {number} deepestLevel Cached deepest level of nesting.
     */
  }, {
    key: "updateRowHeaderWidth",
    value: function(o) {
      var i = o;
      i || (i = this.dataManager.cache.levelCount), this.rowHeaderWidthCache = Math.max(50, 11 + 10 * i + 25), this.hot.render();
    }
  }], [{
    key: "CSS_CLASSES",
    get: (
      /**
       * CSS classes used in the row headers.
       *
       * @type {object}
       */
      function() {
        return {
          indicatorContainer: "ht_nestingLevels",
          parent: "ht_nestingParent",
          indicator: "ht_nestingLevel",
          emptyIndicator: "ht_nestingLevel_empty",
          button: "ht_nestingButton",
          expandButton: "ht_nestingExpand",
          collapseButton: "ht_nestingCollapse"
        };
      }
    )
  }]), r;
}(NP);
const rY = Gze;
function af(e) {
  "@babel/helpers - typeof";
  return af = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, af(e);
}
function FL(e) {
  return Zze(e) || Xze(e) || qze(e) || Kze();
}
function Kze() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function qze(e, t) {
  if (e) {
    if (typeof e == "string")
      return IR(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return IR(e, t);
  }
}
function Xze(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function Zze(e) {
  if (Array.isArray(e))
    return IR(e);
}
function IR(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function Qze(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function BL(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, eYe(n.key), n);
  }
}
function Jze(e, t, r) {
  return t && BL(e.prototype, t), r && BL(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function eYe(e) {
  var t = tYe(e, "string");
  return af(t) === "symbol" ? t : String(t);
}
function tYe(e, t) {
  if (af(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (af(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function rYe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && MR(e, t);
}
function MR(e, t) {
  return MR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, MR(e, t);
}
function nYe(e) {
  var t = aYe();
  return function() {
    var n = Um(e), o;
    if (t) {
      var i = Um(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return oYe(this, o);
  };
}
function oYe(e, t) {
  if (t && (af(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return iYe(e);
}
function iYe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function aYe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Um(e) {
  return Um = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Um(e);
}
var lYe = /* @__PURE__ */ function(e) {
  rYe(r, e);
  var t = nYe(r);
  function r(n, o) {
    var i;
    return Qze(this, r), i = t.call(this, n, o), i.dataManager = i.plugin.dataManager, i.collapsedRows = [], i.collapsedRowsStash = {
      stash: function() {
        var l = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !1;
        i.lastCollapsedRows = i.collapsedRows.slice(0), i.expandMultipleChildren(i.lastCollapsedRows, l);
      },
      shiftStash: function(l, s) {
        var u = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
        s == null && (s = 1 / 0), I(i.lastCollapsedRows, function(f, c) {
          f >= l && f < s && (i.lastCollapsedRows[c] = f + u);
        });
      },
      applyStash: function() {
        var l = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : !0;
        i.collapseMultipleChildren(i.lastCollapsedRows, l), i.lastCollapsedRows = void 0;
      },
      trimStash: function(l, s) {
        _e(l, l + s - 1, function(u) {
          var f = i.lastCollapsedRows.indexOf(u);
          f > -1 && i.lastCollapsedRows.splice(f, 1);
        });
      }
    }, i;
  }
  return Jze(r, [{
    key: "collapseChildren",
    value: function(o) {
      var i = this, a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, l = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0, s = [], u = null, f = null, c = null;
      return isNaN(o) ? (u = o, f = this.dataManager.getRowIndex(u)) : (u = this.dataManager.getDataObject(o), f = o), this.dataManager.hasChildren(u) && I(u.__children, function(h) {
        s.push(i.dataManager.getRowIndex(h));
      }), c = this.collapseRows(s, !0, !1), l && this.trimRows(c), a && this.renderAndAdjust(), this.collapsedRows.indexOf(f) === -1 && this.collapsedRows.push(f), c;
    }
    /**
     * Collapse multiple children.
     *
     * @param {Array} rows Rows to collapse (including their children).
     * @param {boolean} [forceRender=true] `true` if the table should be rendered after finishing the function.
     * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
     */
  }, {
    key: "collapseMultipleChildren",
    value: function(o) {
      var i = this, a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, l = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0, s = [];
      I(o, function(u) {
        s.push.apply(s, FL(i.collapseChildren(u, !1, !1)));
      }), l && this.trimRows(s), a && this.renderAndAdjust();
    }
    /**
     * Collapse a single row.
     *
     * @param {number} rowIndex Index of the row to collapse.
     * @param {boolean} [recursive=true] `true` if it should collapse the row's children.
     */
  }, {
    key: "collapseRow",
    value: function(o) {
      var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
      this.collapseRows([o], i);
    }
    /**
     * Collapse multiple rows.
     *
     * @param {Array} rowIndexes Array of row indexes to collapse.
     * @param {boolean} [recursive=true] `true` if it should collapse the rows' children.
     * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
     * @returns {Array} Rows prepared for trimming (or trimmed, if doTrimming == true).
     */
  }, {
    key: "collapseRows",
    value: function(o) {
      var i = this, a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, l = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, s = [];
      return I(o, function(u) {
        s.push(u), a && i.collapseChildRows(u, s);
      }), l && this.trimRows(s), s;
    }
    /**
     * Collapse child rows of the row at the provided index.
     *
     * @param {number} parentIndex Index of the parent node.
     * @param {Array} [rowsToTrim=[]] Array of rows to trim. Defaults to an empty array.
     * @param {boolean} [recursive] `true` if the collapsing process should be recursive.
     * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
     */
  }, {
    key: "collapseChildRows",
    value: function(o) {
      var i = this, a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], l = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
      if (this.dataManager.hasChildren(o)) {
        var s = this.dataManager.getDataObject(o);
        I(s.__children, function(u) {
          var f = i.dataManager.getRowIndex(u);
          a.push(f), i.collapseChildRows(f, a);
        });
      }
      l && this.trimRows(a);
    }
    /**
     * Expand a single row.
     *
     * @param {number} rowIndex Index of the row to expand.
     * @param {boolean} [recursive=true] `true` if it should expand the row's children recursively.
     */
  }, {
    key: "expandRow",
    value: function(o) {
      var i = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0;
      this.expandRows([o], i);
    }
    /**
     * Expand multiple rows.
     *
     * @param {Array} rowIndexes Array of indexes of the rows to expand.
     * @param {boolean} [recursive=true] `true` if it should expand the rows' children recursively.
     * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.
     * @returns {Array} Array of row indexes to be untrimmed.
     */
  }, {
    key: "expandRows",
    value: function(o) {
      var i = this, a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, l = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1, s = [];
      return I(o, function(u) {
        s.push(u), a && i.expandChildRows(u, s);
      }), l && this.untrimRows(s), s;
    }
    /**
     * Expand child rows of the provided index.
     *
     * @param {number} parentIndex Index of the parent row.
     * @param {Array} [rowsToUntrim=[]] Array of the rows to be untrimmed.
     * @param {boolean} [recursive] `true` if it should expand the rows' children recursively.
     * @param {boolean} [doTrimming=false] I determine whether collapsing should envolve trimming rows.
     */
  }, {
    key: "expandChildRows",
    value: function(o) {
      var i = this, a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], l = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;
      if (this.dataManager.hasChildren(o)) {
        var s = this.dataManager.getDataObject(o);
        I(s.__children, function(u) {
          if (!i.isAnyParentCollapsed(u)) {
            var f = i.dataManager.getRowIndex(u);
            a.push(f), i.expandChildRows(f, a);
          }
        });
      }
      l && this.untrimRows(a);
    }
    /**
     * Expand the children of the row passed as an argument.
     *
     * @param {number|object} row Parent row.
     * @param {boolean} [forceRender=true] Whether to render the table after the function ends.
     * @param {boolean} [doTrimming=true] If set to `true`, the trimming will be applied when the function finishes.
     * @returns {number[]}
     */
  }, {
    key: "expandChildren",
    value: function(o) {
      var i = this, a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, l = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0, s = [], u = null, f = null, c = null;
      return isNaN(o) ? (u = o, f = this.dataManager.getRowIndex(o)) : (u = this.dataManager.getDataObject(o), f = o), this.collapsedRows.splice(this.collapsedRows.indexOf(f), 1), this.dataManager.hasChildren(u) && I(u.__children, function(h) {
        var d = i.dataManager.getRowIndex(h);
        s.push(d);
      }), c = this.expandRows(s, !0, !1), l && this.untrimRows(c), a && this.renderAndAdjust(), c;
    }
    /**
     * Expand multiple rows' children.
     *
     * @param {Array} rows Array of rows which children are about to be expanded.
     * @param {boolean} [forceRender=true] `true` if the table should render after finishing the function.
     * @param {boolean} [doTrimming=true] `true` if the rows should be untrimmed after finishing the function.
     */
  }, {
    key: "expandMultipleChildren",
    value: function(o) {
      var i = this, a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !0, l = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0, s = [];
      I(o, function(u) {
        s.push.apply(s, FL(i.expandChildren(u, !1, !1)));
      }), l && this.untrimRows(s), a && this.renderAndAdjust();
    }
    /**
     * Collapse all collapsable rows.
     */
  }, {
    key: "collapseAll",
    value: function() {
      var o = this, i = this.dataManager.getData(), a = [];
      I(i, function(l) {
        o.dataManager.hasChildren(l) && a.push(l);
      }), this.collapseMultipleChildren(a), this.renderAndAdjust();
    }
    /**
     * Expand all collapsable rows.
     */
  }, {
    key: "expandAll",
    value: function() {
      var o = this, i = this.dataManager.getData(), a = [];
      I(i, function(l) {
        o.dataManager.hasChildren(l) && a.push(l);
      }), this.expandMultipleChildren(a), this.renderAndAdjust();
    }
    /**
     * Trim rows.
     *
     * @param {Array} rows Physical row indexes.
     */
  }, {
    key: "trimRows",
    value: function(o) {
      var i = this;
      this.hot.batchExecution(function() {
        I(o, function(a) {
          i.plugin.collapsedRowsMap.setValueAtIndex(a, !0);
        });
      }, !0);
    }
    /**
     * Untrim rows.
     *
     * @param {Array} rows Physical row indexes.
     */
  }, {
    key: "untrimRows",
    value: function(o) {
      var i = this;
      this.hot.batchExecution(function() {
        I(o, function(a) {
          i.plugin.collapsedRowsMap.setValueAtIndex(a, !1);
        });
      }, !0);
    }
    /**
     * Check if all child rows are collapsed.
     *
     * @private
     * @param {number|object|null} row The parent row. `null` for the top level.
     * @returns {boolean}
     */
  }, {
    key: "areChildrenCollapsed",
    value: function(o) {
      var i = this, a = isNaN(o) ? o : this.dataManager.getDataObject(o), l = !0;
      return a === null && (a = {
        __children: this.dataManager.data
      }), this.dataManager.hasChildren(a) && I(a.__children, function(s) {
        var u = i.dataManager.getRowIndex(s);
        if (!i.plugin.collapsedRowsMap.getValueAtIndex(u))
          return l = !1, !1;
      }), l;
    }
    /**
     * Check if any of the row object parents are collapsed.
     *
     * @private
     * @param {object} rowObj Row object.
     * @returns {boolean}
     */
  }, {
    key: "isAnyParentCollapsed",
    value: function(o) {
      for (var i = o; i !== null; ) {
        i = this.dataManager.getRowParent(i);
        var a = this.dataManager.getRowIndex(i);
        if (this.collapsedRows.indexOf(a) > -1)
          return !0;
      }
      return !1;
    }
    /**
     * Toggle collapsed state. Callback for the `beforeOnCellMousedown` hook.
     *
     * @private
     * @param {MouseEvent} event `mousedown` event.
     * @param {object} coords Coordinates of the clicked cell/header.
     */
  }, {
    key: "toggleState",
    value: function(o, i) {
      if (!(i.col >= 0)) {
        var a = this.translateTrimmedRow(i.row);
        Me(o.target, rY.CSS_CLASSES.button) && (this.areChildrenCollapsed(a) ? this.expandChildren(a) : this.collapseChildren(a), Fn(o));
      }
    }
    /**
     * Translate visual row after trimming to physical base row index.
     *
     * @private
     * @param {number} row Row index.
     * @returns {number} Base row index.
     */
  }, {
    key: "translateTrimmedRow",
    value: function(o) {
      return this.hot.toPhysicalRow(o);
    }
    /**
     * Translate physical row after trimming to visual base row index.
     *
     * @private
     * @param {number} row Row index.
     * @returns {number} Base row index.
     */
  }, {
    key: "untranslateTrimmedRow",
    value: function(o) {
      return this.hot.toVisualRow(o);
    }
    /**
     * Helper function to render the table and call the `adjustElementsSize` method.
     *
     * @private
     */
  }, {
    key: "renderAndAdjust",
    value: function() {
      this.hot.render(), this.hot.view.adjustElementsSize();
    }
  }]), r;
}(NP);
const sYe = lYe;
function lf(e) {
  "@babel/helpers - typeof";
  return lf = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, lf(e);
}
function uYe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function VL(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, cYe(n.key), n);
  }
}
function fYe(e, t, r) {
  return t && VL(e.prototype, t), r && VL(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function cYe(e) {
  var t = hYe(e, "string");
  return lf(t) === "symbol" ? t : String(t);
}
function hYe(e, t) {
  if (lf(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (lf(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function dYe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && xR(e, t);
}
function xR(e, t) {
  return xR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, xR(e, t);
}
function vYe(e) {
  var t = pYe();
  return function() {
    var n = zm(e), o;
    if (t) {
      var i = zm(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return yYe(this, o);
  };
}
function yYe(e, t) {
  if (t && (lf(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return nY(e);
}
function nY(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function pYe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function zm(e) {
  return zm = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, zm(e);
}
var WL = /* @__PURE__ */ new WeakMap(), mYe = /* @__PURE__ */ function(e) {
  dYe(r, e);
  var t = vYe(r);
  function r(n, o) {
    var i;
    return uYe(this, r), i = t.call(this, n, o), WL.set(nY(i), {
      row_above: function(l, s) {
        var u = s[s.length - 1];
        i.dataManager.addSibling(u.start.row, "above");
      },
      row_below: function(l, s) {
        var u = s[s.length - 1];
        i.dataManager.addSibling(u.start.row, "below");
      }
    }), i.dataManager = i.plugin.dataManager, i;
  }
  return fYe(r, [{
    key: "appendOptions",
    value: function(o) {
      var i = this, a = [{
        key: "add_child",
        name: function() {
          return this.getTranslatedPhrase(C0);
        },
        callback: function() {
          var s = i.dataManager.translateTrimmedRow(i.hot.getSelectedLast()[0]), u = i.dataManager.getDataObject(s);
          i.dataManager.addChild(u);
        },
        disabled: function() {
          var s = i.hot.getSelectedLast();
          return !s || s[0] < 0 || i.hot.selection.isSelectedByColumnHeader() || i.hot.countRows() >= i.hot.getSettings().maxRows;
        }
      }, {
        key: "detach_from_parent",
        name: function() {
          return this.getTranslatedPhrase(_0);
        },
        callback: function() {
          i.dataManager.detachFromParent(i.hot.getSelectedLast());
        },
        disabled: function() {
          var s = i.hot.getSelectedLast(), u = i.dataManager.translateTrimmedRow(s[0]), f = i.dataManager.getRowParent(u);
          return !f || !s || s[0] < 0 || i.hot.selection.isSelectedByColumnHeader() || i.hot.countRows() >= i.hot.getSettings().maxRows;
        }
      }, {
        name: "---------"
      }];
      return _e(0, o.items.length - 1, function(l) {
        if (l === 0)
          return I(a, function(s, u) {
            o.items.splice(l + u, 0, s);
          }), !1;
      }), this.modifyRowInsertingOptions(o);
    }
    /**
     * Modify how the row inserting options work.
     *
     * @private
     * @param {object} defaultOptions Default context menu items.
     * @returns {*}
     */
  }, {
    key: "modifyRowInsertingOptions",
    value: function(o) {
      var i = WL.get(this);
      return _e(0, o.items.length - 1, function(a) {
        var l = i[o.items[a].key];
        l != null && (o.items[a].callback = l);
      }), o;
    }
  }]), r;
}(NP);
const gYe = mYe;
function Nd(e) {
  "@babel/helpers - typeof";
  return Nd = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Nd(e);
}
var UL;
function zL(e) {
  return CYe(e) || SYe(e) || wYe(e) || bYe();
}
function bYe() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function wYe(e, t) {
  if (e) {
    if (typeof e == "string")
      return DR(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return DR(e, t);
  }
}
function SYe(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function CYe(e) {
  if (Array.isArray(e))
    return DR(e);
}
function DR(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function _Ye(e, t) {
  return t || (t = e.slice(0)), Object.freeze(Object.defineProperties(e, { raw: { value: Object.freeze(t) } }));
}
function OYe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function YL(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, EYe(n.key), n);
  }
}
function RYe(e, t, r) {
  return t && YL(e.prototype, t), r && YL(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function EYe(e) {
  var t = TYe(e, "string");
  return Nd(t) === "symbol" ? t : String(t);
}
function TYe(e, t) {
  if (Nd(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Nd(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var PYe = /* @__PURE__ */ function() {
  function e(t) {
    OYe(this, e), this.plugin = t, this.hot = t.hot, this.dataManager = t.dataManager, this.collapsingUI = t.collapsingUI;
  }
  return RYe(e, [{
    key: "onBeforeRowMove",
    value: function(r, n, o, i) {
      var a = this, l = this.displayAPICompatibilityWarning({
        rows: r,
        finalIndex: n,
        dropIndex: o,
        movePossible: i
      });
      if (l)
        return !1;
      this.movedToCollapsed = !1;
      var s = o === this.hot.countRows(), u = s ? this.hot.countSourceRows() : this.dataManager.translateTrimmedRow(o), f = !0, c = r.map(function(g) {
        if (!f)
          return !1;
        var w = a.dataManager.translateTrimmedRow(g);
        return f = a.shouldAllowMoving(w, u), w;
      }), h = c.indexOf(u) === -1;
      if (!f || !h)
        return !1;
      var d = this.getBaseParent(c), y = this.getTargetParent(s, u), p = d === y;
      return this.movedToCollapsed = this.collapsingUI.areChildrenCollapsed(y), this.collapsingUI.collapsedRowsStash.stash(), this.shiftCollapsibleParentsLocations(c, u, p), this.moveRows(c, u, y), this.dataManager.rewriteCache(), this.moveCellsMeta(c, u), this.collapsingUI.collapsedRowsStash.applyStash(!1), this.hot.runHooks("afterRowMove", r, n, o, i, i && this.isRowOrderChanged(r, n)), this.hot.render(), this.selectCells(r, o), !1;
    }
    /**
     * Display a `dragRows`/`moveRows` method compatibility warning if needed.
     *
     * @param {object} beforeMoveRowHookArgs A set of arguments from the `beforeMoveRow` hook.
     * @returns {boolean} `true` if is a result of an improper usage of the moving API.
     */
  }, {
    key: "displayAPICompatibilityWarning",
    value: function(r) {
      var n = r.rows, o = r.finalIndex, i = r.dropIndex, a = r.movePossible, l = !1;
      return gt(i) && (ht(ut(UL || (UL = _Ye([`Since version 8.0.0 of the Handsontable the 'moveRows' method isn't used for moving rows 
      when the NestedRows plugin is enabled. Please use the 'dragRows' method instead.`], [`Since version 8.0.0 of the Handsontable the 'moveRows' method isn't used for moving rows\\x20
      when the NestedRows plugin is enabled. Please use the 'dragRows' method instead.`])))), this.hot.runHooks("afterRowMove", n, o, i, a, !1), l = !0), l;
    }
    /**
     * Check if the moving action should be allowed.
     *
     * @param {number} physicalRowIndex Physical start row index.
     * @param {number} physicalDropIndex Physical drop index.
     * @returns {boolean} `true` if it should continue with the moving action.
     */
  }, {
    key: "shouldAllowMoving",
    value: function(r, n) {
      return !(this.dataManager.isParent(r) || this.dataManager.isRowHighestLevel(r) || r === n || n === 0);
    }
    /**
     * Get the base row parent.
     *
     * @param {number} physicalStartIndexes Physical start row index.
     * @returns {object|null} The base row parent.
     */
  }, {
    key: "getBaseParent",
    value: function(r) {
      return this.dataManager.getRowParent(r[0]);
    }
    /**
     * Get the target row parent.
     *
     * @param {boolean} dropToLastRow `true` if the row is moved to the last row of the table.
     * @param {number} physicalDropIndex Physical drop row index.
     * @returns {object|null} The target row parent.
     */
  }, {
    key: "getTargetParent",
    value: function(r, n) {
      var o = this.dataManager.getRowParent(r ? n - 1 : n);
      return o == null && (o = this.dataManager.getRowParent(n - 1)), o;
    }
    /**
     * Shift the cached collapsible rows position according to the move action.
     *
     * @param {number[]} physicalStartIndexes Physical start row indexes.
     * @param {number} physicalDropIndex Physical drop index.
     * @param {boolean} sameParent `true` if the row's being moved between siblings of the same parent.
     */
  }, {
    key: "shiftCollapsibleParentsLocations",
    value: function(r, n, o) {
      o || (Math.max.apply(Math, zL(r)) <= n ? this.collapsingUI.collapsedRowsStash.shiftStash(r[0], n, -1 * r.length) : this.collapsingUI.collapsedRowsStash.shiftStash(n, r[0], r.length));
    }
    /**
     * Move the rows at the provided coordinates.
     *
     * @param {number[]} physicalStartIndexes Physical indexes of the rows about to be moved.
     * @param {number} physicalDropIndex Physical drop index.
     * @param {object} targetParent Parent of the destination row.
     */
  }, {
    key: "moveRows",
    value: function(r, n, o) {
      var i = this, a = n === this.dataManager.getRowIndex(o) + this.dataManager.countChildren(o) + 1;
      this.hot.batchRender(function() {
        r.forEach(function(l) {
          i.dataManager.moveRow(l, n, i.movedToCollapsed, a);
        });
      });
    }
    /**
     * Move the cell meta for multiple rows.
     *
     * @param {number[]} baseIndexes Array of indexes for the rows being moved.
     * @param {number} targetIndex Index of the destination of the move.
     */
  }, {
    key: "moveCellsMeta",
    value: function(r, n) {
      var o = this, i, a = [], l = Math.max.apply(Math, zL(r)) < n;
      r.forEach(function(s) {
        a.push(o.hot.getCellMetaAtRow(s));
      }), this.hot.spliceCellsMeta(r[0], r.length), (i = this.hot).spliceCellsMeta.apply(i, [n - (l ? a.length : 0), 0].concat(a));
    }
    /**
     * Select cells after the move.
     *
     * @param {Array} rows Array of visual row indexes to be moved.
     * @param {undefined|number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we
     *   are going to drop the moved elements. To check visualization of drop index please take a look at
     *   [documentation](@/guides/rows/row-moving.md).
     */
  }, {
    key: "selectCells",
    value: function(r, n) {
      var o = r.length, i = 0, a = 0, l = null, s = null;
      if (this.movedToCollapsed) {
        var u = null;
        r[o - 1] < n ? u = this.dataManager.translateTrimmedRow(n - o) : u = this.dataManager.translateTrimmedRow(n);
        var f = this.dataManager.getRowParent(u === null ? this.hot.countSourceRows() - 1 : u - 1), c = this.dataManager.getRowIndex(f);
        i = this.dataManager.untranslateTrimmedRow(c), a = i;
      } else
        r[o - 1] < n ? (a = n - 1, i = a - o + 1) : (i = n, a = i + o - 1);
      l = this.hot.selection, s = this.hot.countCols() - 1, l.setRangeStart(this.hot._createCellCoords(i, 0)), l.setRangeEnd(this.hot._createCellCoords(a, s), !0);
    }
    // TODO: Reimplementation of function which is inside the `ManualRowMove` plugin.
    /**
     * Indicates if order of rows was changed.
     *
     * @param {Array} movedRows Array of visual row indexes to be moved.
     * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements
     *   will be placed after the moving action. To check the visualization of the final index, please take a look at
     *   [documentation](@/guides/rows/row-moving.md).
     * @returns {boolean}
     */
  }, {
    key: "isRowOrderChanged",
    value: function(r, n) {
      return r.some(function(o, i) {
        return o - i !== n;
      });
    }
  }]), e;
}();
function sf(e) {
  "@babel/helpers - typeof";
  return sf = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, sf(e);
}
function kYe(e) {
  return MYe(e) || IYe(e) || AYe(e) || $Ye();
}
function $Ye() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function AYe(e, t) {
  if (e) {
    if (typeof e == "string")
      return NR(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return NR(e, t);
  }
}
function IYe(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function MYe(e) {
  if (Array.isArray(e))
    return NR(e);
}
function NR(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function xYe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function GL(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, NYe(n.key), n);
  }
}
function DYe(e, t, r) {
  return t && GL(e.prototype, t), r && GL(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function NYe(e) {
  var t = HYe(e, "string");
  return sf(t) === "symbol" ? t : String(t);
}
function HYe(e, t) {
  if (sf(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (sf(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Oa() {
  return typeof Reflect < "u" && Reflect.get ? Oa = Reflect.get.bind() : Oa = function(t, r, n) {
    var o = LYe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, Oa.apply(this, arguments);
}
function LYe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Ao(e), e !== null); )
    ;
  return e;
}
function jYe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && HR(e, t);
}
function HR(e, t) {
  return HR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, HR(e, t);
}
function FYe(e) {
  var t = VYe();
  return function() {
    var n = Ao(e), o;
    if (t) {
      var i = Ao(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return BYe(this, o);
  };
}
function BYe(e, t) {
  if (t && (sf(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return oY(e);
}
function oY(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function VYe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Ao(e) {
  return Ao = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Ao(e);
}
var zS = "nestedRows", WYe = 300, to = /* @__PURE__ */ new WeakMap(), UYe = "The Nested Rows plugin requires an Array of Objects as a dataset to be provided. The plugin has been disabled.", zYe = /* @__PURE__ */ function(e) {
  jYe(r, e);
  var t = FYe(r);
  function r(n) {
    var o;
    return xYe(this, r), o = t.call(this, n), o.dataManager = null, o.headersUI = null, o.collapsedRowsMap = null, to.set(oY(o), {
      movedToCollapsed: !1,
      skipRender: null,
      skipCoreAPIModifiers: !1
    }), o;
  }
  return DYe(r, [{
    key: "isEnabled",
    value: function() {
      return !!this.hot.getSettings()[zS];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      this.enabled || (this.collapsedRowsMap = this.hot.rowIndexMapper.registerMap("nestedRows", new gv()), this.dataManager = new Ize(this, this.hot), this.collapsingUI = new sYe(this, this.hot), this.headersUI = new rY(this, this.hot), this.contextMenuUI = new gYe(this, this.hot), this.rowMoveController = new PYe(this), this.addHook("afterInit", function() {
        return o.onAfterInit.apply(o, arguments);
      }), this.addHook("beforeViewRender", function() {
        return o.onBeforeViewRender.apply(o, arguments);
      }), this.addHook("modifyRowData", function() {
        return o.onModifyRowData.apply(o, arguments);
      }), this.addHook("modifySourceLength", function() {
        return o.onModifySourceLength.apply(o, arguments);
      }), this.addHook("beforeDataSplice", function() {
        return o.onBeforeDataSplice.apply(o, arguments);
      }), this.addHook("filterData", function() {
        return o.onFilterData.apply(o, arguments);
      }), this.addHook("afterContextMenuDefaultOptions", function() {
        return o.onAfterContextMenuDefaultOptions.apply(o, arguments);
      }), this.addHook("afterGetRowHeader", function() {
        return o.onAfterGetRowHeader.apply(o, arguments);
      }), this.addHook("beforeOnCellMouseDown", function() {
        return o.onBeforeOnCellMouseDown.apply(o, arguments);
      }), this.addHook("beforeRemoveRow", function() {
        return o.onBeforeRemoveRow.apply(o, arguments);
      }), this.addHook("afterRemoveRow", function() {
        return o.onAfterRemoveRow.apply(o, arguments);
      }), this.addHook("beforeAddChild", function() {
        return o.onBeforeAddChild.apply(o, arguments);
      }), this.addHook("afterAddChild", function() {
        return o.onAfterAddChild.apply(o, arguments);
      }), this.addHook("beforeDetachChild", function() {
        return o.onBeforeDetachChild.apply(o, arguments);
      }), this.addHook("afterDetachChild", function() {
        return o.onAfterDetachChild.apply(o, arguments);
      }), this.addHook("modifyRowHeaderWidth", function() {
        return o.onModifyRowHeaderWidth.apply(o, arguments);
      }), this.addHook("afterCreateRow", function() {
        return o.onAfterCreateRow.apply(o, arguments);
      }), this.addHook("beforeRowMove", function() {
        return o.onBeforeRowMove.apply(o, arguments);
      }), this.addHook("beforeLoadData", function(i) {
        return o.onBeforeLoadData(i);
      }), this.addHook("beforeUpdateData", function(i) {
        return o.onBeforeLoadData(i);
      }), Oa(Ao(r.prototype), "enablePlugin", this).call(this));
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      this.hot.rowIndexMapper.unregisterMap("nestedRows"), Oa(Ao(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`nestedRows`](@/api/options.md#nestedrows)
     */
  }, {
    key: "updatePlugin",
    value: function() {
      this.disablePlugin();
      var o = this.dataManager.getData();
      this.enablePlugin(), this.dataManager.updateWithData(o), Oa(Ao(r.prototype), "updatePlugin", this).call(this);
    }
    /**
     * `beforeRowMove` hook callback.
     *
     * @private
     * @param {Array} rows Array of visual row indexes to be moved.
     * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements
     *   will be placed after the moving action. To check the visualization of the final index, please take a look at
     *   [documentation](@/guides/rows/row-summary.md).
     * @param {undefined|number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we
     *   are going to drop the moved elements. To check visualization of drop index please take a look at
     *   [documentation](@/guides/rows/row-summary.md).
     * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.
     * @fires Hooks#afterRowMove
     * @returns {boolean}
     */
  }, {
    key: "onBeforeRowMove",
    value: function(o, i, a, l) {
      return this.rowMoveController.onBeforeRowMove(o, i, a, l);
    }
    /**
     * Enable the modify hook skipping flag - allows retrieving the data from Handsontable without this plugin's
     * modifications.
     */
  }, {
    key: "disableCoreAPIModifiers",
    value: function() {
      var o = to.get(this);
      o.skipCoreAPIModifiers = !0;
    }
    /**
     * Disable the modify hook skipping flag.
     */
  }, {
    key: "enableCoreAPIModifiers",
    value: function() {
      var o = to.get(this);
      o.skipCoreAPIModifiers = !1;
    }
    /**
     * `beforeOnCellMousedown` hook callback.
     *
     * @private
     * @param {MouseEvent} event Mousedown event.
     * @param {object} coords Cell coords.
     * @param {HTMLElement} TD Clicked cell.
     */
  }, {
    key: "onBeforeOnCellMouseDown",
    value: function(o, i, a) {
      this.collapsingUI.toggleState(o, i, a);
    }
    /**
     * The modifyRowData hook callback.
     *
     * @private
     * @param {number} row Visual row index.
     * @returns {boolean}
     */
  }, {
    key: "onModifyRowData",
    value: function(o) {
      var i = to.get(this);
      if (!i.skipCoreAPIModifiers)
        return this.dataManager.getDataObject(o);
    }
    /**
     * Modify the source data length to match the length of the nested structure.
     *
     * @private
     * @returns {number}
     */
  }, {
    key: "onModifySourceLength",
    value: function() {
      var o = to.get(this);
      if (!o.skipCoreAPIModifiers)
        return this.dataManager.countAllRows();
    }
    /**
     * @private
     * @param {number} index The index where the data was spliced.
     * @param {number} amount An amount of items to remove.
     * @param {object} element An element to add.
     * @returns {boolean}
     */
  }, {
    key: "onBeforeDataSplice",
    value: function(o, i, a) {
      var l = to.get(this);
      return l.skipCoreAPIModifiers || this.dataManager.isRowHighestLevel(o) ? !0 : (this.dataManager.spliceData(o, i, a), !1);
    }
    /**
     * Provide custom source data filtering. It's handled by core method and replaces the native filtering.
     *
     * @private
     * @param {number} index The index where the data filtering starts.
     * @param {number} amount An amount of rows which filtering applies to.
     * @param {number} physicalRows Physical row indexes.
     * @returns {Array}
     */
  }, {
    key: "onFilterData",
    value: function(o, i, a) {
      var l = to.get(this);
      return this.collapsingUI.collapsedRowsStash.stash(), this.collapsingUI.collapsedRowsStash.trimStash(a[0], i), this.collapsingUI.collapsedRowsStash.shiftStash(a[0], null, -1 * i), this.dataManager.filterData(o, i, a), l.skipRender = !0, this.dataManager.getData().slice();
    }
    /**
     * `afterContextMenuDefaultOptions` hook callback.
     *
     * @private
     * @param {object} defaultOptions The default context menu items order.
     * @returns {boolean}
     */
  }, {
    key: "onAfterContextMenuDefaultOptions",
    value: function(o) {
      return this.contextMenuUI.appendOptions(o);
    }
    /**
     * `afterGetRowHeader` hook callback.
     *
     * @private
     * @param {number} row Row index.
     * @param {HTMLElement} TH Row header element.
     */
  }, {
    key: "onAfterGetRowHeader",
    value: function(o, i) {
      this.headersUI.appendLevelIndicators(o, i);
    }
    /**
     * `modifyRowHeaderWidth` hook callback.
     *
     * @private
     * @param {number} rowHeaderWidth The initial row header width(s).
     * @returns {number}
     */
  }, {
    key: "onModifyRowHeaderWidth",
    value: function(o) {
      return this.headersUI.rowHeaderWidthCache || o;
    }
    /**
     * `onAfterRemoveRow` hook callback.
     *
     * @private
     * @param {number} index Removed row.
     * @param {number} amount Amount of removed rows.
     * @param {Array} logicRows An array of the removed physical rows.
     * @param {string} source Source of action.
     */
  }, {
    key: "onAfterRemoveRow",
    value: function(o, i, a, l) {
      var s = this;
      if (l !== this.pluginName) {
        var u = to.get(this);
        setTimeout(function() {
          u.skipRender = null, s.headersUI.updateRowHeaderWidth(), s.collapsingUI.collapsedRowsStash.applyStash();
        }, 0);
      }
    }
    /**
     * Callback for the `beforeRemoveRow` change list of removed physical indexes by reference. Removing parent node
     * has effect in removing children nodes.
     *
     * @private
     * @param {number} index Visual index of starter row.
     * @param {number} amount Amount of rows to be removed.
     * @param {Array} physicalRows List of physical indexes.
     */
  }, {
    key: "onBeforeRemoveRow",
    value: function(o, i, a) {
      var l = this, s = Array.from(a.reduce(function(u, f) {
        if (l.dataManager.isParent(f)) {
          var c = l.dataManager.getDataObject(f).__children;
          return u.add(f), Array.isArray(c) && c.forEach(function(h) {
            return u.add(l.dataManager.getRowIndex(h));
          }), u;
        }
        return u.add(f);
      }, /* @__PURE__ */ new Set()));
      a.length = 0, a.push.apply(a, s);
    }
    /**
     * `beforeAddChild` hook callback.
     *
     * @private
     */
  }, {
    key: "onBeforeAddChild",
    value: function() {
      this.collapsingUI.collapsedRowsStash.stash();
    }
    /**
     * `afterAddChild` hook callback.
     *
     * @private
     * @param {object} parent Parent element.
     * @param {object} element New child element.
     */
  }, {
    key: "onAfterAddChild",
    value: function(o, i) {
      this.collapsingUI.collapsedRowsStash.shiftStash(this.dataManager.getRowIndex(i)), this.collapsingUI.collapsedRowsStash.applyStash(), this.headersUI.updateRowHeaderWidth();
    }
    /**
     * `beforeDetachChild` hook callback.
     *
     * @private
     */
  }, {
    key: "onBeforeDetachChild",
    value: function() {
      this.collapsingUI.collapsedRowsStash.stash();
    }
    /**
     * `afterDetachChild` hook callback.
     *
     * @private
     * @param {object} parent Parent element.
     * @param {object} element New child element.
     * @param {number} finalElementRowIndex The final row index of the detached element.
     */
  }, {
    key: "onAfterDetachChild",
    value: function(o, i, a) {
      this.collapsingUI.collapsedRowsStash.shiftStash(a, null, -1), this.collapsingUI.collapsedRowsStash.applyStash(), this.headersUI.updateRowHeaderWidth();
    }
    /**
     * `afterCreateRow` hook callback.
     *
     * @private
     */
  }, {
    key: "onAfterCreateRow",
    value: function() {
      this.dataManager.rewriteCache();
    }
    /**
     * `afterInit` hook callback.
     *
     * @private
     */
  }, {
    key: "onAfterInit",
    value: function() {
      var o = Math.max.apply(Math, kYe(this.dataManager.cache.levels));
      o > 0 && this.headersUI.updateRowHeaderWidth(o);
    }
    /**
     * `beforeViewRender` hook callback.
     *
     * @param {boolean} force Indicates if the render call was trigered by a change of settings or data.
     * @param {object} skipRender An object, holder for skipRender functionality.
     * @private
     */
  }, {
    key: "onBeforeViewRender",
    value: function(o, i) {
      var a = to.get(this);
      a.skipRender && (i.skipRender = !0);
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      Oa(Ao(r.prototype), "destroy", this).call(this);
    }
    /**
     * `beforeLoadData` hook callback.
     *
     * @param {Array} data The source data.
     * @private
     */
  }, {
    key: "onBeforeLoadData",
    value: function(o) {
      if (!mpe(o)) {
        yT(UYe), this.hot.getSettings()[zS] = !1, this.disablePlugin();
        return;
      }
      this.dataManager.setData(o), this.dataManager.rewriteCache();
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return zS;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return WYe;
    }
  }]), r;
}(ft);
function Hd(e) {
  "@babel/helpers - typeof";
  return Hd = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, Hd(e);
}
function YYe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function KL(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, KYe(n.key), n);
  }
}
function GYe(e, t, r) {
  return t && KL(e.prototype, t), r && KL(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function KYe(e) {
  var t = qYe(e, "string");
  return Hd(t) === "symbol" ? t : String(t);
}
function qYe(e, t) {
  if (Hd(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (Hd(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
var XYe = /* @__PURE__ */ function() {
  function e(t) {
    var r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : window;
    YYe(this, e), this.rootWindow = r, this.prefix = t, this.savedKeys = [], this.loadSavedKeys();
  }
  return GYe(e, [{
    key: "saveValue",
    value: function(r, n) {
      this.rootWindow.localStorage.setItem("".concat(this.prefix, "_").concat(r), JSON.stringify(n)), this.savedKeys.indexOf(r) === -1 && (this.savedKeys.push(r), this.saveSavedKeys());
    }
    /**
     * Load data from localStorage.
     *
     * @param {string} key Key string.
     * @param {object} defaultValue Object containing the loaded data.
     *
     * @returns {object|undefined}
     */
  }, {
    key: "loadValue",
    value: function(r, n) {
      var o = typeof r > "u" ? n : r, i = this.rootWindow.localStorage.getItem("".concat(this.prefix, "_").concat(o));
      return i === null ? void 0 : JSON.parse(i);
    }
    /**
     * Reset given data from localStorage.
     *
     * @param {string} key Key string.
     */
  }, {
    key: "reset",
    value: function(r) {
      this.rootWindow.localStorage.removeItem("".concat(this.prefix, "_").concat(r));
    }
    /**
     * Reset all data from localStorage.
     *
     */
  }, {
    key: "resetAll",
    value: function() {
      var r = this;
      I(this.savedKeys, function(n, o) {
        r.rootWindow.localStorage.removeItem("".concat(r.prefix, "_").concat(r.savedKeys[o]));
      }), this.clearSavedKeys();
    }
    /**
     * Load and save all keys from localStorage.
     *
     * @private
     */
  }, {
    key: "loadSavedKeys",
    value: function() {
      var r = this.rootWindow.localStorage.getItem("".concat(this.prefix, "__persistentStateKeys")), n = typeof r == "string" ? JSON.parse(r) : void 0;
      this.savedKeys = n || [];
    }
    /**
     * Save saved key in localStorage.
     *
     * @private
     */
  }, {
    key: "saveSavedKeys",
    value: function() {
      this.rootWindow.localStorage.setItem("".concat(this.prefix, "__persistentStateKeys"), JSON.stringify(this.savedKeys));
    }
    /**
     * Clear saved key from localStorage.
     *
     * @private
     */
  }, {
    key: "clearSavedKeys",
    value: function() {
      this.savedKeys.length = 0, this.saveSavedKeys();
    }
  }]), e;
}();
const ZYe = XYe;
function uf(e) {
  "@babel/helpers - typeof";
  return uf = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, uf(e);
}
function QYe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function qL(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, eGe(n.key), n);
  }
}
function JYe(e, t, r) {
  return t && qL(e.prototype, t), r && qL(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function eGe(e) {
  var t = tGe(e, "string");
  return uf(t) === "symbol" ? t : String(t);
}
function tGe(e, t) {
  if (uf(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (uf(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Ra() {
  return typeof Reflect < "u" && Reflect.get ? Ra = Reflect.get.bind() : Ra = function(t, r, n) {
    var o = rGe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, Ra.apply(this, arguments);
}
function rGe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Io(e), e !== null); )
    ;
  return e;
}
function nGe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && LR(e, t);
}
function LR(e, t) {
  return LR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, LR(e, t);
}
function oGe(e) {
  var t = lGe();
  return function() {
    var n = Io(e), o;
    if (t) {
      var i = Io(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return iGe(this, o);
  };
}
function iGe(e, t) {
  if (t && (uf(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return aGe(e);
}
function aGe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function lGe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Io(e) {
  return Io = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Io(e);
}
we.getSingleton().register("persistentStateSave");
we.getSingleton().register("persistentStateLoad");
we.getSingleton().register("persistentStateReset");
var XL = "persistentState", sGe = 0, uGe = /* @__PURE__ */ function(e) {
  nGe(r, e);
  var t = oGe(r);
  function r(n) {
    var o;
    return QYe(this, r), o = t.call(this, n), o.storage = void 0, o;
  }
  return JYe(r, [{
    key: "isEnabled",
    value: function() {
      return !!this.hot.getSettings()[XL];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      this.enabled || (this.storage || (this.storage = new ZYe(this.hot.rootElement.id, this.hot.rootWindow)), this.addHook("persistentStateSave", function(i, a) {
        return o.saveValue(i, a);
      }), this.addHook("persistentStateLoad", function(i, a) {
        return o.loadValue(i, a);
      }), this.addHook("persistentStateReset", function() {
        return o.resetValue();
      }), Ra(Io(r.prototype), "enablePlugin", this).call(this));
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      this.storage = void 0, Ra(Io(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`persistentState`](@/api/options.md#persistentstate)
     */
  }, {
    key: "updatePlugin",
    value: function() {
      this.disablePlugin(), this.enablePlugin(), Ra(Io(r.prototype), "updatePlugin", this).call(this);
    }
    /**
     * Loads the value from local storage.
     *
     * @param {string} key Storage key.
     * @param {object} saveTo Saved value from local storage.
     */
  }, {
    key: "loadValue",
    value: function(o, i) {
      i.value = this.storage.loadValue(o);
    }
    /**
     * Saves the data to local storage.
     *
     * @param {string} key Storage key.
     * @param {Mixed} value Value to save.
     */
  }, {
    key: "saveValue",
    value: function(o, i) {
      this.storage.saveValue(o, i);
    }
    /**
     * Resets the data or all data from local storage.
     *
     * @param {string} key [optional] Storage key.
     */
  }, {
    key: "resetValue",
    value: function(o) {
      typeof o > "u" ? this.storage.resetAll() : this.storage.reset(o);
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      Ra(Io(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return XL;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return sGe;
    }
  }]), r;
}(ft);
function ff(e) {
  "@babel/helpers - typeof";
  return ff = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, ff(e);
}
function fGe(e) {
  return vGe(e) || dGe(e) || hGe(e) || cGe();
}
function cGe() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function hGe(e, t) {
  if (e) {
    if (typeof e == "string")
      return jR(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return jR(e, t);
  }
}
function dGe(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function vGe(e) {
  if (Array.isArray(e))
    return jR(e);
}
function jR(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function yGe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function ZL(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, mGe(n.key), n);
  }
}
function pGe(e, t, r) {
  return t && ZL(e.prototype, t), r && ZL(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function mGe(e) {
  var t = gGe(e, "string");
  return ff(t) === "symbol" ? t : String(t);
}
function gGe(e, t) {
  if (ff(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (ff(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Ea() {
  return typeof Reflect < "u" && Reflect.get ? Ea = Reflect.get.bind() : Ea = function(t, r, n) {
    var o = bGe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, Ea.apply(this, arguments);
}
function bGe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Mo(e), e !== null); )
    ;
  return e;
}
function wGe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && FR(e, t);
}
function FR(e, t) {
  return FR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, FR(e, t);
}
function SGe(e) {
  var t = OGe();
  return function() {
    var n = Mo(e), o;
    if (t) {
      var i = Mo(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return CGe(this, o);
  };
}
function CGe(e, t) {
  if (t && (ff(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return _Ge(e);
}
function _Ge(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function OGe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Mo(e) {
  return Mo = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Mo(e);
}
var YS = "search", RGe = 190, EGe = "htSearchResult", TGe = function(t, r, n, o, i) {
  t.getCellMeta(r, n).isSearchResult = i;
}, PGe = function(t, r, n) {
  return gt(t) || t === null || !t.toLocaleLowerCase || t.length === 0 || gt(r) || r === null ? !1 : r.toString().toLocaleLowerCase(n.locale).indexOf(t.toLocaleLowerCase(n.locale)) !== -1;
}, kGe = /* @__PURE__ */ function(e) {
  wGe(r, e);
  var t = SGe(r);
  function r(n) {
    var o;
    return yGe(this, r), o = t.call(this, n), o.callback = TGe, o.queryMethod = PGe, o.searchResultClass = EGe, o;
  }
  return pGe(r, [{
    key: "isEnabled",
    value: function() {
      return this.hot.getSettings()[YS];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      if (!this.enabled) {
        var i = this.hot.getSettings()[YS];
        this.updatePluginSettings(i), this.addHook("beforeRenderer", function() {
          return o.onBeforeRenderer.apply(o, arguments);
        }), Ea(Mo(r.prototype), "enablePlugin", this).call(this);
      }
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      var o = this, i = function() {
        return o.onBeforeRenderer.apply(o, arguments);
      };
      this.hot.addHook("beforeRenderer", i), this.hot.addHookOnce("afterViewRender", function() {
        o.hot.removeHook("beforeRenderer", i);
      }), Ea(Mo(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`search`](@/api/options.md#search)
     */
  }, {
    key: "updatePlugin",
    value: function() {
      this.disablePlugin(), this.enablePlugin(), Ea(Mo(r.prototype), "updatePlugin", this).call(this);
    }
    /**
     * Makes the query.
     *
     * @param {string} queryStr Value to be search.
     * @param {Function} [callback] Callback function performed on cells with values which matches to the searched query.
     * @param {Function} [queryMethod] Query function responsible for determining whether a query matches the value stored in a cell.
     * @returns {object[]} Return an array of objects with `row`, `col`, `data` properties or empty array.
     */
  }, {
    key: "query",
    value: function(o) {
      var i = this, a = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.getCallback(), l = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : this.getQueryMethod(), s = this.hot.countRows(), u = this.hot.countCols(), f = [], c = this.hot;
      return _e(0, s - 1, function(h) {
        _e(0, u - 1, function(d) {
          var y = i.hot.getDataAtCell(h, d), p = i.hot.getCellMeta(h, d), g = p.search.callback || a, w = p.search.queryMethod || l, C = w(o, y, p);
          if (C) {
            var _ = {
              row: h,
              col: d,
              data: y
            };
            f.push(_);
          }
          g && g(c, h, d, y, C);
        });
      }), f;
    }
    /**
     * Gets the callback function.
     *
     * @returns {Function} Return the callback function.
     */
  }, {
    key: "getCallback",
    value: function() {
      return this.callback;
    }
    /**
     * Sets the callback function. This function will be called during querying for each cell.
     *
     * @param {Function} newCallback A callback function.
     */
  }, {
    key: "setCallback",
    value: function(o) {
      this.callback = o;
    }
    /**
     * Gets the query method function.
     *
     * @returns {Function} Return the query method.
     */
  }, {
    key: "getQueryMethod",
    value: function() {
      return this.queryMethod;
    }
    /**
     * Sets the query method function. The function is responsible for determining whether a query matches the value stored in a cell.
     *
     * @param {Function} newQueryMethod A function with specific match logic.
     */
  }, {
    key: "setQueryMethod",
    value: function(o) {
      this.queryMethod = o;
    }
    /**
     * Gets search result cells class name.
     *
     * @returns {string} Return the cell class name.
     */
  }, {
    key: "getSearchResultClass",
    value: function() {
      return this.searchResultClass;
    }
    /**
     * Sets search result cells class name. This class name will be added to each cell that belongs to the searched query.
     *
     * @param {string} newElementClass CSS class name.
     */
  }, {
    key: "setSearchResultClass",
    value: function(o) {
      this.searchResultClass = o;
    }
    /**
     * Updates the settings of the plugin.
     *
     * @param {object} searchSettings The plugin settings, taken from Handsontable configuration.
     * @private
     */
  }, {
    key: "updatePluginSettings",
    value: function(o) {
      ze(o) && (o.searchResultClass && this.setSearchResultClass(o.searchResultClass), o.queryMethod && this.setQueryMethod(o.queryMethod), o.callback && this.setCallback(o.callback));
    }
    /**
     * The `beforeRenderer` hook callback.
     *
     * @private
     * @param {HTMLTableCellElement} TD The rendered `TD` element.
     * @param {number} row Visual row index.
     * @param {number} col Visual column index.
     * @param {string|number} prop Column property name or a column index, if datasource is an array of arrays.
     * @param {string} value Value of the rendered cell.
     * @param {object} cellProperties Object containing the cell's properties.
     */
  }, {
    key: "onBeforeRenderer",
    value: function(o, i, a, l, s, u) {
      var f = u.className || [], c = [];
      if (typeof f == "string")
        c = f.split(" ");
      else {
        var h;
        (h = c).push.apply(h, fGe(f));
      }
      this.isEnabled() && u.isSearchResult ? c.includes(this.searchResultClass) || c.push("".concat(this.searchResultClass)) : c.includes(this.searchResultClass) && c.splice(c.indexOf(this.searchResultClass), 1), u.className = c.join(" ");
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      Ea(Mo(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return YS;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return RGe;
    }
  }]), r;
}(ft);
function cf(e) {
  "@babel/helpers - typeof";
  return cf = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, cf(e);
}
function $Ge(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function QL(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, IGe(n.key), n);
  }
}
function AGe(e, t, r) {
  return t && QL(e.prototype, t), r && QL(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function IGe(e) {
  var t = MGe(e, "string");
  return cf(t) === "symbol" ? t : String(t);
}
function MGe(e, t) {
  if (cf(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (cf(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function is() {
  return typeof Reflect < "u" && Reflect.get ? is = Reflect.get.bind() : is = function(t, r, n) {
    var o = xGe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, is.apply(this, arguments);
}
function xGe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = Ri(e), e !== null); )
    ;
  return e;
}
function DGe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && BR(e, t);
}
function BR(e, t) {
  return BR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, BR(e, t);
}
function NGe(e) {
  var t = jGe();
  return function() {
    var n = Ri(e), o;
    if (t) {
      var i = Ri(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return HGe(this, o);
  };
}
function HGe(e, t) {
  if (t && (cf(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return LGe(e);
}
function LGe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function jGe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Ri(e) {
  return Ri = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Ri(e);
}
var FGe = "touchScroll", BGe = 200, VGe = /* @__PURE__ */ function(e) {
  DGe(r, e);
  var t = NGe(r);
  function r(n) {
    var o;
    return $Ge(this, r), o = t.call(this, n), o.scrollbars = [], o.clones = [], o.lockedCollection = !1, o.freezeOverlays = !1, o;
  }
  return AGe(r, [{
    key: "isEnabled",
    value: function() {
      return pB();
    }
    /**
     * Enable the plugin.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      this.enabled || (this.addHook("afterViewRender", function() {
        return o.onAfterViewRender();
      }), this.registerEvents(), is(Ri(r.prototype), "enablePlugin", this).call(this));
    }
    /**
     * Updates the plugin to use the latest options you have specified.
     */
  }, {
    key: "updatePlugin",
    value: function() {
      this.lockedCollection = !1, is(Ri(r.prototype), "updatePlugin", this).call(this);
    }
    /**
     * Disable plugin for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      is(Ri(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Register all necessary events.
     *
     * @private
     */
  }, {
    key: "registerEvents",
    value: function() {
      var o = this;
      this.addHook("beforeTouchScroll", function() {
        return o.onBeforeTouchScroll();
      }), this.addHook("afterMomentumScroll", function() {
        return o.onAfterMomentumScroll();
      });
    }
    /**
     * After view render listener.
     *
     * @private
     */
  }, {
    key: "onAfterViewRender",
    value: function() {
      if (!this.lockedCollection) {
        var o = this.hot.view._wt.wtOverlays, i = o.topOverlay, a = o.bottomOverlay, l = o.inlineStartOverlay, s = o.topInlineStartCornerOverlay, u = o.bottomInlineStartCornerOverlay;
        this.lockedCollection = !0, this.scrollbars.length = 0, this.scrollbars.push(i), a.clone && this.scrollbars.push(a), this.scrollbars.push(l), s && this.scrollbars.push(s), u && u.clone && this.scrollbars.push(u), this.clones = [], i.needFullRender && this.clones.push(i.clone.wtTable.holder.parentNode), a.needFullRender && this.clones.push(a.clone.wtTable.holder.parentNode), l.needFullRender && this.clones.push(l.clone.wtTable.holder.parentNode), s && this.clones.push(s.clone.wtTable.holder.parentNode), u && u.clone && this.clones.push(u.clone.wtTable.holder.parentNode);
      }
    }
    /**
     * Touch scroll listener.
     *
     * @private
     */
  }, {
    key: "onBeforeTouchScroll",
    value: function() {
      this.freezeOverlays = !0, I(this.clones, function(o) {
        ae(o, "hide-tween");
      });
    }
    /**
     * After momentum scroll listener.
     *
     * @private
     */
  }, {
    key: "onAfterMomentumScroll",
    value: function() {
      var o = this;
      this.freezeOverlays = !1, I(this.clones, function(i) {
        Le(i, "hide-tween"), ae(i, "show-tween");
      }), this.hot._registerTimeout(function() {
        I(o.clones, function(i) {
          Le(i, "show-tween");
        });
      }, 400), I(this.scrollbars, function(i) {
        i.refresh(), i.resetFixedPosition();
      }), this.hot.view._wt.wtOverlays.syncScrollWithMaster();
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return FGe;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return BGe;
    }
  }, {
    key: "SETTING_KEYS",
    get: function() {
      return !0;
    }
  }]), r;
}(ft);
function hf(e) {
  "@babel/helpers - typeof";
  return hf = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, hf(e);
}
function WGe(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function JL(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, zGe(n.key), n);
  }
}
function UGe(e, t, r) {
  return t && JL(e.prototype, t), r && JL(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function zGe(e) {
  var t = YGe(e, "string");
  return hf(t) === "symbol" ? t : String(t);
}
function YGe(e, t) {
  if (hf(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (hf(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function Ta() {
  return typeof Reflect < "u" && Reflect.get ? Ta = Reflect.get.bind() : Ta = function(t, r, n) {
    var o = GGe(t, r);
    if (o) {
      var i = Object.getOwnPropertyDescriptor(o, r);
      return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
    }
  }, Ta.apply(this, arguments);
}
function GGe(e, t) {
  for (; !Object.prototype.hasOwnProperty.call(e, t) && (e = xo(e), e !== null); )
    ;
  return e;
}
function KGe(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && VR(e, t);
}
function VR(e, t) {
  return VR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, VR(e, t);
}
function qGe(e) {
  var t = QGe();
  return function() {
    var n = xo(e), o;
    if (t) {
      var i = xo(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return XGe(this, o);
  };
}
function XGe(e, t) {
  if (t && (hf(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return ZGe(e);
}
function ZGe(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function QGe() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function xo(e) {
  return xo = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, xo(e);
}
var Fy = "trimRows", JGe = 330, e3e = /* @__PURE__ */ function(e) {
  KGe(r, e);
  var t = qGe(r);
  function r(n) {
    var o;
    return WGe(this, r), o = t.call(this, n), o.trimmedRowsMap = null, o;
  }
  return UGe(r, [{
    key: "isEnabled",
    value: function() {
      return !!this.hot.getSettings()[Fy];
    }
    /**
     * Enables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "enablePlugin",
    value: function() {
      var o = this;
      this.enabled || (this.trimmedRowsMap = this.hot.rowIndexMapper.registerMap("trimRows", new gv()), this.trimmedRowsMap.addLocalHook("init", function() {
        return o.onMapInit();
      }), Ta(xo(r.prototype), "enablePlugin", this).call(this));
    }
    /**
     * Updates the plugin's state.
     *
     * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:
     *  - [`trimRows`](@/api/options.md#trimrows)
     */
  }, {
    key: "updatePlugin",
    value: function() {
      var o = this, i = this.hot.getSettings()[Fy];
      Array.isArray(i) && this.hot.batchExecution(function() {
        o.trimmedRowsMap.clear(), I(i, function(a) {
          o.trimmedRowsMap.setValueAtIndex(a, !0);
        });
      }, !0), Ta(xo(r.prototype), "updatePlugin", this).call(this);
    }
    /**
     * Disables the plugin functionality for this Handsontable instance.
     */
  }, {
    key: "disablePlugin",
    value: function() {
      this.hot.rowIndexMapper.unregisterMap("trimRows"), Ta(xo(r.prototype), "disablePlugin", this).call(this);
    }
    /**
     * Get list of trimmed rows.
     *
     * @returns {Array} Physical rows.
     */
  }, {
    key: "getTrimmedRows",
    value: function() {
      return this.trimmedRowsMap.getTrimmedIndexes();
    }
    /**
     * Trims the rows provided in the array.
     *
     * @param {number[]} rows Array of physical row indexes.
     * @fires Hooks#beforeTrimRow
     * @fires Hooks#afterTrimRow
     */
  }, {
    key: "trimRows",
    value: function(o) {
      var i = this, a = this.getTrimmedRows(), l = this.isValidConfig(o), s = a;
      l && (s = Array.from(new Set(a.concat(o))));
      var u = this.hot.runHooks("beforeTrimRow", a, s, l);
      u !== !1 && (l && this.hot.batchExecution(function() {
        I(o, function(f) {
          i.trimmedRowsMap.setValueAtIndex(f, !0);
        });
      }, !0), this.hot.runHooks("afterTrimRow", a, s, l, l && s.length > a.length));
    }
    /**
     * Trims the row provided as a physical row index (counting from 0).
     *
     * @param {...number} row Physical row index.
     */
  }, {
    key: "trimRow",
    value: function() {
      for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
        i[a] = arguments[a];
      this.trimRows(i);
    }
    /**
     * Untrims the rows provided in the array.
     *
     * @param {number[]} rows Array of physical row indexes.
     * @fires Hooks#beforeUntrimRow
     * @fires Hooks#afterUntrimRow
     */
  }, {
    key: "untrimRows",
    value: function(o) {
      var i = this.getTrimmedRows(), a = this.isValidConfig(o), l = i, s = this.trimmedRowsMap.getValues().slice(), u = o.length > 0;
      a && u && (I(o, function(c) {
        s[c] = !1;
      }), l = sr(s, function(c, h, d) {
        return h && c.push(d), c;
      }, []));
      var f = this.hot.runHooks("beforeUntrimRow", i, l, a && u);
      f !== !1 && (a && u && this.trimmedRowsMap.setValues(s), this.hot.runHooks("afterUntrimRow", i, l, a && u, a && l.length < i.length));
    }
    /**
     * Untrims the row provided as a physical row index (counting from 0).
     *
     * @param {...number} row Physical row index.
     */
  }, {
    key: "untrimRow",
    value: function() {
      for (var o = arguments.length, i = new Array(o), a = 0; a < o; a++)
        i[a] = arguments[a];
      this.untrimRows(i);
    }
    /**
     * Checks if given row is hidden.
     *
     * @param {number} physicalRow Physical row index.
     * @returns {boolean}
     */
  }, {
    key: "isTrimmed",
    value: function(o) {
      return this.trimmedRowsMap.getValueAtIndex(o) || !1;
    }
    /**
     * Untrims all trimmed rows.
     */
  }, {
    key: "untrimAll",
    value: function() {
      this.untrimRows(this.getTrimmedRows());
    }
    /**
     * Get if trim config is valid. Check whether all of the provided physical row indexes are within source data.
     *
     * @param {Array} trimmedRows List of physical row indexes.
     * @returns {boolean}
     */
  }, {
    key: "isValidConfig",
    value: function(o) {
      var i = this.hot.countSourceRows();
      return o.every(function(a) {
        return Number.isInteger(a) && a >= 0 && a < i;
      });
    }
    /**
     * On map initialized hook callback.
     *
     * @private
     */
  }, {
    key: "onMapInit",
    value: function() {
      var o = this, i = this.hot.getSettings()[Fy];
      Array.isArray(i) && this.hot.batchExecution(function() {
        I(i, function(a) {
          o.trimmedRowsMap.setValueAtIndex(a, !0);
        });
      }, !0);
    }
    /**
     * Destroys the plugin instance.
     */
  }, {
    key: "destroy",
    value: function() {
      Ta(xo(r.prototype), "destroy", this).call(this);
    }
  }], [{
    key: "PLUGIN_KEY",
    get: function() {
      return Fy;
    }
  }, {
    key: "PLUGIN_PRIORITY",
    get: function() {
      return JGe;
    }
  }]), r;
}(ft);
function df(e) {
  "@babel/helpers - typeof";
  return df = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, df(e);
}
function iY(e, t) {
  if (!(e instanceof t))
    throw new TypeError("Cannot call a class as a function");
}
function ej(e, t) {
  for (var r = 0; r < t.length; r++) {
    var n = t[r];
    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, t3e(n.key), n);
  }
}
function aY(e, t, r) {
  return t && ej(e.prototype, t), r && ej(e, r), Object.defineProperty(e, "prototype", { writable: !1 }), e;
}
function t3e(e) {
  var t = r3e(e, "string");
  return df(t) === "symbol" ? t : String(t);
}
function r3e(e, t) {
  if (df(e) !== "object" || e === null)
    return e;
  var r = e[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e, t || "default");
    if (df(n) !== "object")
      return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e);
}
function lY(e, t) {
  if (typeof t != "function" && t !== null)
    throw new TypeError("Super expression must either be null or a function");
  e.prototype = Object.create(t && t.prototype, { constructor: { value: e, writable: !0, configurable: !0 } }), Object.defineProperty(e, "prototype", { writable: !1 }), t && WR(e, t);
}
function WR(e, t) {
  return WR = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(n, o) {
    return n.__proto__ = o, n;
  }, WR(e, t);
}
function sY(e) {
  var t = i3e();
  return function() {
    var n = Ym(e), o;
    if (t) {
      var i = Ym(this).constructor;
      o = Reflect.construct(n, arguments, i);
    } else
      o = n.apply(this, arguments);
    return n3e(this, o);
  };
}
function n3e(e, t) {
  if (t && (df(t) === "object" || typeof t == "function"))
    return t;
  if (t !== void 0)
    throw new TypeError("Derived constructors may only return object or undefined");
  return o3e(e);
}
function o3e(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function i3e() {
  if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
    return !1;
  if (typeof Proxy == "function")
    return !0;
  try {
    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    })), !0;
  } catch {
    return !1;
  }
}
function Ym(e) {
  return Ym = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Ym(e);
}
function a3e(e) {
  return u3e(e) || s3e(e) || fY(e) || l3e();
}
function l3e() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function s3e(e) {
  if (typeof Symbol < "u" && e[Symbol.iterator] != null || e["@@iterator"] != null)
    return Array.from(e);
}
function u3e(e) {
  if (Array.isArray(e))
    return UR(e);
}
function uY(e, t) {
  return h3e(e) || c3e(e, t) || fY(e, t) || f3e();
}
function f3e() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
function fY(e, t) {
  if (e) {
    if (typeof e == "string")
      return UR(e, t);
    var r = Object.prototype.toString.call(e).slice(8, -1);
    if (r === "Object" && e.constructor && (r = e.constructor.name), r === "Map" || r === "Set")
      return Array.from(e);
    if (r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))
      return UR(e, t);
  }
}
function UR(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var r = 0, n = new Array(t); r < t; r++)
    n[r] = e[r];
  return n;
}
function c3e(e, t) {
  var r = e == null ? null : typeof Symbol < "u" && e[Symbol.iterator] || e["@@iterator"];
  if (r != null) {
    var n, o, i, a, l = [], s = !0, u = !1;
    try {
      if (i = (r = r.call(e)).next, t === 0) {
        if (Object(r) !== r)
          return;
        s = !1;
      } else
        for (; !(s = (n = i.call(r)).done) && (l.push(n.value), l.length !== t); s = !0)
          ;
    } catch (f) {
      u = !0, o = f;
    } finally {
      try {
        if (!s && r.return != null && (a = r.return(), Object(a) !== a))
          return;
      } finally {
        if (u)
          throw o;
      }
    }
    return l;
  }
}
function h3e(e) {
  if (Array.isArray(e))
    return e;
}
var cY = "undoRedo", d3e = "undoRedo";
function me(e) {
  var t = this;
  this.instance = e, this.doneActions = [], this.undoneActions = [], this.ignoreNewActions = !1, this.enabled = !1, e.addHook("afterChange", function(r, n) {
    var o = this, i = r && r.length;
    if (i) {
      var a = r.find(function(s) {
        var u = uY(s, 4), f = u[2], c = u[3];
        return f !== c;
      });
      if (a) {
        var l = function() {
          var u = r.reduce(function(c, h) {
            return c.push(a3e(h)), c;
          }, []);
          I(u, function(c) {
            c[1] = e.propToCol(c[1]);
          });
          var f = i > 1 ? o.getSelected() : [[u[0][0], u[0][1]]];
          return new me.ChangeAction(u, f);
        };
        t.done(l, n);
      }
    }
  }), e.addHook("afterCreateRow", function(r, n, o) {
    t.done(function() {
      return new me.CreateRowAction(r, n);
    }, o);
  }), e.addHook("beforeRemoveRow", function(r, n, o, i) {
    var a = function() {
      var s = e.toPhysicalRow(r), u = mr(t.instance.getSourceData(s, 0, s + n - 1, t.instance.countSourceCols() - 1));
      return new me.RemoveRowAction(s, u, e.getSettings().fixedRowsBottom, e.getSettings().fixedRowsTop, e.rowIndexMapper.getIndexesSequence());
    };
    t.done(a, i);
  }), e.addHook("afterCreateCol", function(r, n, o) {
    t.done(function() {
      return new me.CreateColumnAction(r, n);
    }, o);
  }), e.addHook("beforeRemoveCol", function(r, n, o, i) {
    var a = function() {
      var s = t.instance.getSourceDataArray(), u = (t.instance.countCols() + r) % t.instance.countCols(), f = [], c = [], h = [];
      _e(s.length - 1, function(p) {
        var g = [], w = s[p];
        _e(u, u + (n - 1), function(C) {
          g.push(w[e.toPhysicalColumn(C)]);
        }), f.push(g);
      }), _e(n - 1, function(p) {
        h.push(e.toPhysicalColumn(u + p));
      }), Array.isArray(e.getSettings().colHeaders) && _e(n - 1, function(p) {
        c.push(e.getSettings().colHeaders[e.toPhysicalColumn(u + p)] || null);
      });
      var d = e.columnIndexMapper.getIndexesSequence(), y = e.rowIndexMapper.getIndexesSequence();
      return new me.RemoveColumnAction(u, h, f, c, d, y, e.getSettings().fixedColumnsStart);
    };
    t.done(a, i);
  }), e.addHook("beforeCellAlignment", function(r, n, o, i) {
    t.done(function() {
      return new me.CellAlignmentAction(r, n, o, i);
    });
  }), e.addHook("beforeFilter", function(r) {
    t.done(function() {
      return new me.FiltersAction(r);
    });
  }), e.addHook("beforeRowMove", function(r, n) {
    r !== !1 && t.done(function() {
      return new me.RowMoveAction(r, n);
    });
  }), e.addHook("beforeMergeCells", function(r, n) {
    n || t.done(function() {
      return new me.MergeCellsAction(e, r);
    });
  }), e.addHook("afterUnmergeCells", function(r, n) {
    n || t.done(function() {
      return new me.UnmergeCellsAction(e, r);
    });
  }), e.addHook("afterInit", function() {
    t.init();
  });
}
me.prototype.done = function(e, t) {
  if (!this.ignoreNewActions) {
    var r = t === "UndoRedo.undo" || t === "UndoRedo.redo" || t === "auto";
    if (!r) {
      var n = this.doneActions.slice(), o = this.instance.runHooks("beforeUndoStackChange", n, t);
      if (o !== !1) {
        var i = e(), a = this.undoneActions.slice();
        this.doneActions.push(i), this.instance.runHooks("afterUndoStackChange", n, this.doneActions.slice()), this.instance.runHooks("beforeRedoStackChange", a), this.undoneActions.length = 0, this.instance.runHooks("afterRedoStackChange", a, this.undoneActions.slice());
      }
    }
  }
};
me.prototype.undo = function() {
  if (this.isUndoAvailable()) {
    var e = this.doneActions.slice();
    this.instance.runHooks("beforeUndoStackChange", e);
    var t = this.doneActions.pop();
    this.instance.runHooks("afterUndoStackChange", e, this.doneActions.slice());
    var r = mr(t), n = this.instance.runHooks("beforeUndo", r);
    if (n === !1)
      return;
    this.ignoreNewActions = !0;
    var o = this, i = this.undoneActions.slice();
    this.instance.runHooks("beforeRedoStackChange", i), t.undo(this.instance, function() {
      o.ignoreNewActions = !1, o.undoneActions.push(t);
    }), this.instance.runHooks("afterRedoStackChange", i, this.undoneActions.slice()), this.instance.runHooks("afterUndo", r);
  }
};
me.prototype.redo = function() {
  if (this.isRedoAvailable()) {
    var e = this.undoneActions.slice();
    this.instance.runHooks("beforeRedoStackChange", e);
    var t = this.undoneActions.pop();
    this.instance.runHooks("afterRedoStackChange", e, this.undoneActions.slice());
    var r = mr(t), n = this.instance.runHooks("beforeRedo", r);
    if (n === !1)
      return;
    this.ignoreNewActions = !0;
    var o = this, i = this.doneActions.slice();
    this.instance.runHooks("beforeUndoStackChange", i), t.redo(this.instance, function() {
      o.ignoreNewActions = !1, o.doneActions.push(t);
    }), this.instance.runHooks("afterUndoStackChange", i, this.doneActions.slice()), this.instance.runHooks("afterRedo", r);
  }
};
me.prototype.isUndoAvailable = function() {
  return this.doneActions.length > 0;
};
me.prototype.isRedoAvailable = function() {
  return this.undoneActions.length > 0;
};
me.prototype.clear = function() {
  this.doneActions.length = 0, this.undoneActions.length = 0;
};
me.prototype.isEnabled = function() {
  return this.enabled;
};
me.prototype.enable = function() {
  if (!this.isEnabled()) {
    var e = this.instance;
    this.enabled = !0, p3e(e), this.registerShortcuts(), e.addHook("afterChange", hY);
  }
};
me.prototype.disable = function() {
  if (this.isEnabled()) {
    var e = this.instance;
    this.enabled = !1, m3e(e), this.unregisterShortcuts(), e.removeHook("afterChange", hY);
  }
};
me.prototype.destroy = function() {
  this.clear(), this.instance = null, this.doneActions = null, this.undoneActions = null;
};
me.Action = function() {
};
me.Action.prototype.undo = function() {
};
me.Action.prototype.redo = function() {
};
me.ChangeAction = function(e, t) {
  this.changes = e, this.selected = t, this.actionType = "change";
};
$i(me.ChangeAction, me.Action);
me.ChangeAction.prototype.undo = function(e, t) {
  for (var r = mr(this.changes), n = e.countEmptyRows(!0), o = e.countEmptyCols(!0), i = 0, a = r.length; i < a; i++)
    r[i].splice(3, 1);
  e.addHookOnce("afterChange", t), e.setDataAtCell(r, null, null, "UndoRedo.undo");
  for (var l = 0, s = r.length; l < s; l++) {
    var u = uY(r[l], 2), f = u[0], c = u[1];
    e.getSettings().minSpareRows && f + 1 + e.getSettings().minSpareRows === e.countRows() && n === e.getSettings().minSpareRows && (e.alter("remove_row", parseInt(f + 1, 10), e.getSettings().minSpareRows), e.undoRedo.doneActions.pop()), e.getSettings().minSpareCols && c + 1 + e.getSettings().minSpareCols === e.countCols() && o === e.getSettings().minSpareCols && (e.alter("remove_col", parseInt(c + 1, 10), e.getSettings().minSpareCols), e.undoRedo.doneActions.pop());
  }
  e.selectCells(this.selected, !1, !1);
};
me.ChangeAction.prototype.redo = function(e, t) {
  for (var r = mr(this.changes), n = 0, o = r.length; n < o; n++)
    r[n].splice(2, 1);
  e.addHookOnce("afterChange", t), e.setDataAtCell(r, null, null, "UndoRedo.redo"), this.selected && e.selectCells(this.selected, !1, !1);
};
me.CreateRowAction = function(e, t) {
  this.index = e, this.amount = t, this.actionType = "insert_row";
};
$i(me.CreateRowAction, me.Action);
me.CreateRowAction.prototype.undo = function(e, t) {
  var r = e.countRows(), n = e.getSettings().minSpareRows;
  this.index >= r && this.index - n < r && (this.index -= n), e.addHookOnce("afterRemoveRow", t), e.alter("remove_row", this.index, this.amount, "UndoRedo.undo");
};
me.CreateRowAction.prototype.redo = function(e, t) {
  e.addHookOnce("afterCreateRow", t), e.alter("insert_row_above", this.index, this.amount, "UndoRedo.redo");
};
me.RemoveRowAction = function(e, t, r, n, o) {
  this.index = e, this.data = t, this.actionType = "remove_row", this.fixedRowsBottom = r, this.fixedRowsTop = n, this.rowIndexesSequence = o;
};
$i(me.RemoveRowAction, me.Action);
me.RemoveRowAction.prototype.undo = function(e, t) {
  var r = this, n = e.getSettings(), o = [];
  n.fixedRowsBottom = this.fixedRowsBottom, n.fixedRowsTop = this.fixedRowsTop, this.data.forEach(function(i, a) {
    Object.keys(i).forEach(function(l) {
      var s = parseInt(l, 10);
      o.push([r.index + a, isNaN(s) ? l : s, i[l]]);
    });
  }), e.alter("insert_row_above", this.index, this.data.length, "UndoRedo.undo"), e.addHookOnce("afterViewRender", t), e.setSourceDataAtCell(o, null, null, "UndoRedo.undo"), e.rowIndexMapper.setIndexesSequence(this.rowIndexesSequence);
};
me.RemoveRowAction.prototype.redo = function(e, t) {
  e.addHookOnce("afterRemoveRow", t), e.alter("remove_row", this.index, this.data.length, "UndoRedo.redo");
};
me.CreateColumnAction = function(e, t) {
  this.index = e, this.amount = t, this.actionType = "insert_col";
};
$i(me.CreateColumnAction, me.Action);
me.CreateColumnAction.prototype.undo = function(e, t) {
  e.addHookOnce("afterRemoveCol", t), e.alter("remove_col", this.index, this.amount, "UndoRedo.undo");
};
me.CreateColumnAction.prototype.redo = function(e, t) {
  e.addHookOnce("afterCreateCol", t), e.alter("insert_col_start", this.index, this.amount, "UndoRedo.redo");
};
me.RemoveColumnAction = function(e, t, r, n, o, i, a) {
  this.index = e, this.indexes = t, this.data = r, this.amount = this.data[0].length, this.headers = n, this.columnPositions = o.slice(0), this.rowPositions = i.slice(0), this.actionType = "remove_col", this.fixedColumnsStart = a;
};
$i(me.RemoveColumnAction, me.Action);
me.RemoveColumnAction.prototype.undo = function(e, t) {
  var r = this, n = e.getSettings();
  n.fixedColumnsStart = this.fixedColumnsStart;
  for (var o = this.indexes.slice(0).sort(), i = function(h, d, y) {
    return y[r.indexes.indexOf(o[d])];
  }, a = this.data.length, l = [], s = 0; s < a; s++)
    l.push(Ue(this.data[s], i));
  var u = Ue(this.headers, i), f = [];
  e.alter("insert_col_start", this.indexes[0], this.indexes.length, "UndoRedo.undo"), I(e.getSourceDataArray(), function(c, h) {
    I(o, function(d, y) {
      c[d] = l[h][y], f.push([h, d, c[d]]);
    });
  }), e.setSourceDataAtCell(f, void 0, void 0, "UndoRedo.undo"), typeof this.headers < "u" && I(u, function(c, h) {
    e.getSettings().colHeaders[o[h]] = c;
  }), e.batchExecution(function() {
    e.rowIndexMapper.setIndexesSequence(r.rowPositions), e.columnIndexMapper.setIndexesSequence(r.columnPositions);
  }, !0), e.addHookOnce("afterViewRender", t), e.render();
};
me.RemoveColumnAction.prototype.redo = function(e, t) {
  e.addHookOnce("afterRemoveCol", t), e.alter("remove_col", this.index, this.amount, "UndoRedo.redo");
};
me.CellAlignmentAction = function(e, t, r, n) {
  this.stateBefore = e, this.range = t, this.type = r, this.alignment = n;
};
me.CellAlignmentAction.prototype.undo = function(e, t) {
  var r = this;
  I(this.range, function(n) {
    n.forAll(function(o, i) {
      o >= 0 && i >= 0 && e.setCellMeta(o, i, "className", r.stateBefore[o][i] || " htLeft");
    });
  }), e.addHookOnce("afterViewRender", t), e.render();
};
me.CellAlignmentAction.prototype.redo = function(e, t) {
  oi(this.range, this.type, this.alignment, function(r, n) {
    return e.getCellMeta(r, n);
  }, function(r, n, o, i) {
    return e.setCellMeta(r, n, o, i);
  }), e.addHookOnce("afterViewRender", t), e.render();
};
me.FiltersAction = function(e) {
  this.conditionsStack = e, this.actionType = "filter";
};
$i(me.FiltersAction, me.Action);
me.FiltersAction.prototype.undo = function(e, t) {
  var r = e.getPlugin("filters");
  e.addHookOnce("afterViewRender", t), r.conditionCollection.importAllConditions(this.conditionsStack.slice(0, this.conditionsStack.length - 1)), r.filter();
};
me.FiltersAction.prototype.redo = function(e, t) {
  var r = e.getPlugin("filters");
  e.addHookOnce("afterViewRender", t), r.conditionCollection.importAllConditions(this.conditionsStack), r.filter();
};
var v3e = /* @__PURE__ */ function(e) {
  lY(r, e);
  var t = sY(r);
  function r(n, o) {
    var i;
    iY(this, r), i = t.call(this), i.cellRange = o;
    var a = i.cellRange.getTopStartCorner(), l = i.cellRange.getBottomEndCorner();
    return i.rangeData = n.getData(a.row, a.col, l.row, l.col), i;
  }
  return aY(r, [{
    key: "undo",
    value: function(o, i) {
      var a = o.getPlugin("mergeCells");
      o.addHookOnce("afterViewRender", i), a.unmergeRange(this.cellRange, !0);
      var l = this.cellRange.getTopStartCorner();
      o.populateFromArray(l.row, l.col, this.rangeData, void 0, void 0, "MergeCells");
    }
  }, {
    key: "redo",
    value: function(o, i) {
      var a = o.getPlugin("mergeCells");
      o.addHookOnce("afterViewRender", i), a.mergeRange(this.cellRange);
    }
  }]), r;
}(me.Action);
me.MergeCellsAction = v3e;
var y3e = /* @__PURE__ */ function(e) {
  lY(r, e);
  var t = sY(r);
  function r(n, o) {
    var i;
    return iY(this, r), i = t.call(this), i.cellRange = o, i;
  }
  return aY(r, [{
    key: "undo",
    value: function(o, i) {
      var a = o.getPlugin("mergeCells");
      o.addHookOnce("afterViewRender", i), a.mergeRange(this.cellRange, !0);
    }
  }, {
    key: "redo",
    value: function(o, i) {
      var a = o.getPlugin("mergeCells");
      o.addHookOnce("afterViewRender", i), a.unmergeRange(this.cellRange, !0), o.render();
    }
  }]), r;
}(me.Action);
me.UnmergeCellsAction = y3e;
me.RowMoveAction = function(e, t) {
  this.rows = e.slice(), this.finalIndex = t, this.actionType = "row_move";
};
$i(me.RowMoveAction, me.Action);
me.RowMoveAction.prototype.undo = function(e, t) {
  var r = this, n = e.getPlugin("manualRowMove"), o = [].concat(this.rows), i = o.filter(function(f) {
    return f > r.finalIndex;
  }), a = o.filter(function(f) {
    return f <= r.finalIndex;
  }), l = i.sort(function(f, c) {
    return c - f;
  }).concat(a.sort(function(f, c) {
    return f - c;
  }));
  e.addHookOnce("afterViewRender", t);
  for (var s = 0; s < l.length; s += 1) {
    var u = e.toVisualRow(l[s]);
    n.moveRow(u, l[s]);
  }
  e.render(), e.deselectCell(), e.selectRows(this.rows[0], this.rows[0] + this.rows.length - 1);
};
me.RowMoveAction.prototype.redo = function(e, t) {
  var r = e.getPlugin("manualRowMove");
  e.addHookOnce("afterViewRender", t), r.moveRows(this.rows.slice(), this.finalIndex), e.render(), e.deselectCell(), e.selectRows(this.finalIndex, this.finalIndex + this.rows.length - 1);
};
me.prototype.init = function() {
  var e = this.instance.getSettings().undo, t = typeof e > "u" || e;
  this.instance.undoRedo || (this.instance.undoRedo = this), t ? this.instance.undoRedo.enable() : this.instance.undoRedo.disable();
};
me.prototype.registerShortcuts = function() {
  var e = this, t = this.instance.getShortcutManager(), r = t.getContext("grid"), n = function(a) {
    return !a.altKey;
  }, o = {
    runOnlyIf: n,
    group: cY
  };
  r.addShortcuts([{
    keys: [["Control/Meta", "z"]],
    callback: function() {
      e.undo();
    }
  }, {
    keys: [["Control/Meta", "y"], ["Control/Meta", "Shift", "z"]],
    callback: function() {
      e.redo();
    }
  }], o);
};
me.prototype.unregisterShortcuts = function() {
  var e = this.instance.getShortcutManager(), t = e.getContext("grid");
  t.removeShortcutsByGroup(cY);
};
function hY(e, t) {
  var r = this;
  if (t === "loadData")
    return r.undoRedo.clear();
}
function p3e(e) {
  e.undo = function() {
    return e.undoRedo.undo();
  }, e.redo = function() {
    return e.undoRedo.redo();
  }, e.isUndoAvailable = function() {
    return e.undoRedo.isUndoAvailable();
  }, e.isRedoAvailable = function() {
    return e.undoRedo.isRedoAvailable();
  }, e.clearUndo = function() {
    return e.undoRedo.clear();
  };
}
function m3e(e) {
  delete e.undo, delete e.redo, delete e.isUndoAvailable, delete e.isRedoAvailable, delete e.clearUndo;
}
var Tv = we.getSingleton();
Tv.add("afterUpdateSettings", function() {
  var e;
  (e = this.getPlugin("undoRedo")) === null || e === void 0 || e.init();
});
Tv.register("beforeUndo");
Tv.register("afterUndo");
Tv.register("beforeRedo");
Tv.register("afterRedo");
me.PLUGIN_KEY = d3e;
me.SETTING_KEYS = !0;
function g3e() {
  nt(s0e), nt(M0e), nt(Z0e), nt(UPe), nt(uke), nt(CU), nt(D$e), nt(vAe), nt(NU), nt(y1e), nt(V1e), nt(J1e), nt(KU), nt(nxe), nt(JLe), nt(Jje), nt(OFe), nt(qFe), nt(gBe), nt(aVe), nt(mVe), nt(iWe), nt(pWe), nt(v2e), nt(D2e), nt(K2e), nt(Cze), nt(zYe), nt(uGe), nt(kGe), nt(VGe), nt(e3e), nt(me);
}
function b3e() {
  SEe(), NEe(), QEe(), yTe(), g3e();
}
b3e();
const E3e = zt.memo(function(t) {
  let { name: r, id: n, SVs: o, actions: i, callAction: a } = mY(t), l = (s) => {
    a({
      action: i.recordVisibilityChange,
      args: { isVisible: s }
    });
  };
  return wY(() => () => {
    a({
      action: i.recordVisibilityChange,
      args: { isVisible: !1 }
    });
  }, []), o.hidden ? null : /* @__PURE__ */ $v.jsx(gY, { partialVisibility: !0, onChange: l, children: /* @__PURE__ */ $v.jsxs("div", { id: n, style: { margin: "12px 0" }, children: [
    /* @__PURE__ */ $v.jsx("a", { name: n }),
    /* @__PURE__ */ $v.jsx(
      U2,
      {
        licenseKey: "non-commercial-and-evaluation",
        data: o.cells.map((s) => [...s]),
        colHeaders: o.columnHeaders,
        rowHeaders: o.rowHeaders,
        width: zP(o.width),
        height: zP(o.height),
        afterChange: (s, u) => a({ action: i.onChange, args: { changes: s, source: u } }),
        formulas: {
          engine: bY
        },
        fixedRowsTop: o.fixedRowsTop,
        fixedColumnsLeft: o.fixedColumnsLeft,
        hiddenColumns: {
          columns: o.hiddenColumns.map((s) => s - 1),
          indicators: !1
        },
        hiddenRows: {
          rows: o.hiddenRows.map((s) => s - 1),
          indicators: !1
        },
        readOnly: o.disabled,
        disableVisualSelection: o.disabled,
        stretchH: "all"
      }
    )
  ] }) });
});
export {
  E3e as default
};
