[package]
name = "doenetml-core"
version = { workspace = true }
edition = { workspace = true }

[lib]
crate-type = ["cdylib", "rlib"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[dependencies]
doenetml-macros = { path = "../lib-rust-macros" }
lazy_static = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
regex = { workspace = true }
wasm-bindgen = { workspace = true, optional = true }
web-sys = { workspace = true, optional = true }
ndarray = { workspace = true }
instant = { workspace = true }
strum = { workspace = true }
strum_macros = { workspace = true }
enum_dispatch = { workspace = true }
anyhow = { workspace = true }
thiserror = { workspace = true }
tsify-next = { workspace = true }
# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { workspace = true, optional = true }
derive_more = { workspace = true }
itertools = { workspace = true }
assert-json-diff = "2.0"
serde-wasm-bindgen = { workspace = true }
typed-index-collections = { workspace = true }
disjoint_impls = { workspace = true }
rustc-hash = { workspace = true }
bitvec = { workspace = true }

[dev-dependencies]
criterion = "0.5"
pprof = { version = "0.13.0", features = [
    "flamegraph",
    "criterion",
    "protobuf-codec"
] }
tempfile = "3.10"

[[bench]]
name = "core_benchmark"
harness = false

[[bench]]
name = "micro_benchmarks"
harness = false

[features]
# The web feature makes the log! macro additionally go to web-sys:console
web = ["dep:web-sys", "dep:wasm-bindgen"]
default = ["console_error_panic_hook"]
web-debug-log = []
web-logging = ['web']
# Workaround for `cargo test` not working with `wasm-bindgen`.
# Passing `--features testing` allows wasm-dependent functions
# to be avoided during testing.
testing = []
